
out/Verventa-Slave.elf:     file format elf32-littlearm


Disassembly of section .text:

08000198 <memcpy>:
 8000198:	4684      	mov	ip, r0
 800019a:	ea41 0300 	orr.w	r3, r1, r0
 800019e:	f013 0303 	ands.w	r3, r3, #3
 80001a2:	d16d      	bne.n	8000280 <memcpy+0xe8>
 80001a4:	3a40      	subs	r2, #64	; 0x40
 80001a6:	d341      	bcc.n	800022c <memcpy+0x94>
 80001a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001ac:	f840 3b04 	str.w	r3, [r0], #4
 80001b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001b4:	f840 3b04 	str.w	r3, [r0], #4
 80001b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001bc:	f840 3b04 	str.w	r3, [r0], #4
 80001c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001c4:	f840 3b04 	str.w	r3, [r0], #4
 80001c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001cc:	f840 3b04 	str.w	r3, [r0], #4
 80001d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001d4:	f840 3b04 	str.w	r3, [r0], #4
 80001d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001dc:	f840 3b04 	str.w	r3, [r0], #4
 80001e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001e4:	f840 3b04 	str.w	r3, [r0], #4
 80001e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001ec:	f840 3b04 	str.w	r3, [r0], #4
 80001f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f4:	f840 3b04 	str.w	r3, [r0], #4
 80001f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001fc:	f840 3b04 	str.w	r3, [r0], #4
 8000200:	f851 3b04 	ldr.w	r3, [r1], #4
 8000204:	f840 3b04 	str.w	r3, [r0], #4
 8000208:	f851 3b04 	ldr.w	r3, [r1], #4
 800020c:	f840 3b04 	str.w	r3, [r0], #4
 8000210:	f851 3b04 	ldr.w	r3, [r1], #4
 8000214:	f840 3b04 	str.w	r3, [r0], #4
 8000218:	f851 3b04 	ldr.w	r3, [r1], #4
 800021c:	f840 3b04 	str.w	r3, [r0], #4
 8000220:	f851 3b04 	ldr.w	r3, [r1], #4
 8000224:	f840 3b04 	str.w	r3, [r0], #4
 8000228:	3a40      	subs	r2, #64	; 0x40
 800022a:	d2bd      	bcs.n	80001a8 <memcpy+0x10>
 800022c:	3230      	adds	r2, #48	; 0x30
 800022e:	d311      	bcc.n	8000254 <memcpy+0xbc>
 8000230:	f851 3b04 	ldr.w	r3, [r1], #4
 8000234:	f840 3b04 	str.w	r3, [r0], #4
 8000238:	f851 3b04 	ldr.w	r3, [r1], #4
 800023c:	f840 3b04 	str.w	r3, [r0], #4
 8000240:	f851 3b04 	ldr.w	r3, [r1], #4
 8000244:	f840 3b04 	str.w	r3, [r0], #4
 8000248:	f851 3b04 	ldr.w	r3, [r1], #4
 800024c:	f840 3b04 	str.w	r3, [r0], #4
 8000250:	3a10      	subs	r2, #16
 8000252:	d2ed      	bcs.n	8000230 <memcpy+0x98>
 8000254:	320c      	adds	r2, #12
 8000256:	d305      	bcc.n	8000264 <memcpy+0xcc>
 8000258:	f851 3b04 	ldr.w	r3, [r1], #4
 800025c:	f840 3b04 	str.w	r3, [r0], #4
 8000260:	3a04      	subs	r2, #4
 8000262:	d2f9      	bcs.n	8000258 <memcpy+0xc0>
 8000264:	3204      	adds	r2, #4
 8000266:	d008      	beq.n	800027a <memcpy+0xe2>
 8000268:	07d2      	lsls	r2, r2, #31
 800026a:	bf1c      	itt	ne
 800026c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000270:	f800 3b01 	strbne.w	r3, [r0], #1
 8000274:	d301      	bcc.n	800027a <memcpy+0xe2>
 8000276:	880b      	ldrh	r3, [r1, #0]
 8000278:	8003      	strh	r3, [r0, #0]
 800027a:	4660      	mov	r0, ip
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	2a08      	cmp	r2, #8
 8000282:	d313      	bcc.n	80002ac <memcpy+0x114>
 8000284:	078b      	lsls	r3, r1, #30
 8000286:	d08d      	beq.n	80001a4 <memcpy+0xc>
 8000288:	f010 0303 	ands.w	r3, r0, #3
 800028c:	d08a      	beq.n	80001a4 <memcpy+0xc>
 800028e:	f1c3 0304 	rsb	r3, r3, #4
 8000292:	1ad2      	subs	r2, r2, r3
 8000294:	07db      	lsls	r3, r3, #31
 8000296:	bf1c      	itt	ne
 8000298:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800029c:	f800 3b01 	strbne.w	r3, [r0], #1
 80002a0:	d380      	bcc.n	80001a4 <memcpy+0xc>
 80002a2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002a6:	f820 3b02 	strh.w	r3, [r0], #2
 80002aa:	e77b      	b.n	80001a4 <memcpy+0xc>
 80002ac:	3a04      	subs	r2, #4
 80002ae:	d3d9      	bcc.n	8000264 <memcpy+0xcc>
 80002b0:	3a01      	subs	r2, #1
 80002b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b6:	f800 3b01 	strb.w	r3, [r0], #1
 80002ba:	d2f9      	bcs.n	80002b0 <memcpy+0x118>
 80002bc:	780b      	ldrb	r3, [r1, #0]
 80002be:	7003      	strb	r3, [r0, #0]
 80002c0:	784b      	ldrb	r3, [r1, #1]
 80002c2:	7043      	strb	r3, [r0, #1]
 80002c4:	788b      	ldrb	r3, [r1, #2]
 80002c6:	7083      	strb	r3, [r0, #2]
 80002c8:	4660      	mov	r0, ip
 80002ca:	4770      	bx	lr

080002cc <__aeabi_drsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d0:	e002      	b.n	80002d8 <__adddf3>
 80002d2:	bf00      	nop

080002d4 <__aeabi_dsub>:
 80002d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d8 <__adddf3>:
 80002d8:	b530      	push	{r4, r5, lr}
 80002da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e2:	ea94 0f05 	teq	r4, r5
 80002e6:	bf08      	it	eq
 80002e8:	ea90 0f02 	teqeq	r0, r2
 80002ec:	bf1f      	itttt	ne
 80002ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fe:	f000 80e2 	beq.w	80004c6 <__adddf3+0x1ee>
 8000302:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000306:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030a:	bfb8      	it	lt
 800030c:	426d      	neglt	r5, r5
 800030e:	dd0c      	ble.n	800032a <__adddf3+0x52>
 8000310:	442c      	add	r4, r5
 8000312:	ea80 0202 	eor.w	r2, r0, r2
 8000316:	ea81 0303 	eor.w	r3, r1, r3
 800031a:	ea82 0000 	eor.w	r0, r2, r0
 800031e:	ea83 0101 	eor.w	r1, r3, r1
 8000322:	ea80 0202 	eor.w	r2, r0, r2
 8000326:	ea81 0303 	eor.w	r3, r1, r3
 800032a:	2d36      	cmp	r5, #54	; 0x36
 800032c:	bf88      	it	hi
 800032e:	bd30      	pophi	{r4, r5, pc}
 8000330:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000334:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000338:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800033c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x70>
 8000342:	4240      	negs	r0, r0
 8000344:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000348:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800034c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000350:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x84>
 8000356:	4252      	negs	r2, r2
 8000358:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035c:	ea94 0f05 	teq	r4, r5
 8000360:	f000 80a7 	beq.w	80004b2 <__adddf3+0x1da>
 8000364:	f1a4 0401 	sub.w	r4, r4, #1
 8000368:	f1d5 0e20 	rsbs	lr, r5, #32
 800036c:	db0d      	blt.n	800038a <__adddf3+0xb2>
 800036e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000372:	fa22 f205 	lsr.w	r2, r2, r5
 8000376:	1880      	adds	r0, r0, r2
 8000378:	f141 0100 	adc.w	r1, r1, #0
 800037c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000380:	1880      	adds	r0, r0, r2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	4159      	adcs	r1, r3
 8000388:	e00e      	b.n	80003a8 <__adddf3+0xd0>
 800038a:	f1a5 0520 	sub.w	r5, r5, #32
 800038e:	f10e 0e20 	add.w	lr, lr, #32
 8000392:	2a01      	cmp	r2, #1
 8000394:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000398:	bf28      	it	cs
 800039a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	18c0      	adds	r0, r0, r3
 80003a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	d507      	bpl.n	80003be <__adddf3+0xe6>
 80003ae:	f04f 0e00 	mov.w	lr, #0
 80003b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80003be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c2:	d31b      	bcc.n	80003fc <__adddf3+0x124>
 80003c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c8:	d30c      	bcc.n	80003e4 <__adddf3+0x10c>
 80003ca:	0849      	lsrs	r1, r1, #1
 80003cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d4:	f104 0401 	add.w	r4, r4, #1
 80003d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e0:	f080 809a 	bcs.w	8000518 <__adddf3+0x240>
 80003e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e8:	bf08      	it	eq
 80003ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ee:	f150 0000 	adcs.w	r0, r0, #0
 80003f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f6:	ea41 0105 	orr.w	r1, r1, r5
 80003fa:	bd30      	pop	{r4, r5, pc}
 80003fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000400:	4140      	adcs	r0, r0
 8000402:	eb41 0101 	adc.w	r1, r1, r1
 8000406:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040a:	f1a4 0401 	sub.w	r4, r4, #1
 800040e:	d1e9      	bne.n	80003e4 <__adddf3+0x10c>
 8000410:	f091 0f00 	teq	r1, #0
 8000414:	bf04      	itt	eq
 8000416:	4601      	moveq	r1, r0
 8000418:	2000      	moveq	r0, #0
 800041a:	fab1 f381 	clz	r3, r1
 800041e:	bf08      	it	eq
 8000420:	3320      	addeq	r3, #32
 8000422:	f1a3 030b 	sub.w	r3, r3, #11
 8000426:	f1b3 0220 	subs.w	r2, r3, #32
 800042a:	da0c      	bge.n	8000446 <__adddf3+0x16e>
 800042c:	320c      	adds	r2, #12
 800042e:	dd08      	ble.n	8000442 <__adddf3+0x16a>
 8000430:	f102 0c14 	add.w	ip, r2, #20
 8000434:	f1c2 020c 	rsb	r2, r2, #12
 8000438:	fa01 f00c 	lsl.w	r0, r1, ip
 800043c:	fa21 f102 	lsr.w	r1, r1, r2
 8000440:	e00c      	b.n	800045c <__adddf3+0x184>
 8000442:	f102 0214 	add.w	r2, r2, #20
 8000446:	bfd8      	it	le
 8000448:	f1c2 0c20 	rsble	ip, r2, #32
 800044c:	fa01 f102 	lsl.w	r1, r1, r2
 8000450:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000454:	bfdc      	itt	le
 8000456:	ea41 010c 	orrle.w	r1, r1, ip
 800045a:	4090      	lslle	r0, r2
 800045c:	1ae4      	subs	r4, r4, r3
 800045e:	bfa2      	ittt	ge
 8000460:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000464:	4329      	orrge	r1, r5
 8000466:	bd30      	popge	{r4, r5, pc}
 8000468:	ea6f 0404 	mvn.w	r4, r4
 800046c:	3c1f      	subs	r4, #31
 800046e:	da1c      	bge.n	80004aa <__adddf3+0x1d2>
 8000470:	340c      	adds	r4, #12
 8000472:	dc0e      	bgt.n	8000492 <__adddf3+0x1ba>
 8000474:	f104 0414 	add.w	r4, r4, #20
 8000478:	f1c4 0220 	rsb	r2, r4, #32
 800047c:	fa20 f004 	lsr.w	r0, r0, r4
 8000480:	fa01 f302 	lsl.w	r3, r1, r2
 8000484:	ea40 0003 	orr.w	r0, r0, r3
 8000488:	fa21 f304 	lsr.w	r3, r1, r4
 800048c:	ea45 0103 	orr.w	r1, r5, r3
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	f1c4 040c 	rsb	r4, r4, #12
 8000496:	f1c4 0220 	rsb	r2, r4, #32
 800049a:	fa20 f002 	lsr.w	r0, r0, r2
 800049e:	fa01 f304 	lsl.w	r3, r1, r4
 80004a2:	ea40 0003 	orr.w	r0, r0, r3
 80004a6:	4629      	mov	r1, r5
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	fa21 f004 	lsr.w	r0, r1, r4
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	f094 0f00 	teq	r4, #0
 80004b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ba:	bf06      	itte	eq
 80004bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c0:	3401      	addeq	r4, #1
 80004c2:	3d01      	subne	r5, #1
 80004c4:	e74e      	b.n	8000364 <__adddf3+0x8c>
 80004c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ca:	bf18      	it	ne
 80004cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d0:	d029      	beq.n	8000526 <__adddf3+0x24e>
 80004d2:	ea94 0f05 	teq	r4, r5
 80004d6:	bf08      	it	eq
 80004d8:	ea90 0f02 	teqeq	r0, r2
 80004dc:	d005      	beq.n	80004ea <__adddf3+0x212>
 80004de:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e2:	bf04      	itt	eq
 80004e4:	4619      	moveq	r1, r3
 80004e6:	4610      	moveq	r0, r2
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea91 0f03 	teq	r1, r3
 80004ee:	bf1e      	ittt	ne
 80004f0:	2100      	movne	r1, #0
 80004f2:	2000      	movne	r0, #0
 80004f4:	bd30      	popne	{r4, r5, pc}
 80004f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fa:	d105      	bne.n	8000508 <__adddf3+0x230>
 80004fc:	0040      	lsls	r0, r0, #1
 80004fe:	4149      	adcs	r1, r1
 8000500:	bf28      	it	cs
 8000502:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000506:	bd30      	pop	{r4, r5, pc}
 8000508:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800050c:	bf3c      	itt	cc
 800050e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000512:	bd30      	popcc	{r4, r5, pc}
 8000514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000518:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800051c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000520:	f04f 0000 	mov.w	r0, #0
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052a:	bf1a      	itte	ne
 800052c:	4619      	movne	r1, r3
 800052e:	4610      	movne	r0, r2
 8000530:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000534:	bf1c      	itt	ne
 8000536:	460b      	movne	r3, r1
 8000538:	4602      	movne	r2, r0
 800053a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053e:	bf06      	itte	eq
 8000540:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000544:	ea91 0f03 	teqeq	r1, r3
 8000548:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	bf00      	nop

08000550 <__aeabi_ui2d>:
 8000550:	f090 0f00 	teq	r0, #0
 8000554:	bf04      	itt	eq
 8000556:	2100      	moveq	r1, #0
 8000558:	4770      	bxeq	lr
 800055a:	b530      	push	{r4, r5, lr}
 800055c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000560:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000564:	f04f 0500 	mov.w	r5, #0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e750      	b.n	8000410 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_i2d>:
 8000570:	f090 0f00 	teq	r0, #0
 8000574:	bf04      	itt	eq
 8000576:	2100      	moveq	r1, #0
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000580:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000584:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000588:	bf48      	it	mi
 800058a:	4240      	negmi	r0, r0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e73e      	b.n	8000410 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_f2d>:
 8000594:	0042      	lsls	r2, r0, #1
 8000596:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059a:	ea4f 0131 	mov.w	r1, r1, rrx
 800059e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a2:	bf1f      	itttt	ne
 80005a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b0:	4770      	bxne	lr
 80005b2:	f092 0f00 	teq	r2, #0
 80005b6:	bf14      	ite	ne
 80005b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005cc:	e720      	b.n	8000410 <__adddf3+0x138>
 80005ce:	bf00      	nop

080005d0 <__aeabi_ul2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f04f 0500 	mov.w	r5, #0
 80005de:	e00a      	b.n	80005f6 <__aeabi_l2d+0x16>

080005e0 <__aeabi_l2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ee:	d502      	bpl.n	80005f6 <__aeabi_l2d+0x16>
 80005f0:	4240      	negs	r0, r0
 80005f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000602:	f43f aedc 	beq.w	80003be <__adddf3+0xe6>
 8000606:	f04f 0203 	mov.w	r2, #3
 800060a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060e:	bf18      	it	ne
 8000610:	3203      	addne	r2, #3
 8000612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000616:	bf18      	it	ne
 8000618:	3203      	addne	r2, #3
 800061a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061e:	f1c2 0320 	rsb	r3, r2, #32
 8000622:	fa00 fc03 	lsl.w	ip, r0, r3
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 fe03 	lsl.w	lr, r1, r3
 800062e:	ea40 000e 	orr.w	r0, r0, lr
 8000632:	fa21 f102 	lsr.w	r1, r1, r2
 8000636:	4414      	add	r4, r2
 8000638:	e6c1      	b.n	80003be <__adddf3+0xe6>
 800063a:	bf00      	nop

0800063c <__aeabi_dmul>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000642:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000646:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064a:	bf1d      	ittte	ne
 800064c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000650:	ea94 0f0c 	teqne	r4, ip
 8000654:	ea95 0f0c 	teqne	r5, ip
 8000658:	f000 f8de 	bleq	8000818 <__aeabi_dmul+0x1dc>
 800065c:	442c      	add	r4, r5
 800065e:	ea81 0603 	eor.w	r6, r1, r3
 8000662:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000666:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066e:	bf18      	it	ne
 8000670:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067c:	d038      	beq.n	80006f0 <__aeabi_dmul+0xb4>
 800067e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000682:	f04f 0500 	mov.w	r5, #0
 8000686:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000692:	f04f 0600 	mov.w	r6, #0
 8000696:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069a:	f09c 0f00 	teq	ip, #0
 800069e:	bf18      	it	ne
 80006a0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b0:	d204      	bcs.n	80006bc <__aeabi_dmul+0x80>
 80006b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b6:	416d      	adcs	r5, r5
 80006b8:	eb46 0606 	adc.w	r6, r6, r6
 80006bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d4:	bf88      	it	hi
 80006d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006da:	d81e      	bhi.n	800071a <__aeabi_dmul+0xde>
 80006dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e0:	bf08      	it	eq
 80006e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e6:	f150 0000 	adcs.w	r0, r0, #0
 80006ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f4:	ea46 0101 	orr.w	r1, r6, r1
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000704:	bfc2      	ittt	gt
 8000706:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070e:	bd70      	popgt	{r4, r5, r6, pc}
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f04f 0e00 	mov.w	lr, #0
 8000718:	3c01      	subs	r4, #1
 800071a:	f300 80ab 	bgt.w	8000874 <__aeabi_dmul+0x238>
 800071e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000722:	bfde      	ittt	le
 8000724:	2000      	movle	r0, #0
 8000726:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072a:	bd70      	pople	{r4, r5, r6, pc}
 800072c:	f1c4 0400 	rsb	r4, r4, #0
 8000730:	3c20      	subs	r4, #32
 8000732:	da35      	bge.n	80007a0 <__aeabi_dmul+0x164>
 8000734:	340c      	adds	r4, #12
 8000736:	dc1b      	bgt.n	8000770 <__aeabi_dmul+0x134>
 8000738:	f104 0414 	add.w	r4, r4, #20
 800073c:	f1c4 0520 	rsb	r5, r4, #32
 8000740:	fa00 f305 	lsl.w	r3, r0, r5
 8000744:	fa20 f004 	lsr.w	r0, r0, r4
 8000748:	fa01 f205 	lsl.w	r2, r1, r5
 800074c:	ea40 0002 	orr.w	r0, r0, r2
 8000750:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	fa21 f604 	lsr.w	r6, r1, r4
 8000760:	eb42 0106 	adc.w	r1, r2, r6
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 040c 	rsb	r4, r4, #12
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f304 	lsl.w	r3, r0, r4
 800077c:	fa20 f005 	lsr.w	r0, r0, r5
 8000780:	fa01 f204 	lsl.w	r2, r1, r4
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	f141 0100 	adc.w	r1, r1, #0
 8000794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000798:	bf08      	it	eq
 800079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f205 	lsl.w	r2, r0, r5
 80007a8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007ac:	fa20 f304 	lsr.w	r3, r0, r4
 80007b0:	fa01 f205 	lsl.w	r2, r1, r5
 80007b4:	ea43 0302 	orr.w	r3, r3, r2
 80007b8:	fa21 f004 	lsr.w	r0, r1, r4
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	fa21 f204 	lsr.w	r2, r1, r4
 80007c4:	ea20 0002 	bic.w	r0, r0, r2
 80007c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d0:	bf08      	it	eq
 80007d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	f094 0f00 	teq	r4, #0
 80007dc:	d10f      	bne.n	80007fe <__aeabi_dmul+0x1c2>
 80007de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e2:	0040      	lsls	r0, r0, #1
 80007e4:	eb41 0101 	adc.w	r1, r1, r1
 80007e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3c01      	subeq	r4, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1a6>
 80007f2:	ea41 0106 	orr.w	r1, r1, r6
 80007f6:	f095 0f00 	teq	r5, #0
 80007fa:	bf18      	it	ne
 80007fc:	4770      	bxne	lr
 80007fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	eb43 0303 	adc.w	r3, r3, r3
 8000808:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3d01      	subeq	r5, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1c6>
 8000812:	ea43 0306 	orr.w	r3, r3, r6
 8000816:	4770      	bx	lr
 8000818:	ea94 0f0c 	teq	r4, ip
 800081c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000820:	bf18      	it	ne
 8000822:	ea95 0f0c 	teqne	r5, ip
 8000826:	d00c      	beq.n	8000842 <__aeabi_dmul+0x206>
 8000828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082c:	bf18      	it	ne
 800082e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000832:	d1d1      	bne.n	80007d8 <__aeabi_dmul+0x19c>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000846:	bf06      	itte	eq
 8000848:	4610      	moveq	r0, r2
 800084a:	4619      	moveq	r1, r3
 800084c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000850:	d019      	beq.n	8000886 <__aeabi_dmul+0x24a>
 8000852:	ea94 0f0c 	teq	r4, ip
 8000856:	d102      	bne.n	800085e <__aeabi_dmul+0x222>
 8000858:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800085c:	d113      	bne.n	8000886 <__aeabi_dmul+0x24a>
 800085e:	ea95 0f0c 	teq	r5, ip
 8000862:	d105      	bne.n	8000870 <__aeabi_dmul+0x234>
 8000864:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000868:	bf1c      	itt	ne
 800086a:	4610      	movne	r0, r2
 800086c:	4619      	movne	r1, r3
 800086e:	d10a      	bne.n	8000886 <__aeabi_dmul+0x24a>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000880:	f04f 0000 	mov.w	r0, #0
 8000884:	bd70      	pop	{r4, r5, r6, pc}
 8000886:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088e:	bd70      	pop	{r4, r5, r6, pc}

08000890 <__aeabi_ddiv>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000896:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089e:	bf1d      	ittte	ne
 80008a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a4:	ea94 0f0c 	teqne	r4, ip
 80008a8:	ea95 0f0c 	teqne	r5, ip
 80008ac:	f000 f8a7 	bleq	80009fe <__aeabi_ddiv+0x16e>
 80008b0:	eba4 0405 	sub.w	r4, r4, r5
 80008b4:	ea81 0e03 	eor.w	lr, r1, r3
 80008b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c0:	f000 8088 	beq.w	80009d4 <__aeabi_ddiv+0x144>
 80008c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e8:	429d      	cmp	r5, r3
 80008ea:	bf08      	it	eq
 80008ec:	4296      	cmpeq	r6, r2
 80008ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f6:	d202      	bcs.n	80008fe <__aeabi_ddiv+0x6e>
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	1ab6      	subs	r6, r6, r2
 8000900:	eb65 0503 	sbc.w	r5, r5, r3
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 000c 	orrcs.w	r0, r0, ip
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800096c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000970:	d018      	beq.n	80009a4 <__aeabi_ddiv+0x114>
 8000972:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000976:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000982:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000986:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098e:	d1c0      	bne.n	8000912 <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	d10b      	bne.n	80009ae <__aeabi_ddiv+0x11e>
 8000996:	ea41 0100 	orr.w	r1, r1, r0
 800099a:	f04f 0000 	mov.w	r0, #0
 800099e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a2:	e7b6      	b.n	8000912 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	bf04      	itt	eq
 80009aa:	4301      	orreq	r1, r0
 80009ac:	2000      	moveq	r0, #0
 80009ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b2:	bf88      	it	hi
 80009b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b8:	f63f aeaf 	bhi.w	800071a <__aeabi_dmul+0xde>
 80009bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c0:	bf04      	itt	eq
 80009c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ca:	f150 0000 	adcs.w	r0, r0, #0
 80009ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e0:	bfc2      	ittt	gt
 80009e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	popgt	{r4, r5, r6, pc}
 80009ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f0:	f04f 0e00 	mov.w	lr, #0
 80009f4:	3c01      	subs	r4, #1
 80009f6:	e690      	b.n	800071a <__aeabi_dmul+0xde>
 80009f8:	ea45 0e06 	orr.w	lr, r5, r6
 80009fc:	e68d      	b.n	800071a <__aeabi_dmul+0xde>
 80009fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a02:	ea94 0f0c 	teq	r4, ip
 8000a06:	bf08      	it	eq
 8000a08:	ea95 0f0c 	teqeq	r5, ip
 8000a0c:	f43f af3b 	beq.w	8000886 <__aeabi_dmul+0x24a>
 8000a10:	ea94 0f0c 	teq	r4, ip
 8000a14:	d10a      	bne.n	8000a2c <__aeabi_ddiv+0x19c>
 8000a16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1a:	f47f af34 	bne.w	8000886 <__aeabi_dmul+0x24a>
 8000a1e:	ea95 0f0c 	teq	r5, ip
 8000a22:	f47f af25 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e72c      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a2c:	ea95 0f0c 	teq	r5, ip
 8000a30:	d106      	bne.n	8000a40 <__aeabi_ddiv+0x1b0>
 8000a32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a36:	f43f aefd 	beq.w	8000834 <__aeabi_dmul+0x1f8>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e722      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a44:	bf18      	it	ne
 8000a46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4a:	f47f aec5 	bne.w	80007d8 <__aeabi_dmul+0x19c>
 8000a4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a52:	f47f af0d 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5a:	f47f aeeb 	bne.w	8000834 <__aeabi_dmul+0x1f8>
 8000a5e:	e712      	b.n	8000886 <__aeabi_dmul+0x24a>

08000a60 <__gedf2>:
 8000a60:	f04f 3cff 	mov.w	ip, #4294967295
 8000a64:	e006      	b.n	8000a74 <__cmpdf2+0x4>
 8000a66:	bf00      	nop

08000a68 <__ledf2>:
 8000a68:	f04f 0c01 	mov.w	ip, #1
 8000a6c:	e002      	b.n	8000a74 <__cmpdf2+0x4>
 8000a6e:	bf00      	nop

08000a70 <__cmpdf2>:
 8000a70:	f04f 0c01 	mov.w	ip, #1
 8000a74:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	bf18      	it	ne
 8000a86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8a:	d01b      	beq.n	8000ac4 <__cmpdf2+0x54>
 8000a8c:	b001      	add	sp, #4
 8000a8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a92:	bf0c      	ite	eq
 8000a94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a98:	ea91 0f03 	teqne	r1, r3
 8000a9c:	bf02      	ittt	eq
 8000a9e:	ea90 0f02 	teqeq	r0, r2
 8000aa2:	2000      	moveq	r0, #0
 8000aa4:	4770      	bxeq	lr
 8000aa6:	f110 0f00 	cmn.w	r0, #0
 8000aaa:	ea91 0f03 	teq	r1, r3
 8000aae:	bf58      	it	pl
 8000ab0:	4299      	cmppl	r1, r3
 8000ab2:	bf08      	it	eq
 8000ab4:	4290      	cmpeq	r0, r2
 8000ab6:	bf2c      	ite	cs
 8000ab8:	17d8      	asrcs	r0, r3, #31
 8000aba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000abe:	f040 0001 	orr.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__cmpdf2+0x64>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d107      	bne.n	8000ae4 <__cmpdf2+0x74>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d1d6      	bne.n	8000a8c <__cmpdf2+0x1c>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d0d3      	beq.n	8000a8c <__cmpdf2+0x1c>
 8000ae4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_cdrcmple>:
 8000aec:	4684      	mov	ip, r0
 8000aee:	4610      	mov	r0, r2
 8000af0:	4662      	mov	r2, ip
 8000af2:	468c      	mov	ip, r1
 8000af4:	4619      	mov	r1, r3
 8000af6:	4663      	mov	r3, ip
 8000af8:	e000      	b.n	8000afc <__aeabi_cdcmpeq>
 8000afa:	bf00      	nop

08000afc <__aeabi_cdcmpeq>:
 8000afc:	b501      	push	{r0, lr}
 8000afe:	f7ff ffb7 	bl	8000a70 <__cmpdf2>
 8000b02:	2800      	cmp	r0, #0
 8000b04:	bf48      	it	mi
 8000b06:	f110 0f00 	cmnmi.w	r0, #0
 8000b0a:	bd01      	pop	{r0, pc}

08000b0c <__aeabi_dcmpeq>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff fff4 	bl	8000afc <__aeabi_cdcmpeq>
 8000b14:	bf0c      	ite	eq
 8000b16:	2001      	moveq	r0, #1
 8000b18:	2000      	movne	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmplt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffea 	bl	8000afc <__aeabi_cdcmpeq>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmple>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffe0 	bl	8000afc <__aeabi_cdcmpeq>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpge>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffce 	bl	8000aec <__aeabi_cdrcmple>
 8000b50:	bf94      	ite	ls
 8000b52:	2001      	movls	r0, #1
 8000b54:	2000      	movhi	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpgt>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffc4 	bl	8000aec <__aeabi_cdrcmple>
 8000b64:	bf34      	ite	cc
 8000b66:	2001      	movcc	r0, #1
 8000b68:	2000      	movcs	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b94b      	cbnz	r3, 8000bd6 <__aeabi_uldivmod+0x16>
 8000bc2:	b942      	cbnz	r2, 8000bd6 <__aeabi_uldivmod+0x16>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	d002      	beq.n	8000bd2 <__aeabi_uldivmod+0x12>
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	f000 b83b 	b.w	8000c4c <__aeabi_idiv0>
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	46ec      	mov	ip, sp
 8000bda:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000bde:	f000 f81d 	bl	8000c1c <__gnu_uldivmod_helper>
 8000be2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be6:	b002      	add	sp, #8
 8000be8:	bc0c      	pop	{r2, r3}
 8000bea:	4770      	bx	lr

08000bec <__gnu_ldivmod_helper>:
 8000bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bf0:	9c06      	ldr	r4, [sp, #24]
 8000bf2:	4615      	mov	r5, r2
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	460f      	mov	r7, r1
 8000bf8:	4698      	mov	r8, r3
 8000bfa:	f000 f829 	bl	8000c50 <__divdi3>
 8000bfe:	fb05 f301 	mul.w	r3, r5, r1
 8000c02:	fb00 3808 	mla	r8, r0, r8, r3
 8000c06:	fba5 2300 	umull	r2, r3, r5, r0
 8000c0a:	1ab2      	subs	r2, r6, r2
 8000c0c:	4443      	add	r3, r8
 8000c0e:	eb67 0303 	sbc.w	r3, r7, r3
 8000c12:	e9c4 2300 	strd	r2, r3, [r4]
 8000c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c1a:	bf00      	nop

08000c1c <__gnu_uldivmod_helper>:
 8000c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c20:	9c06      	ldr	r4, [sp, #24]
 8000c22:	4690      	mov	r8, r2
 8000c24:	4606      	mov	r6, r0
 8000c26:	460f      	mov	r7, r1
 8000c28:	461d      	mov	r5, r3
 8000c2a:	f000 f95f 	bl	8000eec <__udivdi3>
 8000c2e:	fb00 f505 	mul.w	r5, r0, r5
 8000c32:	fba0 2308 	umull	r2, r3, r0, r8
 8000c36:	fb08 5501 	mla	r5, r8, r1, r5
 8000c3a:	1ab2      	subs	r2, r6, r2
 8000c3c:	442b      	add	r3, r5
 8000c3e:	eb67 0303 	sbc.w	r3, r7, r3
 8000c42:	e9c4 2300 	strd	r2, r3, [r4]
 8000c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c4a:	bf00      	nop

08000c4c <__aeabi_idiv0>:
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__divdi3>:
 8000c50:	2900      	cmp	r1, #0
 8000c52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c56:	f2c0 80a6 	blt.w	8000da6 <__divdi3+0x156>
 8000c5a:	2600      	movs	r6, #0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f2c0 809c 	blt.w	8000d9a <__divdi3+0x14a>
 8000c62:	4688      	mov	r8, r1
 8000c64:	4694      	mov	ip, r2
 8000c66:	469e      	mov	lr, r3
 8000c68:	4615      	mov	r5, r2
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	460f      	mov	r7, r1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d13d      	bne.n	8000cee <__divdi3+0x9e>
 8000c72:	428a      	cmp	r2, r1
 8000c74:	d959      	bls.n	8000d2a <__divdi3+0xda>
 8000c76:	fab2 f382 	clz	r3, r2
 8000c7a:	b13b      	cbz	r3, 8000c8c <__divdi3+0x3c>
 8000c7c:	f1c3 0220 	rsb	r2, r3, #32
 8000c80:	409f      	lsls	r7, r3
 8000c82:	fa20 f202 	lsr.w	r2, r0, r2
 8000c86:	409d      	lsls	r5, r3
 8000c88:	4317      	orrs	r7, r2
 8000c8a:	409c      	lsls	r4, r3
 8000c8c:	0c29      	lsrs	r1, r5, #16
 8000c8e:	0c22      	lsrs	r2, r4, #16
 8000c90:	fbb7 fef1 	udiv	lr, r7, r1
 8000c94:	b2a8      	uxth	r0, r5
 8000c96:	fb01 771e 	mls	r7, r1, lr, r7
 8000c9a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8000c9e:	fb00 f30e 	mul.w	r3, r0, lr
 8000ca2:	42bb      	cmp	r3, r7
 8000ca4:	d90a      	bls.n	8000cbc <__divdi3+0x6c>
 8000ca6:	197f      	adds	r7, r7, r5
 8000ca8:	f10e 32ff 	add.w	r2, lr, #4294967295
 8000cac:	f080 8105 	bcs.w	8000eba <__divdi3+0x26a>
 8000cb0:	42bb      	cmp	r3, r7
 8000cb2:	f240 8102 	bls.w	8000eba <__divdi3+0x26a>
 8000cb6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cba:	442f      	add	r7, r5
 8000cbc:	1aff      	subs	r7, r7, r3
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb7 f3f1 	udiv	r3, r7, r1
 8000cc4:	fb01 7713 	mls	r7, r1, r3, r7
 8000cc8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000ccc:	fb00 f003 	mul.w	r0, r0, r3
 8000cd0:	42b8      	cmp	r0, r7
 8000cd2:	d908      	bls.n	8000ce6 <__divdi3+0x96>
 8000cd4:	197f      	adds	r7, r7, r5
 8000cd6:	f103 32ff 	add.w	r2, r3, #4294967295
 8000cda:	f080 80f0 	bcs.w	8000ebe <__divdi3+0x26e>
 8000cde:	42b8      	cmp	r0, r7
 8000ce0:	f240 80ed 	bls.w	8000ebe <__divdi3+0x26e>
 8000ce4:	3b02      	subs	r3, #2
 8000ce6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000cea:	2200      	movs	r2, #0
 8000cec:	e003      	b.n	8000cf6 <__divdi3+0xa6>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d90f      	bls.n	8000d12 <__divdi3+0xc2>
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	1c34      	adds	r4, r6, #0
 8000cf8:	bf18      	it	ne
 8000cfa:	2401      	movne	r4, #1
 8000cfc:	4260      	negs	r0, r4
 8000cfe:	f04f 0500 	mov.w	r5, #0
 8000d02:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8000d06:	4058      	eors	r0, r3
 8000d08:	4051      	eors	r1, r2
 8000d0a:	1900      	adds	r0, r0, r4
 8000d0c:	4169      	adcs	r1, r5
 8000d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d12:	fab3 f283 	clz	r2, r3
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8086 	bne.w	8000e28 <__divdi3+0x1d8>
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d302      	bcc.n	8000d26 <__divdi3+0xd6>
 8000d20:	4584      	cmp	ip, r0
 8000d22:	f200 80db 	bhi.w	8000edc <__divdi3+0x28c>
 8000d26:	2301      	movs	r3, #1
 8000d28:	e7e5      	b.n	8000cf6 <__divdi3+0xa6>
 8000d2a:	b912      	cbnz	r2, 8000d32 <__divdi3+0xe2>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	fbb3 f5f2 	udiv	r5, r3, r2
 8000d32:	fab5 f085 	clz	r0, r5
 8000d36:	2800      	cmp	r0, #0
 8000d38:	d13b      	bne.n	8000db2 <__divdi3+0x162>
 8000d3a:	1b78      	subs	r0, r7, r5
 8000d3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	2201      	movs	r2, #1
 8000d46:	fbb0 f8fe 	udiv	r8, r0, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 0718 	mls	r7, lr, r8, r0
 8000d50:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8000d54:	fb0c f308 	mul.w	r3, ip, r8
 8000d58:	42bb      	cmp	r3, r7
 8000d5a:	d907      	bls.n	8000d6c <__divdi3+0x11c>
 8000d5c:	197f      	adds	r7, r7, r5
 8000d5e:	f108 31ff 	add.w	r1, r8, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__divdi3+0x11a>
 8000d64:	42bb      	cmp	r3, r7
 8000d66:	f200 80bd 	bhi.w	8000ee4 <__divdi3+0x294>
 8000d6a:	4688      	mov	r8, r1
 8000d6c:	1aff      	subs	r7, r7, r3
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb7 f3fe 	udiv	r3, r7, lr
 8000d74:	fb0e 7713 	mls	r7, lr, r3, r7
 8000d78:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000d7c:	fb0c fc03 	mul.w	ip, ip, r3
 8000d80:	45bc      	cmp	ip, r7
 8000d82:	d907      	bls.n	8000d94 <__divdi3+0x144>
 8000d84:	197f      	adds	r7, r7, r5
 8000d86:	f103 31ff 	add.w	r1, r3, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__divdi3+0x142>
 8000d8c:	45bc      	cmp	ip, r7
 8000d8e:	f200 80a7 	bhi.w	8000ee0 <__divdi3+0x290>
 8000d92:	460b      	mov	r3, r1
 8000d94:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d98:	e7ad      	b.n	8000cf6 <__divdi3+0xa6>
 8000d9a:	4252      	negs	r2, r2
 8000d9c:	ea6f 0606 	mvn.w	r6, r6
 8000da0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000da4:	e75d      	b.n	8000c62 <__divdi3+0x12>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	f04f 36ff 	mov.w	r6, #4294967295
 8000db0:	e754      	b.n	8000c5c <__divdi3+0xc>
 8000db2:	f1c0 0220 	rsb	r2, r0, #32
 8000db6:	fa24 f102 	lsr.w	r1, r4, r2
 8000dba:	fa07 f300 	lsl.w	r3, r7, r0
 8000dbe:	4085      	lsls	r5, r0
 8000dc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc4:	40d7      	lsrs	r7, r2
 8000dc6:	4319      	orrs	r1, r3
 8000dc8:	fbb7 f2fe 	udiv	r2, r7, lr
 8000dcc:	0c0b      	lsrs	r3, r1, #16
 8000dce:	fb0e 7712 	mls	r7, lr, r2, r7
 8000dd2:	fa1f fc85 	uxth.w	ip, r5
 8000dd6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8000dda:	fb0c f702 	mul.w	r7, ip, r2
 8000dde:	429f      	cmp	r7, r3
 8000de0:	fa04 f400 	lsl.w	r4, r4, r0
 8000de4:	d907      	bls.n	8000df6 <__divdi3+0x1a6>
 8000de6:	195b      	adds	r3, r3, r5
 8000de8:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dec:	d274      	bcs.n	8000ed8 <__divdi3+0x288>
 8000dee:	429f      	cmp	r7, r3
 8000df0:	d972      	bls.n	8000ed8 <__divdi3+0x288>
 8000df2:	3a02      	subs	r2, #2
 8000df4:	442b      	add	r3, r5
 8000df6:	1bdf      	subs	r7, r3, r7
 8000df8:	b289      	uxth	r1, r1
 8000dfa:	fbb7 f8fe 	udiv	r8, r7, lr
 8000dfe:	fb0e 7318 	mls	r3, lr, r8, r7
 8000e02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e06:	fb0c f708 	mul.w	r7, ip, r8
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__divdi3+0x1d0>
 8000e0e:	195b      	adds	r3, r3, r5
 8000e10:	f108 31ff 	add.w	r1, r8, #4294967295
 8000e14:	d25c      	bcs.n	8000ed0 <__divdi3+0x280>
 8000e16:	429f      	cmp	r7, r3
 8000e18:	d95a      	bls.n	8000ed0 <__divdi3+0x280>
 8000e1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e1e:	442b      	add	r3, r5
 8000e20:	1bd8      	subs	r0, r3, r7
 8000e22:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8000e26:	e78e      	b.n	8000d46 <__divdi3+0xf6>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa2c f103 	lsr.w	r1, ip, r3
 8000e30:	fa0e fe02 	lsl.w	lr, lr, r2
 8000e34:	fa20 f703 	lsr.w	r7, r0, r3
 8000e38:	ea41 0e0e 	orr.w	lr, r1, lr
 8000e3c:	fa08 f002 	lsl.w	r0, r8, r2
 8000e40:	fa28 f103 	lsr.w	r1, r8, r3
 8000e44:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8000e48:	4338      	orrs	r0, r7
 8000e4a:	fbb1 f8f5 	udiv	r8, r1, r5
 8000e4e:	0c03      	lsrs	r3, r0, #16
 8000e50:	fb05 1118 	mls	r1, r5, r8, r1
 8000e54:	fa1f f78e 	uxth.w	r7, lr
 8000e58:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e5c:	fb07 f308 	mul.w	r3, r7, r8
 8000e60:	428b      	cmp	r3, r1
 8000e62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e66:	d909      	bls.n	8000e7c <__divdi3+0x22c>
 8000e68:	eb11 010e 	adds.w	r1, r1, lr
 8000e6c:	f108 39ff 	add.w	r9, r8, #4294967295
 8000e70:	d230      	bcs.n	8000ed4 <__divdi3+0x284>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d92e      	bls.n	8000ed4 <__divdi3+0x284>
 8000e76:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7a:	4471      	add	r1, lr
 8000e7c:	1ac9      	subs	r1, r1, r3
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	fbb1 f3f5 	udiv	r3, r1, r5
 8000e84:	fb05 1113 	mls	r1, r5, r3, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb07 f703 	mul.w	r7, r7, r3
 8000e90:	428f      	cmp	r7, r1
 8000e92:	d908      	bls.n	8000ea6 <__divdi3+0x256>
 8000e94:	eb11 010e 	adds.w	r1, r1, lr
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d216      	bcs.n	8000ecc <__divdi3+0x27c>
 8000e9e:	428f      	cmp	r7, r1
 8000ea0:	d914      	bls.n	8000ecc <__divdi3+0x27c>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	4471      	add	r1, lr
 8000ea6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eaa:	1bc9      	subs	r1, r1, r7
 8000eac:	fba3 890c 	umull	r8, r9, r3, ip
 8000eb0:	4549      	cmp	r1, r9
 8000eb2:	d309      	bcc.n	8000ec8 <__divdi3+0x278>
 8000eb4:	d005      	beq.n	8000ec2 <__divdi3+0x272>
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	e71d      	b.n	8000cf6 <__divdi3+0xa6>
 8000eba:	4696      	mov	lr, r2
 8000ebc:	e6fe      	b.n	8000cbc <__divdi3+0x6c>
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	e711      	b.n	8000ce6 <__divdi3+0x96>
 8000ec2:	4094      	lsls	r4, r2
 8000ec4:	4544      	cmp	r4, r8
 8000ec6:	d2f6      	bcs.n	8000eb6 <__divdi3+0x266>
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	e7f4      	b.n	8000eb6 <__divdi3+0x266>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	e7ea      	b.n	8000ea6 <__divdi3+0x256>
 8000ed0:	4688      	mov	r8, r1
 8000ed2:	e7a5      	b.n	8000e20 <__divdi3+0x1d0>
 8000ed4:	46c8      	mov	r8, r9
 8000ed6:	e7d1      	b.n	8000e7c <__divdi3+0x22c>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	e78c      	b.n	8000df6 <__divdi3+0x1a6>
 8000edc:	4613      	mov	r3, r2
 8000ede:	e70a      	b.n	8000cf6 <__divdi3+0xa6>
 8000ee0:	3b02      	subs	r3, #2
 8000ee2:	e757      	b.n	8000d94 <__divdi3+0x144>
 8000ee4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee8:	442f      	add	r7, r5
 8000eea:	e73f      	b.n	8000d6c <__divdi3+0x11c>

08000eec <__udivdi3>:
 8000eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d144      	bne.n	8000f7e <__udivdi3+0x92>
 8000ef4:	428a      	cmp	r2, r1
 8000ef6:	4615      	mov	r5, r2
 8000ef8:	4604      	mov	r4, r0
 8000efa:	d94f      	bls.n	8000f9c <__udivdi3+0xb0>
 8000efc:	fab2 f782 	clz	r7, r2
 8000f00:	460e      	mov	r6, r1
 8000f02:	b14f      	cbz	r7, 8000f18 <__udivdi3+0x2c>
 8000f04:	f1c7 0320 	rsb	r3, r7, #32
 8000f08:	40b9      	lsls	r1, r7
 8000f0a:	fa20 f603 	lsr.w	r6, r0, r3
 8000f0e:	fa02 f507 	lsl.w	r5, r2, r7
 8000f12:	430e      	orrs	r6, r1
 8000f14:	fa00 f407 	lsl.w	r4, r0, r7
 8000f18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1c:	0c23      	lsrs	r3, r4, #16
 8000f1e:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f22:	b2af      	uxth	r7, r5
 8000f24:	fb0e 6110 	mls	r1, lr, r0, r6
 8000f28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2c:	fb07 f100 	mul.w	r1, r7, r0
 8000f30:	4299      	cmp	r1, r3
 8000f32:	d909      	bls.n	8000f48 <__udivdi3+0x5c>
 8000f34:	195b      	adds	r3, r3, r5
 8000f36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f3a:	f080 80ec 	bcs.w	8001116 <__udivdi3+0x22a>
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	f240 80e9 	bls.w	8001116 <__udivdi3+0x22a>
 8000f44:	3802      	subs	r0, #2
 8000f46:	442b      	add	r3, r5
 8000f48:	1a5a      	subs	r2, r3, r1
 8000f4a:	b2a4      	uxth	r4, r4
 8000f4c:	fbb2 f3fe 	udiv	r3, r2, lr
 8000f50:	fb0e 2213 	mls	r2, lr, r3, r2
 8000f54:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8000f58:	fb07 f703 	mul.w	r7, r7, r3
 8000f5c:	4297      	cmp	r7, r2
 8000f5e:	d908      	bls.n	8000f72 <__udivdi3+0x86>
 8000f60:	1952      	adds	r2, r2, r5
 8000f62:	f103 31ff 	add.w	r1, r3, #4294967295
 8000f66:	f080 80d8 	bcs.w	800111a <__udivdi3+0x22e>
 8000f6a:	4297      	cmp	r7, r2
 8000f6c:	f240 80d5 	bls.w	800111a <__udivdi3+0x22e>
 8000f70:	3b02      	subs	r3, #2
 8000f72:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d847      	bhi.n	8001012 <__udivdi3+0x126>
 8000f82:	fab3 f683 	clz	r6, r3
 8000f86:	2e00      	cmp	r6, #0
 8000f88:	d148      	bne.n	800101c <__udivdi3+0x130>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d302      	bcc.n	8000f94 <__udivdi3+0xa8>
 8000f8e:	4282      	cmp	r2, r0
 8000f90:	f200 80cd 	bhi.w	800112e <__udivdi3+0x242>
 8000f94:	2001      	movs	r0, #1
 8000f96:	4631      	mov	r1, r6
 8000f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f9c:	b912      	cbnz	r2, 8000fa4 <__udivdi3+0xb8>
 8000f9e:	2501      	movs	r5, #1
 8000fa0:	fbb5 f5f2 	udiv	r5, r5, r2
 8000fa4:	fab5 f885 	clz	r8, r5
 8000fa8:	f1b8 0f00 	cmp.w	r8, #0
 8000fac:	d177      	bne.n	800109e <__udivdi3+0x1b2>
 8000fae:	1b4a      	subs	r2, r1, r5
 8000fb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fb4:	b2af      	uxth	r7, r5
 8000fb6:	2601      	movs	r6, #1
 8000fb8:	fbb2 f0fe 	udiv	r0, r2, lr
 8000fbc:	0c23      	lsrs	r3, r4, #16
 8000fbe:	fb0e 2110 	mls	r1, lr, r0, r2
 8000fc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fc6:	fb07 f300 	mul.w	r3, r7, r0
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	d907      	bls.n	8000fde <__udivdi3+0xf2>
 8000fce:	1949      	adds	r1, r1, r5
 8000fd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fd4:	d202      	bcs.n	8000fdc <__udivdi3+0xf0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	f200 80ba 	bhi.w	8001150 <__udivdi3+0x264>
 8000fdc:	4610      	mov	r0, r2
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	b2a4      	uxth	r4, r4
 8000fe2:	fbb1 f3fe 	udiv	r3, r1, lr
 8000fe6:	fb0e 1113 	mls	r1, lr, r3, r1
 8000fea:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fee:	fb07 f703 	mul.w	r7, r7, r3
 8000ff2:	42a7      	cmp	r7, r4
 8000ff4:	d908      	bls.n	8001008 <__udivdi3+0x11c>
 8000ff6:	1964      	adds	r4, r4, r5
 8000ff8:	f103 32ff 	add.w	r2, r3, #4294967295
 8000ffc:	f080 808f 	bcs.w	800111e <__udivdi3+0x232>
 8001000:	42a7      	cmp	r7, r4
 8001002:	f240 808c 	bls.w	800111e <__udivdi3+0x232>
 8001006:	3b02      	subs	r3, #2
 8001008:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800100c:	4631      	mov	r1, r6
 800100e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001012:	2600      	movs	r6, #0
 8001014:	4630      	mov	r0, r6
 8001016:	4631      	mov	r1, r6
 8001018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800101c:	f1c6 0420 	rsb	r4, r6, #32
 8001020:	fa22 f504 	lsr.w	r5, r2, r4
 8001024:	40b3      	lsls	r3, r6
 8001026:	432b      	orrs	r3, r5
 8001028:	fa20 fc04 	lsr.w	ip, r0, r4
 800102c:	fa01 f706 	lsl.w	r7, r1, r6
 8001030:	fa21 f504 	lsr.w	r5, r1, r4
 8001034:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001038:	ea4c 0707 	orr.w	r7, ip, r7
 800103c:	fbb5 f8fe 	udiv	r8, r5, lr
 8001040:	0c39      	lsrs	r1, r7, #16
 8001042:	fb0e 5518 	mls	r5, lr, r8, r5
 8001046:	fa1f fc83 	uxth.w	ip, r3
 800104a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800104e:	fb0c f108 	mul.w	r1, ip, r8
 8001052:	42a9      	cmp	r1, r5
 8001054:	fa02 f206 	lsl.w	r2, r2, r6
 8001058:	d904      	bls.n	8001064 <__udivdi3+0x178>
 800105a:	18ed      	adds	r5, r5, r3
 800105c:	f108 34ff 	add.w	r4, r8, #4294967295
 8001060:	d367      	bcc.n	8001132 <__udivdi3+0x246>
 8001062:	46a0      	mov	r8, r4
 8001064:	1a6d      	subs	r5, r5, r1
 8001066:	b2bf      	uxth	r7, r7
 8001068:	fbb5 f4fe 	udiv	r4, r5, lr
 800106c:	fb0e 5514 	mls	r5, lr, r4, r5
 8001070:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8001074:	fb0c fc04 	mul.w	ip, ip, r4
 8001078:	458c      	cmp	ip, r1
 800107a:	d904      	bls.n	8001086 <__udivdi3+0x19a>
 800107c:	18c9      	adds	r1, r1, r3
 800107e:	f104 35ff 	add.w	r5, r4, #4294967295
 8001082:	d35c      	bcc.n	800113e <__udivdi3+0x252>
 8001084:	462c      	mov	r4, r5
 8001086:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800108a:	ebcc 0101 	rsb	r1, ip, r1
 800108e:	fba4 2302 	umull	r2, r3, r4, r2
 8001092:	4299      	cmp	r1, r3
 8001094:	d348      	bcc.n	8001128 <__udivdi3+0x23c>
 8001096:	d044      	beq.n	8001122 <__udivdi3+0x236>
 8001098:	4620      	mov	r0, r4
 800109a:	2600      	movs	r6, #0
 800109c:	e76c      	b.n	8000f78 <__udivdi3+0x8c>
 800109e:	f1c8 0420 	rsb	r4, r8, #32
 80010a2:	fa01 f308 	lsl.w	r3, r1, r8
 80010a6:	fa05 f508 	lsl.w	r5, r5, r8
 80010aa:	fa20 f704 	lsr.w	r7, r0, r4
 80010ae:	40e1      	lsrs	r1, r4
 80010b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010b4:	431f      	orrs	r7, r3
 80010b6:	fbb1 f6fe 	udiv	r6, r1, lr
 80010ba:	0c3a      	lsrs	r2, r7, #16
 80010bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80010c0:	fa1f fc85 	uxth.w	ip, r5
 80010c4:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 80010c8:	fb0c f206 	mul.w	r2, ip, r6
 80010cc:	429a      	cmp	r2, r3
 80010ce:	fa00 f408 	lsl.w	r4, r0, r8
 80010d2:	d907      	bls.n	80010e4 <__udivdi3+0x1f8>
 80010d4:	195b      	adds	r3, r3, r5
 80010d6:	f106 31ff 	add.w	r1, r6, #4294967295
 80010da:	d237      	bcs.n	800114c <__udivdi3+0x260>
 80010dc:	429a      	cmp	r2, r3
 80010de:	d935      	bls.n	800114c <__udivdi3+0x260>
 80010e0:	3e02      	subs	r6, #2
 80010e2:	442b      	add	r3, r5
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	b2bf      	uxth	r7, r7
 80010e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80010ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80010f0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80010f4:	fb0c f100 	mul.w	r1, ip, r0
 80010f8:	4299      	cmp	r1, r3
 80010fa:	d907      	bls.n	800110c <__udivdi3+0x220>
 80010fc:	195b      	adds	r3, r3, r5
 80010fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8001102:	d221      	bcs.n	8001148 <__udivdi3+0x25c>
 8001104:	4299      	cmp	r1, r3
 8001106:	d91f      	bls.n	8001148 <__udivdi3+0x25c>
 8001108:	3802      	subs	r0, #2
 800110a:	442b      	add	r3, r5
 800110c:	1a5a      	subs	r2, r3, r1
 800110e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001112:	4667      	mov	r7, ip
 8001114:	e750      	b.n	8000fb8 <__udivdi3+0xcc>
 8001116:	4610      	mov	r0, r2
 8001118:	e716      	b.n	8000f48 <__udivdi3+0x5c>
 800111a:	460b      	mov	r3, r1
 800111c:	e729      	b.n	8000f72 <__udivdi3+0x86>
 800111e:	4613      	mov	r3, r2
 8001120:	e772      	b.n	8001008 <__udivdi3+0x11c>
 8001122:	40b0      	lsls	r0, r6
 8001124:	4290      	cmp	r0, r2
 8001126:	d2b7      	bcs.n	8001098 <__udivdi3+0x1ac>
 8001128:	1e60      	subs	r0, r4, #1
 800112a:	2600      	movs	r6, #0
 800112c:	e724      	b.n	8000f78 <__udivdi3+0x8c>
 800112e:	4630      	mov	r0, r6
 8001130:	e722      	b.n	8000f78 <__udivdi3+0x8c>
 8001132:	42a9      	cmp	r1, r5
 8001134:	d995      	bls.n	8001062 <__udivdi3+0x176>
 8001136:	f1a8 0802 	sub.w	r8, r8, #2
 800113a:	441d      	add	r5, r3
 800113c:	e792      	b.n	8001064 <__udivdi3+0x178>
 800113e:	458c      	cmp	ip, r1
 8001140:	d9a0      	bls.n	8001084 <__udivdi3+0x198>
 8001142:	3c02      	subs	r4, #2
 8001144:	4419      	add	r1, r3
 8001146:	e79e      	b.n	8001086 <__udivdi3+0x19a>
 8001148:	4610      	mov	r0, r2
 800114a:	e7df      	b.n	800110c <__udivdi3+0x220>
 800114c:	460e      	mov	r6, r1
 800114e:	e7c9      	b.n	80010e4 <__udivdi3+0x1f8>
 8001150:	3802      	subs	r0, #2
 8001152:	4429      	add	r1, r5
 8001154:	e743      	b.n	8000fde <__udivdi3+0xf2>
 8001156:	bf00      	nop

08001158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001158:	f8df d030 	ldr.w	sp, [pc, #48]	; 800118c <LoopFillZerobss+0x10>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800115c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800115e:	e003      	b.n	8001168 <LoopCopyDataInit>

08001160 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001162:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001164:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001166:	3104      	adds	r1, #4

08001168 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001168:	480a      	ldr	r0, [pc, #40]	; (8001194 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800116c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800116e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001170:	d3f6      	bcc.n	8001160 <CopyDataInit>
  ldr  r2, =_sbss
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001174:	e002      	b.n	800117c <LoopFillZerobss>

08001176 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001176:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001178:	f842 3b04 	str.w	r3, [r2], #4

0800117c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800117e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001180:	d3f9      	bcc.n	8001176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001182:	f000 f811 	bl	80011a8 <SystemInit>
/* Call static constructors */
   /* bl __libc_init_array */
/* Call the application's entry point.*/
  bl  main
 8001186:	f000 f8a7 	bl	80012d8 <main>
  bx  lr    
 800118a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800118c:	2001ffff 	.word	0x2001ffff
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001190:	08009914 	.word	0x08009914
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001198:	2000092c 	.word	0x2000092c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800119c:	2000092c 	.word	0x2000092c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011a0:	200015b0 	.word	0x200015b0

080011a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC_IRQHandler>
	...

080011a8 <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <SystemInit+0x34>)
 80011aa:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011ac:	2100      	movs	r1, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011ae:	f042 0201 	orr.w	r2, r2, #1
 80011b2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011b4:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80011bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011c0:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80011c2:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <SystemInit+0x38>)
 80011c4:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011cc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80011ce:	60d9      	str	r1, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SystemInit+0x3c>)
 80011d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	24003010 	.word	0x24003010
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80011e8:	4770      	bx	lr

080011ea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler>

080011ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80011ec:	e7fe      	b.n	80011ec <MemManage_Handler>

080011ee <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80011ee:	e7fe      	b.n	80011ee <BusFault_Handler>

080011f0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80011f0:	e7fe      	b.n	80011f0 <UsageFault_Handler>

080011f2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80011f2:	4770      	bx	lr

080011f4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80011f4:	4770      	bx	lr

080011f6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80011f6:	4770      	bx	lr

080011f8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80011f8:	b508      	push	{r3, lr}
	HAL_IncTick();
 80011fa:	f002 fd97 	bl	8003d2c <HAL_IncTick>
	
	Timeout_Timer_0++;
 80011fe:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <SysTick_Handler+0x3c>)
 8001200:	6813      	ldr	r3, [r2, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	6013      	str	r3, [r2, #0]
  
	//---------------------------
	// msec counter
	//---------------------------
	msec_counter++;
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <SysTick_Handler+0x40>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	3201      	adds	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
	switch(msec_counter % 10){
 800120e:	6819      	ldr	r1, [r3, #0]
 8001210:	230a      	movs	r3, #10
 8001212:	fbb1 f2f3 	udiv	r2, r1, r3
 8001216:	fb03 1312 	mls	r3, r3, r2, r1
 800121a:	b913      	cbnz	r3, 8001222 <SysTick_Handler+0x2a>
		case 0:
			gui_Exec = true;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <SysTick_Handler+0x44>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
	}

	//---------------------------
	// Touch-Timer
	//---------------------------
	touch_timer++;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <SysTick_Handler+0x48>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	3201      	adds	r2, #1
 8001228:	601a      	str	r2, [r3, #0]
	switch(touch_timer % 1){
 800122a:	681b      	ldr	r3, [r3, #0]
		case 0:
			Touch_Flagged = true;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Handler+0x4c>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
 8001232:	bd08      	pop	{r3, pc}
 8001234:	2000092c 	.word	0x2000092c
 8001238:	20000934 	.word	0x20000934
 800123c:	20000938 	.word	0x20000938
 8001240:	20000930 	.word	0x20000930
 8001244:	20000939 	.word	0x20000939

08001248 <Error_Handler>:
/**
	* @brief	Handles general errors.
	* @param	None
	* @retval	None
*/
static void Error_Handler(void){
 8001248:	b508      	push	{r3, lr}
	
	while(1){
		/* Put error on LED3 */
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 800124a:	4804      	ldr	r0, [pc, #16]	; (800125c <Error_Handler+0x14>)
 800124c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001250:	f002 fd34 	bl	8003cbc <HAL_GPIO_TogglePin>
		printf("Peripheral config error\n");
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <Error_Handler+0x18>)
 8001256:	f002 fdf1 	bl	8003e3c <puts>
	}
 800125a:	e7f6      	b.n	800124a <Error_Handler+0x2>
 800125c:	40020800 	.word	0x40020800
 8001260:	08009020 	.word	0x08009020

08001264 <Debug_ITMDebugEnable>:
void Debug_ITMDebugEnable(void){
	volatile unsigned int *ITM_TER      = (volatile unsigned int *)0xE0000E00;
	volatile unsigned int *SCB_DHCSR 		= (volatile unsigned int *)0xE000EDF0;
	volatile unsigned int *DBGMCU_CR 		= (volatile unsigned int *)0xE0042004;
	
	*DBGMCU_CR |= 0x27; // DBGMCU_CR
 8001264:	4a08      	ldr	r2, [pc, #32]	; (8001288 <Debug_ITMDebugEnable+0x24>)
 8001266:	6813      	ldr	r3, [r2, #0]
 8001268:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 800126c:	6013      	str	r3, [r2, #0]
	
	if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <Debug_ITMDebugEnable+0x28>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	07da      	lsls	r2, r3, #31
 8001274:	d506      	bpl.n	8001284 <Debug_ITMDebugEnable+0x20>
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <Debug_ITMDebugEnable+0x2c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	07db      	lsls	r3, r3, #31
    Debug_ITMDebug = 1;
 800127c:	bf42      	ittt	mi
 800127e:	4b05      	ldrmi	r3, [pc, #20]	; (8001294 <Debug_ITMDebugEnable+0x30>)
 8001280:	2201      	movmi	r2, #1
 8001282:	601a      	strmi	r2, [r3, #0]
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e0042004 	.word	0xe0042004
 800128c:	e000edf0 	.word	0xe000edf0
 8001290:	e0000e00 	.word	0xe0000e00
 8001294:	20000988 	.word	0x20000988

08001298 <Debug_ITMDebugOutputChar>:

void Debug_ITMDebugOutputChar(char ch){
	static volatile unsigned int *ITM_STIM0 = (volatile unsigned int *)0xE0000000; // ITM Port 0
	static volatile unsigned int *SCB_DEMCR = (volatile unsigned int *)0xE000EDFC;
	
	if (Debug_ITMDebug && (*SCB_DEMCR & 0x01000000))
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <Debug_ITMDebugOutputChar+0x1c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	b14b      	cbz	r3, 80012b2 <Debug_ITMDebugOutputChar+0x1a>
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <Debug_ITMDebugOutputChar+0x20>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	01db      	lsls	r3, r3, #7
 80012a4:	d505      	bpl.n	80012b2 <Debug_ITMDebugOutputChar+0x1a>
	{
		while(*ITM_STIM0 == 0);
 80012a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2a00      	cmp	r2, #0
 80012ae:	d0fa      	beq.n	80012a6 <Debug_ITMDebugOutputChar+0xe>
		*((volatile char *)ITM_STIM0) = ch;
 80012b0:	7018      	strb	r0, [r3, #0]
 80012b2:	4770      	bx	lr
 80012b4:	20000988 	.word	0x20000988
 80012b8:	e000edfc 	.word	0xe000edfc

080012bc <Debug_ITMDebugOutputString>:
}

//****************************************************************************

void Debug_ITMDebugOutputString(char *Buffer){
	if (Debug_ITMDebug)
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <Debug_ITMDebugOutputString+0x18>)
 80012be:	681b      	ldr	r3, [r3, #0]
	}
}

//****************************************************************************

void Debug_ITMDebugOutputString(char *Buffer){
 80012c0:	b510      	push	{r4, lr}
	if (Debug_ITMDebug)
 80012c2:	b133      	cbz	r3, 80012d2 <Debug_ITMDebugOutputString+0x16>
 80012c4:	1e44      	subs	r4, r0, #1
	while(*Buffer)
 80012c6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80012ca:	b110      	cbz	r0, 80012d2 <Debug_ITMDebugOutputString+0x16>
	Debug_ITMDebugOutputChar(*Buffer++);
 80012cc:	f7ff ffe4 	bl	8001298 <Debug_ITMDebugOutputChar>
 80012d0:	e7f9      	b.n	80012c6 <Debug_ITMDebugOutputString+0xa>
 80012d2:	bd10      	pop	{r4, pc}
 80012d4:	20000988 	.word	0x20000988

080012d8 <main>:
	* @param	None
	*	@note	Init the system.
	* 		return here after a call.
	*	@retval	None
*/
int main(void){
 80012d8:	b530      	push	{r4, r5, lr}
 80012da:	b09b      	sub	sp, #108	; 0x6c
	/* STM32f4xx HAL library initialization:
		- Cofigure Flash prefetch, flash preread and Buffer caches
		- Systick timer config
		- Low level init
	*/
	HAL_Init();
 80012dc:	f002 fd10 	bl	8003d00 <HAL_Init>
static void SystemClock_Config(void){
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	
	/* Enable Power control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012e0:	4a9a      	ldr	r2, [pc, #616]	; (800154c <main+0x274>)
 80012e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
	
	/* The voltage scaling allows optimizing the power consumption when the
		device is clocked below the maximum system frequency, to update the
		voltage scaling value regarding system frequency refer to product
	datasheet. */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ea:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
	
	/* Enable HSI Oscillator and activate PLL with HSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ee:	2402      	movs	r4, #2
	
	/* The voltage scaling allows optimizing the power consumption when the
		device is clocked below the maximum system frequency, to update the
		voltage scaling value regarding system frequency refer to product
	datasheet. */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f0:	6813      	ldr	r3, [r2, #0]
 80012f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012f6:	6013      	str	r3, [r2, #0]
	
	/* Enable HSI Oscillator and activate PLL with HSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f8:	2301      	movs	r3, #1
 80012fa:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = 0x10;
 80012fc:	2310      	movs	r3, #16
 80012fe:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001300:	9316      	str	r3, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 400;
 8001302:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001306:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001308:	2304      	movs	r3, #4
	/* Enable HSI Oscillator and activate PLL with HSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 0x10;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800130a:	2200      	movs	r2, #0
	RCC_OscInitStruct.PLL.PLLM = 16;
	RCC_OscInitStruct.PLL.PLLN = 400;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800130c:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130e:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 16;
	RCC_OscInitStruct.PLL.PLLN = 400;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001310:	2307      	movs	r3, #7
		voltage scaling value regarding system frequency refer to product
	datasheet. */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
	
	/* Enable HSI Oscillator and activate PLL with HSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001312:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 0x10;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001314:	9414      	str	r4, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001316:	9215      	str	r2, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 16;
	RCC_OscInitStruct.PLL.PLLN = 400;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001318:	9319      	str	r3, [sp, #100]	; 0x64
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131a:	f001 f93f 	bl	800259c <HAL_RCC_OscConfig>
 800131e:	b108      	cbz	r0, 8001324 <main+0x4c>
	{
		Error_Handler();
 8001320:	f7ff ff92 	bl	8001248 <Error_Handler>
	}
	
	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
	clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001324:	230f      	movs	r3, #15
 8001326:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001328:	9006      	str	r0, [sp, #24]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 800132a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 800132e:	9008      	str	r0, [sp, #32]
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001330:	2103      	movs	r1, #3
 8001332:	a804      	add	r0, sp, #16
	}
	
	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
	clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001334:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8001336:	9307      	str	r3, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001338:	f001 fb32 	bl	80029a0 <HAL_RCC_ClockConfig>
 800133c:	2800      	cmp	r0, #0
 800133e:	d1ef      	bne.n	8001320 <main+0x48>
	{
		Error_Handler();
	}
	
	/* STM32F407x Revision Z devices: prefetch is supported */
	if(HAL_GetREVID() == 0x1001){
 8001340:	f002 fd02 	bl	8003d48 <HAL_GetREVID>
 8001344:	f241 0301 	movw	r3, #4097	; 0x1001
 8001348:	4298      	cmp	r0, r3
		/* Enable the Flash prefetch */
		__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800134a:	bf01      	itttt	eq
 800134c:	4a80      	ldreq	r2, [pc, #512]	; (8001550 <main+0x278>)
 800134e:	6813      	ldreq	r3, [r2, #0]
 8001350:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8001354:	6013      	streq	r3, [r2, #0]
	
	/* configure the system clock to 168 MHz */
	SystemClock_Config();
	
	/* Enable TRACE debug -----------------------------------------------*/
	Debug_ITMDebugEnable();
 8001356:	f7ff ff85 	bl	8001264 <Debug_ITMDebugEnable>
	Debug_ITMDebugOutputString("SWV Enabled\n");
 800135a:	487e      	ldr	r0, [pc, #504]	; (8001554 <main+0x27c>)
 800135c:	f7ff ffae 	bl	80012bc <Debug_ITMDebugOutputString>
	SRAM_Timing.BusTurnAroundDuration = 1;
	SRAM_Timing.CLKDivision = 1;
	SRAM_Timing.DataLatency = 1;
	SRAM_Timing.AccessMode = FSMC_ACCESS_MODE_A;
	
	hsram.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001360:	487d      	ldr	r0, [pc, #500]	; (8001558 <main+0x280>)
	* @param None
	* @retval None
*/
static void sram_init(void){
	/*	Configure the FSCM bus ---------------------------*/
	SRAM_Timing.AddressSetupTime = 1;
 8001362:	497e      	ldr	r1, [pc, #504]	; (800155c <main+0x284>)
	SRAM_Timing.AccessMode = FSMC_ACCESS_MODE_A;
	
	hsram.Init.NSBank = FSMC_NORSRAM_BANK1;
	hsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
	hsram.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
	hsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001364:	2210      	movs	r2, #16
	* @param None
	* @retval None
*/
static void sram_init(void){
	/*	Configure the FSCM bus ---------------------------*/
	SRAM_Timing.AddressSetupTime = 1;
 8001366:	2301      	movs	r3, #1
	SRAM_Timing.AccessMode = FSMC_ACCESS_MODE_A;
	
	hsram.Init.NSBank = FSMC_NORSRAM_BANK1;
	hsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
	hsram.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
	hsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001368:	6142      	str	r2, [r0, #20]
	hsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
	hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
	hsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
	hsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
	hsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800136a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	* @param None
	* @retval None
*/
static void sram_init(void){
	/*	Configure the FSCM bus ---------------------------*/
	SRAM_Timing.AddressSetupTime = 1;
 800136e:	600b      	str	r3, [r1, #0]
	SRAM_Timing.AddressHoldTime = 1;
 8001370:	604b      	str	r3, [r1, #4]
	SRAM_Timing.DataSetupTime = 1;
 8001372:	608b      	str	r3, [r1, #8]
	SRAM_Timing.BusTurnAroundDuration = 1;
 8001374:	60cb      	str	r3, [r1, #12]
	SRAM_Timing.CLKDivision = 1;
 8001376:	610b      	str	r3, [r1, #16]
	SRAM_Timing.DataLatency = 1;
 8001378:	614b      	str	r3, [r1, #20]
	hsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
	hsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
	hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
	hsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
	hsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
	hsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800137a:	6282      	str	r2, [r0, #40]	; 0x28
	SRAM_Timing.AddressHoldTime = 1;
	SRAM_Timing.DataSetupTime = 1;
	SRAM_Timing.BusTurnAroundDuration = 1;
	SRAM_Timing.CLKDivision = 1;
	SRAM_Timing.DataLatency = 1;
	SRAM_Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800137c:	2300      	movs	r3, #0
	hsram.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
	hsram.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
	hsram.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
	
	/* Initialize the SRAM controller ----------------------------*/
	if(HAL_SRAM_Init(&hsram, &SRAM_Timing, &SRAM_Timing) != HAL_OK){
 800137e:	460a      	mov	r2, r1
	SRAM_Timing.AddressHoldTime = 1;
	SRAM_Timing.DataSetupTime = 1;
	SRAM_Timing.BusTurnAroundDuration = 1;
	SRAM_Timing.CLKDivision = 1;
	SRAM_Timing.DataLatency = 1;
	SRAM_Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001380:	618b      	str	r3, [r1, #24]
	
	hsram.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001382:	6083      	str	r3, [r0, #8]
	hsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001384:	60c3      	str	r3, [r0, #12]
	hsram.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001386:	6103      	str	r3, [r0, #16]
	hsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
	hsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001388:	6183      	str	r3, [r0, #24]
	hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800138a:	61c3      	str	r3, [r0, #28]
	hsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800138c:	6203      	str	r3, [r0, #32]
	hsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800138e:	6243      	str	r3, [r0, #36]	; 0x24
	hsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
	hsram.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001390:	62c3      	str	r3, [r0, #44]	; 0x2c
	hsram.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001392:	6303      	str	r3, [r0, #48]	; 0x30
	hsram.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001394:	6343      	str	r3, [r0, #52]	; 0x34
	hsram.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001396:	6383      	str	r3, [r0, #56]	; 0x38
	
	/* Initialize the SRAM controller ----------------------------*/
	if(HAL_SRAM_Init(&hsram, &SRAM_Timing, &SRAM_Timing) != HAL_OK){
 8001398:	f002 f8fe 	bl	8003598 <HAL_SRAM_Init>
 800139c:	2800      	cmp	r0, #0
 800139e:	d1bf      	bne.n	8001320 <main+0x48>
	* @param None
	* @retval None
*/
static void I2C_init(void){
	/*	Configure the I2C peripheral ---------------------------*/
	I2cHandle.Instance             = I2Cx;
 80013a0:	4b6f      	ldr	r3, [pc, #444]	; (8001560 <main+0x288>)
 80013a2:	4a70      	ldr	r2, [pc, #448]	; (8001564 <main+0x28c>)
 80013a4:	601a      	str	r2, [r3, #0]
	
	I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 80013a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013aa:	611a      	str	r2, [r3, #16]
	I2cHandle.Init.ClockSpeed      = 400000;
 80013ac:	4a6e      	ldr	r2, [pc, #440]	; (8001568 <main+0x290>)
 80013ae:	605a      	str	r2, [r3, #4]
	I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
	I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_2;
	I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80013b0:	2240      	movs	r2, #64	; 0x40
	/*	Configure the I2C peripheral ---------------------------*/
	I2cHandle.Instance             = I2Cx;
	
	I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
	I2cHandle.Init.ClockSpeed      = 400000;
	I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b2:	6158      	str	r0, [r3, #20]
	I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 80013b4:	6098      	str	r0, [r3, #8]
	I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80013b6:	61da      	str	r2, [r3, #28]
	I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 80013b8:	6218      	str	r0, [r3, #32]
	I2cHandle.Init.OwnAddress1     = I2C_ADDRESS;
 80013ba:	22fe      	movs	r2, #254	; 0xfe
	I2cHandle.Init.OwnAddress2	 = I2C_ADDRESS;
	
	if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 80013bc:	4618      	mov	r0, r3
	I2cHandle.Init.ClockSpeed      = 400000;
	I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
	I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_2;
	I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
	I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
	I2cHandle.Init.OwnAddress1     = I2C_ADDRESS;
 80013be:	60da      	str	r2, [r3, #12]
	I2cHandle.Init.OwnAddress2	 = I2C_ADDRESS;
 80013c0:	619a      	str	r2, [r3, #24]
	
	if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 80013c2:	f001 fcf1 	bl	8002da8 <HAL_I2C_Init>
 80013c6:	2800      	cmp	r0, #0
 80013c8:	d1aa      	bne.n	8001320 <main+0x48>
		- Word Length = 8 Bits
		- Stop Bit = One Stop bit
		- Parity = None
		- BaudRate = 115200 baud
	- Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;
 80013ca:	4b68      	ldr	r3, [pc, #416]	; (800156c <main+0x294>)
	
	UartHandle.Init.BaudRate     = baudrate;
 80013cc:	4968      	ldr	r1, [pc, #416]	; (8001570 <main+0x298>)
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 80013ce:	6098      	str	r0, [r3, #8]
		- Parity = None
		- BaudRate = 115200 baud
	- Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;
	
	UartHandle.Init.BaudRate     = baudrate;
 80013d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80013d4:	e883 0006 	stmia.w	r3, {r1, r2}
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
	UartHandle.Init.Parity       = UART_PARITY_NONE;
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80013d8:	220c      	movs	r2, #12
	- Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;
	
	UartHandle.Init.BaudRate     = baudrate;
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
 80013da:	60d8      	str	r0, [r3, #12]
	UartHandle.Init.Parity       = UART_PARITY_NONE;
 80013dc:	6118      	str	r0, [r3, #16]
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80013de:	6198      	str	r0, [r3, #24]
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80013e0:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_8;
	
	if(HAL_UART_Init(&UartHandle) != HAL_OK)
 80013e2:	4618      	mov	r0, r3
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
	UartHandle.Init.Parity       = UART_PARITY_NONE;
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_8;
 80013e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e8:	61da      	str	r2, [r3, #28]
	
	if(HAL_UART_Init(&UartHandle) != HAL_OK)
 80013ea:	f001 ff01 	bl	80031f0 <HAL_UART_Init>
 80013ee:	2800      	cmp	r0, #0
 80013f0:	d196      	bne.n	8001320 <main+0x48>
	RCC_ClkInitTypeDef sClokConfig;
	uint32_t uwTimclock, uwAPB1Prescaler = 0;
	uint32_t uwPrescalerValue = 0;
	uint32_t pFLatency;
	
	HAL_RCC_GetClockConfig(&sClokConfig, &pFLatency);
 80013f2:	a809      	add	r0, sp, #36	; 0x24
 80013f4:	a903      	add	r1, sp, #12
 80013f6:	f001 fcb9 	bl	8002d6c <HAL_RCC_GetClockConfig>
	
	uwAPB1Prescaler = sClokConfig.APB1CLKDivider;
	if (uwAPB1Prescaler == 0) 
 80013fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80013fc:	b913      	cbnz	r3, 8001404 <main+0x12c>
	{
		uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013fe:	f001 fc85 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 8001402:	e002      	b.n	800140a <main+0x132>
	}
	else
	{
		uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001404:	f001 fc82 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 8001408:	0040      	lsls	r0, r0, #1
	}
	
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
	
	TimHandle.Instance = TIMx;
 800140a:	4b5a      	ldr	r3, [pc, #360]	; (8001574 <main+0x29c>)
 800140c:	4a5a      	ldr	r2, [pc, #360]	; (8001578 <main+0x2a0>)
 800140e:	601a      	str	r2, [r3, #0]
	
	TimHandle.Init.Period = 100 - 1;
 8001410:	2263      	movs	r2, #99	; 0x63
 8001412:	60da      	str	r2, [r3, #12]
	else
	{
		uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
	}
	
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
 8001414:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001418:	fbb0 f0f2 	udiv	r0, r0, r2
 800141c:	3801      	subs	r0, #1
	
	TimHandle.Instance = TIMx;
	
	TimHandle.Init.Period = 100 - 1;
	TimHandle.Init.Prescaler = uwPrescalerValue;
	TimHandle.Init.ClockDivision = 0;
 800141e:	2200      	movs	r2, #0
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
	
	TimHandle.Instance = TIMx;
	
	TimHandle.Init.Period = 100 - 1;
	TimHandle.Init.Prescaler = uwPrescalerValue;
 8001420:	6058      	str	r0, [r3, #4]
	TimHandle.Init.ClockDivision = 0;
	TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
	if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8001422:	4618      	mov	r0, r3
	
	TimHandle.Instance = TIMx;
	
	TimHandle.Init.Period = 100 - 1;
	TimHandle.Init.Prescaler = uwPrescalerValue;
	TimHandle.Init.ClockDivision = 0;
 8001424:	611a      	str	r2, [r3, #16]
	TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001426:	609a      	str	r2, [r3, #8]
	if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8001428:	f002 fa8e 	bl	8003948 <HAL_TIM_Base_Init>
 800142c:	4605      	mov	r5, r0
 800142e:	2800      	cmp	r0, #0
 8001430:	f47f af76 	bne.w	8001320 <main+0x48>
*/
static void init_leds(void){
	GPIO_InitTypeDef GPIO_InitStructure;
	
	// Enable AHB1per Clock
	__GPIOC_CLK_ENABLE();
 8001434:	4a45      	ldr	r2, [pc, #276]	; (800154c <main+0x274>)
	//Config pins
	GPIO_InitStructure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001436:	4851      	ldr	r0, [pc, #324]	; (800157c <main+0x2a4>)
*/
static void init_leds(void){
	GPIO_InitTypeDef GPIO_InitStructure;
	
	// Enable AHB1per Clock
	__GPIOC_CLK_ENABLE();
 8001438:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6313      	str	r3, [r2, #48]	; 0x30
	
	//Config pins
	GPIO_InitStructure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12;
 8001440:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2401      	movs	r4, #1
	
	// Enable AHB1per Clock
	__GPIOC_CLK_ENABLE();
	
	//Config pins
	GPIO_InitStructure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12;
 8001446:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001448:	a90e      	add	r1, sp, #56	; 0x38
	__GPIOC_CLK_ENABLE();
	
	//Config pins
	GPIO_InitStructure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	9311      	str	r3, [sp, #68]	; 0x44
	// Enable AHB1per Clock
	__GPIOC_CLK_ENABLE();
	
	//Config pins
	GPIO_InitStructure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8001450:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001452:	f002 fae9 	bl	8003a28 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001456:	4622      	mov	r2, r4
 8001458:	4848      	ldr	r0, [pc, #288]	; (800157c <main+0x2a4>)
 800145a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145e:	f002 fc15 	bl	8003c8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001462:	4622      	mov	r2, r4
 8001464:	4845      	ldr	r0, [pc, #276]	; (800157c <main+0x2a4>)
	init_leds();
	/*********************************************************************/
	
	/*	Init modbus	slave -----------------------------------------------*/
	eStatus = eMBInit(MB_RTU, 0x0A, 0, 28800, MB_PAR_NONE);
	printf("eStatus: %s\n", eStatus ? "error": "no'error");
 8001466:	4c46      	ldr	r4, [pc, #280]	; (8001580 <main+0x2a8>)
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
	
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800146c:	f002 fc0e 	bl	8003c8c <HAL_GPIO_WritePin>
	/*	Show us some status leds ----------------------------------------*/
	init_leds();
	/*********************************************************************/
	
	/*	Init modbus	slave -----------------------------------------------*/
	eStatus = eMBInit(MB_RTU, 0x0A, 0, 28800, MB_PAR_NONE);
 8001470:	462a      	mov	r2, r5
 8001472:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001476:	9500      	str	r5, [sp, #0]
 8001478:	4628      	mov	r0, r5
 800147a:	210a      	movs	r1, #10
 800147c:	f000 fc0c 	bl	8001c98 <eMBInit>
	printf("eStatus: %s\n", eStatus ? "error": "no'error");
 8001480:	4d40      	ldr	r5, [pc, #256]	; (8001584 <main+0x2ac>)
 8001482:	2800      	cmp	r0, #0
 8001484:	bf14      	ite	ne
 8001486:	4621      	movne	r1, r4
 8001488:	4629      	moveq	r1, r5
 800148a:	483f      	ldr	r0, [pc, #252]	; (8001588 <main+0x2b0>)
 800148c:	f002 fc94 	bl	8003db8 <printf>
	/*********************************************************************/
	
	/*	Enable the Modbus Protocol Stack --------------------------------*/
	eStatus = eMBEnable();
 8001490:	f000 fc5e 	bl	8001d50 <eMBEnable>
	printf("eStatus: %s\n", eStatus ? "error": "no'error");
 8001494:	2800      	cmp	r0, #0
 8001496:	bf14      	ite	ne
 8001498:	4621      	movne	r1, r4
 800149a:	4629      	moveq	r1, r5
 800149c:	483a      	ldr	r0, [pc, #232]	; (8001588 <main+0x2b0>)
 800149e:	f002 fc8b 	bl	8003db8 <printf>
		
		//printf("HAL integrated...\n");
		
		//test_Cplusplus();
		
		if(xtNeedPoll == true){
 80014a2:	4c3a      	ldr	r4, [pc, #232]	; (800158c <main+0x2b4>)
 80014a4:	7823      	ldrb	r3, [r4, #0]
 80014a6:	b3b3      	cbz	r3, 8001516 <main+0x23e>
			printf("xtNeedPoll: %s\n", xtNeedPoll ? "true" : "false");
 80014a8:	4839      	ldr	r0, [pc, #228]	; (8001590 <main+0x2b8>)
 80014aa:	493a      	ldr	r1, [pc, #232]	; (8001594 <main+0x2bc>)
 80014ac:	f002 fc84 	bl	8003db8 <printf>
			usRegInputBuf[499]++;
 80014b0:	4b39      	ldr	r3, [pc, #228]	; (8001598 <main+0x2c0>)
 80014b2:	f8b3 23e6 	ldrh.w	r2, [r3, #998]	; 0x3e6
 80014b6:	3201      	adds	r2, #1
 80014b8:	f8a3 23e6 	strh.w	r2, [r3, #998]	; 0x3e6
			usRegInputBuf[500]++;
 80014bc:	f8b3 23e8 	ldrh.w	r2, [r3, #1000]	; 0x3e8
 80014c0:	3201      	adds	r2, #1
 80014c2:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
			usRegInputBuf[501]++;
 80014c6:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 80014ca:	3201      	adds	r2, #1
 80014cc:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
			usRegInputBuf[502]++;
 80014d0:	f8b3 23ec 	ldrh.w	r2, [r3, #1004]	; 0x3ec
 80014d4:	3201      	adds	r2, #1
 80014d6:	f8a3 23ec 	strh.w	r2, [r3, #1004]	; 0x3ec
			usSRegHoldBuf[149]++;
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <main+0x2c4>)
 80014dc:	f8b3 212a 	ldrh.w	r2, [r3, #298]	; 0x12a
 80014e0:	3201      	adds	r2, #1
 80014e2:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
			usSRegHoldBuf[150]++;
 80014e6:	f8b3 212c 	ldrh.w	r2, [r3, #300]	; 0x12c
 80014ea:	3201      	adds	r2, #1
 80014ec:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
			usSRegHoldBuf[151]++;
 80014f0:	f8b3 212e 	ldrh.w	r2, [r3, #302]	; 0x12e
 80014f4:	3201      	adds	r2, #1
 80014f6:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
			usSRegHoldBuf[152]++;
 80014fa:	f8b3 2130 	ldrh.w	r2, [r3, #304]	; 0x130
 80014fe:	3201      	adds	r2, #1
 8001500:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
			ucSCoilBuf[10] = 0b00010001;
 8001504:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <main+0x2c8>)
 8001506:	2211      	movs	r2, #17
 8001508:	729a      	strb	r2, [r3, #10]
			ucSCoilBuf[11] = 0b10010001;
 800150a:	2291      	movs	r2, #145	; 0x91
 800150c:	72da      	strb	r2, [r3, #11]
			ucSCoilBuf[12] = 0b11010001;
 800150e:	22d1      	movs	r2, #209	; 0xd1
 8001510:	731a      	strb	r2, [r3, #12]
			xtNeedPoll = false;
 8001512:	2300      	movs	r3, #0
 8001514:	7023      	strb	r3, [r4, #0]
		}
		
		if(gui_Exec == true){
 8001516:	4c23      	ldr	r4, [pc, #140]	; (80015a4 <main+0x2cc>)
 8001518:	7823      	ldrb	r3, [r4, #0]
 800151a:	b183      	cbz	r3, 800153e <main+0x266>
			eStatus = eMBPoll();
 800151c:	f000 fc2a 	bl	8001d74 <eMBPoll>
			
			printf("eStatus: %s\n", eStatus ? "error": "no'error");
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <main+0x2a8>)
 8001522:	4918      	ldr	r1, [pc, #96]	; (8001584 <main+0x2ac>)
 8001524:	2800      	cmp	r0, #0
 8001526:	bf18      	it	ne
 8001528:	4619      	movne	r1, r3
 800152a:	4817      	ldr	r0, [pc, #92]	; (8001588 <main+0x2b0>)
 800152c:	f002 fc44 	bl	8003db8 <printf>
			printf("SystemCoreClock: %d\n", SystemCoreClock);
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <main+0x2d0>)
 8001532:	481e      	ldr	r0, [pc, #120]	; (80015ac <main+0x2d4>)
 8001534:	6819      	ldr	r1, [r3, #0]
 8001536:	f002 fc3f 	bl	8003db8 <printf>
			
			/*Clear Flag*/
			gui_Exec = false;
 800153a:	2300      	movs	r3, #0
 800153c:	7023      	strb	r3, [r4, #0]
		}
		
		if(Touch_Flagged == true){
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <main+0x2d8>)
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	2a00      	cmp	r2, #0
 8001544:	d0ad      	beq.n	80014a2 <main+0x1ca>
			
			//Uart_Error = HAL_UART_GetError(&UartHandle);
			//printf("Uart_Error: %d\n", Uart_Error);
			
			Touch_Flagged = false;
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	e7aa      	b.n	80014a2 <main+0x1ca>
 800154c:	40023800 	.word	0x40023800
 8001550:	40023c00 	.word	0x40023c00
 8001554:	08009041 	.word	0x08009041
 8001558:	200013dc 	.word	0x200013dc
 800155c:	200013c0 	.word	0x200013c0
 8001560:	2000145c 	.word	0x2000145c
 8001564:	40005400 	.word	0x40005400
 8001568:	00061a80 	.word	0x00061a80
 800156c:	20001380 	.word	0x20001380
 8001570:	40011000 	.word	0x40011000
 8001574:	20001420 	.word	0x20001420
 8001578:	40000c00 	.word	0x40000c00
 800157c:	40020800 	.word	0x40020800
 8001580:	08009032 	.word	0x08009032
 8001584:	08009038 	.word	0x08009038
 8001588:	0800904e 	.word	0x0800904e
 800158c:	20000004 	.word	0x20000004
 8001590:	0800905b 	.word	0x0800905b
 8001594:	0800906b 	.word	0x0800906b
 8001598:	20000e3c 	.word	0x20000e3c
 800159c:	2000098c 	.word	0x2000098c
 80015a0:	2000093a 	.word	0x2000093a
 80015a4:	20000938 	.word	0x20000938
 80015a8:	20000000 	.word	0x20000000
 80015ac:	08009070 	.word	0x08009070
 80015b0:	20000939 	.word	0x20000939

080015b4 <eMBRegInputCB>:
{
	eMBErrorCode    eStatus = MB_ENOERR;
	int             iRegIndex;
	
	if( (usAddress >= REG_INPUT_START)
	&& (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 80015b4:	188b      	adds	r3, r1, r2
eMBRegInputCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs)
{
	eMBErrorCode    eStatus = MB_ENOERR;
	int             iRegIndex;
	
	if( (usAddress >= REG_INPUT_START)
 80015b6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
	* @param	usNRegs
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegInputCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs)
{
 80015ba:	b530      	push	{r4, r5, lr}
	eMBErrorCode    eStatus = MB_ENOERR;
	int             iRegIndex;
	
	if( (usAddress >= REG_INPUT_START)
 80015bc:	dc11      	bgt.n	80015e2 <eMBRegInputCB+0x2e>
 80015be:	2300      	movs	r3, #0
	&& (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
	{
		iRegIndex = (int)(usAddress - usRegInputStart);
		while( usNRegs > 0 )
 80015c0:	4293      	cmp	r3, r2
 80015c2:	f100 0002 	add.w	r0, r0, #2
 80015c6:	d00a      	beq.n	80015de <eMBRegInputCB+0x2a>
 80015c8:	185d      	adds	r5, r3, r1
		{
			*pucRegBuffer++ = (unsigned char)(usRegInputBuf[iRegIndex] >> 8);
 80015ca:	4c07      	ldr	r4, [pc, #28]	; (80015e8 <eMBRegInputCB+0x34>)
 80015cc:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
			*pucRegBuffer++ = (unsigned char)(usRegInputBuf[iRegIndex] & 0xFF);
 80015d0:	f800 4c01 	strb.w	r4, [r0, #-1]
	&& (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
	{
		iRegIndex = (int)(usAddress - usRegInputStart);
		while( usNRegs > 0 )
		{
			*pucRegBuffer++ = (unsigned char)(usRegInputBuf[iRegIndex] >> 8);
 80015d4:	0a25      	lsrs	r5, r4, #8
 80015d6:	f800 5c02 	strb.w	r5, [r0, #-2]
 80015da:	3301      	adds	r3, #1
 80015dc:	e7f0      	b.n	80015c0 <eMBRegInputCB+0xc>
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegInputCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs)
{
	eMBErrorCode    eStatus = MB_ENOERR;
 80015de:	2000      	movs	r0, #0
 80015e0:	bd30      	pop	{r4, r5, pc}
			usNRegs--;
		}
	}
	else
	{
		eStatus = MB_ENOREG;
 80015e2:	2001      	movs	r0, #1
	}
	
	return eStatus;
}
 80015e4:	bd30      	pop	{r4, r5, pc}
 80015e6:	bf00      	nop
 80015e8:	20000e3c 	.word	0x20000e3c

080015ec <eMBRegHoldingCB>:
	* @param	eMode
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegHoldingCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
 80015ec:	b570      	push	{r4, r5, r6, lr}
    REG_HOLDING_START = S_REG_HOLDING_START;
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
    usRegHoldStart = usSRegHoldStart;
	
    /* it already plus one in modbus function method. */
    usAddress--;
 80015ee:	1e4c      	subs	r4, r1, #1
	* @param	eMode
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegHoldingCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
 80015f0:	461d      	mov	r5, r3
    REG_HOLDING_START = S_REG_HOLDING_START;
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
    usRegHoldStart = usSRegHoldStart;
	
    /* it already plus one in modbus function method. */
    usAddress--;
 80015f2:	b2a3      	uxth	r3, r4
	
    if ((usAddress >= REG_HOLDING_START)
	&& (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 80015f4:	189c      	adds	r4, r3, r2
 80015f6:	f5b4 7f16 	cmp.w	r4, #600	; 0x258
 80015fa:	dc2c      	bgt.n	8001656 <eMBRegHoldingCB+0x6a>
    {
        iRegIndex = usAddress - usRegHoldStart;
        switch (eMode)
 80015fc:	b125      	cbz	r5, 8001608 <eMBRegHoldingCB+0x1c>
 80015fe:	2d01      	cmp	r5, #1
 8001600:	d12b      	bne.n	800165a <eMBRegHoldingCB+0x6e>
 8001602:	440a      	add	r2, r1
 8001604:	b292      	uxth	r2, r2
 8001606:	e013      	b.n	8001630 <eMBRegHoldingCB+0x44>
 8001608:	440a      	add	r2, r1
 800160a:	b292      	uxth	r2, r2
 800160c:	1c59      	adds	r1, r3, #1
 800160e:	b289      	uxth	r1, r1
        {
			/* read current register values from the protocol stack. */
			case MB_REG_READ:
            while (usNRegs > 0)
 8001610:	4291      	cmp	r1, r2
 8001612:	f100 0002 	add.w	r0, r0, #2
 8001616:	d020      	beq.n	800165a <eMBRegHoldingCB+0x6e>
            {
                *pucRegBuffer++ = (uint8_t) (pusRegHoldingBuf[iRegIndex] >> 8);
 8001618:	4d11      	ldr	r5, [pc, #68]	; (8001660 <eMBRegHoldingCB+0x74>)
 800161a:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
 800161e:	0a24      	lsrs	r4, r4, #8
 8001620:	f800 4c02 	strb.w	r4, [r0, #-2]
                *pucRegBuffer++ = (uint8_t) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 8001624:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8001628:	f800 3c01 	strb.w	r3, [r0, #-1]
 800162c:	460b      	mov	r3, r1
 800162e:	e7ed      	b.n	800160c <eMBRegHoldingCB+0x20>
 8001630:	1c59      	adds	r1, r3, #1
 8001632:	b289      	uxth	r1, r1
			}
            break;
			
			/* write current register values with new values from the protocol stack. */
			case MB_REG_WRITE:
            while (usNRegs > 0)
 8001634:	4291      	cmp	r1, r2
 8001636:	f100 0002 	add.w	r0, r0, #2
 800163a:	d00e      	beq.n	800165a <eMBRegHoldingCB+0x6e>
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 800163c:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8001640:	4e07      	ldr	r6, [pc, #28]	; (8001660 <eMBRegHoldingCB+0x74>)
 8001642:	0224      	lsls	r4, r4, #8
 8001644:	f826 4013 	strh.w	r4, [r6, r3, lsl #1]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8001648:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800164c:	432c      	orrs	r4, r5
 800164e:	f826 4013 	strh.w	r4, [r6, r3, lsl #1]
 8001652:	460b      	mov	r3, r1
 8001654:	e7ec      	b.n	8001630 <eMBRegHoldingCB+0x44>
            break;
		}
	}
    else
    {
        eStatus = MB_ENOREG;
 8001656:	2001      	movs	r0, #1
 8001658:	bd70      	pop	{r4, r5, r6, pc}
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegHoldingCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
	eMBErrorCode    eStatus = MB_ENOERR;
 800165a:	2000      	movs	r0, #0
    else
    {
        eStatus = MB_ENOREG;
	}
    return eStatus;
}
 800165c:	bd70      	pop	{r4, r5, r6, pc}
 800165e:	bf00      	nop
 8001660:	2000098c 	.word	0x2000098c

08001664 <eMBRegCoilsCB>:
	* @param	eMode
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegCoilsCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
 8001664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t          iRegIndex , iRegBitIndex , iNReg;
    uint8_t *         pucCoilBuf;
    uint16_t          COIL_START;
    uint16_t          COIL_NCOILS;
    uint16_t          usCoilStart;
    iNReg =  (usNCoils / 8) + 1;
 8001668:	ea4f 09d2 	mov.w	r9, r2, lsr #3
	* @param	eMode
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegCoilsCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
 800166c:	460d      	mov	r5, r1
 800166e:	4607      	mov	r7, r0
    uint8_t *         pucCoilBuf;
    uint16_t          COIL_START;
    uint16_t          COIL_NCOILS;
    uint16_t          usCoilStart;
    iNReg =  (usNCoils / 8) + 1;
	printf("usNCoils: %d\n", usNCoils);
 8001670:	4611      	mov	r1, r2
 8001672:	4832      	ldr	r0, [pc, #200]	; (800173c <eMBRegCoilsCB+0xd8>)
    uint16_t          iRegIndex , iRegBitIndex , iNReg;
    uint8_t *         pucCoilBuf;
    uint16_t          COIL_START;
    uint16_t          COIL_NCOILS;
    uint16_t          usCoilStart;
    iNReg =  (usNCoils / 8) + 1;
 8001674:	f109 0801 	add.w	r8, r9, #1
    COIL_START = S_COIL_START;
    COIL_NCOILS = S_COIL_NCOILS;
    usCoilStart = usSCoilStart;
	
    /* it already plus one in modbus function method. */
    usAddress--;
 8001678:	3d01      	subs	r5, #1
	* @param	eMode
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegCoilsCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
 800167a:	4614      	mov	r4, r2
 800167c:	469a      	mov	sl, r3
    COIL_START = S_COIL_START;
    COIL_NCOILS = S_COIL_NCOILS;
    usCoilStart = usSCoilStart;
	
    /* it already plus one in modbus function method. */
    usAddress--;
 800167e:	b2ad      	uxth	r5, r5
    uint8_t *         pucCoilBuf;
    uint16_t          COIL_START;
    uint16_t          COIL_NCOILS;
    uint16_t          usCoilStart;
    iNReg =  (usNCoils / 8) + 1;
	printf("usNCoils: %d\n", usNCoils);
 8001680:	f002 fb9a 	bl	8003db8 <printf>
	printf("iNReg: %d\n", iNReg);
 8001684:	fa1f f188 	uxth.w	r1, r8
 8001688:	482d      	ldr	r0, [pc, #180]	; (8001740 <eMBRegCoilsCB+0xdc>)
 800168a:	f002 fb95 	bl	8003db8 <printf>
    COIL_NCOILS = S_COIL_NCOILS;
    usCoilStart = usSCoilStart;
	
    /* it already plus one in modbus function method. */
    usAddress--;
	printf("usAddress: %d\n", usAddress);
 800168e:	482d      	ldr	r0, [pc, #180]	; (8001744 <eMBRegCoilsCB+0xe0>)
 8001690:	4629      	mov	r1, r5
 8001692:	f002 fb91 	bl	8003db8 <printf>
	
    if( (usAddress >= COIL_START) &&
	(usAddress + usNCoils <= COIL_START + COIL_NCOILS))
 8001696:	192b      	adds	r3, r5, r4
	
    /* it already plus one in modbus function method. */
    usAddress--;
	printf("usAddress: %d\n", usAddress);
	
    if( (usAddress >= COIL_START) &&
 8001698:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800169c:	dc4b      	bgt.n	8001736 <eMBRegCoilsCB+0xd2>
	(usAddress + usNCoils <= COIL_START + COIL_NCOILS))
    {
        iRegIndex = (uint16_t) (usAddress - usCoilStart) / 8;
 800169e:	08ee      	lsrs	r6, r5, #3
        iRegBitIndex = (uint16_t) (usAddress - usCoilStart) % 8;
		printf("iRegIndex: %d\n", iRegIndex);
 80016a0:	4631      	mov	r1, r6
 80016a2:	4829      	ldr	r0, [pc, #164]	; (8001748 <eMBRegCoilsCB+0xe4>)
		printf("iRegBitIndex: %d\n", iRegBitIndex);
 80016a4:	f005 0507 	and.w	r5, r5, #7
    if( (usAddress >= COIL_START) &&
	(usAddress + usNCoils <= COIL_START + COIL_NCOILS))
    {
        iRegIndex = (uint16_t) (usAddress - usCoilStart) / 8;
        iRegBitIndex = (uint16_t) (usAddress - usCoilStart) % 8;
		printf("iRegIndex: %d\n", iRegIndex);
 80016a8:	f002 fb86 	bl	8003db8 <printf>
		printf("iRegBitIndex: %d\n", iRegBitIndex);
 80016ac:	4827      	ldr	r0, [pc, #156]	; (800174c <eMBRegCoilsCB+0xe8>)
 80016ae:	4629      	mov	r1, r5
 80016b0:	f002 fb82 	bl	8003db8 <printf>
        switch (eMode)
 80016b4:	f1ba 0f00 	cmp.w	sl, #0
 80016b8:	d006      	beq.n	80016c8 <eMBRegCoilsCB+0x64>
 80016ba:	f1ba 0f01 	cmp.w	sl, #1
 80016be:	d11c      	bne.n	80016fa <eMBRegCoilsCB+0x96>
 80016c0:	eb09 0b06 	add.w	fp, r9, r6
 80016c4:	46ba      	mov	sl, r7
 80016c6:	e01b      	b.n	8001700 <eMBRegCoilsCB+0x9c>
 80016c8:	44b8      	add	r8, r7
 80016ca:	46b9      	mov	r9, r7
 80016cc:	1bf3      	subs	r3, r6, r7
        {
			/* read current coil values from the protocol stack. */
			case MB_REG_READ:
            while (iNReg > 0)
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 80016ce:	4820      	ldr	r0, [pc, #128]	; (8001750 <eMBRegCoilsCB+0xec>)
 80016d0:	444b      	add	r3, r9
 80016d2:	fa10 f083 	uxtah	r0, r0, r3
 80016d6:	4629      	mov	r1, r5
 80016d8:	2208      	movs	r2, #8
 80016da:	f000 fd8f 	bl	80021fc <xMBUtilGetBits>
 80016de:	b2c0      	uxtb	r0, r0
 80016e0:	f809 0b01 	strb.w	r0, [r9], #1
		printf("iRegBitIndex: %d\n", iRegBitIndex);
        switch (eMode)
        {
			/* read current coil values from the protocol stack. */
			case MB_REG_READ:
            while (iNReg > 0)
 80016e4:	45c1      	cmp	r9, r8
 80016e6:	d1f1      	bne.n	80016cc <eMBRegCoilsCB+0x68>
			}
            pucRegBuffer--;
            /* last coils */
            usNCoils = usNCoils % 8;
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 80016e8:	f004 0407 	and.w	r4, r4, #7
 80016ec:	f1c4 0408 	rsb	r4, r4, #8
 80016f0:	40a0      	lsls	r0, r4
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 80016f2:	b2c0      	uxtb	r0, r0
 80016f4:	4120      	asrs	r0, r4
 80016f6:	f809 0c01 	strb.w	r0, [r9, #-1]
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegCoilsCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
	eMBErrorCode    eStatus = MB_ENOERR;
 80016fa:	2000      	movs	r0, #0
            /* last coils */
            usNCoils = usNCoils % 8;
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
            break;
 80016fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			
            /* write current coil values with new values from the protocol stack. */
			case MB_REG_WRITE:
            while (iNReg > 1)
 8001700:	455e      	cmp	r6, fp
 8001702:	d00d      	beq.n	8001720 <eMBRegCoilsCB+0xbc>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8001704:	4812      	ldr	r0, [pc, #72]	; (8001750 <eMBRegCoilsCB+0xec>)
 8001706:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800170a:	f106 0801 	add.w	r8, r6, #1
 800170e:	4430      	add	r0, r6
 8001710:	fa1f f888 	uxth.w	r8, r8
 8001714:	4629      	mov	r1, r5
 8001716:	2208      	movs	r2, #8
 8001718:	f000 fd48 	bl	80021ac <xMBUtilSetBits>
 800171c:	4646      	mov	r6, r8
 800171e:	e7ef      	b.n	8001700 <eMBRegCoilsCB+0x9c>
                iNReg--;
			}
            /* last coils */
            usNCoils = usNCoils % 8;
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8001720:	f014 0207 	ands.w	r2, r4, #7
 8001724:	d0e9      	beq.n	80016fa <eMBRegCoilsCB+0x96>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8001726:	480a      	ldr	r0, [pc, #40]	; (8001750 <eMBRegCoilsCB+0xec>)
 8001728:	f817 3009 	ldrb.w	r3, [r7, r9]
 800172c:	4430      	add	r0, r6
 800172e:	4629      	mov	r1, r5
 8001730:	f000 fd3c 	bl	80021ac <xMBUtilSetBits>
 8001734:	e7e1      	b.n	80016fa <eMBRegCoilsCB+0x96>
            break;
		}
	}
    else
    {
        eStatus = MB_ENOREG;
 8001736:	2001      	movs	r0, #1
 8001738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800173c:	08009085 	.word	0x08009085
 8001740:	08009093 	.word	0x08009093
 8001744:	0800909e 	.word	0x0800909e
 8001748:	080090ad 	.word	0x080090ad
 800174c:	080090bc 	.word	0x080090bc
 8001750:	2000093a 	.word	0x2000093a

08001754 <eMBRegDiscreteCB>:
{
	( void )pucRegBuffer;
	( void )usAddress;
	( void )usNDiscrete;
	return MB_ENOREG;
}
 8001754:	2001      	movs	r0, #1
 8001756:	4770      	bx	lr

08001758 <__io_putchar>:
/**
	* @brief  Retargets the C library printf function to the USART (GNU)
	* @param  None
	* @retval None
*/
int __io_putchar(int ch){
 8001758:	b510      	push	{r4, lr}
 800175a:	4604      	mov	r4, r0
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART */
	
	Debug_ITMDebugOutputChar(ch); // SWV
 800175c:	b2c0      	uxtb	r0, r0
 800175e:	f7ff fd9b 	bl	8001298 <Debug_ITMDebugOutputChar>
	
	return(ch);
}
 8001762:	4620      	mov	r0, r4
 8001764:	bd10      	pop	{r4, pc}

08001766 <__io_getchar>:
int __io_getchar(void){
	/* Place your implementation of fgetc here */
	/* e.g. read a character from the USART */
	
	return((int)-1);
}
 8001766:	f04f 30ff 	mov.w	r0, #4294967295
 800176a:	4770      	bx	lr

0800176c <assert_failed>:
		*         where the assert_param error has occurred.
		* @param  file: pointer to the source file name
		* @param  line: assert_param error line source number
		* @retval None
	*/
	void assert_failed(uint8_t* file, uint32_t line){
 800176c:	b508      	push	{r3, lr}
 800176e:	4603      	mov	r3, r0
 8001770:	460a      	mov	r2, r1
		printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 8001772:	4802      	ldr	r0, [pc, #8]	; (800177c <assert_failed+0x10>)
 8001774:	4619      	mov	r1, r3
 8001776:	f002 fb1f 	bl	8003db8 <printf>
		
		while(1); /* Infinite loop */
 800177a:	e7fe      	b.n	800177a <assert_failed+0xe>
 800177c:	080090ce 	.word	0x080090ce

08001780 <HAL_TIM_Base_MspInit>:
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <HAL_TIM_Base_MspInit+0x20>)
  *           - Peripheral's GPIO Configuration  
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001782:	b508      	push	{r3, lr}
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 8001784:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001786:	f043 0308 	orr.w	r3, r3, #8
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
  
  /*##-2- Configure the NVIC for TIMx ########################################*/
  /* Set Interrupt Group Priority */ 
  HAL_NVIC_SetPriority(TIMx_IRQn, 4, 0);
 800178c:	2032      	movs	r0, #50	; 0x32
 800178e:	2104      	movs	r1, #4
 8001790:	2200      	movs	r2, #0
 8001792:	f001 fbf1 	bl	8002f78 <HAL_NVIC_SetPriority>
  
  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 8001796:	2032      	movs	r0, #50	; 0x32
}
 8001798:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /*##-2- Configure the NVIC for TIMx ########################################*/
  /* Set Interrupt Group Priority */ 
  HAL_NVIC_SetPriority(TIMx_IRQn, 4, 0);
  
  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 800179c:	f001 bc2e 	b.w	8002ffc <HAL_NVIC_EnableIRQ>
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_UART_MspInit>:
  
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_UART_MspInit+0x60>)
 80017a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017a8:	f042 0201 	orr.w	r2, r2, #1
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80017ac:	b570      	push	{r4, r5, r6, lr}
  
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80017ae:	631a      	str	r2, [r3, #48]	; 0x30
  USARTx_RX_GPIO_CLK_ENABLE();
 80017b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80017b2:	4d15      	ldr	r5, [pc, #84]	; (8001808 <HAL_UART_MspInit+0x64>)
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
  USARTx_RX_GPIO_CLK_ENABLE();
 80017b4:	f042 0201 	orr.w	r2, r2, #1
 80017b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Enable USART2 clock */
  USARTx_CLK_ENABLE(); 
 80017ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80017bc:	b086      	sub	sp, #24
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
  USARTx_RX_GPIO_CLK_ENABLE();
  /* Enable USART2 clock */
  USARTx_CLK_ENABLE(); 
 80017be:	f042 0210 	orr.w	r2, r2, #16
 80017c2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Enable DMA1 clock */
  //DMAx_CLK_ENABLE();   
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80017c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017c8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80017ca:	2401      	movs	r4, #1
  //DMAx_CLK_ENABLE();   
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80017ce:	2607      	movs	r6, #7
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80017d0:	4628      	mov	r0, r5
 80017d2:	a901      	add	r1, sp, #4
  //DMAx_CLK_ENABLE();   
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80017d4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80017d6:	9304      	str	r3, [sp, #16]
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80017d8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80017da:	9605      	str	r6, [sp, #20]
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80017dc:	f002 f924 	bl	8003a28 <HAL_GPIO_Init>
    
  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80017e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
    
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80017e4:	4628      	mov	r0, r5
 80017e6:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
    
  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80017e8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80017ea:	9605      	str	r6, [sp, #20]
    
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80017ec:	f002 f91c 	bl	8003a28 <HAL_GPIO_Init>
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
  //HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 2, 0);   
  //HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
  
  /* NVIC configuration for USART TC interrupt */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 80017f0:	2100      	movs	r1, #0
 80017f2:	4622      	mov	r2, r4
 80017f4:	2025      	movs	r0, #37	; 0x25
 80017f6:	f001 fbbf 	bl	8002f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 80017fa:	2025      	movs	r0, #37	; 0x25
 80017fc:	f001 fbfe 	bl	8002ffc <HAL_NVIC_EnableIRQ>
}
 8001800:	b006      	add	sp, #24
 8001802:	bd70      	pop	{r4, r5, r6, pc}
 8001804:	40023800 	.word	0x40023800
 8001808:	40020000 	.word	0x40020000

0800180c <HAL_I2C_MspInit>:
  *           - DMA configuration for transmission request by peripheral 
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 800180c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8001810:	4c26      	ldr	r4, [pc, #152]	; (80018ac <HAL_I2C_MspInit+0xa0>)
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001812:	4e27      	ldr	r6, [pc, #156]	; (80018b0 <HAL_I2C_MspInit+0xa4>)
  
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8001814:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	6323      	str	r3, [r4, #48]	; 0x30
  I2Cx_SDA_GPIO_CLK_ENABLE();
 800181c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800181e:	f043 0302 	orr.w	r3, r3, #2
 8001822:	6323      	str	r3, [r4, #48]	; 0x30
  /* PORTC-Reset pin bus enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001824:	6b23      	ldr	r3, [r4, #48]	; 0x30
  *           - DMA configuration for transmission request by peripheral 
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 8001826:	b087      	sub	sp, #28
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 8001828:	f04f 0904 	mov.w	r9, #4
  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
  I2Cx_SDA_GPIO_CLK_ENABLE();
  /* PORTC-Reset pin bus enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6323      	str	r3, [r4, #48]	; 0x30

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001832:	2501      	movs	r5, #1


  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8001834:	2312      	movs	r3, #18
  __HAL_RCC_GPIOC_CLK_ENABLE();


  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 8001836:	f04f 0840 	mov.w	r8, #64	; 0x40
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800183a:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800183c:	4630      	mov	r0, r6
 800183e:	eb0d 0109 	add.w	r1, sp, r9


  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8001842:	9302      	str	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();


  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 8001844:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001848:	9704      	str	r7, [sp, #16]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800184a:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 800184c:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001850:	f002 f8ea 	bl	8003a28 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001854:	462a      	mov	r2, r5
 8001856:	4630      	mov	r0, r6
 8001858:	4641      	mov	r1, r8
 800185a:	f002 fa17 	bl	8003c8c <HAL_GPIO_WritePin>

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 800185e:	f44f 7800 	mov.w	r8, #512	; 0x200
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001862:	4630      	mov	r0, r6
 8001864:	eb0d 0109 	add.w	r1, sp, r9
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 8001868:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
 800186c:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001870:	f002 f8da 	bl	8003a28 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001874:	462a      	mov	r2, r5
 8001876:	4630      	mov	r0, r6
 8001878:	4641      	mov	r1, r8
 800187a:	f002 fa07 	bl	8003c8c <HAL_GPIO_WritePin>
  
  /* Init Reset Pin Touch */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800187e:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001880:	4f0c      	ldr	r7, [pc, #48]	; (80018b4 <HAL_I2C_MspInit+0xa8>)
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
  
  /* Init Reset Pin Touch */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
  
  /* Init Reset Pin Touch */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001884:	2608      	movs	r6, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001886:	4638      	mov	r0, r7
 8001888:	eb0d 0109 	add.w	r1, sp, r9
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
  
  /* Init Reset Pin Touch */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800188c:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188e:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001890:	f002 f8ca 	bl	8003a28 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001894:	4638      	mov	r0, r7
 8001896:	4631      	mov	r1, r6
 8001898:	462a      	mov	r2, r5
 800189a:	f002 f9f7 	bl	8003c8c <HAL_GPIO_WritePin>
 
  /*##-3- Enable peripheral Clock ############################################*/
  /* Enable I2C1 clock */
  I2Cx_CLK_ENABLE();
 800189e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a4:	6423      	str	r3, [r4, #64]	; 0x40
  
}
 80018a6:	b007      	add	sp, #28
 80018a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020800 	.word	0x40020800

080018b8 <HAL_SRAM_MspInit>:
	// TODO -> PUT RESET ON GPIO PIN SO WE CAN RESET DISPLAY
	// now reset is on NRST pin on the STM32F4 discovery
	GPIO_InitTypeDef GPIO_InitStructure;

	// Clock Enable FSMC
	__HAL_RCC_FSMC_CLK_ENABLE();
 80018b8:	4b20      	ldr	r3, [pc, #128]	; (800193c <HAL_SRAM_MspInit+0x84>)
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80018ba:	4821      	ldr	r0, [pc, #132]	; (8001940 <HAL_SRAM_MspInit+0x88>)
	// TODO -> PUT RESET ON GPIO PIN SO WE CAN RESET DISPLAY
	// now reset is on NRST pin on the STM32F4 discovery
	GPIO_InitTypeDef GPIO_InitStructure;

	// Clock Enable FSMC
	__HAL_RCC_FSMC_CLK_ENABLE();
 80018bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018be:	f042 0201 	orr.w	r2, r2, #1
/**
  * @brief SRAM init
  * param  handle to sram
  * retval None
  */
void HAL_SRAM_MspInit(SRAM_HandleTypeDef * hsram){
 80018c2:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO -> PUT RESET ON GPIO PIN SO WE CAN RESET DISPLAY
	// now reset is on NRST pin on the STM32F4 discovery
	GPIO_InitTypeDef GPIO_InitStructure;

	// Clock Enable FSMC
	__HAL_RCC_FSMC_CLK_ENABLE();
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38

	// Clock Enable Port-D and Port-E
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80018c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018c8:	f042 0208 	orr.w	r2, r2, #8
 80018cc:	631a      	str	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80018ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d0:	f042 0210 	orr.w	r2, r2, #16
 80018d4:	631a      	str	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
/**
  * @brief SRAM init
  * param  handle to sram
  * retval None
  */
void HAL_SRAM_MspInit(SRAM_HandleTypeDef * hsram){
 80018d8:	b087      	sub	sp, #28
	__HAL_RCC_FSMC_CLK_ENABLE();

	// Clock Enable Port-D and Port-E
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOE_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	f042 0202 	orr.w	r2, r2, #2
 80018de:	631a      	str	r2, [r3, #48]	; 0x30
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80018e0:	2402      	movs	r4, #2
	// PD9=FSMC_D14->DB16
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15;
 80018e2:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80018e6:	2703      	movs	r7, #3
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80018e8:	2600      	movs	r6, #0
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 80018ea:	250c      	movs	r5, #12
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80018ec:	a901      	add	r1, sp, #4
	// PD9=FSMC_D14->DB16
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15;
 80018ee:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80018f0:	9603      	str	r6, [sp, #12]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 80018f2:	9505      	str	r5, [sp, #20]
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80018f4:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80018f6:	9704      	str	r7, [sp, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80018f8:	f002 f896 	bl	8003a28 <HAL_GPIO_Init>
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80018fc:	9603      	str	r6, [sp, #12]
	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin = GPIO_PIN_1;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80018fe:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	// PE11=FSMC_D8->DB10
	// PE12=FSMC_D9->DB11
	// PE13=FSMC_D10->DB12
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8001902:	f64f 7380 	movw	r3, #65408	; 0xff80
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001906:	a901      	add	r1, sp, #4
	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin = GPIO_PIN_1;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001908:	f506 3601 	add.w	r6, r6, #132096	; 0x20400
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800190c:	480d      	ldr	r0, [pc, #52]	; (8001944 <HAL_SRAM_MspInit+0x8c>)
	// PE11=FSMC_D8->DB10
	// PE12=FSMC_D9->DB11
	// PE13=FSMC_D10->DB12
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800190e:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8001910:	9505      	str	r5, [sp, #20]
	// PE12=FSMC_D9->DB11
	// PE13=FSMC_D10->DB12
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001912:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);

	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin = GPIO_PIN_1;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2501      	movs	r5, #1
	// PE13=FSMC_D10->DB12
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8001916:	9704      	str	r7, [sp, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001918:	f002 f886 	bl	8003a28 <HAL_GPIO_Init>
	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin = GPIO_PIN_1;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800191c:	4630      	mov	r0, r6
 800191e:	a901      	add	r1, sp, #4
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);

	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin = GPIO_PIN_1;
 8001920:	9401      	str	r4, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001922:	9502      	str	r5, [sp, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001924:	9404      	str	r4, [sp, #16]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8001926:	9503      	str	r5, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001928:	f002 f87e 	bl	8003a28 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800192c:	4630      	mov	r0, r6
 800192e:	4621      	mov	r1, r4
 8001930:	462a      	mov	r2, r5
 8001932:	f002 f9ab 	bl	8003c8c <HAL_GPIO_WritePin>
 
}
 8001936:	b007      	add	sp, #28
 8001938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40020c00 	.word	0x40020c00
 8001944:	40021000 	.word	0x40021000

08001948 <HAL_MspInit>:
  * @brief  Initializes the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8001948:	4770      	bx	lr

0800194a <_close>:
    }
}

int _close(int file) {
    return -1;
}
 800194a:	f04f 30ff 	mov.w	r0, #4294967295
 800194e:	4770      	bx	lr

08001950 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
    st->st_mode = S_IFCHR;
 8001950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001954:	604b      	str	r3, [r1, #4]
    return 0;
}
 8001956:	2000      	movs	r0, #0
 8001958:	4770      	bx	lr

0800195a <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
    return 1;
}
 800195a:	2001      	movs	r0, #1
 800195c:	4770      	bx	lr
	...

08001960 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
    switch (file){
 8001960:	2802      	cmp	r0, #2
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
    default:
        //errno = ENOTTY;
        errno = EBADF;
 8001962:	bf81      	itttt	hi
 8001964:	4b03      	ldrhi	r3, [pc, #12]	; (8001974 <_isatty+0x14>)
 8001966:	2209      	movhi	r2, #9
        return 0;
 8001968:	2000      	movhi	r0, #0
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
    default:
        //errno = ENOTTY;
        errno = EBADF;
 800196a:	601a      	strhi	r2, [r3, #0]
int _isatty(int file) {
    switch (file){
    case STDOUT_FILENO:
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
 800196c:	bf98      	it	ls
 800196e:	2001      	movls	r0, #1
    default:
        //errno = ENOTTY;
        errno = EBADF;
        return 0;
    }
}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	200015ac 	.word	0x200015ac

08001978 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
    errno = EINVAL;
 8001978:	4b02      	ldr	r3, [pc, #8]	; (8001984 <_kill+0xc>)
 800197a:	2216      	movs	r2, #22
 800197c:	601a      	str	r2, [r3, #0]
    return (-1);
}
 800197e:	f04f 30ff 	mov.w	r0, #4294967295
 8001982:	4770      	bx	lr
 8001984:	200015ac 	.word	0x200015ac

08001988 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
    return 0;
}
 8001988:	2000      	movs	r0, #0
 800198a:	4770      	bx	lr

0800198c <_read>:
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */


int _read(int file, char *ptr, int len) {
 800198c:	b570      	push	{r4, r5, r6, lr}
 800198e:	460e      	mov	r6, r1
 8001990:	4614      	mov	r4, r2
    int n;
    int num = 0;
    switch (file) {
 8001992:	b940      	cbnz	r0, 80019a6 <_read+0x1a>
 8001994:	460d      	mov	r5, r1
 8001996:	1bab      	subs	r3, r5, r6
    case STDIN_FILENO:
        for (n = 0; n < len; n++) {
 8001998:	42a3      	cmp	r3, r4
 800199a:	da0a      	bge.n	80019b2 <_read+0x26>
            *ptr++ = __io_getchar();
 800199c:	f7ff fee3 	bl	8001766 <__io_getchar>
 80019a0:	f805 0b01 	strb.w	r0, [r5], #1
 80019a4:	e7f7      	b.n	8001996 <_read+0xa>
            num++;
        }
        break;
    default:
        errno = EBADF;
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <_read+0x2c>)
 80019a8:	2209      	movs	r2, #9
 80019aa:	601a      	str	r2, [r3, #0]
        return -1;
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	bd70      	pop	{r4, r5, r6, pc}
 80019b2:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
    }
    return num;
}
 80019b6:	bd70      	pop	{r4, r5, r6, pc}
 80019b8:	200015ac 	.word	0x200015ac

080019bc <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
    int n;
    switch (file) {
 80019bc:	3801      	subs	r0, #1
 80019be:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 80019c0:	b570      	push	{r4, r5, r6, lr}
 80019c2:	460e      	mov	r6, r1
 80019c4:	4614      	mov	r4, r2
    int n;
    switch (file) {
 80019c6:	d80a      	bhi.n	80019de <_write+0x22>
 80019c8:	460d      	mov	r5, r1
 80019ca:	1bab      	subs	r3, r5, r6
    case STDOUT_FILENO: /*stdout*/
    case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++) {
 80019cc:	42a3      	cmp	r3, r4
 80019ce:	da04      	bge.n	80019da <_write+0x1e>
					__io_putchar(*ptr++);
 80019d0:	f815 0b01 	ldrb.w	r0, [r5], #1
 80019d4:	f7ff fec0 	bl	8001758 <__io_putchar>
 80019d8:	e7f7      	b.n	80019ca <_write+0xe>
 80019da:	4620      	mov	r0, r4
 80019dc:	bd70      	pop	{r4, r5, r6, pc}
        }
        break;
    default:
        errno = EBADF;
 80019de:	4b03      	ldr	r3, [pc, #12]	; (80019ec <_write+0x30>)
 80019e0:	2209      	movs	r2, #9
 80019e2:	601a      	str	r2, [r3, #0]
        return -1;
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
    }
    return len;
}
 80019e8:	bd70      	pop	{r4, r5, r6, pc}
 80019ea:	bf00      	nop
 80019ec:	200015ac 	.word	0x200015ac

080019f0 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 80019f0:	b508      	push	{r3, lr}
    _write(1, "exit", 4);
 80019f2:	2001      	movs	r0, #1
 80019f4:	4902      	ldr	r1, [pc, #8]	; (8001a00 <_exit+0x10>)
 80019f6:	2204      	movs	r2, #4
 80019f8:	f7ff ffe0 	bl	80019bc <_write>
    while (1) {
        ;
    }
 80019fc:	e7fe      	b.n	80019fc <_exit+0xc>
 80019fe:	bf00      	nop
 8001a00:	080090fb 	.word	0x080090fb

08001a04 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8001a04:	b508      	push	{r3, lr}

    extern char _ebss; // Defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0) {
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <_sbrk+0x38>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	b90a      	cbnz	r2, 8001a10 <_sbrk+0xc>
        heap_end = &_ebss;
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <_sbrk+0x3c>)
 8001a0e:	601a      	str	r2, [r3, #0]
    }
    prev_heap_end = heap_end;
 8001a10:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8001a12:	f3ef 8208 	mrs	r2, MSP

char * stack = (char*) __get_MSP();

     if (heap_end + incr >  stack)
 8001a16:	4418      	add	r0, r3
 8001a18:	4290      	cmp	r0, r2
 8001a1a:	d90a      	bls.n	8001a32 <_sbrk+0x2e>
     {
         _write (STDERR_FILENO, "Heap and stack collision\n", 25);
 8001a1c:	4909      	ldr	r1, [pc, #36]	; (8001a44 <_sbrk+0x40>)
 8001a1e:	2219      	movs	r2, #25
 8001a20:	2002      	movs	r0, #2
 8001a22:	f7ff ffcb 	bl	80019bc <_write>
         errno = ENOMEM;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <_sbrk+0x44>)
 8001a28:	220c      	movs	r2, #12
 8001a2a:	601a      	str	r2, [r3, #0]
         return  (caddr_t) -1;
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a30:	bd08      	pop	{r3, pc}
         //abort ();
     }

    heap_end += incr;
 8001a32:	4a02      	ldr	r2, [pc, #8]	; (8001a3c <_sbrk+0x38>)
 8001a34:	6010      	str	r0, [r2, #0]
    return (caddr_t) prev_heap_end;
 8001a36:	4618      	mov	r0, r3

}
 8001a38:	bd08      	pop	{r3, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200012ec 	.word	0x200012ec
 8001a40:	200015b0 	.word	0x200015b0
 8001a44:	08009100 	.word	0x08009100
 8001a48:	200015ac 	.word	0x200015ac

08001a4c <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 8001a4c:	4b02      	ldr	r3, [pc, #8]	; (8001a58 <xMBPortEventInit+0xc>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 8001a52:	2001      	movs	r0, #1
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	200012f0 	.word	0x200012f0

08001a5c <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 8001a5c:	4a03      	ldr	r2, [pc, #12]	; (8001a6c <xMBPortEventPost+0x10>)
 8001a5e:	2301      	movs	r3, #1
 8001a60:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 8001a62:	4a03      	ldr	r2, [pc, #12]	; (8001a70 <xMBPortEventPost+0x14>)
 8001a64:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	200012f0 	.word	0x200012f0
 8001a70:	200012f1 	.word	0x200012f1

08001a74 <xMBPortEventGet>:
BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 8001a74:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <xMBPortEventGet+0x18>)
 8001a76:	7813      	ldrb	r3, [r2, #0]
 8001a78:	b133      	cbz	r3, 8001a88 <xMBPortEventGet+0x14>
    {
        *eEvent = eQueuedEvent;
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <xMBPortEventGet+0x1c>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	7003      	strb	r3, [r0, #0]
        xEventInQueue = FALSE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	7013      	strb	r3, [r2, #0]
        xEventHappened = TRUE;
 8001a84:	2001      	movs	r0, #1
 8001a86:	4770      	bx	lr
}

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;
 8001a88:	4618      	mov	r0, r3
        *eEvent = eQueuedEvent;
        xEventInQueue = FALSE;
        xEventHappened = TRUE;
    }
    return xEventHappened;
}
 8001a8a:	4770      	bx	lr
 8001a8c:	200012f0 	.word	0x200012f0
 8001a90:	200012f1 	.word	0x200012f1

08001a94 <vMBPortSerialEnable>:
__IO ITStatus UartReady_Transmit = RESET;
__IO ITStatus UartReady_Receive = RESET;

/* ----------------------- Start implementation -----------------------------*/
void vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8001a94:	b570      	push	{r4, r5, r6, lr}
 8001a96:	4c15      	ldr	r4, [pc, #84]	; (8001aec <vMBPortSerialEnable+0x58>)
    if( xRxEnable )
    {
		/* Enable the UART Data Register not empty Interrupt */
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_RXNE);
 8001a98:	6822      	ldr	r2, [r4, #0]
__IO ITStatus UartReady_Transmit = RESET;
__IO ITStatus UartReady_Receive = RESET;

/* ----------------------- Start implementation -----------------------------*/
void vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8001a9a:	460d      	mov	r5, r1
    if( xRxEnable )
    {
		/* Enable the UART Data Register not empty Interrupt */
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_RXNE);
 8001a9c:	68d3      	ldr	r3, [r2, #12]
__IO ITStatus UartReady_Receive = RESET;

/* ----------------------- Start implementation -----------------------------*/
void vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
    if( xRxEnable )
 8001a9e:	b130      	cbz	r0, 8001aae <vMBPortSerialEnable+0x1a>
    {
		/* Enable the UART Data Register not empty Interrupt */
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_RXNE);
 8001aa0:	f043 0320 	orr.w	r3, r3, #32
 8001aa4:	60d3      	str	r3, [r2, #12]
		printf("Receive enabled\n");
 8001aa6:	4812      	ldr	r0, [pc, #72]	; (8001af0 <vMBPortSerialEnable+0x5c>)
 8001aa8:	f002 f9c8 	bl	8003e3c <puts>
 8001aac:	e002      	b.n	8001ab4 <vMBPortSerialEnable+0x20>
    }
    else
    {
		/* Disable the UART Data Register not empty Interrupt */
		__HAL_UART_DISABLE_IT(&UartHandle, UART_IT_RXNE);
 8001aae:	f023 0320 	bic.w	r3, r3, #32
 8001ab2:	60d3      	str	r3, [r2, #12]
    }
    if( xTxEnable )
 8001ab4:	b17d      	cbz	r5, 8001ad6 <vMBPortSerialEnable+0x42>
    {
		/*	Enable DE transmit signal	*/
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	480e      	ldr	r0, [pc, #56]	; (8001af4 <vMBPortSerialEnable+0x60>)
 8001aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001abe:	f002 f8e5 	bl	8003c8c <HAL_GPIO_WritePin>
		/* Enable the UART Transmit data register empty Interrupt */
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_TXE);
 8001ac2:	6822      	ldr	r2, [r4, #0]
 8001ac4:	68d3      	ldr	r3, [r2, #12]
 8001ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aca:	60d3      	str	r3, [r2, #12]
 * xMBPortSerialPutByte( ) to send the character.
 */
static void
prvvUARTTxReadyISR( void )
{
    pxMBFrameCBTransmitterEmpty();
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <vMBPortSerialEnable+0x64>)
		/* Disable the UART Transmit data register empty Interrupt */
		__HAL_UART_DISABLE_IT(&UartHandle, UART_IT_TXE);
		/* Enable the UART Transmit Complete Interrupt */    
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_TC);
    }
}
 8001ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * xMBPortSerialPutByte( ) to send the character.
 */
static void
prvvUARTTxReadyISR( void )
{
    pxMBFrameCBTransmitterEmpty();
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4718      	bx	r3
        prvvUARTTxReadyISR();
    }
    else
    {
		/* Disable the UART Transmit data register empty Interrupt */
		__HAL_UART_DISABLE_IT(&UartHandle, UART_IT_TXE);
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ade:	60da      	str	r2, [r3, #12]
		/* Enable the UART Transmit Complete Interrupt */    
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_TC);
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	bd70      	pop	{r4, r5, r6, pc}
 8001aea:	bf00      	nop
 8001aec:	20001380 	.word	0x20001380
 8001af0:	0800911a 	.word	0x0800911a
 8001af4:	40020800 	.word	0x40020800
 8001af8:	20001498 	.word	0x20001498

08001afc <xMBPortSerialInit>:
	
	//Uart_Error = HAL_UART_GetError(&UartHandle);
	//printf("Uart_Error: %d\n", Uart_Error);

    return bInitialized;
}
 8001afc:	2001      	movs	r0, #1
 8001afe:	4770      	bx	lr

08001b00 <xMBPortSerialPutByte>:
{
	UART_HandleTypeDef *huart;
	
	huart = &UartHandle;
	
	huart->Instance->DR = (uint8_t)ucByte;
 8001b00:	4b02      	ldr	r3, [pc, #8]	; (8001b0c <xMBPortSerialPutByte+0xc>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6058      	str	r0, [r3, #4]
    return TRUE;
}
 8001b06:	2001      	movs	r0, #1
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20001380 	.word	0x20001380

08001b10 <xMBPortSerialGetByte>:
{
	UART_HandleTypeDef *huart;
	
	huart = &UartHandle;
	
	*pucByte = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b10:	4b02      	ldr	r3, [pc, #8]	; (8001b1c <xMBPortSerialGetByte+0xc>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	7003      	strb	r3, [r0, #0]
	
    return TRUE;
}
 8001b18:	2001      	movs	r0, #1
 8001b1a:	4770      	bx	lr
 8001b1c:	20001380 	.word	0x20001380

08001b20 <HAL_UART_ErrorCallback>:
  * @param  UartHandle: UART handle
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle){
 8001b20:	b510      	push	{r4, lr}
 8001b22:	4604      	mov	r4, r0
  /* Transfer error in reception/transmission process */
	printf("USART bus Error\n"); 
 8001b24:	4804      	ldr	r0, [pc, #16]	; (8001b38 <HAL_UART_ErrorCallback+0x18>)
 8001b26:	f002 f989 	bl	8003e3c <puts>
	printf("Uart Error Code: %d\n", UartHandle->ErrorCode);
 8001b2a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001b2c:	4803      	ldr	r0, [pc, #12]	; (8001b3c <HAL_UART_ErrorCallback+0x1c>)
}
 8001b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle){
  /* Transfer error in reception/transmission process */
	printf("USART bus Error\n"); 
	printf("Uart Error Code: %d\n", UartHandle->ErrorCode);
 8001b32:	f002 b941 	b.w	8003db8 <printf>
 8001b36:	bf00      	nop
 8001b38:	08009145 	.word	0x08009145
 8001b3c:	08009155 	.word	0x08009155

08001b40 <USART1_IRQHandler>:
  * @brief  This function handles USARTx interrupt request.
  * @param  None
  * @retval None
  */
void USARTx_IRQHandler(void)
{
 8001b40:	b530      	push	{r4, r5, lr}
	UART_HandleTypeDef *huart;
	//printf("IRQ event\n");
	//HAL_UART_IRQHandler(&UartHandle);
	huart = &UartHandle;
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8001b42:	4c3b      	ldr	r4, [pc, #236]	; (8001c30 <USART1_IRQHandler+0xf0>)
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8001b48:	68da      	ldr	r2, [r3, #12]
	/* UART parity error interrupt occurred ------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8001b4a:	07c9      	lsls	r1, r1, #31
  * @brief  This function handles USARTx interrupt request.
  * @param  None
  * @retval None
  */
void USARTx_IRQHandler(void)
{
 8001b4c:	b085      	sub	sp, #20
	huart = &UartHandle;
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
	/* UART parity error interrupt occurred ------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8001b4e:	d50a      	bpl.n	8001b66 <USART1_IRQHandler+0x26>
 8001b50:	05d2      	lsls	r2, r2, #23
 8001b52:	d508      	bpl.n	8001b66 <USART1_IRQHandler+0x26>
	{
		__HAL_UART_CLEAR_PEFLAG(huart);
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	9200      	str	r2, [sp, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	9200      	str	r2, [sp, #0]
 8001b5c:	9a00      	ldr	r2, [sp, #0]
		
		huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b5e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	63e2      	str	r2, [r4, #60]	; 0x3c
	}
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8001b66:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8001b68:	695a      	ldr	r2, [r3, #20]
	/* UART frame error interrupt occurred -------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8001b6a:	078d      	lsls	r5, r1, #30
 8001b6c:	d50a      	bpl.n	8001b84 <USART1_IRQHandler+0x44>
 8001b6e:	07d0      	lsls	r0, r2, #31
 8001b70:	d508      	bpl.n	8001b84 <USART1_IRQHandler+0x44>
	{
		__HAL_UART_CLEAR_FEFLAG(huart);
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	9201      	str	r2, [sp, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	9201      	str	r2, [sp, #4]
 8001b7a:	9a01      	ldr	r2, [sp, #4]

		huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b7e:	f042 0204 	orr.w	r2, r2, #4
 8001b82:	63e2      	str	r2, [r4, #60]	; 0x3c
	}
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8001b84:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8001b86:	695a      	ldr	r2, [r3, #20]
	/* UART noise error interrupt occurred -------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8001b88:	0749      	lsls	r1, r1, #29
 8001b8a:	d50a      	bpl.n	8001ba2 <USART1_IRQHandler+0x62>
 8001b8c:	07d5      	lsls	r5, r2, #31
 8001b8e:	d508      	bpl.n	8001ba2 <USART1_IRQHandler+0x62>
	{ 
		__HAL_UART_CLEAR_NEFLAG(huart);
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	9202      	str	r2, [sp, #8]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	9202      	str	r2, [sp, #8]
 8001b98:	9a02      	ldr	r2, [sp, #8]

		huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b9a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b9c:	f042 0202 	orr.w	r2, r2, #2
 8001ba0:	63e2      	str	r2, [r4, #60]	; 0x3c
	}
  
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8001ba2:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8001ba4:	695a      	ldr	r2, [r3, #20]
	/* UART Over-Run interrupt occurred ----------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8001ba6:	0708      	lsls	r0, r1, #28
 8001ba8:	d50a      	bpl.n	8001bc0 <USART1_IRQHandler+0x80>
 8001baa:	07d1      	lsls	r1, r2, #31
 8001bac:	d508      	bpl.n	8001bc0 <USART1_IRQHandler+0x80>
	{ 
		__HAL_UART_CLEAR_OREFLAG(huart);
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	9203      	str	r2, [sp, #12]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	9203      	str	r2, [sp, #12]
 8001bb6:	9a03      	ldr	r2, [sp, #12]

		huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001bb8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001bba:	f042 0208 	orr.w	r2, r2, #8
 8001bbe:	63e2      	str	r2, [r4, #60]	; 0x3c
	}
	
	tmp1 = __HAL_UART_GET_FLAG(&UartHandle, UART_FLAG_RXNE);
 8001bc0:	681a      	ldr	r2, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(&UartHandle, UART_IT_RXNE);
 8001bc2:	68db      	ldr	r3, [r3, #12]
	//printf("Flag_RxNE : %s\n", tmp1 ? "SET" : "RESET");
	//printf("IT_RxNE : %s\n", tmp2 ? "SET" : "RESET");
	/* UART in mode Receiver ---------------------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8001bc4:	0692      	lsls	r2, r2, #26
 8001bc6:	d504      	bpl.n	8001bd2 <USART1_IRQHandler+0x92>
 8001bc8:	069d      	lsls	r5, r3, #26
 8001bca:	d502      	bpl.n	8001bd2 <USART1_IRQHandler+0x92>
	{
		//vRxBuffer_Usart[index] = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
		//printf("aRxBuffer[%d]: %d\n", index, vRxBuffer_Usart[index]);
		
		//prvvUARTRxISR();
		pxMBFrameCBByteReceived();
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <USART1_IRQHandler+0xf4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4798      	blx	r3
	}
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8001bd6:	68db      	ldr	r3, [r3, #12]
	/* UART in mode Transmitter ------------------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8001bd8:	0610      	lsls	r0, r2, #24
 8001bda:	d509      	bpl.n	8001bf0 <USART1_IRQHandler+0xb0>
 8001bdc:	0619      	lsls	r1, r3, #24
 8001bde:	d507      	bpl.n	8001bf0 <USART1_IRQHandler+0xb0>
	{
		xtNeedPoll = pxMBFrameCBTransmitterEmpty();
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <USART1_IRQHandler+0xf8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4798      	blx	r3
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <USART1_IRQHandler+0xfc>)
 8001be8:	3000      	adds	r0, #0
 8001bea:	bf18      	it	ne
 8001bec:	2001      	movne	r0, #1
 8001bee:	7018      	strb	r0, [r3, #0]
	}
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8001bf4:	68db      	ldr	r3, [r3, #12]
	/* UART in mode Transmitter end --------------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8001bf6:	0652      	lsls	r2, r2, #25
 8001bf8:	d50d      	bpl.n	8001c16 <USART1_IRQHandler+0xd6>
 8001bfa:	065b      	lsls	r3, r3, #25
 8001bfc:	d50b      	bpl.n	8001c16 <USART1_IRQHandler+0xd6>
	{
		/*	Enable DE receive signal	*/
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	480f      	ldr	r0, [pc, #60]	; (8001c40 <USART1_IRQHandler+0x100>)
 8001c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c06:	f002 f841 	bl	8003c8c <HAL_GPIO_WritePin>
		/* Disable the UART Transmit Complete Interrupt */    
		__HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <USART1_IRQHandler+0xf0>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68d3      	ldr	r3, [r2, #12]
 8001c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c14:	60d3      	str	r3, [r2, #12]
	}
	
	if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c18:	4d05      	ldr	r5, [pc, #20]	; (8001c30 <USART1_IRQHandler+0xf0>)
 8001c1a:	b133      	cbz	r3, 8001c2a <USART1_IRQHandler+0xea>
	{
		HAL_UART_ErrorCallback(huart);
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	f7ff ff7f 	bl	8001b20 <HAL_UART_ErrorCallback>
		printf("Uart_ErrCode: %d\n", huart->ErrorCode);
 8001c22:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8001c24:	4807      	ldr	r0, [pc, #28]	; (8001c44 <USART1_IRQHandler+0x104>)
 8001c26:	f002 f8c7 	bl	8003db8 <printf>
	}
}
 8001c2a:	b005      	add	sp, #20
 8001c2c:	bd30      	pop	{r4, r5, pc}
 8001c2e:	bf00      	nop
 8001c30:	20001380 	.word	0x20001380
 8001c34:	200014a0 	.word	0x200014a0
 8001c38:	20001498 	.word	0x20001498
 8001c3c:	20000004 	.word	0x20000004
 8001c40:	40020800 	.word	0x40020800
 8001c44:	0800916a 	.word	0x0800916a

08001c48 <xMBPortTimersInit>:
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    return TRUE;
}
 8001c48:	2001      	movs	r0, #1
 8001c4a:	4770      	bx	lr

08001c4c <vMBPortTimersEnable>:


void
vMBPortTimersEnable(  )
{
 8001c4c:	b510      	push	{r4, lr}
	HAL_TIM_Base_Stop_IT(&TimHandle);	// Disable Timer and Reset Counter
 8001c4e:	4c06      	ldr	r4, [pc, #24]	; (8001c68 <vMBPortTimersEnable+0x1c>)
 8001c50:	4620      	mov	r0, r4
 8001c52:	f001 fd17 	bl	8003684 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&TimHandle, 0);
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	2200      	movs	r2, #0
	
	HAL_TIM_Base_Start_IT(&TimHandle);	// Enable Timer
 8001c5a:	4620      	mov	r0, r4

void
vMBPortTimersEnable(  )
{
	HAL_TIM_Base_Stop_IT(&TimHandle);	// Disable Timer and Reset Counter
	__HAL_TIM_SET_COUNTER(&TimHandle, 0);
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
	
	HAL_TIM_Base_Start_IT(&TimHandle);	// Enable Timer
}
 8001c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
vMBPortTimersEnable(  )
{
	HAL_TIM_Base_Stop_IT(&TimHandle);	// Disable Timer and Reset Counter
	__HAL_TIM_SET_COUNTER(&TimHandle, 0);
	
	HAL_TIM_Base_Start_IT(&TimHandle);	// Enable Timer
 8001c62:	f001 bcc1 	b.w	80035e8 <HAL_TIM_Base_Start_IT>
 8001c66:	bf00      	nop
 8001c68:	20001420 	.word	0x20001420

08001c6c <vMBPortTimersDisable>:
}

void
vMBPortTimersDisable(  )
{
	HAL_TIM_Base_Stop_IT(&TimHandle);		// Disable Timer and Reset Counter
 8001c6c:	4801      	ldr	r0, [pc, #4]	; (8001c74 <vMBPortTimersDisable+0x8>)
 8001c6e:	f001 bd09 	b.w	8003684 <HAL_TIM_Base_Stop_IT>
 8001c72:	bf00      	nop
 8001c74:	20001420 	.word	0x20001420

08001c78 <TIM5_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
	HAL_TIM_IRQHandler(&TimHandle);
 8001c78:	4801      	ldr	r0, [pc, #4]	; (8001c80 <TIM5_IRQHandler+0x8>)
 8001c7a:	f001 bd5f 	b.w	800373c <HAL_TIM_IRQHandler>
 8001c7e:	bf00      	nop
 8001c80:	20001420 	.word	0x20001420

08001c84 <HAL_TIM_PeriodElapsedCallback>:
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	//counter_val = __HAL_TIM_GET_COUNTER(&TimHandle);
	//printf("Counter at interrupt: %d\n", counter_val);
	pxMBPortCBTimerExpired();
 8001c84:	4b01      	ldr	r3, [pc, #4]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4718      	bx	r3
 8001c8a:	bf00      	nop
 8001c8c:	2000149c 	.word	0x2000149c

08001c90 <EnterCriticalSection>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
 8001c92:	4770      	bx	lr

08001c94 <ExitCriticalSection>:
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001c94:	b662      	cpsie	i
 8001c96:	4770      	bx	lr

08001c98 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8001c98:	b538      	push	{r3, r4, r5, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8001c9a:	1e4c      	subs	r4, r1, #1
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8001c9c:	b2e4      	uxtb	r4, r4
 8001c9e:	2cf6      	cmp	r4, #246	; 0xf6
 8001ca0:	d82c      	bhi.n	8001cfc <eMBInit+0x64>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8001ca2:	4c19      	ldr	r4, [pc, #100]	; (8001d08 <eMBInit+0x70>)
 8001ca4:	7021      	strb	r1, [r4, #0]

        switch ( eMode )
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	d128      	bne.n	8001cfc <eMBInit+0x64>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8001caa:	4c18      	ldr	r4, [pc, #96]	; (8001d0c <eMBInit+0x74>)
 8001cac:	4d18      	ldr	r5, [pc, #96]	; (8001d10 <eMBInit+0x78>)
 8001cae:	6025      	str	r5, [r4, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8001cb0:	4c18      	ldr	r4, [pc, #96]	; (8001d14 <eMBInit+0x7c>)
 8001cb2:	4d19      	ldr	r5, [pc, #100]	; (8001d18 <eMBInit+0x80>)
 8001cb4:	6025      	str	r5, [r4, #0]
            peMBFrameSendCur = eMBRTUSend;
 8001cb6:	4c19      	ldr	r4, [pc, #100]	; (8001d1c <eMBInit+0x84>)
 8001cb8:	4d19      	ldr	r5, [pc, #100]	; (8001d20 <eMBInit+0x88>)
 8001cba:	6025      	str	r5, [r4, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8001cbc:	4c19      	ldr	r4, [pc, #100]	; (8001d24 <eMBInit+0x8c>)
 8001cbe:	4d1a      	ldr	r5, [pc, #104]	; (8001d28 <eMBInit+0x90>)
 8001cc0:	6025      	str	r5, [r4, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8001cc2:	4c1a      	ldr	r4, [pc, #104]	; (8001d2c <eMBInit+0x94>)
 8001cc4:	6020      	str	r0, [r4, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8001cc6:	481a      	ldr	r0, [pc, #104]	; (8001d30 <eMBInit+0x98>)
 8001cc8:	4c1a      	ldr	r4, [pc, #104]	; (8001d34 <eMBInit+0x9c>)
 8001cca:	6004      	str	r4, [r0, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8001ccc:	481a      	ldr	r0, [pc, #104]	; (8001d38 <eMBInit+0xa0>)
 8001cce:	4c1b      	ldr	r4, [pc, #108]	; (8001d3c <eMBInit+0xa4>)
 8001cd0:	6004      	str	r4, [r0, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8001cd2:	481b      	ldr	r0, [pc, #108]	; (8001d40 <eMBInit+0xa8>)
 8001cd4:	4c1b      	ldr	r4, [pc, #108]	; (8001d44 <eMBInit+0xac>)
 8001cd6:	6004      	str	r4, [r0, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8001cd8:	4608      	mov	r0, r1
 8001cda:	4611      	mov	r1, r2
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001ce2:	f000 f8c5 	bl	8001e70 <eMBRTUInit>
#endif
        default:
            eStatus = MB_EINVAL;
        }

        if( eStatus == MB_ENOERR )
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	b958      	cbnz	r0, 8001d02 <eMBInit+0x6a>
        {
            if( !xMBPortEventInit(  ) )
 8001cea:	f7ff feaf 	bl	8001a4c <xMBPortEventInit>
 8001cee:	b138      	cbz	r0, 8001d00 <eMBInit+0x68>
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <eMBInit+0xb0>)
 8001cf2:	701c      	strb	r4, [r3, #0]
                eMBState = STATE_DISABLED;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <eMBInit+0xb4>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
 8001cfa:	e002      	b.n	8001d02 <eMBInit+0x6a>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8001cfc:	2402      	movs	r4, #2
 8001cfe:	e000      	b.n	8001d02 <eMBInit+0x6a>
        if( eStatus == MB_ENOERR )
        {
            if( !xMBPortEventInit(  ) )
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8001d00:	2403      	movs	r4, #3
                eMBState = STATE_DISABLED;
            }
        }
    }
    return eStatus;
}
 8001d02:	4620      	mov	r0, r4
 8001d04:	bd38      	pop	{r3, r4, r5, pc}
 8001d06:	bf00      	nop
 8001d08:	20001310 	.word	0x20001310
 8001d0c:	20001300 	.word	0x20001300
 8001d10:	08001ebd 	.word	0x08001ebd
 8001d14:	200012f4 	.word	0x200012f4
 8001d18:	08001ee1 	.word	0x08001ee1
 8001d1c:	20001304 	.word	0x20001304
 8001d20:	08001f71 	.word	0x08001f71
 8001d24:	200012fc 	.word	0x200012fc
 8001d28:	08001efd 	.word	0x08001efd
 8001d2c:	20001314 	.word	0x20001314
 8001d30:	200014a0 	.word	0x200014a0
 8001d34:	08001ff9 	.word	0x08001ff9
 8001d38:	20001498 	.word	0x20001498
 8001d3c:	0800208d 	.word	0x0800208d
 8001d40:	2000149c 	.word	0x2000149c
 8001d44:	08002119 	.word	0x08002119
 8001d48:	20001308 	.word	0x20001308
 8001d4c:	20000088 	.word	0x20000088

08001d50 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8001d50:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 8001d52:	4c06      	ldr	r4, [pc, #24]	; (8001d6c <eMBEnable+0x1c>)
 8001d54:	7823      	ldrb	r3, [r4, #0]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d105      	bne.n	8001d66 <eMBEnable+0x16>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <eMBEnable+0x20>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8001d60:	2000      	movs	r0, #0
 8001d62:	7020      	strb	r0, [r4, #0]
 8001d64:	bd10      	pop	{r4, pc}
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8001d66:	2006      	movs	r0, #6
    }
    return eStatus;
}
 8001d68:	bd10      	pop	{r4, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000088 	.word	0x20000088
 8001d70:	20001300 	.word	0x20001300

08001d74 <eMBPoll>:
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8001d74:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <eMBPoll+0xd0>)
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8001d76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8001d7a:	781c      	ldrb	r4, [r3, #0]
 8001d7c:	2c00      	cmp	r4, #0
 8001d7e:	d15b      	bne.n	8001e38 <eMBPoll+0xc4>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8001d80:	f10d 0007 	add.w	r0, sp, #7
 8001d84:	f7ff fe76 	bl	8001a74 <xMBPortEventGet>
 8001d88:	2801      	cmp	r0, #1
 8001d8a:	4607      	mov	r7, r0
 8001d8c:	d152      	bne.n	8001e34 <eMBPoll+0xc0>
    {
		printf("Event %d Happened:\n", eEvent);
 8001d8e:	482e      	ldr	r0, [pc, #184]	; (8001e48 <eMBPoll+0xd4>)
 8001d90:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001d94:	f002 f810 	bl	8003db8 <printf>
        switch ( eEvent )
 8001d98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d00c      	beq.n	8001dba <eMBPoll+0x46>
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d14b      	bne.n	8001e3c <eMBPoll+0xc8>
            }
            break;

        case EV_EXECUTE:
			//printf("ucMBFrame[%d]: %d\n", MB_PDU_FUNC_OFF, ucMBFrame[MB_PDU_FUNC_OFF]);
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8001da4:	4e29      	ldr	r6, [pc, #164]	; (8001e4c <eMBPoll+0xd8>)
 8001da6:	4a2a      	ldr	r2, [pc, #168]	; (8001e50 <eMBPoll+0xdc>)
 8001da8:	6830      	ldr	r0, [r6, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8001daa:	4d2a      	ldr	r5, [pc, #168]	; (8001e54 <eMBPoll+0xe0>)
            }
            break;

        case EV_EXECUTE:
			//printf("ucMBFrame[%d]: %d\n", MB_PDU_FUNC_OFF, ucMBFrame[MB_PDU_FUNC_OFF]);
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8001dac:	7801      	ldrb	r1, [r0, #0]
 8001dae:	7011      	strb	r1, [r2, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8001db0:	4623      	mov	r3, r4
            break;

        case EV_EXECUTE:
			//printf("ucMBFrame[%d]: %d\n", MB_PDU_FUNC_OFF, ucMBFrame[MB_PDU_FUNC_OFF]);
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
 8001db2:	702f      	strb	r7, [r5, #0]
 8001db4:	4634      	mov	r4, r6
 8001db6:	4690      	mov	r8, r2
 8001db8:	e016      	b.n	8001de8 <eMBPoll+0x74>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8001dba:	4c27      	ldr	r4, [pc, #156]	; (8001e58 <eMBPoll+0xe4>)
 8001dbc:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <eMBPoll+0xe8>)
 8001dbe:	4923      	ldr	r1, [pc, #140]	; (8001e4c <eMBPoll+0xd8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <eMBPoll+0xec>)
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	4798      	blx	r3
			//printf("ucMBFrame[%d]: %d\n", MB_PDU_FUNC_OFF, ucMBFrame[MB_PDU_FUNC_OFF]);
			//printf("ucMBFrame[%d]: %d\n", 1, ucMBFrame[1]);
			//printf("ucMBFrame[%d]: %d\n", 2, ucMBFrame[2]);
			//printf("ucMBFrame[%d]: %d\n", 3, ucMBFrame[3]);
			//printf("ucMBFrame[%d]: %d\n", 4, ucMBFrame[4]);
            if( eStatus == MB_ENOERR )
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	d133      	bne.n	8001e34 <eMBPoll+0xc0>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8001dcc:	4a25      	ldr	r2, [pc, #148]	; (8001e64 <eMBPoll+0xf0>)
 8001dce:	7823      	ldrb	r3, [r4, #0]
 8001dd0:	7812      	ldrb	r2, [r2, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <eMBPoll+0x66>
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d12c      	bne.n	8001e34 <eMBPoll+0xc0>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8001dda:	2002      	movs	r0, #2
 8001ddc:	f7ff fe3e 	bl	8001a5c <xMBPortEventPost>
 8001de0:	e028      	b.n	8001e34 <eMBPoll+0xc0>

        case EV_EXECUTE:
			//printf("ucMBFrame[%d]: %d\n", MB_PDU_FUNC_OFF, ucMBFrame[MB_PDU_FUNC_OFF]);
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8001de2:	3301      	adds	r3, #1
 8001de4:	2b10      	cmp	r3, #16
 8001de6:	d00b      	beq.n	8001e00 <eMBPoll+0x8c>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8001de8:	4e1f      	ldr	r6, [pc, #124]	; (8001e68 <eMBPoll+0xf4>)
 8001dea:	f816 7033 	ldrb.w	r7, [r6, r3, lsl #3]
 8001dee:	00da      	lsls	r2, r3, #3
 8001df0:	b137      	cbz	r7, 8001e00 <eMBPoll+0x8c>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8001df2:	428f      	cmp	r7, r1
 8001df4:	d1f5      	bne.n	8001de2 <eMBPoll+0x6e>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8001df6:	18b3      	adds	r3, r6, r2
 8001df8:	4919      	ldr	r1, [pc, #100]	; (8001e60 <eMBPoll+0xec>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4798      	blx	r3
 8001dfe:	7028      	strb	r0, [r5, #0]
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8001e00:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <eMBPoll+0xe4>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	b1b3      	cbz	r3, 8001e34 <eMBPoll+0xc0>
            {
                if( eException != MB_EX_NONE )
 8001e06:	782a      	ldrb	r2, [r5, #0]
 8001e08:	4d15      	ldr	r5, [pc, #84]	; (8001e60 <eMBPoll+0xec>)
 8001e0a:	b162      	cbz	r2, 8001e26 <eMBPoll+0xb2>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	802b      	strh	r3, [r5, #0]
 8001e10:	f898 3000 	ldrb.w	r3, [r8]
 8001e14:	6821      	ldr	r1, [r4, #0]
 8001e16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e1a:	700b      	strb	r3, [r1, #0]
                    ucMBFrame[usLength++] = eException;
 8001e1c:	882b      	ldrh	r3, [r5, #0]
 8001e1e:	6821      	ldr	r1, [r4, #0]
 8001e20:	1c58      	adds	r0, r3, #1
 8001e22:	8028      	strh	r0, [r5, #0]
 8001e24:	54ca      	strb	r2, [r1, r3]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8001e26:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <eMBPoll+0xf0>)
 8001e28:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <eMBPoll+0xf8>)
 8001e2a:	7810      	ldrb	r0, [r2, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6821      	ldr	r1, [r4, #0]
 8001e30:	882a      	ldrh	r2, [r5, #0]
 8001e32:	4798      	blx	r3

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 8001e34:	2000      	movs	r0, #0
 8001e36:	e002      	b.n	8001e3e <eMBPoll+0xca>
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    {
        return MB_EILLSTATE;
 8001e38:	2006      	movs	r0, #6
 8001e3a:	e000      	b.n	8001e3e <eMBPoll+0xca>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 8001e3c:	4620      	mov	r0, r4
}
 8001e3e:	b002      	add	sp, #8
 8001e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e44:	20000088 	.word	0x20000088
 8001e48:	0800917c 	.word	0x0800917c
 8001e4c:	2000130c 	.word	0x2000130c
 8001e50:	20001318 	.word	0x20001318
 8001e54:	2000130a 	.word	0x2000130a
 8001e58:	20001309 	.word	0x20001309
 8001e5c:	200012fc 	.word	0x200012fc
 8001e60:	200012f8 	.word	0x200012f8
 8001e64:	20001310 	.word	0x20001310
 8001e68:	20000008 	.word	0x20000008
 8001e6c:	20001304 	.word	0x20001304

08001e70 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8001e70:	b570      	push	{r4, r5, r6, lr}
 8001e72:	460e      	mov	r6, r1
 8001e74:	4614      	mov	r4, r2
 8001e76:	461d      	mov	r5, r3
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8001e78:	f7ff ff0a 	bl	8001c90 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8001e7c:	4630      	mov	r0, r6
 8001e7e:	4621      	mov	r1, r4
 8001e80:	2208      	movs	r2, #8
 8001e82:	462b      	mov	r3, r5
 8001e84:	f7ff fe3a 	bl	8001afc <xMBPortSerialInit>
 8001e88:	2801      	cmp	r0, #1
 8001e8a:	d10f      	bne.n	8001eac <eMBRTUInit+0x3c>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8001e8c:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8001e90:	bf97      	itett	ls
 8001e92:	4809      	ldrls	r0, [pc, #36]	; (8001eb8 <eMBRTUInit+0x48>)
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8001e94:	2023      	movhi	r0, #35	; 0x23
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8001e96:	0064      	lslls	r4, r4, #1
 8001e98:	fbb0 f0f4 	udivls	r0, r0, r4
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8001e9c:	b280      	uxth	r0, r0
 8001e9e:	f7ff fed3 	bl	8001c48 <xMBPortTimersInit>
 8001ea2:	2801      	cmp	r0, #1
        {
            eStatus = MB_EPORTERR;
 8001ea4:	bf0c      	ite	eq
 8001ea6:	2400      	moveq	r4, #0
 8001ea8:	2403      	movne	r4, #3
 8001eaa:	e000      	b.n	8001eae <eMBRTUInit+0x3e>
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
    {
        eStatus = MB_EPORTERR;
 8001eac:	2403      	movs	r4, #3
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8001eae:	f7ff fef1 	bl	8001c94 <ExitCriticalSection>

    return eStatus;
}
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	bd70      	pop	{r4, r5, r6, pc}
 8001eb6:	bf00      	nop
 8001eb8:	00177fa0 	.word	0x00177fa0

08001ebc <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8001ebc:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 8001ebe:	f7ff fee7 	bl	8001c90 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <eMBRTUStart+0x20>)
 8001ec4:	2100      	movs	r1, #0
    vMBPortSerialEnable( TRUE, FALSE );
 8001ec6:	2001      	movs	r0, #1
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8001ec8:	7019      	strb	r1, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8001eca:	f7ff fde3 	bl	8001a94 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8001ece:	f7ff febd 	bl	8001c4c <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
}
 8001ed2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     */
    eRcvState = STATE_RX_INIT;
    vMBPortSerialEnable( TRUE, FALSE );
    vMBPortTimersEnable(  );

    EXIT_CRITICAL_SECTION(  );
 8001ed6:	f7ff bedd 	b.w	8001c94 <ExitCriticalSection>
 8001eda:	bf00      	nop
 8001edc:	20001325 	.word	0x20001325

08001ee0 <eMBRTUStop>:
}

void
eMBRTUStop( void )
{
 8001ee0:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 8001ee2:	f7ff fed5 	bl	8001c90 <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	4601      	mov	r1, r0
 8001eea:	f7ff fdd3 	bl	8001a94 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8001eee:	f7ff febd 	bl	8001c6c <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
}
 8001ef2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
eMBRTUStop( void )
{
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
    vMBPortTimersDisable(  );
    EXIT_CRITICAL_SECTION(  );
 8001ef6:	f7ff becd 	b.w	8001c94 <ExitCriticalSection>
	...

08001efc <eMBRTUReceive>:
}

eMBErrorCode
eMBRTUReceive(UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength)
{
 8001efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION();
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8001f00:	4d16      	ldr	r5, [pc, #88]	; (8001f5c <eMBRTUReceive+0x60>)
    EXIT_CRITICAL_SECTION(  );
}

eMBErrorCode
eMBRTUReceive(UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength)
{
 8001f02:	4680      	mov	r8, r0
 8001f04:	460e      	mov	r6, r1
 8001f06:	4617      	mov	r7, r2
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION();
 8001f08:	f7ff fec2 	bl	8001c90 <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8001f0c:	882b      	ldrh	r3, [r5, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	2bff      	cmp	r3, #255	; 0xff
 8001f12:	d905      	bls.n	8001f20 <eMBRTUReceive+0x24>
 8001f14:	4812      	ldr	r0, [pc, #72]	; (8001f60 <eMBRTUReceive+0x64>)
 8001f16:	4a13      	ldr	r2, [pc, #76]	; (8001f64 <eMBRTUReceive+0x68>)
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <eMBRTUReceive+0x6c>)
 8001f1a:	219d      	movs	r1, #157	; 0x9d
 8001f1c:	f001 ff1a 	bl	8003d54 <__assert_func>
	//printf("ucRTUBuf[%d]: %d\n", usRcvBufferPos, ucRTUBuf[usRcvBufferPos]);

    /* Length and CRC check */
    if( (usRcvBufferPos >= MB_SER_PDU_SIZE_MIN)
 8001f20:	882b      	ldrh	r3, [r5, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d801      	bhi.n	8001f2c <eMBRTUReceive+0x30>
        *pucFrame = (UCHAR *)&ucRTUBuf[MB_SER_PDU_PDU_OFF];
        xFrameReceived = TRUE;
    }
    else
    {
        eStatus = MB_EIO;
 8001f28:	2405      	movs	r4, #5
 8001f2a:	e011      	b.n	8001f50 <eMBRTUReceive+0x54>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
	//printf("ucRTUBuf[%d]: %d\n", usRcvBufferPos, ucRTUBuf[usRcvBufferPos]);

    /* Length and CRC check */
    if( (usRcvBufferPos >= MB_SER_PDU_SIZE_MIN)
        && (usMBCRC16((UCHAR *)ucRTUBuf, usRcvBufferPos) == 0))
 8001f2c:	8829      	ldrh	r1, [r5, #0]
 8001f2e:	4c0f      	ldr	r4, [pc, #60]	; (8001f6c <eMBRTUReceive+0x70>)
 8001f30:	b289      	uxth	r1, r1
 8001f32:	4620      	mov	r0, r4
 8001f34:	f000 f920 	bl	8002178 <usMBCRC16>
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	d1f5      	bne.n	8001f28 <eMBRTUReceive+0x2c>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
		//printf("ucRTUBuf[%d]: %d\n", MB_SER_PDU_ADDR_OFF, ucRTUBuf[MB_SER_PDU_ADDR_OFF]);
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8001f3c:	4623      	mov	r3, r4

eMBErrorCode
eMBRTUReceive(UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength)
{
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;
 8001f3e:	4604      	mov	r4, r0
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
		//printf("ucRTUBuf[%d]: %d\n", MB_SER_PDU_ADDR_OFF, ucRTUBuf[MB_SER_PDU_ADDR_OFF]);
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8001f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f44:	f888 2000 	strb.w	r2, [r8]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8001f48:	882a      	ldrh	r2, [r5, #0]
 8001f4a:	3a03      	subs	r2, #3
 8001f4c:	803a      	strh	r2, [r7, #0]

        /* Return the start of the Modbus PDU to the caller. */
		//printf("ucRTUBuf[%d]: %d\n", MB_SER_PDU_PDU_OFF, ucRTUBuf[MB_SER_PDU_PDU_OFF]);
        *pucFrame = (UCHAR *)&ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8001f4e:	6033      	str	r3, [r6, #0]
    else
    {
        eStatus = MB_EIO;
    }

    EXIT_CRITICAL_SECTION();
 8001f50:	f7ff fea0 	bl	8001c94 <ExitCriticalSection>
    return eStatus;
}
 8001f54:	4620      	mov	r0, r4
 8001f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20001322 	.word	0x20001322
 8001f60:	08009190 	.word	0x08009190
 8001f64:	08009273 	.word	0x08009273
 8001f68:	080091a3 	.word	0x080091a3
 8001f6c:	200014ac 	.word	0x200014ac

08001f70 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8001f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f74:	4680      	mov	r8, r0
 8001f76:	460e      	mov	r6, r1
 8001f78:	4617      	mov	r7, r2
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION();
 8001f7a:	f7ff fe89 	bl	8001c90 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <eMBRTUSend+0x74>)
 8001f80:	781d      	ldrb	r5, [r3, #0]
 8001f82:	b2ed      	uxtb	r5, r5
 8001f84:	2d01      	cmp	r5, #1
 8001f86:	d127      	bne.n	8001fd8 <eMBRTUSend+0x68>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
        usSndBufferCount = 1;
 8001f88:	4c17      	ldr	r4, [pc, #92]	; (8001fe8 <eMBRTUSend+0x78>)
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8001f8a:	4b18      	ldr	r3, [pc, #96]	; (8001fec <eMBRTUSend+0x7c>)
        usSndBufferCount = 1;
 8001f8c:	8025      	strh	r5, [r4, #0]
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8001f8e:	1e70      	subs	r0, r6, #1
        usSndBufferCount = 1;

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8001f90:	f806 8c01 	strb.w	r8, [r6, #-1]
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8001f94:	6018      	str	r0, [r3, #0]
        usSndBufferCount = 1;

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
        usSndBufferCount += usLength;
 8001f96:	8823      	ldrh	r3, [r4, #0]
 8001f98:	fa17 f283 	uxtah	r2, r7, r3
 8001f9c:	b292      	uxth	r2, r2
 8001f9e:	8022      	strh	r2, [r4, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8001fa0:	8821      	ldrh	r1, [r4, #0]
 8001fa2:	b289      	uxth	r1, r1
 8001fa4:	f000 f8e8 	bl	8002178 <usMBCRC16>
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8001fa8:	8823      	ldrh	r3, [r4, #0]
 8001faa:	4911      	ldr	r1, [pc, #68]	; (8001ff0 <eMBRTUSend+0x80>)
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	8022      	strh	r2, [r4, #0]
 8001fb4:	b2c2      	uxtb	r2, r0
 8001fb6:	54ca      	strb	r2, [r1, r3]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8001fb8:	8823      	ldrh	r3, [r4, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	b292      	uxth	r2, r2
 8001fc0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001fc4:	8022      	strh	r2, [r4, #0]
 8001fc6:	54c8      	strb	r0, [r1, r3]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <eMBRTUSend+0x84>)
        vMBPortSerialEnable( FALSE, TRUE );
 8001fca:	2000      	movs	r0, #0
 8001fcc:	4629      	mov	r1, r5
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8001fce:	701d      	strb	r5, [r3, #0]
}

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
 8001fd0:	2400      	movs	r4, #0
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
        vMBPortSerialEnable( FALSE, TRUE );
 8001fd2:	f7ff fd5f 	bl	8001a94 <vMBPortSerialEnable>
 8001fd6:	e000      	b.n	8001fda <eMBRTUSend+0x6a>
    }
    else
    {
        eStatus = MB_EIO;
 8001fd8:	2405      	movs	r4, #5
    }
    EXIT_CRITICAL_SECTION();
 8001fda:	f7ff fe5b 	bl	8001c94 <ExitCriticalSection>
    return eStatus;
}
 8001fde:	4620      	mov	r0, r4
 8001fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fe4:	20001325 	.word	0x20001325
 8001fe8:	20001320 	.word	0x20001320
 8001fec:	2000131c 	.word	0x2000131c
 8001ff0:	200014ac 	.word	0x200014ac
 8001ff4:	20001324 	.word	0x20001324

08001ff8 <xMBRTUReceiveFSM>:
xMBRTUReceiveFSM( void )
{
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <xMBRTUReceiveFSM+0x78>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
    return eStatus;
}

BOOL
xMBRTUReceiveFSM( void )
{
 8001ffc:	b507      	push	{r0, r1, r2, lr}
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8001ffe:	b12b      	cbz	r3, 800200c <xMBRTUReceiveFSM+0x14>
 8002000:	481c      	ldr	r0, [pc, #112]	; (8002074 <xMBRTUReceiveFSM+0x7c>)
 8002002:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <xMBRTUReceiveFSM+0x80>)
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <xMBRTUReceiveFSM+0x84>)
 8002006:	21ea      	movs	r1, #234	; 0xea
 8002008:	f001 fea4 	bl	8003d54 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800200c:	f10d 0007 	add.w	r0, sp, #7
 8002010:	f7ff fd7e 	bl	8001b10 <xMBPortSerialGetByte>
    switch ( eRcvState )
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <xMBRTUReceiveFSM+0x88>)
 8002016:	781a      	ldrb	r2, [r3, #0]
 8002018:	2a03      	cmp	r2, #3
 800201a:	d824      	bhi.n	8002066 <xMBRTUReceiveFSM+0x6e>
 800201c:	e8df f002 	tbb	[pc, r2]
 8002020:	21100221 	.word	0x21100221
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 8002024:	4917      	ldr	r1, [pc, #92]	; (8002084 <xMBRTUReceiveFSM+0x8c>)
 8002026:	2200      	movs	r2, #0
 8002028:	800a      	strh	r2, [r1, #0]

        ucRTUBuf[usRcvBufferPos++] = ucByte;
 800202a:	880a      	ldrh	r2, [r1, #0]
 800202c:	b292      	uxth	r2, r2
 800202e:	1c50      	adds	r0, r2, #1
 8002030:	b280      	uxth	r0, r0
 8002032:	8008      	strh	r0, [r1, #0]
 8002034:	4914      	ldr	r1, [pc, #80]	; (8002088 <xMBRTUReceiveFSM+0x90>)
 8002036:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800203a:	5488      	strb	r0, [r1, r2]
        eRcvState = STATE_RX_RCV;
 800203c:	2202      	movs	r2, #2
 800203e:	e00f      	b.n	8002060 <xMBRTUReceiveFSM+0x68>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8002040:	4a10      	ldr	r2, [pc, #64]	; (8002084 <xMBRTUReceiveFSM+0x8c>)
 8002042:	8811      	ldrh	r1, [r2, #0]
 8002044:	b289      	uxth	r1, r1
 8002046:	29ff      	cmp	r1, #255	; 0xff
 8002048:	d809      	bhi.n	800205e <xMBRTUReceiveFSM+0x66>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 800204a:	8813      	ldrh	r3, [r2, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	1c59      	adds	r1, r3, #1
 8002050:	b289      	uxth	r1, r1
 8002052:	8011      	strh	r1, [r2, #0]
 8002054:	4a0c      	ldr	r2, [pc, #48]	; (8002088 <xMBRTUReceiveFSM+0x90>)
 8002056:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800205a:	54d1      	strb	r1, [r2, r3]
 800205c:	e001      	b.n	8002062 <xMBRTUReceiveFSM+0x6a>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800205e:	2203      	movs	r2, #3
 8002060:	701a      	strb	r2, [r3, #0]
        }

        vMBPortTimersEnable();
 8002062:	f7ff fdf3 	bl	8001c4c <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
 8002066:	2000      	movs	r0, #0
 8002068:	b003      	add	sp, #12
 800206a:	f85d fb04 	ldr.w	pc, [sp], #4
 800206e:	bf00      	nop
 8002070:	20001324 	.word	0x20001324
 8002074:	08009190 	.word	0x08009190
 8002078:	08009281 	.word	0x08009281
 800207c:	080091c8 	.word	0x080091c8
 8002080:	20001325 	.word	0x20001325
 8002084:	20001322 	.word	0x20001322
 8002088:	200014ac 	.word	0x200014ac

0800208c <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 800208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <xMBRTUTransmitFSM+0x70>)
 8002090:	7818      	ldrb	r0, [r3, #0]
 8002092:	b2c0      	uxtb	r0, r0
 8002094:	2801      	cmp	r0, #1
 8002096:	d006      	beq.n	80020a6 <xMBRTUTransmitFSM+0x1a>
 8002098:	4819      	ldr	r0, [pc, #100]	; (8002100 <xMBRTUTransmitFSM+0x74>)
 800209a:	4a1a      	ldr	r2, [pc, #104]	; (8002104 <xMBRTUTransmitFSM+0x78>)
 800209c:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <xMBRTUTransmitFSM+0x7c>)
 800209e:	f44f 7193 	mov.w	r1, #294	; 0x126
 80020a2:	f001 fe57 	bl	8003d54 <__assert_func>

    switch ( eSndState )
 80020a6:	4f19      	ldr	r7, [pc, #100]	; (800210c <xMBRTUTransmitFSM+0x80>)
 80020a8:	783b      	ldrb	r3, [r7, #0]
 80020aa:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 80020ae:	b113      	cbz	r3, 80020b6 <xMBRTUTransmitFSM+0x2a>
 80020b0:	2e01      	cmp	r6, #1
 80020b2:	d005      	beq.n	80020c0 <xMBRTUTransmitFSM+0x34>
 80020b4:	e01f      	b.n	80020f6 <xMBRTUTransmitFSM+0x6a>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 80020b6:	4631      	mov	r1, r6
 80020b8:	f7ff fcec 	bl	8001a94 <vMBPortSerialEnable>
}

BOOL
xMBRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
 80020bc:	4635      	mov	r5, r6
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
        break;
 80020be:	e01b      	b.n	80020f8 <xMBRTUTransmitFSM+0x6c>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 80020c0:	4d13      	ldr	r5, [pc, #76]	; (8002110 <xMBRTUTransmitFSM+0x84>)
 80020c2:	882c      	ldrh	r4, [r5, #0]
 80020c4:	b2a4      	uxth	r4, r4
 80020c6:	b164      	cbz	r4, 80020e2 <xMBRTUTransmitFSM+0x56>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 80020c8:	4c12      	ldr	r4, [pc, #72]	; (8002114 <xMBRTUTransmitFSM+0x88>)
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	7818      	ldrb	r0, [r3, #0]
 80020ce:	f7ff fd17 	bl	8001b00 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	3301      	adds	r3, #1
 80020d6:	6023      	str	r3, [r4, #0]
            usSndBufferCount--;
 80020d8:	882b      	ldrh	r3, [r5, #0]
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29b      	uxth	r3, r3
 80020de:	802b      	strh	r3, [r5, #0]
 80020e0:	e009      	b.n	80020f6 <xMBRTUTransmitFSM+0x6a>
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80020e2:	2003      	movs	r0, #3
 80020e4:	f7ff fcba 	bl	8001a5c <xMBPortEventPost>
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
 80020e8:	4621      	mov	r1, r4
            pucSndBufferCur++;  /* next byte in sendbuffer. */
            usSndBufferCount--;
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80020ea:	4605      	mov	r5, r0
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
 80020ec:	4630      	mov	r0, r6
 80020ee:	f7ff fcd1 	bl	8001a94 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 80020f2:	703c      	strb	r4, [r7, #0]
 80020f4:	e000      	b.n	80020f8 <xMBRTUTransmitFSM+0x6c>
}

BOOL
xMBRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
 80020f6:	2500      	movs	r5, #0
        }
        break;
    }

    return xNeedPoll;
}
 80020f8:	4628      	mov	r0, r5
 80020fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020fc:	20001325 	.word	0x20001325
 8002100:	08009190 	.word	0x08009190
 8002104:	08009261 	.word	0x08009261
 8002108:	080091e3 	.word	0x080091e3
 800210c:	20001324 	.word	0x20001324
 8002110:	20001320 	.word	0x20001320
 8002114:	2000131c 	.word	0x2000131c

08002118 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8002118:	b538      	push	{r3, r4, r5, lr}
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
 800211a:	4b13      	ldr	r3, [pc, #76]	; (8002168 <xMBRTUTimerT35Expired+0x50>)
 800211c:	7818      	ldrb	r0, [r3, #0]
 800211e:	b2c0      	uxtb	r0, r0
 8002120:	2802      	cmp	r0, #2
 8002122:	461d      	mov	r5, r3
 8002124:	d003      	beq.n	800212e <xMBRTUTimerT35Expired+0x16>
 8002126:	2803      	cmp	r0, #3
 8002128:	d017      	beq.n	800215a <xMBRTUTimerT35Expired+0x42>
 800212a:	b928      	cbnz	r0, 8002138 <xMBRTUTimerT35Expired+0x20>
 800212c:	e000      	b.n	8002130 <xMBRTUTimerT35Expired+0x18>
        break;

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 800212e:	2001      	movs	r0, #1
 8002130:	f7ff fc94 	bl	8001a5c <xMBPortEventPost>
 8002134:	4604      	mov	r4, r0
        break;
 8002136:	e011      	b.n	800215c <xMBRTUTimerT35Expired+0x44>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8002138:	781a      	ldrb	r2, [r3, #0]
 800213a:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800213e:	b16a      	cbz	r2, 800215c <xMBRTUTimerT35Expired+0x44>
 8002140:	781a      	ldrb	r2, [r3, #0]
 8002142:	2a02      	cmp	r2, #2
 8002144:	d009      	beq.n	800215a <xMBRTUTimerT35Expired+0x42>
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d006      	beq.n	800215a <xMBRTUTimerT35Expired+0x42>
 800214c:	4807      	ldr	r0, [pc, #28]	; (800216c <xMBRTUTimerT35Expired+0x54>)
 800214e:	4a08      	ldr	r2, [pc, #32]	; (8002170 <xMBRTUTimerT35Expired+0x58>)
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <xMBRTUTimerT35Expired+0x5c>)
 8002152:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002156:	f001 fdfd 	bl	8003d54 <__assert_func>
}

BOOL
xMBRTUTimerT35Expired( void )
{
    BOOL            xNeedPoll = FALSE;
 800215a:	2400      	movs	r4, #0
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable();
 800215c:	f7ff fd86 	bl	8001c6c <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8002160:	2301      	movs	r3, #1
 8002162:	702b      	strb	r3, [r5, #0]

    return xNeedPoll;
}
 8002164:	4620      	mov	r0, r4
 8002166:	bd38      	pop	{r3, r4, r5, pc}
 8002168:	20001325 	.word	0x20001325
 800216c:	08009190 	.word	0x08009190
 8002170:	08009292 	.word	0x08009292
 8002174:	080091fe 	.word	0x080091fe

08002178 <usMBCRC16>:

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
 8002178:	23ff      	movs	r3, #255	; 0xff
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 800217a:	b510      	push	{r4, lr}
    UCHAR           ucCRCHi = 0xFF;
 800217c:	461c      	mov	r4, r3
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
 800217e:	3901      	subs	r1, #1
 8002180:	b289      	uxth	r1, r1
 8002182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002186:	4291      	cmp	r1, r2
 8002188:	d008      	beq.n	800219c <usMBCRC16+0x24>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800218a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800218e:	405a      	eors	r2, r3
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <usMBCRC16+0x2c>)
 8002192:	5c9b      	ldrb	r3, [r3, r2]
 8002194:	4063      	eors	r3, r4
        ucCRCHi = aucCRCLo[iIndex];
 8002196:	4c04      	ldr	r4, [pc, #16]	; (80021a8 <usMBCRC16+0x30>)
 8002198:	5ca4      	ldrb	r4, [r4, r2]
 800219a:	e7f0      	b.n	800217e <usMBCRC16+0x6>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
 800219c:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 80021a0:	bd10      	pop	{r4, pc}
 80021a2:	bf00      	nop
 80021a4:	080093a8 	.word	0x080093a8
 80021a8:	080092a8 	.word	0x080092a8

080021ac <xMBUtilSetBits>:
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 80021ac:	2a08      	cmp	r2, #8

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 80021ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b0:	4616      	mov	r6, r2
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 80021b2:	d905      	bls.n	80021c0 <xMBUtilSetBits+0x14>
 80021b4:	480e      	ldr	r0, [pc, #56]	; (80021f0 <xMBUtilSetBits+0x44>)
 80021b6:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <xMBUtilSetBits+0x48>)
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <xMBUtilSetBits+0x4c>)
 80021ba:	2138      	movs	r1, #56	; 0x38
 80021bc:	f001 fdca 	bl	8003d54 <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80021c0:	08cd      	lsrs	r5, r1, #3
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80021c2:	1c6c      	adds	r4, r5, #1

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80021c4:	2201      	movs	r2, #1
 80021c6:	40b2      	lsls	r2, r6
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80021c8:	5d07      	ldrb	r7, [r0, r4]
 80021ca:	5d46      	ldrb	r6, [r0, r5]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80021cc:	3a01      	subs	r2, #1
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 80021ce:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
 80021d2:	b292      	uxth	r2, r2
 80021d4:	408a      	lsls	r2, r1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80021d6:	ea46 2607 	orr.w	r6, r6, r7, lsl #8

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 80021da:	b289      	uxth	r1, r1
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 80021dc:	ea26 0202 	bic.w	r2, r6, r2

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 80021e0:	408b      	lsls	r3, r1
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 80021e2:	4313      	orrs	r3, r2
 80021e4:	b29b      	uxth	r3, r3

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 80021e6:	5543      	strb	r3, [r0, r5]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	5503      	strb	r3, [r0, r4]
 80021ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021ee:	bf00      	nop
 80021f0:	080094b0 	.word	0x080094b0
 80021f4:	080094d8 	.word	0x080094d8
 80021f8:	080094cb 	.word	0x080094cb

080021fc <xMBUtilGetBits>:
}

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 80021fc:	b530      	push	{r4, r5, lr}
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80021fe:	08cc      	lsrs	r4, r1, #3
    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8002200:	1903      	adds	r3, r0, r4
    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8002202:	eba1 01c4 	sub.w	r1, r1, r4, lsl #3
    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8002206:	785d      	ldrb	r5, [r3, #1]
 8002208:	5d03      	ldrb	r3, [r0, r4]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 800220a:	ea43 2005 	orr.w	r0, r3, r5, lsl #8

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 800220e:	2301      	movs	r3, #1
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8002210:	b289      	uxth	r1, r1

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8002212:	4093      	lsls	r3, r2
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8002214:	4108      	asrs	r0, r1

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8002216:	3b01      	subs	r3, #1

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8002218:	4018      	ands	r0, r3

    return ( UCHAR ) usWordBuf;
}
 800221a:	b2c0      	uxtb	r0, r0
 800221c:	bd30      	pop	{r4, r5, pc}
	...

08002220 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8002220:	2807      	cmp	r0, #7
 8002222:	bf9a      	itte	ls
 8002224:	4b01      	ldrls	r3, [pc, #4]	; (800222c <prveMBError2Exception+0xc>)
 8002226:	5c18      	ldrbls	r0, [r3, r0]
 8002228:	2004      	movhi	r0, #4
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 800222a:	4770      	bx	lr
 800222c:	080094a8 	.word	0x080094a8

08002230 <eMBFuncReadCoils>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002230:	880b      	ldrh	r3, [r1, #0]
 8002232:	2b05      	cmp	r3, #5

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	460c      	mov	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002238:	d12e      	bne.n	8002298 <eMBFuncReadCoils+0x68>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 800223a:	78c5      	ldrb	r5, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 800223c:	7902      	ldrb	r2, [r0, #4]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800223e:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002240:	7883      	ldrb	r3, [r0, #2]
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8002242:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8002246:	1e55      	subs	r5, r2, #1
 8002248:	b2ad      	uxth	r5, r5
 800224a:	f240 76ce 	movw	r6, #1998	; 0x7ce
 800224e:	42b5      	cmp	r5, r6
 8002250:	d822      	bhi.n	8002298 <eMBFuncReadCoils+0x68>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002252:	2500      	movs	r5, #0
 8002254:	8025      	strh	r5, [r4, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8002256:	2501      	movs	r5, #1
 8002258:	7005      	strb	r5, [r0, #0]
            *usLen += 1;
 800225a:	8825      	ldrh	r5, [r4, #0]
 800225c:	3501      	adds	r5, #1
 800225e:	8025      	strh	r5, [r4, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8002260:	f012 0f07 	tst.w	r2, #7
 8002264:	ea4f 05d2 	mov.w	r5, r2, lsr #3
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8002268:	bf18      	it	ne
 800226a:	3501      	addne	r5, #1
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 800226c:	b2ed      	uxtb	r5, r5
            }
            *pucFrameCur++ = ucNBytes;
 800226e:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8002270:	8826      	ldrh	r6, [r4, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002272:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;
 8002276:	3601      	adds	r6, #1

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;
 8002278:	3101      	adds	r1, #1
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;
 800227a:	8026      	strh	r6, [r4, #0]

            eRegStatus =
 800227c:	3002      	adds	r0, #2
 800227e:	b289      	uxth	r1, r1
 8002280:	2300      	movs	r3, #0
 8002282:	f7ff f9ef 	bl	8001664 <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002286:	b118      	cbz	r0, 8002290 <eMBFuncReadCoils+0x60>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800228c:	f7ff bfc8 	b.w	8002220 <prveMBError2Exception>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8002290:	8822      	ldrh	r2, [r4, #0]
 8002292:	4415      	add	r5, r2
 8002294:	8025      	strh	r5, [r4, #0]
 8002296:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002298:	2003      	movs	r0, #3
    }
    return eStatus;
}
 800229a:	bd70      	pop	{r4, r5, r6, pc}

0800229c <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800229c:	880b      	ldrh	r3, [r1, #0]
 800229e:	2b05      	cmp	r3, #5
}

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80022a0:	b513      	push	{r0, r1, r4, lr}
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80022a2:	d11c      	bne.n	80022de <eMBFuncWriteCoil+0x42>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80022a4:	7902      	ldrb	r2, [r0, #4]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80022a6:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80022a8:	7883      	ldrb	r3, [r0, #2]
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80022aa:	b9c2      	cbnz	r2, 80022de <eMBFuncWriteCoil+0x42>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80022ac:	78c4      	ldrb	r4, [r0, #3]
 80022ae:	1e60      	subs	r0, r4, #1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80022b0:	b2c0      	uxtb	r0, r0
 80022b2:	28fd      	cmp	r0, #253	; 0xfd
 80022b4:	d913      	bls.n	80022de <eMBFuncWriteCoil+0x42>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 80022b6:	2cff      	cmp	r4, #255	; 0xff

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
 80022b8:	f88d 2005 	strb.w	r2, [sp, #5]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80022bc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
            {
                ucBuf[0] = 1;
 80022c0:	bf08      	it	eq
 80022c2:	2201      	moveq	r2, #1
            }
            else
            {
                ucBuf[0] = 0;
 80022c4:	f88d 2004 	strb.w	r2, [sp, #4]

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;
 80022c8:	3101      	adds	r1, #1
            }
            else
            {
                ucBuf[0] = 0;
            }
            eRegStatus =
 80022ca:	2201      	movs	r2, #1
 80022cc:	a801      	add	r0, sp, #4
 80022ce:	b289      	uxth	r1, r1
 80022d0:	4613      	mov	r3, r2
 80022d2:	f7ff f9c7 	bl	8001664 <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80022d6:	b120      	cbz	r0, 80022e2 <eMBFuncWriteCoil+0x46>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80022d8:	f7ff ffa2 	bl	8002220 <prveMBError2Exception>
 80022dc:	e001      	b.n	80022e2 <eMBFuncWriteCoil+0x46>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80022de:	2003      	movs	r0, #3
 80022e0:	e7ff      	b.n	80022e2 <eMBFuncWriteCoil+0x46>
    }
    return eStatus;
}
 80022e2:	b002      	add	sp, #8
 80022e4:	bd10      	pop	{r4, pc}

080022e6 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80022e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80022e8:	880b      	ldrh	r3, [r1, #0]
 80022ea:	2b05      	cmp	r3, #5
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80022ec:	460c      	mov	r4, r1
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80022ee:	d924      	bls.n	800233a <eMBFuncWriteMultipleCoils+0x54>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80022f0:	7903      	ldrb	r3, [r0, #4]
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80022f2:	78c2      	ldrb	r2, [r0, #3]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80022f4:	7845      	ldrb	r5, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80022f6:	7881      	ldrb	r1, [r0, #2]
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80022f8:	7946      	ldrb	r6, [r0, #5]
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80022fa:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80022fe:	f012 0f07 	tst.w	r2, #7
 8002302:	ea4f 03d2 	mov.w	r3, r2, lsr #3
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 8002306:	f102 37ff 	add.w	r7, r2, #4294967295
        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 800230a:	bf18      	it	ne
 800230c:	3301      	addne	r3, #1
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 800230e:	f5b7 6ff6 	cmp.w	r7, #1968	; 0x7b0
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8002312:	b2db      	uxtb	r3, r3
        }

        if( ( usCoilCnt >= 1 ) &&
 8002314:	d211      	bcs.n	800233a <eMBFuncWriteMultipleCoils+0x54>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8002316:	42b3      	cmp	r3, r6
 8002318:	d10f      	bne.n	800233a <eMBFuncWriteMultipleCoils+0x54>
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800231a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
        usRegAddress++;
 800231e:	3101      	adds	r1, #1

        if( ( usCoilCnt >= 1 ) &&
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
 8002320:	3006      	adds	r0, #6
 8002322:	b289      	uxth	r1, r1
 8002324:	2301      	movs	r3, #1
 8002326:	f7ff f99d 	bl	8001664 <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800232a:	b118      	cbz	r0, 8002334 <eMBFuncWriteMultipleCoils+0x4e>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 800232c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002330:	f7ff bf76 	b.w	8002220 <prveMBError2Exception>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002334:	2205      	movs	r2, #5
 8002336:	8022      	strh	r2, [r4, #0]
 8002338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800233a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 800233c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002340 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8002340:	b538      	push	{r3, r4, r5, lr}
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <eMBFuncReportSlaveID+0x1c>)
 8002344:	881c      	ldrh	r4, [r3, #0]
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8002346:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8002348:	4622      	mov	r2, r4
 800234a:	4905      	ldr	r1, [pc, #20]	; (8002360 <eMBFuncReportSlaveID+0x20>)
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800234c:	3401      	adds	r4, #1
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800234e:	3001      	adds	r0, #1
 8002350:	f7fd ff22 	bl	8000198 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8002354:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8002356:	2000      	movs	r0, #0
 8002358:	bd38      	pop	{r3, r4, r5, pc}
 800235a:	bf00      	nop
 800235c:	20001326 	.word	0x20001326
 8002360:	20001328 	.word	0x20001328

08002364 <eMBFuncReadDiscreteInputs>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002364:	880b      	ldrh	r3, [r1, #0]
 8002366:	2b05      	cmp	r3, #5

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8002368:	b570      	push	{r4, r5, r6, lr}
 800236a:	460c      	mov	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800236c:	d12d      	bne.n	80023ca <eMBFuncReadDiscreteInputs+0x66>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 800236e:	78c5      	ldrb	r5, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8002370:	7902      	ldrb	r2, [r0, #4]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002372:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002374:	7883      	ldrb	r3, [r0, #2]
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8002376:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 800237a:	1e55      	subs	r5, r2, #1
 800237c:	b2ad      	uxth	r5, r5
 800237e:	f240 76ce 	movw	r6, #1998	; 0x7ce
 8002382:	42b5      	cmp	r5, r6
 8002384:	d821      	bhi.n	80023ca <eMBFuncReadDiscreteInputs+0x66>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002386:	2500      	movs	r5, #0
 8002388:	8025      	strh	r5, [r4, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 800238a:	2502      	movs	r5, #2
 800238c:	7005      	strb	r5, [r0, #0]
            *usLen += 1;
 800238e:	8825      	ldrh	r5, [r4, #0]
 8002390:	3501      	adds	r5, #1
 8002392:	8025      	strh	r5, [r4, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8002394:	f012 0f07 	tst.w	r2, #7
 8002398:	ea4f 05d2 	mov.w	r5, r2, lsr #3
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 800239c:	bf18      	it	ne
 800239e:	3501      	addne	r5, #1
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 80023a0:	b2ed      	uxtb	r5, r5
            }
            *pucFrameCur++ = ucNBytes;
 80023a2:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 80023a4:	8826      	ldrh	r6, [r4, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80023a6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;
 80023aa:	3601      	adds	r6, #1

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;
 80023ac:	3101      	adds	r1, #1
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;
 80023ae:	8026      	strh	r6, [r4, #0]

            eRegStatus =
 80023b0:	3002      	adds	r0, #2
 80023b2:	b289      	uxth	r1, r1
 80023b4:	f7ff f9ce 	bl	8001754 <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80023b8:	b118      	cbz	r0, 80023c2 <eMBFuncReadDiscreteInputs+0x5e>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80023ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80023be:	f7ff bf2f 	b.w	8002220 <prveMBError2Exception>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 80023c2:	8822      	ldrh	r2, [r4, #0]
 80023c4:	4415      	add	r5, r2
 80023c6:	8025      	strh	r5, [r4, #0]
 80023c8:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80023ca:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80023cc:	bd70      	pop	{r4, r5, r6, pc}

080023ce <eMBFuncReadInputRegister>:

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;
	
	//printf("usLen: %d\n", *usLen);
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80023ce:	880b      	ldrh	r3, [r1, #0]
 80023d0:	2b05      	cmp	r3, #5
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80023d2:	b570      	push	{r4, r5, r6, lr}
 80023d4:	460c      	mov	r4, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;
	
	//printf("usLen: %d\n", *usLen);
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80023d6:	d124      	bne.n	8002422 <eMBFuncReadInputRegister+0x54>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80023d8:	78c5      	ldrb	r5, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80023da:	7902      	ldrb	r2, [r0, #4]
    eMBErrorCode    eRegStatus;
	
	//printf("usLen: %d\n", *usLen);
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80023dc:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80023de:	7883      	ldrb	r3, [r0, #2]
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80023e0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 80023e4:	1e55      	subs	r5, r2, #1
 80023e6:	2d7b      	cmp	r5, #123	; 0x7b
 80023e8:	d81b      	bhi.n	8002422 <eMBFuncReadInputRegister+0x54>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 80023ea:	2500      	movs	r5, #0
 80023ec:	8025      	strh	r5, [r4, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 80023ee:	2504      	movs	r5, #4
 80023f0:	7005      	strb	r5, [r0, #0]
            *usLen += 1;
 80023f2:	8825      	ldrh	r5, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80023f4:	0056      	lsls	r6, r2, #1
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
            *usLen += 1;
 80023f6:	3501      	adds	r5, #1
 80023f8:	8025      	strh	r5, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80023fa:	7046      	strb	r6, [r0, #1]
            *usLen += 1;
 80023fc:	8825      	ldrh	r5, [r4, #0]
	
	//printf("usLen: %d\n", *usLen);
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80023fe:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
            *usLen += 1;

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
            *usLen += 1;
 8002402:	3501      	adds	r5, #1
	//printf("usLen: %d\n", *usLen);
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;
 8002404:	3101      	adds	r1, #1
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
            *usLen += 1;

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
            *usLen += 1;
 8002406:	8025      	strh	r5, [r4, #0]

            eRegStatus =
 8002408:	3002      	adds	r0, #2
 800240a:	b289      	uxth	r1, r1
 800240c:	f7ff f8d2 	bl	80015b4 <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002410:	b118      	cbz	r0, 800241a <eMBFuncReadInputRegister+0x4c>
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002416:	f7ff bf03 	b.w	8002220 <prveMBError2Exception>
            }
            else
            {
                *usLen += usRegCount * 2;
 800241a:	8822      	ldrh	r2, [r4, #0]
 800241c:	4432      	add	r2, r6
 800241e:	8022      	strh	r2, [r4, #0]
 8002420:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002422:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8002424:	bd70      	pop	{r4, r5, r6, pc}

08002426 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002426:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002428:	880b      	ldrh	r3, [r1, #0]
 800242a:	2b05      	cmp	r3, #5
 800242c:	d10f      	bne.n	800244e <eMBFuncWriteHoldingRegister+0x28>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800242e:	7883      	ldrb	r3, [r0, #2]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002430:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002432:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
        usRegAddress++;
 8002436:	3101      	adds	r1, #1

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8002438:	2201      	movs	r2, #1
 800243a:	3003      	adds	r0, #3
 800243c:	b289      	uxth	r1, r1
 800243e:	4613      	mov	r3, r2
 8002440:	f7ff f8d4 	bl	80015ec <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8002444:	b128      	cbz	r0, 8002452 <eMBFuncWriteHoldingRegister+0x2c>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002446:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800244a:	f7ff bee9 	b.w	8002220 <prveMBError2Exception>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800244e:	2003      	movs	r0, #3
 8002450:	bd08      	pop	{r3, pc}
    }
    return eStatus;
}
 8002452:	bd08      	pop	{r3, pc}

08002454 <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002454:	880b      	ldrh	r3, [r1, #0]
 8002456:	2b05      	cmp	r3, #5
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002458:	b570      	push	{r4, r5, r6, lr}
 800245a:	460c      	mov	r4, r1
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800245c:	d91d      	bls.n	800249a <eMBFuncWriteMultipleHoldingRegister+0x46>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 800245e:	7903      	ldrb	r3, [r0, #4]
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8002460:	78c2      	ldrb	r2, [r0, #3]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002462:	7845      	ldrb	r5, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002464:	7881      	ldrb	r1, [r0, #2]
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8002466:	7946      	ldrb	r6, [r0, #5]
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8002468:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
 800246c:	1e53      	subs	r3, r2, #1
 800246e:	2b77      	cmp	r3, #119	; 0x77
 8002470:	d813      	bhi.n	800249a <eMBFuncWriteMultipleHoldingRegister+0x46>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8002472:	0053      	lsls	r3, r2, #1
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8002474:	b2db      	uxtb	r3, r3
 8002476:	429e      	cmp	r6, r3
 8002478:	d10f      	bne.n	800249a <eMBFuncWriteMultipleHoldingRegister+0x46>
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800247a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
        usRegAddress++;
 800247e:	3101      	adds	r1, #1
        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
        {
            /* Make callback to update the register values. */
            eRegStatus =
 8002480:	3006      	adds	r0, #6
 8002482:	b289      	uxth	r1, r1
 8002484:	2301      	movs	r3, #1
 8002486:	f7ff f8b1 	bl	80015ec <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800248a:	b118      	cbz	r0, 8002494 <eMBFuncWriteMultipleHoldingRegister+0x40>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 800248c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002490:	f7ff bec6 	b.w	8002220 <prveMBError2Exception>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002494:	2205      	movs	r2, #5
 8002496:	8022      	strh	r2, [r4, #0]
 8002498:	bd70      	pop	{r4, r5, r6, pc}
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800249a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 800249c:	bd70      	pop	{r4, r5, r6, pc}

0800249e <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800249e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80024a0:	880b      	ldrh	r3, [r1, #0]
 80024a2:	2b05      	cmp	r3, #5

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80024a4:	460c      	mov	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80024a6:	d125      	bne.n	80024f4 <eMBFuncReadHoldingRegister+0x56>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80024a8:	7905      	ldrb	r5, [r0, #4]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80024aa:	7847      	ldrb	r7, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80024ac:	7881      	ldrb	r1, [r0, #2]
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80024ae:	b2ae      	uxth	r6, r5

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80024b0:	1e73      	subs	r3, r6, #1
 80024b2:	2b7c      	cmp	r3, #124	; 0x7c
 80024b4:	f04f 0203 	mov.w	r2, #3
 80024b8:	d81c      	bhi.n	80024f4 <eMBFuncReadHoldingRegister+0x56>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 80024ba:	2300      	movs	r3, #0
 80024bc:	8023      	strh	r3, [r4, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80024be:	7002      	strb	r2, [r0, #0]
            *usLen += 1;
 80024c0:	8822      	ldrh	r2, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80024c2:	006d      	lsls	r5, r5, #1
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
            *usLen += 1;
 80024c4:	3201      	adds	r2, #1
 80024c6:	8022      	strh	r2, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80024c8:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 80024ca:	8822      	ldrh	r2, [r4, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80024cc:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
            *usLen += 1;

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
            *usLen += 1;
 80024d0:	3201      	adds	r2, #1

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;
 80024d2:	3101      	adds	r1, #1
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
            *usLen += 1;

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
            *usLen += 1;
 80024d4:	8022      	strh	r2, [r4, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80024d6:	3002      	adds	r0, #2
 80024d8:	b289      	uxth	r1, r1
 80024da:	4632      	mov	r2, r6
 80024dc:	f7ff f886 	bl	80015ec <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80024e0:	b118      	cbz	r0, 80024ea <eMBFuncReadHoldingRegister+0x4c>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80024e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80024e6:	f7ff be9b 	b.w	8002220 <prveMBError2Exception>
            }
            else
            {
                *usLen += usRegCount * 2;
 80024ea:	8822      	ldrh	r2, [r4, #0]
 80024ec:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 80024f0:	8026      	strh	r6, [r4, #0]
 80024f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80024f4:	2003      	movs	r0, #3
 80024f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024f8 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80024f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80024fc:	880b      	ldrh	r3, [r1, #0]
 80024fe:	2b09      	cmp	r3, #9

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002500:	4604      	mov	r4, r0
 8002502:	460d      	mov	r5, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002504:	d940      	bls.n	8002588 <eMBFuncReadWriteMultipleHoldingRegister+0x90>
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8002506:	7903      	ldrb	r3, [r0, #4]
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8002508:	78c6      	ldrb	r6, [r0, #3]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 800250a:	f890 8001 	ldrb.w	r8, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800250e:	7887      	ldrb	r7, [r0, #2]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8002510:	79a1      	ldrb	r1, [r4, #6]
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8002512:	7940      	ldrb	r0, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8002514:	79e2      	ldrb	r2, [r4, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8002516:	f894 e009 	ldrb.w	lr, [r4, #9]
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800251a:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 800251e:	f106 3cff 	add.w	ip, r6, #4294967295
 8002522:	f1bc 0f7c 	cmp.w	ip, #124	; 0x7c
        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8002526:	7a23      	ldrb	r3, [r4, #8]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8002528:	d831      	bhi.n	800258e <eMBFuncReadWriteMultipleHoldingRegister+0x96>
        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800252a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 800252e:	1e53      	subs	r3, r2, #1
 8002530:	2b78      	cmp	r3, #120	; 0x78
 8002532:	d82c      	bhi.n	800258e <eMBFuncReadWriteMultipleHoldingRegister+0x96>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8002534:	ebbe 0f42 	cmp.w	lr, r2, lsl #1
 8002538:	d129      	bne.n	800258e <eMBFuncReadWriteMultipleHoldingRegister+0x96>

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 800253a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        usRegWriteAddress++;
 800253e:	3101      	adds	r1, #1
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8002540:	2301      	movs	r3, #1
 8002542:	f104 000a 	add.w	r0, r4, #10
 8002546:	b289      	uxth	r1, r1
 8002548:	f7ff f850 	bl	80015ec <eMBRegHoldingCB>
 800254c:	4603      	mov	r3, r0
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 800254e:	bb0b      	cbnz	r3, 8002594 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8002550:	2217      	movs	r2, #23

            if( eRegStatus == MB_ENOERR )
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;
 8002552:	802b      	strh	r3, [r5, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8002554:	7022      	strb	r2, [r4, #0]
                *usLen += 1;
 8002556:	882a      	ldrh	r2, [r5, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8002558:	ea4f 0946 	mov.w	r9, r6, lsl #1
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
                *usLen += 1;
 800255c:	3201      	adds	r2, #1
 800255e:	802a      	strh	r2, [r5, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8002560:	f884 9001 	strb.w	r9, [r4, #1]
                *usLen += 1;
 8002564:	882a      	ldrh	r2, [r5, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8002566:	ea47 2108 	orr.w	r1, r7, r8, lsl #8
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
                *usLen += 1;

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
                *usLen += 1;
 800256a:	3201      	adds	r2, #1

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;
 800256c:	3101      	adds	r1, #1
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
                *usLen += 1;

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
                *usLen += 1;
 800256e:	802a      	strh	r2, [r5, #0]

                /* Make the read callback. */
                eRegStatus =
 8002570:	1ca0      	adds	r0, r4, #2
 8002572:	b289      	uxth	r1, r1
 8002574:	4632      	mov	r2, r6
 8002576:	f7ff f839 	bl	80015ec <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
 800257a:	b958      	cbnz	r0, 8002594 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
                {
                    *usLen += 2 * usRegReadCount;
 800257c:	882b      	ldrh	r3, [r5, #0]
 800257e:	4499      	add	r9, r3
 8002580:	f8a5 9000 	strh.w	r9, [r5]
 8002584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002588:	2000      	movs	r0, #0
 800258a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800258e:	2003      	movs	r0, #3
 8002590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        }
    }
    return eStatus;
}
 8002594:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                    *usLen += 2 * usRegReadCount;
                }
            }
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002598:	f7ff be42 	b.w	8002220 <prveMBError2Exception>

0800259c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800259e:	6803      	ldr	r3, [r0, #0]
 80025a0:	2b0f      	cmp	r3, #15
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a2:	4604      	mov	r4, r0
  uint32_t tickstart = 0;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80025a4:	d904      	bls.n	80025b0 <HAL_RCC_OscConfig+0x14>
 80025a6:	48a2      	ldr	r0, [pc, #648]	; (8002830 <HAL_RCC_OscConfig+0x294>)
 80025a8:	f240 1115 	movw	r1, #277	; 0x115
 80025ac:	f7ff f8de 	bl	800176c <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b0:	6823      	ldr	r3, [r4, #0]
 80025b2:	07d8      	lsls	r0, r3, #31
 80025b4:	d403      	bmi.n	80025be <HAL_RCC_OscConfig+0x22>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	0799      	lsls	r1, r3, #30
 80025ba:	d456      	bmi.n	800266a <HAL_RCC_OscConfig+0xce>
 80025bc:	e0b7      	b.n	800272e <HAL_RCC_OscConfig+0x192>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80025be:	6863      	ldr	r3, [r4, #4]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d906      	bls.n	80025d2 <HAL_RCC_OscConfig+0x36>
 80025c4:	2b05      	cmp	r3, #5
 80025c6:	d004      	beq.n	80025d2 <HAL_RCC_OscConfig+0x36>
 80025c8:	4899      	ldr	r0, [pc, #612]	; (8002830 <HAL_RCC_OscConfig+0x294>)
 80025ca:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80025ce:	f7ff f8cd 	bl	800176c <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d2:	4b98      	ldr	r3, [pc, #608]	; (8002834 <HAL_RCC_OscConfig+0x298>)
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	f002 020c 	and.w	r2, r2, #12
 80025da:	2a04      	cmp	r2, #4
 80025dc:	d007      	beq.n	80025ee <HAL_RCC_OscConfig+0x52>
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	f002 020c 	and.w	r2, r2, #12
 80025e4:	2a08      	cmp	r2, #8
 80025e6:	d10b      	bne.n	8002600 <HAL_RCC_OscConfig+0x64>
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	025a      	lsls	r2, r3, #9
 80025ec:	d508      	bpl.n	8002600 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	4b91      	ldr	r3, [pc, #580]	; (8002834 <HAL_RCC_OscConfig+0x298>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	039b      	lsls	r3, r3, #14
 80025f4:	d5df      	bpl.n	80025b6 <HAL_RCC_OscConfig+0x1a>
 80025f6:	6863      	ldr	r3, [r4, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1dc      	bne.n	80025b6 <HAL_RCC_OscConfig+0x1a>
      {
        return HAL_ERROR;
 80025fc:	2001      	movs	r0, #1
 80025fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8002600:	4d8d      	ldr	r5, [pc, #564]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002602:	2300      	movs	r3, #0
 8002604:	702b      	strb	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002606:	f001 fb99 	bl	8003d3c <HAL_GetTick>
 800260a:	4606      	mov	r6, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260c:	4b89      	ldr	r3, [pc, #548]	; (8002834 <HAL_RCC_OscConfig+0x298>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	039f      	lsls	r7, r3, #14
 8002612:	d508      	bpl.n	8002626 <HAL_RCC_OscConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002614:	f001 fb92 	bl	8003d3c <HAL_GetTick>
 8002618:	f241 3388 	movw	r3, #5000	; 0x1388
 800261c:	1b80      	subs	r0, r0, r6
 800261e:	4298      	cmp	r0, r3
 8002620:	d9f4      	bls.n	800260c <HAL_RCC_OscConfig+0x70>
        {
          return HAL_TIMEOUT;
 8002622:	2003      	movs	r0, #3
 8002624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002626:	7923      	ldrb	r3, [r4, #4]
 8002628:	702b      	strb	r3, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800262a:	6863      	ldr	r3, [r4, #4]
 800262c:	b173      	cbz	r3, 800264c <HAL_RCC_OscConfig+0xb0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f001 fb85 	bl	8003d3c <HAL_GetTick>
 8002632:	4605      	mov	r5, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002634:	4b7f      	ldr	r3, [pc, #508]	; (8002834 <HAL_RCC_OscConfig+0x298>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0398      	lsls	r0, r3, #14
 800263a:	d4bc      	bmi.n	80025b6 <HAL_RCC_OscConfig+0x1a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800263c:	f001 fb7e 	bl	8003d3c <HAL_GetTick>
 8002640:	f241 3388 	movw	r3, #5000	; 0x1388
 8002644:	1b40      	subs	r0, r0, r5
 8002646:	4298      	cmp	r0, r3
 8002648:	d9f4      	bls.n	8002634 <HAL_RCC_OscConfig+0x98>
 800264a:	e7ea      	b.n	8002622 <HAL_RCC_OscConfig+0x86>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f001 fb76 	bl	8003d3c <HAL_GetTick>
 8002650:	4605      	mov	r5, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002652:	4b78      	ldr	r3, [pc, #480]	; (8002834 <HAL_RCC_OscConfig+0x298>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	0399      	lsls	r1, r3, #14
 8002658:	d5ad      	bpl.n	80025b6 <HAL_RCC_OscConfig+0x1a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265a:	f001 fb6f 	bl	8003d3c <HAL_GetTick>
 800265e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002662:	1b40      	subs	r0, r0, r5
 8002664:	4298      	cmp	r0, r3
 8002666:	d9f4      	bls.n	8002652 <HAL_RCC_OscConfig+0xb6>
 8002668:	e7db      	b.n	8002622 <HAL_RCC_OscConfig+0x86>
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800266a:	68e3      	ldr	r3, [r4, #12]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d904      	bls.n	800267a <HAL_RCC_OscConfig+0xde>
 8002670:	486f      	ldr	r0, [pc, #444]	; (8002830 <HAL_RCC_OscConfig+0x294>)
 8002672:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8002676:	f7ff f879 	bl	800176c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800267a:	6923      	ldr	r3, [r4, #16]
 800267c:	2b1f      	cmp	r3, #31
 800267e:	d904      	bls.n	800268a <HAL_RCC_OscConfig+0xee>
 8002680:	486b      	ldr	r0, [pc, #428]	; (8002830 <HAL_RCC_OscConfig+0x294>)
 8002682:	f240 115b 	movw	r1, #347	; 0x15b
 8002686:	f7ff f871 	bl	800176c <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268a:	4b6a      	ldr	r3, [pc, #424]	; (8002834 <HAL_RCC_OscConfig+0x298>)
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	f012 0f0c 	tst.w	r2, #12
 8002692:	d007      	beq.n	80026a4 <HAL_RCC_OscConfig+0x108>
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	f002 020c 	and.w	r2, r2, #12
 800269a:	2a08      	cmp	r2, #8
 800269c:	d118      	bne.n	80026d0 <HAL_RCC_OscConfig+0x134>
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	025a      	lsls	r2, r3, #9
 80026a2:	d415      	bmi.n	80026d0 <HAL_RCC_OscConfig+0x134>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a4:	4a63      	ldr	r2, [pc, #396]	; (8002834 <HAL_RCC_OscConfig+0x298>)
 80026a6:	6813      	ldr	r3, [r2, #0]
 80026a8:	079b      	lsls	r3, r3, #30
 80026aa:	d502      	bpl.n	80026b2 <HAL_RCC_OscConfig+0x116>
 80026ac:	68e3      	ldr	r3, [r4, #12]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d1a4      	bne.n	80025fc <HAL_RCC_OscConfig+0x60>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b2:	6811      	ldr	r1, [r2, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	23f8      	movs	r3, #248	; 0xf8
 80026b6:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	6920      	ldr	r0, [r4, #16]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	4098      	lsls	r0, r3
 80026c4:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 80026c8:	ea40 0301 	orr.w	r3, r0, r1
 80026cc:	6013      	str	r3, [r2, #0]
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ce:	e02e      	b.n	800272e <HAL_RCC_OscConfig+0x192>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026d0:	68e2      	ldr	r2, [r4, #12]
 80026d2:	4b5a      	ldr	r3, [pc, #360]	; (800283c <HAL_RCC_OscConfig+0x2a0>)
 80026d4:	b1ea      	cbz	r2, 8002712 <HAL_RCC_OscConfig+0x176>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f001 fb2f 	bl	8003d3c <HAL_GetTick>
 80026de:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	4954      	ldr	r1, [pc, #336]	; (8002834 <HAL_RCC_OscConfig+0x298>)
 80026e2:	680b      	ldr	r3, [r1, #0]
 80026e4:	079f      	lsls	r7, r3, #30
 80026e6:	d405      	bmi.n	80026f4 <HAL_RCC_OscConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e8:	f001 fb28 	bl	8003d3c <HAL_GetTick>
 80026ec:	1b40      	subs	r0, r0, r5
 80026ee:	2864      	cmp	r0, #100	; 0x64
 80026f0:	d9f6      	bls.n	80026e0 <HAL_RCC_OscConfig+0x144>
 80026f2:	e796      	b.n	8002622 <HAL_RCC_OscConfig+0x86>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f4:	680a      	ldr	r2, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	23f8      	movs	r3, #248	; 0xf8
 80026f8:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	6920      	ldr	r0, [r4, #16]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	4098      	lsls	r0, r3
 8002706:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800270a:	ea40 0302 	orr.w	r3, r0, r2
 800270e:	600b      	str	r3, [r1, #0]
 8002710:	e00d      	b.n	800272e <HAL_RCC_OscConfig+0x192>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f001 fb12 	bl	8003d3c <HAL_GetTick>
 8002718:	4605      	mov	r5, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271a:	4b46      	ldr	r3, [pc, #280]	; (8002834 <HAL_RCC_OscConfig+0x298>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	079e      	lsls	r6, r3, #30
 8002720:	d505      	bpl.n	800272e <HAL_RCC_OscConfig+0x192>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002722:	f001 fb0b 	bl	8003d3c <HAL_GetTick>
 8002726:	1b40      	subs	r0, r0, r5
 8002728:	2864      	cmp	r0, #100	; 0x64
 800272a:	d9f6      	bls.n	800271a <HAL_RCC_OscConfig+0x17e>
 800272c:	e779      	b.n	8002622 <HAL_RCC_OscConfig+0x86>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	071d      	lsls	r5, r3, #28
 8002732:	d403      	bmi.n	800273c <HAL_RCC_OscConfig+0x1a0>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	0758      	lsls	r0, r3, #29
 8002738:	d428      	bmi.n	800278c <HAL_RCC_OscConfig+0x1f0>
 800273a:	e052      	b.n	80027e2 <HAL_RCC_OscConfig+0x246>
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800273c:	6963      	ldr	r3, [r4, #20]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d904      	bls.n	800274c <HAL_RCC_OscConfig+0x1b0>
 8002742:	483b      	ldr	r0, [pc, #236]	; (8002830 <HAL_RCC_OscConfig+0x294>)
 8002744:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002748:	f7ff f810 	bl	800176c <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800274c:	6962      	ldr	r2, [r4, #20]
 800274e:	4b3c      	ldr	r3, [pc, #240]	; (8002840 <HAL_RCC_OscConfig+0x2a4>)
 8002750:	b172      	cbz	r2, 8002770 <HAL_RCC_OscConfig+0x1d4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002756:	f001 faf1 	bl	8003d3c <HAL_GetTick>
 800275a:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275c:	4b35      	ldr	r3, [pc, #212]	; (8002834 <HAL_RCC_OscConfig+0x298>)
 800275e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002760:	0799      	lsls	r1, r3, #30
 8002762:	d4e7      	bmi.n	8002734 <HAL_RCC_OscConfig+0x198>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002764:	f001 faea 	bl	8003d3c <HAL_GetTick>
 8002768:	1b40      	subs	r0, r0, r5
 800276a:	2864      	cmp	r0, #100	; 0x64
 800276c:	d9f6      	bls.n	800275c <HAL_RCC_OscConfig+0x1c0>
 800276e:	e758      	b.n	8002622 <HAL_RCC_OscConfig+0x86>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002770:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f001 fae3 	bl	8003d3c <HAL_GetTick>
 8002776:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002778:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <HAL_RCC_OscConfig+0x298>)
 800277a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277c:	079a      	lsls	r2, r3, #30
 800277e:	d5d9      	bpl.n	8002734 <HAL_RCC_OscConfig+0x198>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002780:	f001 fadc 	bl	8003d3c <HAL_GetTick>
 8002784:	1b40      	subs	r0, r0, r5
 8002786:	2864      	cmp	r0, #100	; 0x64
 8002788:	d9f6      	bls.n	8002778 <HAL_RCC_OscConfig+0x1dc>
 800278a:	e74a      	b.n	8002622 <HAL_RCC_OscConfig+0x86>
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800278c:	68a3      	ldr	r3, [r4, #8]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d830      	bhi.n	80027f4 <HAL_RCC_OscConfig+0x258>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4a28      	ldr	r2, [pc, #160]	; (8002834 <HAL_RCC_OscConfig+0x298>)
 8002794:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279a:	6413      	str	r3, [r2, #64]	; 0x40
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800279c:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
 80027a0:	6813      	ldr	r3, [r2, #0]
 80027a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a6:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027a8:	f001 fac8 	bl	8003d3c <HAL_GetTick>
 80027ac:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80027ae:	4b25      	ldr	r3, [pc, #148]	; (8002844 <HAL_RCC_OscConfig+0x2a8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	05db      	lsls	r3, r3, #23
 80027b4:	d526      	bpl.n	8002804 <HAL_RCC_OscConfig+0x268>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80027b6:	4d24      	ldr	r5, [pc, #144]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	2300      	movs	r3, #0
 80027ba:	702b      	strb	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027bc:	f001 fabe 	bl	8003d3c <HAL_GetTick>
 80027c0:	4606      	mov	r6, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c2:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <HAL_RCC_OscConfig+0x298>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c6:	079f      	lsls	r7, r3, #30
 80027c8:	d422      	bmi.n	8002810 <HAL_RCC_OscConfig+0x274>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ca:	7a23      	ldrb	r3, [r4, #8]
 80027cc:	702b      	strb	r3, [r5, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) == RCC_LSE_ON)
 80027ce:	68a3      	ldr	r3, [r4, #8]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d13b      	bne.n	800284c <HAL_RCC_OscConfig+0x2b0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f001 fab2 	bl	8003d3c <HAL_GetTick>
 80027d8:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <HAL_RCC_OscConfig+0x298>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	079e      	lsls	r6, r3, #30
 80027e0:	d51e      	bpl.n	8002820 <HAL_RCC_OscConfig+0x284>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80027e2:	69a3      	ldr	r3, [r4, #24]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d940      	bls.n	800286a <HAL_RCC_OscConfig+0x2ce>
 80027e8:	4811      	ldr	r0, [pc, #68]	; (8002830 <HAL_RCC_OscConfig+0x294>)
 80027ea:	f44f 7102 	mov.w	r1, #520	; 0x208
 80027ee:	f7fe ffbd 	bl	800176c <assert_failed>
 80027f2:	e03a      	b.n	800286a <HAL_RCC_OscConfig+0x2ce>
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d0cc      	beq.n	8002792 <HAL_RCC_OscConfig+0x1f6>
 80027f8:	480d      	ldr	r0, [pc, #52]	; (8002830 <HAL_RCC_OscConfig+0x294>)
 80027fa:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80027fe:	f7fe ffb5 	bl	800176c <assert_failed>
 8002802:	e7c6      	b.n	8002792 <HAL_RCC_OscConfig+0x1f6>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002804:	f001 fa9a 	bl	8003d3c <HAL_GetTick>
 8002808:	1b40      	subs	r0, r0, r5
 800280a:	2864      	cmp	r0, #100	; 0x64
 800280c:	d9cf      	bls.n	80027ae <HAL_RCC_OscConfig+0x212>
 800280e:	e708      	b.n	8002622 <HAL_RCC_OscConfig+0x86>
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002810:	f001 fa94 	bl	8003d3c <HAL_GetTick>
 8002814:	f241 3388 	movw	r3, #5000	; 0x1388
 8002818:	1b80      	subs	r0, r0, r6
 800281a:	4298      	cmp	r0, r3
 800281c:	d9d1      	bls.n	80027c2 <HAL_RCC_OscConfig+0x226>
 800281e:	e700      	b.n	8002622 <HAL_RCC_OscConfig+0x86>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002820:	f001 fa8c 	bl	8003d3c <HAL_GetTick>
 8002824:	f241 3388 	movw	r3, #5000	; 0x1388
 8002828:	1b40      	subs	r0, r0, r5
 800282a:	4298      	cmp	r0, r3
 800282c:	d9d5      	bls.n	80027da <HAL_RCC_OscConfig+0x23e>
 800282e:	e6f8      	b.n	8002622 <HAL_RCC_OscConfig+0x86>
 8002830:	080094f7 	.word	0x080094f7
 8002834:	40023800 	.word	0x40023800
 8002838:	40023802 	.word	0x40023802
 800283c:	42470000 	.word	0x42470000
 8002840:	42470e80 	.word	0x42470e80
 8002844:	40007000 	.word	0x40007000
 8002848:	40023870 	.word	0x40023870
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f001 fa76 	bl	8003d3c <HAL_GetTick>
 8002850:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002852:	4b50      	ldr	r3, [pc, #320]	; (8002994 <HAL_RCC_OscConfig+0x3f8>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	0798      	lsls	r0, r3, #30
 8002858:	d5c3      	bpl.n	80027e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f001 fa6f 	bl	8003d3c <HAL_GetTick>
 800285e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002862:	1b40      	subs	r0, r0, r5
 8002864:	4298      	cmp	r0, r3
 8002866:	d9f4      	bls.n	8002852 <HAL_RCC_OscConfig+0x2b6>
 8002868:	e6db      	b.n	8002622 <HAL_RCC_OscConfig+0x86>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286a:	69a2      	ldr	r2, [r4, #24]
 800286c:	b90a      	cbnz	r2, 8002872 <HAL_RCC_OscConfig+0x2d6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800286e:	2000      	movs	r0, #0
 8002870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002872:	4b48      	ldr	r3, [pc, #288]	; (8002994 <HAL_RCC_OscConfig+0x3f8>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b08      	cmp	r3, #8
 800287c:	f43f aebe 	beq.w	80025fc <HAL_RCC_OscConfig+0x60>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002880:	2a02      	cmp	r2, #2
 8002882:	4d45      	ldr	r5, [pc, #276]	; (8002998 <HAL_RCC_OscConfig+0x3fc>)
 8002884:	d175      	bne.n	8002972 <HAL_RCC_OscConfig+0x3d6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002886:	69e3      	ldr	r3, [r4, #28]
 8002888:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800288c:	d004      	beq.n	8002898 <HAL_RCC_OscConfig+0x2fc>
 800288e:	4843      	ldr	r0, [pc, #268]	; (800299c <HAL_RCC_OscConfig+0x400>)
 8002890:	f240 2111 	movw	r1, #529	; 0x211
 8002894:	f7fe ff6a 	bl	800176c <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002898:	6a23      	ldr	r3, [r4, #32]
 800289a:	2b3f      	cmp	r3, #63	; 0x3f
 800289c:	d904      	bls.n	80028a8 <HAL_RCC_OscConfig+0x30c>
 800289e:	483f      	ldr	r0, [pc, #252]	; (800299c <HAL_RCC_OscConfig+0x400>)
 80028a0:	f240 2112 	movw	r1, #530	; 0x212
 80028a4:	f7fe ff62 	bl	800176c <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80028a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028aa:	3bc0      	subs	r3, #192	; 0xc0
 80028ac:	2bf0      	cmp	r3, #240	; 0xf0
 80028ae:	d904      	bls.n	80028ba <HAL_RCC_OscConfig+0x31e>
 80028b0:	483a      	ldr	r0, [pc, #232]	; (800299c <HAL_RCC_OscConfig+0x400>)
 80028b2:	f240 2113 	movw	r1, #531	; 0x213
 80028b6:	f7fe ff59 	bl	800176c <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80028ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028bc:	f023 0204 	bic.w	r2, r3, #4
 80028c0:	2a02      	cmp	r2, #2
 80028c2:	d008      	beq.n	80028d6 <HAL_RCC_OscConfig+0x33a>
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d006      	beq.n	80028d6 <HAL_RCC_OscConfig+0x33a>
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d004      	beq.n	80028d6 <HAL_RCC_OscConfig+0x33a>
 80028cc:	4833      	ldr	r0, [pc, #204]	; (800299c <HAL_RCC_OscConfig+0x400>)
 80028ce:	f44f 7105 	mov.w	r1, #532	; 0x214
 80028d2:	f7fe ff4b 	bl	800176c <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80028d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028d8:	3b04      	subs	r3, #4
 80028da:	2b0b      	cmp	r3, #11
 80028dc:	d904      	bls.n	80028e8 <HAL_RCC_OscConfig+0x34c>
 80028de:	482f      	ldr	r0, [pc, #188]	; (800299c <HAL_RCC_OscConfig+0x400>)
 80028e0:	f240 2115 	movw	r1, #533	; 0x215
 80028e4:	f7fe ff42 	bl	800176c <assert_failed>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e8:	2300      	movs	r3, #0
 80028ea:	602b      	str	r3, [r5, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f001 fa26 	bl	8003d3c <HAL_GetTick>
 80028f0:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	4e28      	ldr	r6, [pc, #160]	; (8002994 <HAL_RCC_OscConfig+0x3f8>)
 80028f4:	6833      	ldr	r3, [r6, #0]
 80028f6:	0199      	lsls	r1, r3, #6
 80028f8:	d505      	bpl.n	8002906 <HAL_RCC_OscConfig+0x36a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fa:	f001 fa1f 	bl	8003d3c <HAL_GetTick>
 80028fe:	1bc0      	subs	r0, r0, r7
 8002900:	2864      	cmp	r0, #100	; 0x64
 8002902:	d9f6      	bls.n	80028f2 <HAL_RCC_OscConfig+0x356>
 8002904:	e68d      	b.n	8002622 <HAL_RCC_OscConfig+0x86>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	f647 70c0 	movw	r0, #32704	; 0x7fc0
 800290a:	fa90 f0a0 	rbit	r0, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800290e:	fab0 f080 	clz	r0, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8002916:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800291a:	fab1 f181 	clz	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8002922:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002926:	fab2 f282 	clz	r2, r2
 800292a:	6a27      	ldr	r7, [r4, #32]
 800292c:	69e3      	ldr	r3, [r4, #28]
 800292e:	433b      	orrs	r3, r7
 8002930:	f043 5700 	orr.w	r7, r3, #536870912	; 0x20000000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002934:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002936:	b2c0      	uxtb	r0, r0
 8002938:	4083      	lsls	r3, r0
 800293a:	ea47 0003 	orr.w	r0, r7, r3
 800293e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	b2c9      	uxtb	r1, r1
 8002944:	3b01      	subs	r3, #1
 8002946:	408b      	lsls	r3, r1
 8002948:	b2d1      	uxtb	r1, r2
 800294a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800294c:	4303      	orrs	r3, r0
 800294e:	408a      	lsls	r2, r1
 8002950:	4313      	orrs	r3, r2
 8002952:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLM,
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002954:	2301      	movs	r3, #1
 8002956:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f001 f9f0 	bl	8003d3c <HAL_GetTick>
 800295c:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <HAL_RCC_OscConfig+0x3f8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	019a      	lsls	r2, r3, #6
 8002964:	d483      	bmi.n	800286e <HAL_RCC_OscConfig+0x2d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002966:	f001 f9e9 	bl	8003d3c <HAL_GetTick>
 800296a:	1b00      	subs	r0, r0, r4
 800296c:	2864      	cmp	r0, #100	; 0x64
 800296e:	d9f6      	bls.n	800295e <HAL_RCC_OscConfig+0x3c2>
 8002970:	e657      	b.n	8002622 <HAL_RCC_OscConfig+0x86>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	602b      	str	r3, [r5, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f001 f9e1 	bl	8003d3c <HAL_GetTick>
 800297a:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <HAL_RCC_OscConfig+0x3f8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	019b      	lsls	r3, r3, #6
 8002982:	f57f af74 	bpl.w	800286e <HAL_RCC_OscConfig+0x2d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002986:	f001 f9d9 	bl	8003d3c <HAL_GetTick>
 800298a:	1b00      	subs	r0, r0, r4
 800298c:	2864      	cmp	r0, #100	; 0x64
 800298e:	d9f5      	bls.n	800297c <HAL_RCC_OscConfig+0x3e0>
 8002990:	e647      	b.n	8002622 <HAL_RCC_OscConfig+0x86>
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800
 8002998:	42470060 	.word	0x42470060
 800299c:	080094f7 	.word	0x080094f7

080029a0 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;   
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80029a0:	6803      	ldr	r3, [r0, #0]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	2b0e      	cmp	r3, #14
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a6:	b570      	push	{r4, r5, r6, lr}
 80029a8:	4604      	mov	r4, r0
 80029aa:	460d      	mov	r5, r1
  uint32_t tickstart = 0;   
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80029ac:	d904      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x18>
 80029ae:	48a5      	ldr	r0, [pc, #660]	; (8002c44 <HAL_RCC_ClockConfig+0x2a4>)
 80029b0:	f240 2173 	movw	r1, #627	; 0x273
 80029b4:	f7fe feda 	bl	800176c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80029b8:	2d07      	cmp	r5, #7
 80029ba:	d904      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x26>
 80029bc:	48a1      	ldr	r0, [pc, #644]	; (8002c44 <HAL_RCC_ClockConfig+0x2a4>)
 80029be:	f44f 711d 	mov.w	r1, #628	; 0x274
 80029c2:	f7fe fed3 	bl	800176c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80029c6:	4ba0      	ldr	r3, [pc, #640]	; (8002c48 <HAL_RCC_ClockConfig+0x2a8>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	f002 020f 	and.w	r2, r2, #15
 80029ce:	4295      	cmp	r5, r2
 80029d0:	f240 8081 	bls.w	8002ad6 <HAL_RCC_ClockConfig+0x136>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d4:	b2ea      	uxtb	r2, r5
 80029d6:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	42ab      	cmp	r3, r5
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80029e2:	2001      	movs	r0, #1
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	079e      	lsls	r6, r3, #30
 80029ea:	d51d      	bpl.n	8002a28 <HAL_RCC_ClockConfig+0x88>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80029ec:	68a3      	ldr	r3, [r4, #8]
 80029ee:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 80029f2:	d012      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x7a>
 80029f4:	f023 0220 	bic.w	r2, r3, #32
 80029f8:	2a90      	cmp	r2, #144	; 0x90
 80029fa:	d00e      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x7a>
 80029fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002a00:	2aa0      	cmp	r2, #160	; 0xa0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x7a>
 8002a04:	f023 0210 	bic.w	r2, r3, #16
 8002a08:	2ac0      	cmp	r2, #192	; 0xc0
 8002a0a:	d006      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x7a>
 8002a0c:	2bf0      	cmp	r3, #240	; 0xf0
 8002a0e:	d004      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x7a>
 8002a10:	488c      	ldr	r0, [pc, #560]	; (8002c44 <HAL_RCC_ClockConfig+0x2a4>)
 8002a12:	f240 218a 	movw	r1, #650	; 0x28a
 8002a16:	f7fe fea9 	bl	800176c <assert_failed>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1a:	498c      	ldr	r1, [pc, #560]	; (8002c4c <HAL_RCC_ClockConfig+0x2ac>)
 8002a1c:	688b      	ldr	r3, [r1, #8]
 8002a1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a22:	68a3      	ldr	r3, [r4, #8]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	07dd      	lsls	r5, r3, #31
 8002a2c:	d404      	bmi.n	8002a38 <HAL_RCC_ClockConfig+0x98>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	0758      	lsls	r0, r3, #29
 8002a32:	f100 80ce 	bmi.w	8002bd2 <HAL_RCC_ClockConfig+0x232>
 8002a36:	e0e4      	b.n	8002c02 <HAL_RCC_ClockConfig+0x262>
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002a38:	6863      	ldr	r3, [r4, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d904      	bls.n	8002a48 <HAL_RCC_ClockConfig+0xa8>
 8002a3e:	4881      	ldr	r0, [pc, #516]	; (8002c44 <HAL_RCC_ClockConfig+0x2a4>)
 8002a40:	f240 2191 	movw	r1, #657	; 0x291
 8002a44:	f7fe fe92 	bl	800176c <assert_failed>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a48:	6862      	ldr	r2, [r4, #4]
 8002a4a:	4b80      	ldr	r3, [pc, #512]	; (8002c4c <HAL_RCC_ClockConfig+0x2ac>)
 8002a4c:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_ClockConfig+0xb8>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8002a56:	e006      	b.n	8002a66 <HAL_RCC_ClockConfig+0xc6>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a58:	2a02      	cmp	r2, #2
 8002a5a:	d102      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xc2>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5c:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8002a60:	e001      	b.n	8002a66 <HAL_RCC_ClockConfig+0xc6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a62:	f011 0f02 	tst.w	r1, #2
 8002a66:	d0bc      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x42>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a68:	6899      	ldr	r1, [r3, #8]
 8002a6a:	f021 0103 	bic.w	r1, r1, #3
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	609a      	str	r2, [r3, #8]
 
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a72:	f001 f963 	bl	8003d3c <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a76:	6863      	ldr	r3, [r4, #4]
 8002a78:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7a:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7c:	d10e      	bne.n	8002a9c <HAL_RCC_ClockConfig+0xfc>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002a7e:	4b73      	ldr	r3, [pc, #460]	; (8002c4c <HAL_RCC_ClockConfig+0x2ac>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d0d1      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8a:	f001 f957 	bl	8003d3c <HAL_GetTick>
 8002a8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a92:	1b40      	subs	r0, r0, r5
 8002a94:	4298      	cmp	r0, r3
 8002a96:	d9f2      	bls.n	8002a7e <HAL_RCC_ClockConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002a98:	2003      	movs	r0, #3
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d114      	bne.n	8002aca <HAL_RCC_ClockConfig+0x12a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aa0:	4b6a      	ldr	r3, [pc, #424]	; (8002c4c <HAL_RCC_ClockConfig+0x2ac>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d0c0      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aac:	f001 f946 	bl	8003d3c <HAL_GetTick>
 8002ab0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ab4:	1b40      	subs	r0, r0, r5
 8002ab6:	4298      	cmp	r0, r3
 8002ab8:	d9f2      	bls.n	8002aa0 <HAL_RCC_ClockConfig+0x100>
 8002aba:	e7ed      	b.n	8002a98 <HAL_RCC_ClockConfig+0xf8>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f001 f93e 	bl	8003d3c <HAL_GetTick>
 8002ac0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ac4:	1b40      	subs	r0, r0, r5
 8002ac6:	4298      	cmp	r0, r3
 8002ac8:	d8e6      	bhi.n	8002a98 <HAL_RCC_ClockConfig+0xf8>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8002aca:	4b60      	ldr	r3, [pc, #384]	; (8002c4c <HAL_RCC_ClockConfig+0x2ac>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f013 0f0c 	tst.w	r3, #12
 8002ad2:	d1f3      	bne.n	8002abc <HAL_RCC_ClockConfig+0x11c>
 8002ad4:	e7ab      	b.n	8002a2e <HAL_RCC_ClockConfig+0x8e>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	0799      	lsls	r1, r3, #30
 8002ada:	d51d      	bpl.n	8002b18 <HAL_RCC_ClockConfig+0x178>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002adc:	68a3      	ldr	r3, [r4, #8]
 8002ade:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8002ae2:	d012      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x16a>
 8002ae4:	f023 0220 	bic.w	r2, r3, #32
 8002ae8:	2a90      	cmp	r2, #144	; 0x90
 8002aea:	d00e      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x16a>
 8002aec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002af0:	2aa0      	cmp	r2, #160	; 0xa0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x16a>
 8002af4:	f023 0210 	bic.w	r2, r3, #16
 8002af8:	2ac0      	cmp	r2, #192	; 0xc0
 8002afa:	d006      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x16a>
 8002afc:	2bf0      	cmp	r3, #240	; 0xf0
 8002afe:	d004      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x16a>
 8002b00:	4850      	ldr	r0, [pc, #320]	; (8002c44 <HAL_RCC_ClockConfig+0x2a4>)
 8002b02:	f240 21d9 	movw	r1, #729	; 0x2d9
 8002b06:	f7fe fe31 	bl	800176c <assert_failed>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0a:	4950      	ldr	r1, [pc, #320]	; (8002c4c <HAL_RCC_ClockConfig+0x2ac>)
 8002b0c:	688b      	ldr	r3, [r1, #8]
 8002b0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b12:	68a3      	ldr	r3, [r4, #8]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b18:	6823      	ldr	r3, [r4, #0]
 8002b1a:	07da      	lsls	r2, r3, #31
 8002b1c:	d409      	bmi.n	8002b32 <HAL_RCC_ClockConfig+0x192>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <HAL_RCC_ClockConfig+0x2a8>)
 8002b20:	b2ea      	uxtb	r2, r5
 8002b22:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	42ab      	cmp	r3, r5
 8002b2c:	f47f af59 	bne.w	80029e2 <HAL_RCC_ClockConfig+0x42>
 8002b30:	e77d      	b.n	8002a2e <HAL_RCC_ClockConfig+0x8e>
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002b32:	6863      	ldr	r3, [r4, #4]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d904      	bls.n	8002b42 <HAL_RCC_ClockConfig+0x1a2>
 8002b38:	4842      	ldr	r0, [pc, #264]	; (8002c44 <HAL_RCC_ClockConfig+0x2a4>)
 8002b3a:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8002b3e:	f7fe fe15 	bl	800176c <assert_failed>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b42:	6862      	ldr	r2, [r4, #4]
 8002b44:	4b41      	ldr	r3, [pc, #260]	; (8002c4c <HAL_RCC_ClockConfig+0x2ac>)
 8002b46:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b48:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	d102      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x1b2>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4c:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8002b50:	e006      	b.n	8002b60 <HAL_RCC_ClockConfig+0x1c0>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b52:	2a02      	cmp	r2, #2
 8002b54:	d102      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x1bc>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b56:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8002b5a:	e001      	b.n	8002b60 <HAL_RCC_ClockConfig+0x1c0>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	f011 0f02 	tst.w	r1, #2
 8002b60:	f43f af3f 	beq.w	80029e2 <HAL_RCC_ClockConfig+0x42>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b64:	6899      	ldr	r1, [r3, #8]
 8002b66:	f021 0103 	bic.w	r1, r1, #3
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	609a      	str	r2, [r3, #8]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6e:	f001 f8e5 	bl	8003d3c <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b72:	6863      	ldr	r3, [r4, #4]
 8002b74:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b76:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b78:	d10d      	bne.n	8002b96 <HAL_RCC_ClockConfig+0x1f6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002b7a:	4b34      	ldr	r3, [pc, #208]	; (8002c4c <HAL_RCC_ClockConfig+0x2ac>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d0cb      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b86:	f001 f8d9 	bl	8003d3c <HAL_GetTick>
 8002b8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b8e:	1b80      	subs	r0, r0, r6
 8002b90:	4298      	cmp	r0, r3
 8002b92:	d9f2      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x1da>
 8002b94:	e780      	b.n	8002a98 <HAL_RCC_ClockConfig+0xf8>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d115      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0x226>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b9a:	4b2c      	ldr	r3, [pc, #176]	; (8002c4c <HAL_RCC_ClockConfig+0x2ac>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d0bb      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba6:	f001 f8c9 	bl	8003d3c <HAL_GetTick>
 8002baa:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bae:	1b80      	subs	r0, r0, r6
 8002bb0:	4298      	cmp	r0, r3
 8002bb2:	d9f2      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x1fa>
 8002bb4:	e770      	b.n	8002a98 <HAL_RCC_ClockConfig+0xf8>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb6:	f001 f8c1 	bl	8003d3c <HAL_GetTick>
 8002bba:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bbe:	1b80      	subs	r0, r0, r6
 8002bc0:	4298      	cmp	r0, r3
 8002bc2:	f63f af69 	bhi.w	8002a98 <HAL_RCC_ClockConfig+0xf8>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8002bc6:	4b21      	ldr	r3, [pc, #132]	; (8002c4c <HAL_RCC_ClockConfig+0x2ac>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f013 0f0c 	tst.w	r3, #12
 8002bce:	d1f2      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0x216>
 8002bd0:	e7a5      	b.n	8002b1e <HAL_RCC_ClockConfig+0x17e>
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002bd2:	68e3      	ldr	r3, [r4, #12]
 8002bd4:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x254>
 8002bda:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002bde:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8002be2:	d007      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x254>
 8002be4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002be8:	d004      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x254>
 8002bea:	4816      	ldr	r0, [pc, #88]	; (8002c44 <HAL_RCC_ClockConfig+0x2a4>)
 8002bec:	f44f 714c 	mov.w	r1, #816	; 0x330
 8002bf0:	f7fe fdbc 	bl	800176c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf4:	4915      	ldr	r1, [pc, #84]	; (8002c4c <HAL_RCC_ClockConfig+0x2ac>)
 8002bf6:	688b      	ldr	r3, [r1, #8]
 8002bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bfc:	68e3      	ldr	r3, [r4, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	071b      	lsls	r3, r3, #28
 8002c06:	d518      	bpl.n	8002c3a <HAL_RCC_ClockConfig+0x29a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002c08:	6923      	ldr	r3, [r4, #16]
 8002c0a:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8002c0e:	d00c      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x28a>
 8002c10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c14:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8002c18:	d007      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x28a>
 8002c1a:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002c1e:	d004      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x28a>
 8002c20:	4808      	ldr	r0, [pc, #32]	; (8002c44 <HAL_RCC_ClockConfig+0x2a4>)
 8002c22:	f240 3137 	movw	r1, #823	; 0x337
 8002c26:	f7fe fda1 	bl	800176c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c2a:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <HAL_RCC_ClockConfig+0x2ac>)
 8002c2c:	6921      	ldr	r1, [r4, #16]
 8002c2e:	6893      	ldr	r3, [r2, #8]
 8002c30:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002c34:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c38:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c3a:	200f      	movs	r0, #15
 8002c3c:	f001 f84e 	bl	8003cdc <HAL_InitTick>
  
  return HAL_OK;
 8002c40:	2000      	movs	r0, #0
}
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
 8002c44:	080094f7 	.word	0x080094f7
 8002c48:	40023c00 	.word	0x40023c00
 8002c4c:	40023800 	.word	0x40023800

08002c50 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c50:	b530      	push	{r4, r5, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c52:	4c1d      	ldr	r4, [pc, #116]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002c54:	68a3      	ldr	r3, [r4, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d030      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x70>
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d130      	bne.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x74>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c62:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c64:	6863      	ldr	r3, [r4, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c66:	f002 053f 	and.w	r5, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c6a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002c6e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8002c72:	6863      	ldr	r3, [r4, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	fab1 f181 	clz	r1, r1
 8002c7c:	f647 70c0 	movw	r0, #32704	; 0x7fc0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8002c80:	bf04      	itt	eq
 8002c82:	4a12      	ldreq	r2, [pc, #72]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x7c>)
 8002c84:	fbb2 f2f5 	udiveq	r2, r2, r5
 8002c88:	b2c9      	uxtb	r1, r1
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8002c8a:	ea00 0003 	and.w	r0, r0, r3
 8002c8e:	fa20 f001 	lsr.w	r0, r0, r1
 8002c92:	bf1c      	itt	ne
 8002c94:	490e      	ldrne	r1, [pc, #56]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x80>)
 8002c96:	fbb1 f2f5 	udivne	r2, r1, r5
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8002c9a:	fb02 f300 	mul.w	r3, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002ca0:	6850      	ldr	r0, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ca6:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	fab2 f282 	clz	r2, r2
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8002cb4:	40d0      	lsrs	r0, r2
 8002cb6:	3001      	adds	r0, #1
 8002cb8:	0040      	lsls	r0, r0, #1
      
      sysclockfreq = pllvco/pllp;
 8002cba:	fbb3 f0f0 	udiv	r0, r3, r0
 8002cbe:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cc0:	4803      	ldr	r0, [pc, #12]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x80>)
 8002cc2:	bd30      	pop	{r4, r5, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc4:	4801      	ldr	r0, [pc, #4]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x7c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002cc6:	bd30      	pop	{r4, r5, pc}
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	00f42400 	.word	0x00f42400
 8002cd0:	007a1200 	.word	0x007a1200

08002cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd4:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002cd6:	f7ff ffbb 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002cdc:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	23f0      	movs	r3, #240	; 0xf0
 8002ce0:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf2:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <HAL_RCC_GetHCLKFreq+0x30>)
 8002cf4:	5cd3      	ldrb	r3, [r2, r3]
 8002cf6:	40d8      	lsrs	r0, r3
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <HAL_RCC_GetHCLKFreq+0x34>)
 8002cfa:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8002cfc:	bd08      	pop	{r3, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	080094e7 	.word	0x080094e7
 8002d08:	20000000 	.word	0x20000000

08002d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8002d0c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002d0e:	f7ff ffe1 	bl	8002cd4 <HAL_RCC_GetHCLKFreq>
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d14:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2c:	4a02      	ldr	r2, [pc, #8]	; (8002d38 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002d30:	40d8      	lsrs	r0, r3
 8002d32:	bd08      	pop	{r3, pc}
 8002d34:	40023800 	.word	0x40023800
 8002d38:	080094e7 	.word	0x080094e7

08002d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d3c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002d3e:	f7ff ffc9 	bl	8002cd4 <HAL_RCC_GetHCLKFreq>
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d44:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5c:	4a02      	ldr	r2, [pc, #8]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8002d5e:	5cd3      	ldrb	r3, [r2, r3]
} 
 8002d60:	40d8      	lsrs	r0, r3
 8002d62:	bd08      	pop	{r3, pc}
 8002d64:	40023800 	.word	0x40023800
 8002d68:	080094e7 	.word	0x080094e7

08002d6c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d6c:	230f      	movs	r3, #15
 8002d6e:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_RCC_GetClockConfig+0x34>)
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	f002 0203 	and.w	r2, r2, #3
 8002d78:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002d80:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002d88:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002d90:	08db      	lsrs	r3, r3, #3
 8002d92:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_RCC_GetClockConfig+0x38>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	600b      	str	r3, [r1, #0]
 8002d9e:	4770      	bx	lr
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40023c00 	.word	0x40023c00

08002da8 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0;
  uint32_t pclk1 = 0;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8002daa:	4604      	mov	r4, r0
 8002dac:	2800      	cmp	r0, #0
 8002dae:	f000 80bb 	beq.w	8002f28 <HAL_I2C_Init+0x180>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002db2:	6803      	ldr	r3, [r0, #0]
 8002db4:	4a5d      	ldr	r2, [pc, #372]	; (8002f2c <HAL_I2C_Init+0x184>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00c      	beq.n	8002dd4 <HAL_I2C_Init+0x2c>
 8002dba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d008      	beq.n	8002dd4 <HAL_I2C_Init+0x2c>
 8002dc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <HAL_I2C_Init+0x2c>
 8002dca:	4859      	ldr	r0, [pc, #356]	; (8002f30 <HAL_I2C_Init+0x188>)
 8002dcc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002dd0:	f7fe fccc 	bl	800176c <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002dd4:	6863      	ldr	r3, [r4, #4]
 8002dd6:	4a57      	ldr	r2, [pc, #348]	; (8002f34 <HAL_I2C_Init+0x18c>)
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d904      	bls.n	8002de8 <HAL_I2C_Init+0x40>
 8002dde:	4854      	ldr	r0, [pc, #336]	; (8002f30 <HAL_I2C_Init+0x188>)
 8002de0:	f240 112d 	movw	r1, #301	; 0x12d
 8002de4:	f7fe fcc2 	bl	800176c <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002de8:	68a3      	ldr	r3, [r4, #8]
 8002dea:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8002dee:	d004      	beq.n	8002dfa <HAL_I2C_Init+0x52>
 8002df0:	484f      	ldr	r0, [pc, #316]	; (8002f30 <HAL_I2C_Init+0x188>)
 8002df2:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8002df6:	f7fe fcb9 	bl	800176c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002dfa:	68e3      	ldr	r3, [r4, #12]
 8002dfc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e00:	f023 0303 	bic.w	r3, r3, #3
 8002e04:	b123      	cbz	r3, 8002e10 <HAL_I2C_Init+0x68>
 8002e06:	484a      	ldr	r0, [pc, #296]	; (8002f30 <HAL_I2C_Init+0x188>)
 8002e08:	f240 112f 	movw	r1, #303	; 0x12f
 8002e0c:	f7fe fcae 	bl	800176c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002e10:	6923      	ldr	r3, [r4, #16]
 8002e12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e1a:	d004      	beq.n	8002e26 <HAL_I2C_Init+0x7e>
 8002e1c:	4844      	ldr	r0, [pc, #272]	; (8002f30 <HAL_I2C_Init+0x188>)
 8002e1e:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002e22:	f7fe fca3 	bl	800176c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002e26:	6963      	ldr	r3, [r4, #20]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d904      	bls.n	8002e36 <HAL_I2C_Init+0x8e>
 8002e2c:	4840      	ldr	r0, [pc, #256]	; (8002f30 <HAL_I2C_Init+0x188>)
 8002e2e:	f240 1131 	movw	r1, #305	; 0x131
 8002e32:	f7fe fc9b 	bl	800176c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002e36:	69a3      	ldr	r3, [r4, #24]
 8002e38:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 8002e3c:	d004      	beq.n	8002e48 <HAL_I2C_Init+0xa0>
 8002e3e:	483c      	ldr	r0, [pc, #240]	; (8002f30 <HAL_I2C_Init+0x188>)
 8002e40:	f44f 7199 	mov.w	r1, #306	; 0x132
 8002e44:	f7fe fc92 	bl	800176c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002e48:	69e3      	ldr	r3, [r4, #28]
 8002e4a:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8002e4e:	d004      	beq.n	8002e5a <HAL_I2C_Init+0xb2>
 8002e50:	4837      	ldr	r0, [pc, #220]	; (8002f30 <HAL_I2C_Init+0x188>)
 8002e52:	f240 1133 	movw	r1, #307	; 0x133
 8002e56:	f7fe fc89 	bl	800176c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002e5a:	6a23      	ldr	r3, [r4, #32]
 8002e5c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002e60:	d004      	beq.n	8002e6c <HAL_I2C_Init+0xc4>
 8002e62:	4833      	ldr	r0, [pc, #204]	; (8002f30 <HAL_I2C_Init+0x188>)
 8002e64:	f44f 719a 	mov.w	r1, #308	; 0x134
 8002e68:	f7fe fc80 	bl	800176c <assert_failed>

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8002e6c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002e70:	b913      	cbnz	r3, 8002e78 <HAL_I2C_Init+0xd0>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e72:	4620      	mov	r0, r4
 8002e74:	f7fe fcca 	bl	800180c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e78:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002e7a:	4d2f      	ldr	r5, [pc, #188]	; (8002f38 <HAL_I2C_Init+0x190>)
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e82:	6813      	ldr	r3, [r2, #0]
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e8a:	f7ff ff3f 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002e8e:	6863      	ldr	r3, [r4, #4]
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8002e90:	6822      	ldr	r2, [r4, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e92:	492a      	ldr	r1, [pc, #168]	; (8002f3c <HAL_I2C_Init+0x194>)
 8002e94:	fbb0 f1f1 	udiv	r1, r0, r1
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002e98:	42ab      	cmp	r3, r5
 8002e9a:	462e      	mov	r6, r5
 8002e9c:	bf88      	it	hi
 8002e9e:	f44f 7596 	movhi.w	r5, #300	; 0x12c
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8002ea2:	6051      	str	r1, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002ea4:	bf82      	ittt	hi
 8002ea6:	4369      	mulhi	r1, r5
 8002ea8:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8002eac:	fbb1 f1f5 	udivhi	r1, r1, r5

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002eb0:	42b3      	cmp	r3, r6
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002eb2:	f101 0101 	add.w	r1, r1, #1
 8002eb6:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002eb8:	d808      	bhi.n	8002ecc <HAL_I2C_Init+0x124>
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ec0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	bf98      	it	ls
 8002ec8:	2004      	movls	r0, #4
 8002eca:	e016      	b.n	8002efa <HAL_I2C_Init+0x152>
 8002ecc:	68a1      	ldr	r1, [r4, #8]
 8002ece:	b949      	cbnz	r1, 8002ee4 <HAL_I2C_Init+0x13c>
 8002ed0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002ed4:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ed8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002edc:	b163      	cbz	r3, 8002ef8 <HAL_I2C_Init+0x150>
 8002ede:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8002ee2:	e00a      	b.n	8002efa <HAL_I2C_Init+0x152>
 8002ee4:	2119      	movs	r1, #25
 8002ee6:	434b      	muls	r3, r1
 8002ee8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002eec:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002ef0:	b113      	cbz	r3, 8002ef8 <HAL_I2C_Init+0x150>
 8002ef2:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8002ef6:	e000      	b.n	8002efa <HAL_I2C_Init+0x152>
 8002ef8:	2001      	movs	r0, #1

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002efa:	6a21      	ldr	r1, [r4, #32]
 8002efc:	69e3      	ldr	r3, [r4, #28]
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002efe:	61d0      	str	r0, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f00:	430b      	orrs	r3, r1
 8002f02:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8002f04:	68e1      	ldr	r1, [r4, #12]
 8002f06:	6923      	ldr	r3, [r4, #16]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8002f0c:	69a1      	ldr	r1, [r4, #24]
 8002f0e:	6963      	ldr	r3, [r4, #20]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f14:	6813      	ldr	r3, [r2, #0]
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f1c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1e:	2301      	movs	r3, #1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f20:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8002f26:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t pclk1 = 0;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8002f28:	2001      	movs	r0, #1

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;

  return HAL_OK;
}
 8002f2a:	bd70      	pop	{r4, r5, r6, pc}
 8002f2c:	40005400 	.word	0x40005400
 8002f30:	08009546 	.word	0x08009546
 8002f34:	00061a7f 	.word	0x00061a7f
 8002f38:	000186a0 	.word	0x000186a0
 8002f3c:	000f4240 	.word	0x000f4240

08002f40 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002f40:	1ec3      	subs	r3, r0, #3
 8002f42:	2b04      	cmp	r3, #4
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b510      	push	{r4, lr}
 8002f46:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002f48:	d903      	bls.n	8002f52 <HAL_NVIC_SetPriorityGrouping+0x12>
 8002f4a:	4809      	ldr	r0, [pc, #36]	; (8002f70 <HAL_NVIC_SetPriorityGrouping+0x30>)
 8002f4c:	21a4      	movs	r1, #164	; 0xa4
 8002f4e:	f7fe fc0d 	bl	800176c <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f52:	4a08      	ldr	r2, [pc, #32]	; (8002f74 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8002f54:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8002f56:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f5a:	400b      	ands	r3, r1
 8002f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8002f64:	f004 0407 	and.w	r4, r4, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8002f68:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002f6c:	60d3      	str	r3, [r2, #12]
 8002f6e:	bd10      	pop	{r4, pc}
 8002f70:	08009595 	.word	0x08009595
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002f78:	2a0f      	cmp	r2, #15
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f7a:	b570      	push	{r4, r5, r6, lr}
 8002f7c:	4605      	mov	r5, r0
 8002f7e:	460c      	mov	r4, r1
 8002f80:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002f82:	d903      	bls.n	8002f8c <HAL_NVIC_SetPriority+0x14>
 8002f84:	481a      	ldr	r0, [pc, #104]	; (8002ff0 <HAL_NVIC_SetPriority+0x78>)
 8002f86:	21bc      	movs	r1, #188	; 0xbc
 8002f88:	f7fe fbf0 	bl	800176c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002f8c:	2c0f      	cmp	r4, #15
 8002f8e:	d903      	bls.n	8002f98 <HAL_NVIC_SetPriority+0x20>
 8002f90:	4817      	ldr	r0, [pc, #92]	; (8002ff0 <HAL_NVIC_SetPriority+0x78>)
 8002f92:	21bd      	movs	r1, #189	; 0xbd
 8002f94:	f7fe fbea 	bl	800176c <assert_failed>

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <HAL_NVIC_SetPriority+0x7c>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8002fa0:	f1c3 0207 	rsb	r2, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002fa4:	1d19      	adds	r1, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8002fa6:	2a04      	cmp	r2, #4
 8002fa8:	bf28      	it	cs
 8002faa:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002fac:	2906      	cmp	r1, #6
 8002fae:	bf8c      	ite	hi
 8002fb0:	3b03      	subhi	r3, #3
 8002fb2:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	fa01 f003 	lsl.w	r0, r1, r3

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002fba:	4091      	lsls	r1, r2
 8002fbc:	3901      	subs	r1, #1
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002fbe:	3801      	subs	r0, #1

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002fc0:	400c      	ands	r4, r1
 8002fc2:	409c      	lsls	r4, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002fc4:	4006      	ands	r6, r0
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 8002fc6:	2d00      	cmp	r5, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8002fc8:	ea44 0406 	orr.w	r4, r4, r6
 8002fcc:	ea4f 1404 	mov.w	r4, r4, lsl #4
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002fd0:	bfaf      	iteee	ge
 8002fd2:	f105 4560 	addge.w	r5, r5, #3758096384	; 0xe0000000
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002fd6:	f005 050f 	andlt.w	r5, r5, #15
 8002fda:	4b07      	ldrlt	r3, [pc, #28]	; (8002ff8 <HAL_NVIC_SetPriority+0x80>)
 8002fdc:	b2e4      	uxtblt	r4, r4
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002fde:	bfa5      	ittet	ge
 8002fe0:	f505 4561 	addge.w	r5, r5, #57600	; 0xe100
 8002fe4:	b2e4      	uxtbge	r4, r4
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002fe6:	555c      	strblt	r4, [r3, r5]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002fe8:	f885 4300 	strbge.w	r4, [r5, #768]	; 0x300
 8002fec:	bd70      	pop	{r4, r5, r6, pc}
 8002fee:	bf00      	nop
 8002ff0:	08009595 	.word	0x08009595
 8002ff4:	e000ed00 	.word	0xe000ed00
 8002ff8:	e000ed14 	.word	0xe000ed14

08002ffc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ffc:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002ffe:	1e04      	subs	r4, r0, #0
 8003000:	da03      	bge.n	800300a <HAL_NVIC_EnableIRQ+0xe>
 8003002:	4806      	ldr	r0, [pc, #24]	; (800301c <HAL_NVIC_EnableIRQ+0x20>)
 8003004:	21d0      	movs	r1, #208	; 0xd0
 8003006:	f7fe fbb1 	bl	800176c <assert_failed>
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800300a:	0961      	lsrs	r1, r4, #5
 800300c:	2301      	movs	r3, #1
 800300e:	f004 041f 	and.w	r4, r4, #31
 8003012:	4a03      	ldr	r2, [pc, #12]	; (8003020 <HAL_NVIC_EnableIRQ+0x24>)
 8003014:	40a3      	lsls	r3, r4
 8003016:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800301a:	bd10      	pop	{r4, pc}
 800301c:	08009595 	.word	0x08009595
 8003020:	e000e100 	.word	0xe000e100

08003024 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8003024:	3801      	subs	r0, #1
 8003026:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800302a:	bf3f      	itttt	cc
 800302c:	4b06      	ldrcc	r3, [pc, #24]	; (8003048 <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800302e:	4a07      	ldrcc	r2, [pc, #28]	; (800304c <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8003030:	6058      	strcc	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8003032:	21f0      	movcc	r1, #240	; 0xf0
 8003034:	bf3f      	itttt	cc
 8003036:	f882 1023 	strbcc.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800303a:	2000      	movcc	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800303c:	2207      	movcc	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800303e:	6098      	strcc	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003040:	bf34      	ite	cc
 8003042:	601a      	strcc	r2, [r3, #0]
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8003044:	2001      	movcs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003046:	4770      	bx	lr
 8003048:	e000e010 	.word	0xe000e010
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmpreg = 0x00;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 8003054:	6842      	ldr	r2, [r0, #4]
 8003056:	4b62      	ldr	r3, [pc, #392]	; (80031e0 <UART_SetConfig+0x190>)
 8003058:	429a      	cmp	r2, r3
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800305a:	4604      	mov	r4, r0
  uint32_t tmpreg = 0x00;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 800305c:	d904      	bls.n	8003068 <UART_SetConfig+0x18>
 800305e:	4861      	ldr	r0, [pc, #388]	; (80031e4 <UART_SetConfig+0x194>)
 8003060:	f240 712e 	movw	r1, #1838	; 0x72e
 8003064:	f7fe fb82 	bl	800176c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003068:	68e3      	ldr	r3, [r4, #12]
 800306a:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800306e:	d004      	beq.n	800307a <UART_SetConfig+0x2a>
 8003070:	485c      	ldr	r0, [pc, #368]	; (80031e4 <UART_SetConfig+0x194>)
 8003072:	f240 712f 	movw	r1, #1839	; 0x72f
 8003076:	f7fe fb79 	bl	800176c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800307a:	6923      	ldr	r3, [r4, #16]
 800307c:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8003080:	d007      	beq.n	8003092 <UART_SetConfig+0x42>
 8003082:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003086:	d004      	beq.n	8003092 <UART_SetConfig+0x42>
 8003088:	4856      	ldr	r0, [pc, #344]	; (80031e4 <UART_SetConfig+0x194>)
 800308a:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 800308e:	f7fe fb6d 	bl	800176c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003092:	6962      	ldr	r2, [r4, #20]
 8003094:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003098:	4013      	ands	r3, r2
 800309a:	b903      	cbnz	r3, 800309e <UART_SetConfig+0x4e>
 800309c:	b922      	cbnz	r2, 80030a8 <UART_SetConfig+0x58>
 800309e:	4851      	ldr	r0, [pc, #324]	; (80031e4 <UART_SetConfig+0x194>)
 80030a0:	f240 7131 	movw	r1, #1841	; 0x731
 80030a4:	f7fe fb62 	bl	800176c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80030a8:	6826      	ldr	r6, [r4, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030aa:	6921      	ldr	r1, [r4, #16]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80030ac:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ae:	69e0      	ldr	r0, [r4, #28]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80030b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80030b4:	68e3      	ldr	r3, [r4, #12]
 80030b6:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030b8:	68a2      	ldr	r2, [r4, #8]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 80030ba:	6133      	str	r3, [r6, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80030bc:	68f3      	ldr	r3, [r6, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030be:	4311      	orrs	r1, r2
 80030c0:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80030c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030c6:	430a      	orrs	r2, r1
 80030c8:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80030ca:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ce:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 80030d0:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80030d2:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80030d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80030d8:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80030de:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 80030e2:	6173      	str	r3, [r6, #20]
 80030e4:	4b40      	ldr	r3, [pc, #256]	; (80031e8 <UART_SetConfig+0x198>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030e6:	d136      	bne.n	8003156 <UART_SetConfig+0x106>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80030e8:	429e      	cmp	r6, r3
 80030ea:	d003      	beq.n	80030f4 <UART_SetConfig+0xa4>
 80030ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030f0:	429e      	cmp	r6, r3
 80030f2:	d116      	bne.n	8003122 <UART_SetConfig+0xd2>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80030f4:	f7ff fe22 	bl	8002d3c <HAL_RCC_GetPCLK2Freq>
 80030f8:	6867      	ldr	r7, [r4, #4]
 80030fa:	2519      	movs	r5, #25
 80030fc:	4368      	muls	r0, r5
 80030fe:	007f      	lsls	r7, r7, #1
 8003100:	fbb0 f7f7 	udiv	r7, r0, r7
 8003104:	f7ff fe1a 	bl	8002d3c <HAL_RCC_GetPCLK2Freq>
 8003108:	6862      	ldr	r2, [r4, #4]
 800310a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800310e:	4368      	muls	r0, r5
 8003110:	fbb7 f7f8 	udiv	r7, r7, r8
 8003114:	0052      	lsls	r2, r2, #1
 8003116:	013f      	lsls	r7, r7, #4
 8003118:	fbb0 f9f2 	udiv	r9, r0, r2
 800311c:	f7ff fe0e 	bl	8002d3c <HAL_RCC_GetPCLK2Freq>
 8003120:	e015      	b.n	800314e <UART_SetConfig+0xfe>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003122:	f7ff fdf3 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 8003126:	6867      	ldr	r7, [r4, #4]
 8003128:	2519      	movs	r5, #25
 800312a:	4368      	muls	r0, r5
 800312c:	007f      	lsls	r7, r7, #1
 800312e:	fbb0 f7f7 	udiv	r7, r0, r7
 8003132:	f7ff fdeb 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 8003136:	6862      	ldr	r2, [r4, #4]
 8003138:	f04f 0864 	mov.w	r8, #100	; 0x64
 800313c:	4368      	muls	r0, r5
 800313e:	fbb7 f7f8 	udiv	r7, r7, r8
 8003142:	0052      	lsls	r2, r2, #1
 8003144:	013f      	lsls	r7, r7, #4
 8003146:	fbb0 f9f2 	udiv	r9, r0, r2
 800314a:	f7ff fddf 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 800314e:	4345      	muls	r5, r0
 8003150:	6860      	ldr	r0, [r4, #4]
 8003152:	0040      	lsls	r0, r0, #1
 8003154:	e034      	b.n	80031c0 <UART_SetConfig+0x170>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003156:	429e      	cmp	r6, r3
 8003158:	d002      	beq.n	8003160 <UART_SetConfig+0x110>
 800315a:	4b24      	ldr	r3, [pc, #144]	; (80031ec <UART_SetConfig+0x19c>)
 800315c:	429e      	cmp	r6, r3
 800315e:	d116      	bne.n	800318e <UART_SetConfig+0x13e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003160:	f7ff fdec 	bl	8002d3c <HAL_RCC_GetPCLK2Freq>
 8003164:	6867      	ldr	r7, [r4, #4]
 8003166:	2519      	movs	r5, #25
 8003168:	4368      	muls	r0, r5
 800316a:	00bf      	lsls	r7, r7, #2
 800316c:	fbb0 f7f7 	udiv	r7, r0, r7
 8003170:	f7ff fde4 	bl	8002d3c <HAL_RCC_GetPCLK2Freq>
 8003174:	6862      	ldr	r2, [r4, #4]
 8003176:	f04f 0864 	mov.w	r8, #100	; 0x64
 800317a:	4368      	muls	r0, r5
 800317c:	fbb7 f7f8 	udiv	r7, r7, r8
 8003180:	0092      	lsls	r2, r2, #2
 8003182:	013f      	lsls	r7, r7, #4
 8003184:	fbb0 f9f2 	udiv	r9, r0, r2
 8003188:	f7ff fdd8 	bl	8002d3c <HAL_RCC_GetPCLK2Freq>
 800318c:	e015      	b.n	80031ba <UART_SetConfig+0x16a>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800318e:	f7ff fdbd 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 8003192:	6867      	ldr	r7, [r4, #4]
 8003194:	2519      	movs	r5, #25
 8003196:	4368      	muls	r0, r5
 8003198:	00bf      	lsls	r7, r7, #2
 800319a:	fbb0 f7f7 	udiv	r7, r0, r7
 800319e:	f7ff fdb5 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 80031a2:	6862      	ldr	r2, [r4, #4]
 80031a4:	f04f 0864 	mov.w	r8, #100	; 0x64
 80031a8:	4368      	muls	r0, r5
 80031aa:	fbb7 f7f8 	udiv	r7, r7, r8
 80031ae:	0092      	lsls	r2, r2, #2
 80031b0:	013f      	lsls	r7, r7, #4
 80031b2:	fbb0 f9f2 	udiv	r9, r0, r2
 80031b6:	f7ff fda9 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 80031ba:	4345      	muls	r5, r0
 80031bc:	6860      	ldr	r0, [r4, #4]
 80031be:	0080      	lsls	r0, r0, #2
 80031c0:	fbb5 f0f0 	udiv	r0, r5, r0
 80031c4:	fbb0 f0f8 	udiv	r0, r0, r8
 80031c8:	fb08 9210 	mls	r2, r8, r0, r9
 80031cc:	0112      	lsls	r2, r2, #4
 80031ce:	3232      	adds	r2, #50	; 0x32
 80031d0:	fbb2 f3f8 	udiv	r3, r2, r8
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	433b      	orrs	r3, r7
 80031da:	60b3      	str	r3, [r6, #8]
 80031dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031e0:	00a037a0 	.word	0x00a037a0
 80031e4:	080095e7 	.word	0x080095e7
 80031e8:	40011000 	.word	0x40011000
 80031ec:	40011400 	.word	0x40011400

080031f0 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f0:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80031f2:	4604      	mov	r4, r0
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d06c      	beq.n	80032d2 <HAL_UART_Init+0xe2>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80031f8:	6981      	ldr	r1, [r0, #24]
 80031fa:	6803      	ldr	r3, [r0, #0]
 80031fc:	4a36      	ldr	r2, [pc, #216]	; (80032d8 <HAL_UART_Init+0xe8>)
 80031fe:	b1c1      	cbz	r1, 8003232 <HAL_UART_Init+0x42>
  { 
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003200:	4293      	cmp	r3, r2
 8003202:	d00f      	beq.n	8003224 <HAL_UART_Init+0x34>
 8003204:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8003208:	4293      	cmp	r3, r2
 800320a:	d00b      	beq.n	8003224 <HAL_UART_Init+0x34>
 800320c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003210:	4293      	cmp	r3, r2
 8003212:	d007      	beq.n	8003224 <HAL_UART_Init+0x34>
 8003214:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <HAL_UART_Init+0x34>
 800321c:	482f      	ldr	r0, [pc, #188]	; (80032dc <HAL_UART_Init+0xec>)
 800321e:	21fc      	movs	r1, #252	; 0xfc
 8003220:	f7fe faa4 	bl	800176c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003224:	69a3      	ldr	r3, [r4, #24]
 8003226:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800322a:	d01c      	beq.n	8003266 <HAL_UART_Init+0x76>
 800322c:	482b      	ldr	r0, [pc, #172]	; (80032dc <HAL_UART_Init+0xec>)
 800322e:	21fd      	movs	r1, #253	; 0xfd
 8003230:	e017      	b.n	8003262 <HAL_UART_Init+0x72>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003232:	4293      	cmp	r3, r2
 8003234:	d017      	beq.n	8003266 <HAL_UART_Init+0x76>
 8003236:	4a2a      	ldr	r2, [pc, #168]	; (80032e0 <HAL_UART_Init+0xf0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d014      	beq.n	8003266 <HAL_UART_Init+0x76>
 800323c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003240:	4293      	cmp	r3, r2
 8003242:	d010      	beq.n	8003266 <HAL_UART_Init+0x76>
 8003244:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003248:	4293      	cmp	r3, r2
 800324a:	d00c      	beq.n	8003266 <HAL_UART_Init+0x76>
 800324c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003250:	4293      	cmp	r3, r2
 8003252:	d008      	beq.n	8003266 <HAL_UART_Init+0x76>
 8003254:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8003258:	4293      	cmp	r3, r2
 800325a:	d004      	beq.n	8003266 <HAL_UART_Init+0x76>
 800325c:	481f      	ldr	r0, [pc, #124]	; (80032dc <HAL_UART_Init+0xec>)
 800325e:	f240 1101 	movw	r1, #257	; 0x101
 8003262:	f7fe fa83 	bl	800176c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003266:	68a3      	ldr	r3, [r4, #8]
 8003268:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800326c:	d004      	beq.n	8003278 <HAL_UART_Init+0x88>
 800326e:	481b      	ldr	r0, [pc, #108]	; (80032dc <HAL_UART_Init+0xec>)
 8003270:	f240 1103 	movw	r1, #259	; 0x103
 8003274:	f7fe fa7a 	bl	800176c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003278:	69e3      	ldr	r3, [r4, #28]
 800327a:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800327e:	d004      	beq.n	800328a <HAL_UART_Init+0x9a>
 8003280:	4816      	ldr	r0, [pc, #88]	; (80032dc <HAL_UART_Init+0xec>)
 8003282:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003286:	f7fe fa71 	bl	800176c <assert_failed>
  
  if(huart->State == HAL_UART_STATE_RESET)
 800328a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800328e:	b913      	cbnz	r3, 8003296 <HAL_UART_Init+0xa6>
  {  
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003290:	4620      	mov	r0, r4
 8003292:	f7fe fa87 	bl	80017a4 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003296:	6822      	ldr	r2, [r4, #0]
  {  
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->State = HAL_UART_STATE_BUSY;
 8003298:	2302      	movs	r3, #2
 800329a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800329e:	68d3      	ldr	r3, [r2, #12]
 80032a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032a4:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032a6:	4620      	mov	r0, r4
 80032a8:	f7ff fed2 	bl	8003050 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032b4:	611a      	str	r2, [r3, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032bc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032c4:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c6:	2000      	movs	r0, #0
  huart->State= HAL_UART_STATE_READY;
 80032c8:	2301      	movs	r3, #1
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ca:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80032cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 80032d0:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 80032d2:	2001      	movs	r0, #1
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 80032d4:	bd10      	pop	{r4, pc}
 80032d6:	bf00      	nop
 80032d8:	40011000 	.word	0x40011000
 80032dc:	080095e7 	.word	0x080095e7
 80032e0:	40004400 	.word	0x40004400

080032e4 <FSMC_NORSRAM_Init>:
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
  uint32_t tmpr = 0;
    
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_BANK(Init->NSBank));
 80032e4:	680b      	ldr	r3, [r1, #0]
 80032e6:	f033 0306 	bics.w	r3, r3, #6
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80032ea:	b570      	push	{r4, r5, r6, lr}
 80032ec:	4605      	mov	r5, r0
 80032ee:	460c      	mov	r4, r1
  uint32_t tmpr = 0;
    
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_BANK(Init->NSBank));
 80032f0:	d003      	beq.n	80032fa <FSMC_NORSRAM_Init+0x16>
 80032f2:	4847      	ldr	r0, [pc, #284]	; (8003410 <FSMC_NORSRAM_Init+0x12c>)
 80032f4:	2197      	movs	r1, #151	; 0x97
 80032f6:	f7fe fa39 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_MUX(Init->DataAddressMux));
 80032fa:	6863      	ldr	r3, [r4, #4]
 80032fc:	f033 0302 	bics.w	r3, r3, #2
 8003300:	d003      	beq.n	800330a <FSMC_NORSRAM_Init+0x26>
 8003302:	4843      	ldr	r0, [pc, #268]	; (8003410 <FSMC_NORSRAM_Init+0x12c>)
 8003304:	2198      	movs	r1, #152	; 0x98
 8003306:	f7fe fa31 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_MEMORY(Init->MemoryType));
 800330a:	68a3      	ldr	r3, [r4, #8]
 800330c:	f033 0204 	bics.w	r2, r3, #4
 8003310:	d005      	beq.n	800331e <FSMC_NORSRAM_Init+0x3a>
 8003312:	2b08      	cmp	r3, #8
 8003314:	d003      	beq.n	800331e <FSMC_NORSRAM_Init+0x3a>
 8003316:	483e      	ldr	r0, [pc, #248]	; (8003410 <FSMC_NORSRAM_Init+0x12c>)
 8003318:	2199      	movs	r1, #153	; 0x99
 800331a:	f7fe fa27 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_NORSRAM_MEMORY_WIDTH(Init->MemoryDataWidth));
 800331e:	68e3      	ldr	r3, [r4, #12]
 8003320:	f033 0210 	bics.w	r2, r3, #16
 8003324:	d005      	beq.n	8003332 <FSMC_NORSRAM_Init+0x4e>
 8003326:	2b20      	cmp	r3, #32
 8003328:	d003      	beq.n	8003332 <FSMC_NORSRAM_Init+0x4e>
 800332a:	4839      	ldr	r0, [pc, #228]	; (8003410 <FSMC_NORSRAM_Init+0x12c>)
 800332c:	219a      	movs	r1, #154	; 0x9a
 800332e:	f7fe fa1d 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_BURSTMODE(Init->BurstAccessMode));
 8003332:	6923      	ldr	r3, [r4, #16]
 8003334:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8003338:	d003      	beq.n	8003342 <FSMC_NORSRAM_Init+0x5e>
 800333a:	4835      	ldr	r0, [pc, #212]	; (8003410 <FSMC_NORSRAM_Init+0x12c>)
 800333c:	219b      	movs	r1, #155	; 0x9b
 800333e:	f7fe fa15 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_WAIT_POLARITY(Init->WaitSignalPolarity));
 8003342:	6963      	ldr	r3, [r4, #20]
 8003344:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8003348:	d003      	beq.n	8003352 <FSMC_NORSRAM_Init+0x6e>
 800334a:	4831      	ldr	r0, [pc, #196]	; (8003410 <FSMC_NORSRAM_Init+0x12c>)
 800334c:	219c      	movs	r1, #156	; 0x9c
 800334e:	f7fe fa0d 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_WRAP_MODE(Init->WrapMode));
 8003352:	69a3      	ldr	r3, [r4, #24]
 8003354:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8003358:	d003      	beq.n	8003362 <FSMC_NORSRAM_Init+0x7e>
 800335a:	482d      	ldr	r0, [pc, #180]	; (8003410 <FSMC_NORSRAM_Init+0x12c>)
 800335c:	219d      	movs	r1, #157	; 0x9d
 800335e:	f7fe fa05 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(Init->WaitSignalActive));
 8003362:	69e3      	ldr	r3, [r4, #28]
 8003364:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8003368:	d003      	beq.n	8003372 <FSMC_NORSRAM_Init+0x8e>
 800336a:	4829      	ldr	r0, [pc, #164]	; (8003410 <FSMC_NORSRAM_Init+0x12c>)
 800336c:	219e      	movs	r1, #158	; 0x9e
 800336e:	f7fe f9fd 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_WRITE_OPERATION(Init->WriteOperation));
 8003372:	6a23      	ldr	r3, [r4, #32]
 8003374:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8003378:	d003      	beq.n	8003382 <FSMC_NORSRAM_Init+0x9e>
 800337a:	4825      	ldr	r0, [pc, #148]	; (8003410 <FSMC_NORSRAM_Init+0x12c>)
 800337c:	219f      	movs	r1, #159	; 0x9f
 800337e:	f7fe f9f5 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_WAITE_SIGNAL(Init->WaitSignal));
 8003382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003384:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8003388:	d003      	beq.n	8003392 <FSMC_NORSRAM_Init+0xae>
 800338a:	4821      	ldr	r0, [pc, #132]	; (8003410 <FSMC_NORSRAM_Init+0x12c>)
 800338c:	21a0      	movs	r1, #160	; 0xa0
 800338e:	f7fe f9ed 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
 8003392:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003394:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8003398:	d003      	beq.n	80033a2 <FSMC_NORSRAM_Init+0xbe>
 800339a:	481d      	ldr	r0, [pc, #116]	; (8003410 <FSMC_NORSRAM_Init+0x12c>)
 800339c:	21a1      	movs	r1, #161	; 0xa1
 800339e:	f7fe f9e5 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
 80033a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033a4:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80033a8:	d003      	beq.n	80033b2 <FSMC_NORSRAM_Init+0xce>
 80033aa:	4819      	ldr	r0, [pc, #100]	; (8003410 <FSMC_NORSRAM_Init+0x12c>)
 80033ac:	21a2      	movs	r1, #162	; 0xa2
 80033ae:	f7fe f9dd 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
 80033b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033b4:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 80033b8:	d003      	beq.n	80033c2 <FSMC_NORSRAM_Init+0xde>
 80033ba:	4815      	ldr	r0, [pc, #84]	; (8003410 <FSMC_NORSRAM_Init+0x12c>)
 80033bc:	21a3      	movs	r1, #163	; 0xa3
 80033be:	f7fe f9d5 	bl	800176c <assert_failed>
 80033c2:	6820      	ldr	r0, [r4, #0]
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];

  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80033c4:	4a13      	ldr	r2, [pc, #76]	; (8003414 <FSMC_NORSRAM_Init+0x130>)
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80033c6:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
                     Init->MemoryType           |\
 80033ca:	68a6      	ldr	r6, [r4, #8]
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];

  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80033cc:	401a      	ands	r2, r3
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80033ce:	6863      	ldr	r3, [r4, #4]
 80033d0:	ea46 0103 	orr.w	r1, r6, r3
                     Init->MemoryType           |\
 80033d4:	68e3      	ldr	r3, [r4, #12]
 80033d6:	4319      	orrs	r1, r3
                     Init->MemoryDataWidth      |\
 80033d8:	6923      	ldr	r3, [r4, #16]
 80033da:	4319      	orrs	r1, r3
                     Init->BurstAccessMode      |\
 80033dc:	6963      	ldr	r3, [r4, #20]
 80033de:	4319      	orrs	r1, r3
                     Init->WaitSignalPolarity   |\
 80033e0:	69a3      	ldr	r3, [r4, #24]
 80033e2:	4319      	orrs	r1, r3
                     Init->WrapMode             |\
 80033e4:	69e3      	ldr	r3, [r4, #28]
 80033e6:	4319      	orrs	r1, r3
                     Init->WaitSignalActive     |\
 80033e8:	6a23      	ldr	r3, [r4, #32]
 80033ea:	4319      	orrs	r1, r3
                     Init->WriteOperation       |\
 80033ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033ee:	4319      	orrs	r1, r3
                     Init->WaitSignal           |\
 80033f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80033f2:	4319      	orrs	r1, r3
                     Init->ExtendedMode         |\
 80033f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033f6:	430b      	orrs	r3, r1
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80033f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80033fa:	430b      	orrs	r3, r1
 80033fc:	4313      	orrs	r3, r2
                     Init->ExtendedMode         |\
                     Init->AsynchronousWait     |\
                     Init->WriteBurst
                     );
                    
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80033fe:	2e08      	cmp	r6, #8
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003400:	bf08      	it	eq
 8003402:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
  }
  
  Device->BTCR[Init->NSBank] = tmpr;                   
 8003406:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
  
  return HAL_OK;
}
 800340a:	2000      	movs	r0, #0
 800340c:	bd70      	pop	{r4, r5, r6, pc}
 800340e:	bf00      	nop
 8003410:	08009637 	.word	0x08009637
 8003414:	fff70080 	.word	0xfff70080

08003418 <FSMC_NORSRAM_Timing_Init>:
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
  uint32_t tmpr = 0;
  
  /* Check the parameters */
  assert_param(IS_FSMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 8003418:	680b      	ldr	r3, [r1, #0]
 800341a:	2b0f      	cmp	r3, #15
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	4605      	mov	r5, r0
 8003420:	460c      	mov	r4, r1
 8003422:	4616      	mov	r6, r2
  uint32_t tmpr = 0;
  
  /* Check the parameters */
  assert_param(IS_FSMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 8003424:	d903      	bls.n	800342e <FSMC_NORSRAM_Timing_Init+0x16>
 8003426:	4828      	ldr	r0, [pc, #160]	; (80034c8 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8003428:	21f8      	movs	r1, #248	; 0xf8
 800342a:	f7fe f99f 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_ADDRESS_HOLD_TIME(Timing->AddressHoldTime));
 800342e:	6863      	ldr	r3, [r4, #4]
 8003430:	3b01      	subs	r3, #1
 8003432:	2b0e      	cmp	r3, #14
 8003434:	d903      	bls.n	800343e <FSMC_NORSRAM_Timing_Init+0x26>
 8003436:	4824      	ldr	r0, [pc, #144]	; (80034c8 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8003438:	21f9      	movs	r1, #249	; 0xf9
 800343a:	f7fe f997 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_DATASETUP_TIME(Timing->DataSetupTime));
 800343e:	68a3      	ldr	r3, [r4, #8]
 8003440:	3b01      	subs	r3, #1
 8003442:	2bfe      	cmp	r3, #254	; 0xfe
 8003444:	d903      	bls.n	800344e <FSMC_NORSRAM_Timing_Init+0x36>
 8003446:	4820      	ldr	r0, [pc, #128]	; (80034c8 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8003448:	21fa      	movs	r1, #250	; 0xfa
 800344a:	f7fe f98f 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
 800344e:	68e3      	ldr	r3, [r4, #12]
 8003450:	2b0f      	cmp	r3, #15
 8003452:	d903      	bls.n	800345c <FSMC_NORSRAM_Timing_Init+0x44>
 8003454:	481c      	ldr	r0, [pc, #112]	; (80034c8 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8003456:	21fb      	movs	r1, #251	; 0xfb
 8003458:	f7fe f988 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_CLK_DIV(Timing->CLKDivision));
 800345c:	6923      	ldr	r3, [r4, #16]
 800345e:	3b01      	subs	r3, #1
 8003460:	2b0f      	cmp	r3, #15
 8003462:	d903      	bls.n	800346c <FSMC_NORSRAM_Timing_Init+0x54>
 8003464:	4818      	ldr	r0, [pc, #96]	; (80034c8 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8003466:	21fc      	movs	r1, #252	; 0xfc
 8003468:	f7fe f980 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
 800346c:	6963      	ldr	r3, [r4, #20]
 800346e:	3b01      	subs	r3, #1
 8003470:	2b10      	cmp	r3, #16
 8003472:	d903      	bls.n	800347c <FSMC_NORSRAM_Timing_Init+0x64>
 8003474:	4814      	ldr	r0, [pc, #80]	; (80034c8 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8003476:	21fd      	movs	r1, #253	; 0xfd
 8003478:	f7fe f978 	bl	800176c <assert_failed>
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
 800347c:	69a3      	ldr	r3, [r4, #24]
 800347e:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8003482:	d003      	beq.n	800348c <FSMC_NORSRAM_Timing_Init+0x74>
 8003484:	4810      	ldr	r0, [pc, #64]	; (80034c8 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8003486:	21fe      	movs	r1, #254	; 0xfe
 8003488:	f7fe f970 	bl	800176c <assert_failed>
 800348c:	eb05 0286 	add.w	r2, r5, r6, lsl #2
 8003490:	69a1      	ldr	r1, [r4, #24]
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1];
 8003492:	6853      	ldr	r3, [r2, #4]
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                    ((Timing->AddressHoldTime) << 4)          |\
                    ((Timing->DataSetupTime) << 8)            |\
 8003494:	68a5      	ldr	r5, [r4, #8]
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1];

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8003496:	f003 4640 	and.w	r6, r3, #3221225472	; 0xc0000000
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	430b      	orrs	r3, r1
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                    ((Timing->AddressHoldTime) << 4)          |\
 800349e:	6861      	ldr	r1, [r4, #4]
 80034a0:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 80034a4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
                    ((Timing->DataSetupTime) << 8)            |\
                    ((Timing->BusTurnAroundDuration) << 16)   |\
                    (((Timing->CLKDivision)-1) << 20)         |\
 80034a8:	6923      	ldr	r3, [r4, #16]
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                    ((Timing->AddressHoldTime) << 4)          |\
                    ((Timing->DataSetupTime) << 8)            |\
                    ((Timing->BusTurnAroundDuration) << 16)   |\
 80034aa:	68e5      	ldr	r5, [r4, #12]
                    (((Timing->CLKDivision)-1) << 20)         |\
 80034ac:	3b01      	subs	r3, #1
 80034ae:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 80034b2:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
                    (((Timing->DataLatency)-2) << 24)         |\
 80034b6:	6963      	ldr	r3, [r4, #20]
 80034b8:	3b02      	subs	r3, #2
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
 80034ba:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 80034be:	4333      	orrs	r3, r6
                    ((Timing->BusTurnAroundDuration) << 16)   |\
                    (((Timing->CLKDivision)-1) << 20)         |\
                    (((Timing->DataLatency)-2) << 24)         |\
                    (Timing->AccessMode));
  
  Device->BTCR[Bank + 1] = tmpr; 
 80034c0:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;   
}
 80034c2:	2000      	movs	r0, #0
 80034c4:	bd70      	pop	{r4, r5, r6, pc}
 80034c6:	bf00      	nop
 80034c8:	08009637 	.word	0x08009637

080034cc <FSMC_NORSRAM_Extended_Timing_Init>:
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
  uint32_t tmpr = 0;
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80034cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	4605      	mov	r5, r0
 80034d4:	460c      	mov	r4, r1
 80034d6:	4616      	mov	r6, r2
  uint32_t tmpr = 0;
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80034d8:	d156      	bne.n	8003588 <FSMC_NORSRAM_Extended_Timing_Init+0xbc>
  {
    /* Check the parameters */  
    assert_param(IS_FSMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 80034da:	680b      	ldr	r3, [r1, #0]
 80034dc:	2b0f      	cmp	r3, #15
 80034de:	d904      	bls.n	80034ea <FSMC_NORSRAM_Extended_Timing_Init+0x1e>
 80034e0:	482c      	ldr	r0, [pc, #176]	; (8003594 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 80034e2:	f44f 7193 	mov.w	r1, #294	; 0x126
 80034e6:	f7fe f941 	bl	800176c <assert_failed>
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(Timing->AddressHoldTime));
 80034ea:	6863      	ldr	r3, [r4, #4]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	2b0e      	cmp	r3, #14
 80034f0:	d904      	bls.n	80034fc <FSMC_NORSRAM_Extended_Timing_Init+0x30>
 80034f2:	4828      	ldr	r0, [pc, #160]	; (8003594 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 80034f4:	f240 1127 	movw	r1, #295	; 0x127
 80034f8:	f7fe f938 	bl	800176c <assert_failed>
    assert_param(IS_FSMC_DATASETUP_TIME(Timing->DataSetupTime));
 80034fc:	68a3      	ldr	r3, [r4, #8]
 80034fe:	3b01      	subs	r3, #1
 8003500:	2bfe      	cmp	r3, #254	; 0xfe
 8003502:	d904      	bls.n	800350e <FSMC_NORSRAM_Extended_Timing_Init+0x42>
 8003504:	4823      	ldr	r0, [pc, #140]	; (8003594 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 8003506:	f44f 7194 	mov.w	r1, #296	; 0x128
 800350a:	f7fe f92f 	bl	800176c <assert_failed>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
 800350e:	68e3      	ldr	r3, [r4, #12]
 8003510:	2b0f      	cmp	r3, #15
 8003512:	d904      	bls.n	800351e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
 8003514:	481f      	ldr	r0, [pc, #124]	; (8003594 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 8003516:	f240 1129 	movw	r1, #297	; 0x129
 800351a:	f7fe f927 	bl	800176c <assert_failed>
    assert_param(IS_FSMC_CLK_DIV(Timing->CLKDivision));
 800351e:	6923      	ldr	r3, [r4, #16]
 8003520:	3b01      	subs	r3, #1
 8003522:	2b0f      	cmp	r3, #15
 8003524:	d904      	bls.n	8003530 <FSMC_NORSRAM_Extended_Timing_Init+0x64>
 8003526:	481b      	ldr	r0, [pc, #108]	; (8003594 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 8003528:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800352c:	f7fe f91e 	bl	800176c <assert_failed>
    assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
 8003530:	6963      	ldr	r3, [r4, #20]
 8003532:	3b01      	subs	r3, #1
 8003534:	2b10      	cmp	r3, #16
 8003536:	d904      	bls.n	8003542 <FSMC_NORSRAM_Extended_Timing_Init+0x76>
 8003538:	4816      	ldr	r0, [pc, #88]	; (8003594 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 800353a:	f240 112b 	movw	r1, #299	; 0x12b
 800353e:	f7fe f915 	bl	800176c <assert_failed>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
 8003542:	69a3      	ldr	r3, [r4, #24]
 8003544:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8003548:	d004      	beq.n	8003554 <FSMC_NORSRAM_Extended_Timing_Init+0x88>
 800354a:	4812      	ldr	r0, [pc, #72]	; (8003594 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 800354c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003550:	f7fe f90c 	bl	800176c <assert_failed>
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8003554:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8003558:	69a2      	ldr	r2, [r4, #24]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_CLKDIV | FSMC_BWTR1_DATLAT | \
                         FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                     ((Timing->AddressHoldTime) << 4)          |\
                     ((Timing->DataSetupTime) << 8)            |\
 800355a:	68a1      	ldr	r1, [r4, #8]
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800355c:	f003 4040 	and.w	r0, r3, #3221225472	; 0xc0000000
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	4313      	orrs	r3, r2
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_CLKDIV | FSMC_BWTR1_DATLAT | \
                         FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                     ((Timing->AddressHoldTime) << 4)          |\
 8003564:	6862      	ldr	r2, [r4, #4]
 8003566:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
 800356a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                     ((Timing->DataSetupTime) << 8)            |\
                     ((Timing->BusTurnAroundDuration) << 16)   |\
                     (((Timing->CLKDivision)-1) << 20)         |\
 800356e:	6923      	ldr	r3, [r4, #16]
                         FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                     ((Timing->AddressHoldTime) << 4)          |\
                     ((Timing->DataSetupTime) << 8)            |\
                     ((Timing->BusTurnAroundDuration) << 16)   |\
 8003570:	68e1      	ldr	r1, [r4, #12]
                     (((Timing->CLKDivision)-1) << 20)         |\
 8003572:	3b01      	subs	r3, #1
 8003574:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8003578:	ea41 5203 	orr.w	r2, r1, r3, lsl #20
                     (((Timing->DataLatency)-2) << 24)         |\
 800357c:	6963      	ldr	r3, [r4, #20]
 800357e:	3b02      	subs	r3, #2
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_CLKDIV | FSMC_BWTR1_DATLAT | \
                         FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
 8003580:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8003584:	4303      	orrs	r3, r0
 8003586:	e001      	b.n	800358c <FSMC_NORSRAM_Extended_Timing_Init+0xc0>
    
    Device->BWTR[Bank] = tmpr; 
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFF;
 8003588:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800358c:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
  }   
  
  return HAL_OK;  
}
 8003590:	2000      	movs	r0, #0
 8003592:	bd70      	pop	{r4, r5, r6, pc}
 8003594:	08009637 	.word	0x08009637

08003598 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	460e      	mov	r6, r1
 800359c:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800359e:	4604      	mov	r4, r0
 80035a0:	b1f0      	cbz	r0, 80035e0 <HAL_SRAM_Init+0x48>
  {
     return HAL_ERROR;
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80035a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035a6:	b90b      	cbnz	r3, 80035ac <HAL_SRAM_Init+0x14>
  {  
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80035a8:	f7fe f986 	bl	80018b8 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80035ac:	f104 0108 	add.w	r1, r4, #8
 80035b0:	6820      	ldr	r0, [r4, #0]
 80035b2:	f7ff fe97 	bl	80032e4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80035b6:	4631      	mov	r1, r6
 80035b8:	68a2      	ldr	r2, [r4, #8]
 80035ba:	6820      	ldr	r0, [r4, #0]
 80035bc:	f7ff ff2c 	bl	8003418 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80035c0:	4629      	mov	r1, r5
 80035c2:	68a2      	ldr	r2, [r4, #8]
 80035c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035c6:	6860      	ldr	r0, [r4, #4]
 80035c8:	f7ff ff80 	bl	80034cc <FSMC_NORSRAM_Extended_Timing_Init>
 80035cc:	68a1      	ldr	r1, [r4, #8]
 80035ce:	6822      	ldr	r2, [r4, #0]
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80035d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 80035dc:	2000      	movs	r0, #0
 80035de:	bd70      	pop	{r4, r5, r6, pc}
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
  {
     return HAL_ERROR;
 80035e0:	2001      	movs	r0, #1
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
  
  return HAL_OK;
}
 80035e2:	bd70      	pop	{r4, r5, r6, pc}

080035e4 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80035e4:	4770      	bx	lr

080035e6 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIM_Base_Start_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80035e8:	6803      	ldr	r3, [r0, #0]
 80035ea:	4a24      	ldr	r2, [pc, #144]	; (800367c <HAL_TIM_Base_Start_IT+0x94>)
 80035ec:	4293      	cmp	r3, r2
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035ee:	b510      	push	{r4, lr}
 80035f0:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80035f2:	d037      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x7c>
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f8:	d034      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x7c>
 80035fa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80035fe:	4293      	cmp	r3, r2
 8003600:	d030      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x7c>
 8003602:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003606:	4293      	cmp	r3, r2
 8003608:	d02c      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x7c>
 800360a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800360e:	4293      	cmp	r3, r2
 8003610:	d028      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x7c>
 8003612:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003616:	4293      	cmp	r3, r2
 8003618:	d024      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x7c>
 800361a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800361e:	4293      	cmp	r3, r2
 8003620:	d020      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x7c>
 8003622:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8003626:	4293      	cmp	r3, r2
 8003628:	d01c      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x7c>
 800362a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800362e:	4293      	cmp	r3, r2
 8003630:	d018      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x7c>
 8003632:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003636:	4293      	cmp	r3, r2
 8003638:	d014      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x7c>
 800363a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800363e:	4293      	cmp	r3, r2
 8003640:	d010      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x7c>
 8003642:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003646:	4293      	cmp	r3, r2
 8003648:	d00c      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x7c>
 800364a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800364e:	4293      	cmp	r3, r2
 8003650:	d008      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x7c>
 8003652:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x7c>
 800365a:	4809      	ldr	r0, [pc, #36]	; (8003680 <HAL_TIM_Base_Start_IT+0x98>)
 800365c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003660:	f7fe f884 	bl	800176c <assert_failed>
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	f042 0201 	orr.w	r2, r2, #1
 800366c:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	f042 0201 	orr.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8003676:	2000      	movs	r0, #0
 8003678:	bd10      	pop	{r4, pc}
 800367a:	bf00      	nop
 800367c:	40010000 	.word	0x40010000
 8003680:	08009686 	.word	0x08009686

08003684 <HAL_TIM_Base_Stop_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003684:	6803      	ldr	r3, [r0, #0]
 8003686:	4a29      	ldr	r2, [pc, #164]	; (800372c <HAL_TIM_Base_Stop_IT+0xa8>)
 8003688:	4293      	cmp	r3, r2
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800368a:	b510      	push	{r4, lr}
 800368c:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800368e:	d037      	beq.n	8003700 <HAL_TIM_Base_Stop_IT+0x7c>
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003694:	d034      	beq.n	8003700 <HAL_TIM_Base_Stop_IT+0x7c>
 8003696:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800369a:	4293      	cmp	r3, r2
 800369c:	d030      	beq.n	8003700 <HAL_TIM_Base_Stop_IT+0x7c>
 800369e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d02c      	beq.n	8003700 <HAL_TIM_Base_Stop_IT+0x7c>
 80036a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d028      	beq.n	8003700 <HAL_TIM_Base_Stop_IT+0x7c>
 80036ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d024      	beq.n	8003700 <HAL_TIM_Base_Stop_IT+0x7c>
 80036b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d020      	beq.n	8003700 <HAL_TIM_Base_Stop_IT+0x7c>
 80036be:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d01c      	beq.n	8003700 <HAL_TIM_Base_Stop_IT+0x7c>
 80036c6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d018      	beq.n	8003700 <HAL_TIM_Base_Stop_IT+0x7c>
 80036ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d014      	beq.n	8003700 <HAL_TIM_Base_Stop_IT+0x7c>
 80036d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036da:	4293      	cmp	r3, r2
 80036dc:	d010      	beq.n	8003700 <HAL_TIM_Base_Stop_IT+0x7c>
 80036de:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00c      	beq.n	8003700 <HAL_TIM_Base_Stop_IT+0x7c>
 80036e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d008      	beq.n	8003700 <HAL_TIM_Base_Stop_IT+0x7c>
 80036ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <HAL_TIM_Base_Stop_IT+0x7c>
 80036f6:	480e      	ldr	r0, [pc, #56]	; (8003730 <HAL_TIM_Base_Stop_IT+0xac>)
 80036f8:	f240 1173 	movw	r1, #371	; 0x173
 80036fc:	f7fe f836 	bl	800176c <assert_failed>
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	f022 0201 	bic.w	r2, r2, #1
 8003708:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800370a:	6a19      	ldr	r1, [r3, #32]
 800370c:	f241 1211 	movw	r2, #4369	; 0x1111
 8003710:	400a      	ands	r2, r1
 8003712:	b942      	cbnz	r2, 8003726 <HAL_TIM_Base_Stop_IT+0xa2>
 8003714:	6a19      	ldr	r1, [r3, #32]
 8003716:	f240 4244 	movw	r2, #1092	; 0x444
 800371a:	400a      	ands	r2, r1
 800371c:	b91a      	cbnz	r2, 8003726 <HAL_TIM_Base_Stop_IT+0xa2>
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 8003726:	2000      	movs	r0, #0
 8003728:	bd10      	pop	{r4, pc}
 800372a:	bf00      	nop
 800372c:	40010000 	.word	0x40010000
 8003730:	08009686 	.word	0x08009686

08003734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003734:	4770      	bx	lr

08003736 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003736:	4770      	bx	lr

08003738 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003738:	4770      	bx	lr

0800373a <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800373a:	4770      	bx	lr

0800373c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800373c:	6803      	ldr	r3, [r0, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003742:	b510      	push	{r4, lr}
 8003744:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003746:	d514      	bpl.n	8003772 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	0792      	lsls	r2, r2, #30
 800374c:	d511      	bpl.n	8003772 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800374e:	f06f 0202 	mvn.w	r2, #2
 8003752:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003754:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003756:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003758:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800375a:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800375c:	d002      	beq.n	8003764 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800375e:	f7ff ffea 	bl	8003736 <HAL_TIM_IC_CaptureCallback>
 8003762:	e004      	b.n	800376e <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003764:	f7ff ffe6 	bl	8003734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	4620      	mov	r0, r4
 800376a:	f7ff ffe5 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	2300      	movs	r3, #0
 8003770:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	0750      	lsls	r0, r2, #29
 8003778:	d516      	bpl.n	80037a8 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	0751      	lsls	r1, r2, #29
 800377e:	d513      	bpl.n	80037a8 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003780:	f06f 0204 	mvn.w	r2, #4
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003786:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003788:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800378a:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800378e:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003790:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003792:	d002      	beq.n	800379a <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003794:	f7ff ffcf 	bl	8003736 <HAL_TIM_IC_CaptureCallback>
 8003798:	e004      	b.n	80037a4 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	f7ff ffcb 	bl	8003734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379e:	4620      	mov	r0, r4
 80037a0:	f7ff ffca 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a4:	2300      	movs	r3, #0
 80037a6:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	0712      	lsls	r2, r2, #28
 80037ae:	d515      	bpl.n	80037dc <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	0710      	lsls	r0, r2, #28
 80037b4:	d512      	bpl.n	80037dc <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037b6:	f06f 0208 	mvn.w	r2, #8
 80037ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80037bc:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037be:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80037c0:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037c2:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80037c4:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80037c6:	d002      	beq.n	80037ce <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80037c8:	f7ff ffb5 	bl	8003736 <HAL_TIM_IC_CaptureCallback>
 80037cc:	e004      	b.n	80037d8 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ce:	f7ff ffb1 	bl	8003734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80037d2:	4620      	mov	r0, r4
 80037d4:	f7ff ffb0 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d8:	2300      	movs	r3, #0
 80037da:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	06d2      	lsls	r2, r2, #27
 80037e2:	d516      	bpl.n	8003812 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	06d0      	lsls	r0, r2, #27
 80037e8:	d513      	bpl.n	8003812 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037ea:	f06f 0210 	mvn.w	r2, #16
 80037ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80037f0:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037f2:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80037f4:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037f8:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80037fa:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80037fc:	d002      	beq.n	8003804 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	f7ff ff9a 	bl	8003736 <HAL_TIM_IC_CaptureCallback>
 8003802:	e004      	b.n	800380e <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003804:	f7ff ff96 	bl	8003734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003808:	4620      	mov	r0, r4
 800380a:	f7ff ff95 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380e:	2300      	movs	r3, #0
 8003810:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	07d1      	lsls	r1, r2, #31
 8003818:	d508      	bpl.n	800382c <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	07d2      	lsls	r2, r2, #31
 800381e:	d505      	bpl.n	800382c <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003820:	f06f 0201 	mvn.w	r2, #1
 8003824:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003826:	4620      	mov	r0, r4
 8003828:	f7fe fa2c 	bl	8001c84 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	0610      	lsls	r0, r2, #24
 8003832:	d508      	bpl.n	8003846 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	0611      	lsls	r1, r2, #24
 8003838:	d505      	bpl.n	8003846 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800383a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800383e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003840:	4620      	mov	r0, r4
 8003842:	f7ff fed0 	bl	80035e6 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	0652      	lsls	r2, r2, #25
 800384c:	d508      	bpl.n	8003860 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	0650      	lsls	r0, r2, #25
 8003852:	d505      	bpl.n	8003860 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003854:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003858:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800385a:	4620      	mov	r0, r4
 800385c:	f7ff ff6d 	bl	800373a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	0691      	lsls	r1, r2, #26
 8003866:	d50a      	bpl.n	800387e <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	0692      	lsls	r2, r2, #26
 800386c:	d507      	bpl.n	800387e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800386e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003872:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003874:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8003876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 800387a:	f7ff beb3 	b.w	80035e4 <HAL_TIMEx_CommutationCallback>
 800387e:	bd10      	pop	{r4, pc}

08003880 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003880:	4a2e      	ldr	r2, [pc, #184]	; (800393c <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8003882:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003884:	4290      	cmp	r0, r2
 8003886:	d012      	beq.n	80038ae <TIM_Base_SetConfig+0x2e>
 8003888:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800388c:	d00f      	beq.n	80038ae <TIM_Base_SetConfig+0x2e>
 800388e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003892:	4290      	cmp	r0, r2
 8003894:	d00b      	beq.n	80038ae <TIM_Base_SetConfig+0x2e>
 8003896:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800389a:	4290      	cmp	r0, r2
 800389c:	d007      	beq.n	80038ae <TIM_Base_SetConfig+0x2e>
 800389e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038a2:	4290      	cmp	r0, r2
 80038a4:	d003      	beq.n	80038ae <TIM_Base_SetConfig+0x2e>
 80038a6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80038aa:	4290      	cmp	r0, r2
 80038ac:	d118      	bne.n	80038e0 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80038ae:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038b4:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80038b6:	4a21      	ldr	r2, [pc, #132]	; (800393c <TIM_Base_SetConfig+0xbc>)
 80038b8:	4290      	cmp	r0, r2
 80038ba:	d037      	beq.n	800392c <TIM_Base_SetConfig+0xac>
 80038bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80038c0:	d034      	beq.n	800392c <TIM_Base_SetConfig+0xac>
 80038c2:	4a1f      	ldr	r2, [pc, #124]	; (8003940 <TIM_Base_SetConfig+0xc0>)
 80038c4:	4290      	cmp	r0, r2
 80038c6:	d031      	beq.n	800392c <TIM_Base_SetConfig+0xac>
 80038c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038cc:	4290      	cmp	r0, r2
 80038ce:	d02d      	beq.n	800392c <TIM_Base_SetConfig+0xac>
 80038d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038d4:	4290      	cmp	r0, r2
 80038d6:	d029      	beq.n	800392c <TIM_Base_SetConfig+0xac>
 80038d8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80038dc:	4290      	cmp	r0, r2
 80038de:	d025      	beq.n	800392c <TIM_Base_SetConfig+0xac>
 80038e0:	4a18      	ldr	r2, [pc, #96]	; (8003944 <TIM_Base_SetConfig+0xc4>)
 80038e2:	4290      	cmp	r0, r2
 80038e4:	d022      	beq.n	800392c <TIM_Base_SetConfig+0xac>
 80038e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038ea:	4290      	cmp	r0, r2
 80038ec:	d01e      	beq.n	800392c <TIM_Base_SetConfig+0xac>
 80038ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038f2:	4290      	cmp	r0, r2
 80038f4:	d01a      	beq.n	800392c <TIM_Base_SetConfig+0xac>
 80038f6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80038fa:	4290      	cmp	r0, r2
 80038fc:	d016      	beq.n	800392c <TIM_Base_SetConfig+0xac>
 80038fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003902:	4290      	cmp	r0, r2
 8003904:	d012      	beq.n	800392c <TIM_Base_SetConfig+0xac>
 8003906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800390a:	4290      	cmp	r0, r2
 800390c:	d00e      	beq.n	800392c <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 800390e:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003910:	688b      	ldr	r3, [r1, #8]
 8003912:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003914:	680b      	ldr	r3, [r1, #0]
 8003916:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <TIM_Base_SetConfig+0xbc>)
 800391a:	4298      	cmp	r0, r3
 800391c:	d00b      	beq.n	8003936 <TIM_Base_SetConfig+0xb6>
 800391e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003922:	4298      	cmp	r0, r3
 8003924:	d007      	beq.n	8003936 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003926:	2301      	movs	r3, #1
 8003928:	6143      	str	r3, [r0, #20]
 800392a:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800392c:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003932:	4313      	orrs	r3, r2
 8003934:	e7eb      	b.n	800390e <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003936:	690b      	ldr	r3, [r1, #16]
 8003938:	6303      	str	r3, [r0, #48]	; 0x30
 800393a:	e7f4      	b.n	8003926 <TIM_Base_SetConfig+0xa6>
 800393c:	40010000 	.word	0x40010000
 8003940:	40000400 	.word	0x40000400
 8003944:	40014000 	.word	0x40014000

08003948 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8003948:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800394a:	4604      	mov	r4, r0
 800394c:	2800      	cmp	r0, #0
 800394e:	d065      	beq.n	8003a1c <HAL_TIM_Base_Init+0xd4>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
 8003950:	6803      	ldr	r3, [r0, #0]
 8003952:	4a33      	ldr	r2, [pc, #204]	; (8003a20 <HAL_TIM_Base_Init+0xd8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d036      	beq.n	80039c6 <HAL_TIM_Base_Init+0x7e>
 8003958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395c:	d033      	beq.n	80039c6 <HAL_TIM_Base_Init+0x7e>
 800395e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003962:	4293      	cmp	r3, r2
 8003964:	d02f      	beq.n	80039c6 <HAL_TIM_Base_Init+0x7e>
 8003966:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800396a:	4293      	cmp	r3, r2
 800396c:	d02b      	beq.n	80039c6 <HAL_TIM_Base_Init+0x7e>
 800396e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003972:	4293      	cmp	r3, r2
 8003974:	d027      	beq.n	80039c6 <HAL_TIM_Base_Init+0x7e>
 8003976:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800397a:	4293      	cmp	r3, r2
 800397c:	d023      	beq.n	80039c6 <HAL_TIM_Base_Init+0x7e>
 800397e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003982:	4293      	cmp	r3, r2
 8003984:	d01f      	beq.n	80039c6 <HAL_TIM_Base_Init+0x7e>
 8003986:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800398a:	4293      	cmp	r3, r2
 800398c:	d01b      	beq.n	80039c6 <HAL_TIM_Base_Init+0x7e>
 800398e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003992:	4293      	cmp	r3, r2
 8003994:	d017      	beq.n	80039c6 <HAL_TIM_Base_Init+0x7e>
 8003996:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800399a:	4293      	cmp	r3, r2
 800399c:	d013      	beq.n	80039c6 <HAL_TIM_Base_Init+0x7e>
 800399e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00f      	beq.n	80039c6 <HAL_TIM_Base_Init+0x7e>
 80039a6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00b      	beq.n	80039c6 <HAL_TIM_Base_Init+0x7e>
 80039ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <HAL_TIM_Base_Init+0x7e>
 80039b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d003      	beq.n	80039c6 <HAL_TIM_Base_Init+0x7e>
 80039be:	4819      	ldr	r0, [pc, #100]	; (8003a24 <HAL_TIM_Base_Init+0xdc>)
 80039c0:	21d9      	movs	r1, #217	; 0xd9
 80039c2:	f7fd fed3 	bl	800176c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80039c6:	68a3      	ldr	r3, [r4, #8]
 80039c8:	f033 0210 	bics.w	r2, r3, #16
 80039cc:	d009      	beq.n	80039e2 <HAL_TIM_Base_Init+0x9a>
 80039ce:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80039d2:	2a20      	cmp	r2, #32
 80039d4:	d005      	beq.n	80039e2 <HAL_TIM_Base_Init+0x9a>
 80039d6:	2b40      	cmp	r3, #64	; 0x40
 80039d8:	d003      	beq.n	80039e2 <HAL_TIM_Base_Init+0x9a>
 80039da:	4812      	ldr	r0, [pc, #72]	; (8003a24 <HAL_TIM_Base_Init+0xdc>)
 80039dc:	21da      	movs	r1, #218	; 0xda
 80039de:	f7fd fec5 	bl	800176c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80039e2:	6923      	ldr	r3, [r4, #16]
 80039e4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80039e8:	d006      	beq.n	80039f8 <HAL_TIM_Base_Init+0xb0>
 80039ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ee:	d003      	beq.n	80039f8 <HAL_TIM_Base_Init+0xb0>
 80039f0:	480c      	ldr	r0, [pc, #48]	; (8003a24 <HAL_TIM_Base_Init+0xdc>)
 80039f2:	21db      	movs	r1, #219	; 0xdb
 80039f4:	f7fd feba 	bl	800176c <assert_failed>
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80039f8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80039fc:	b913      	cbnz	r3, 8003a04 <HAL_TIM_Base_Init+0xbc>
  {  
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039fe:	4620      	mov	r0, r4
 8003a00:	f7fd febe 	bl	8001780 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003a04:	2302      	movs	r3, #2
 8003a06:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	1d21      	adds	r1, r4, #4
 8003a0e:	f7ff ff37 	bl	8003880 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8003a18:	2000      	movs	r0, #0
 8003a1a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8003a1c:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8003a1e:	bd10      	pop	{r4, pc}
 8003a20:	40010000 	.word	0x40010000
 8003a24:	08009686 	.word	0x08009686

08003a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003a2c:	4b91      	ldr	r3, [pc, #580]	; (8003c74 <HAL_GPIO_Init+0x24c>)
 8003a2e:	4298      	cmp	r0, r3
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a30:	4604      	mov	r4, r0
 8003a32:	460d      	mov	r5, r1
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003a34:	d023      	beq.n	8003a7e <HAL_GPIO_Init+0x56>
 8003a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a3a:	4298      	cmp	r0, r3
 8003a3c:	d01f      	beq.n	8003a7e <HAL_GPIO_Init+0x56>
 8003a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d01b      	beq.n	8003a7e <HAL_GPIO_Init+0x56>
 8003a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a4a:	4298      	cmp	r0, r3
 8003a4c:	d017      	beq.n	8003a7e <HAL_GPIO_Init+0x56>
 8003a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a52:	4298      	cmp	r0, r3
 8003a54:	d013      	beq.n	8003a7e <HAL_GPIO_Init+0x56>
 8003a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a5a:	4298      	cmp	r0, r3
 8003a5c:	d00f      	beq.n	8003a7e <HAL_GPIO_Init+0x56>
 8003a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a62:	4298      	cmp	r0, r3
 8003a64:	d00b      	beq.n	8003a7e <HAL_GPIO_Init+0x56>
 8003a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a6a:	4298      	cmp	r0, r3
 8003a6c:	d007      	beq.n	8003a7e <HAL_GPIO_Init+0x56>
 8003a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a72:	4298      	cmp	r0, r3
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_Init+0x56>
 8003a76:	4880      	ldr	r0, [pc, #512]	; (8003c78 <HAL_GPIO_Init+0x250>)
 8003a78:	21c5      	movs	r1, #197	; 0xc5
 8003a7a:	f7fd fe77 	bl	800176c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003a7e:	882b      	ldrh	r3, [r5, #0]
 8003a80:	b91b      	cbnz	r3, 8003a8a <HAL_GPIO_Init+0x62>
 8003a82:	487d      	ldr	r0, [pc, #500]	; (8003c78 <HAL_GPIO_Init+0x250>)
 8003a84:	21c6      	movs	r1, #198	; 0xc6
 8003a86:	f7fd fe71 	bl	800176c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003a8a:	686b      	ldr	r3, [r5, #4]
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d917      	bls.n	8003ac0 <HAL_GPIO_Init+0x98>
 8003a90:	f1a3 0211 	sub.w	r2, r3, #17
 8003a94:	2a01      	cmp	r2, #1
 8003a96:	d913      	bls.n	8003ac0 <HAL_GPIO_Init+0x98>
 8003a98:	4978      	ldr	r1, [pc, #480]	; (8003c7c <HAL_GPIO_Init+0x254>)
 8003a9a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a9e:	428a      	cmp	r2, r1
 8003aa0:	d00e      	beq.n	8003ac0 <HAL_GPIO_Init+0x98>
 8003aa2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8003aa6:	428b      	cmp	r3, r1
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_GPIO_Init+0x98>
 8003aaa:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8003aae:	428a      	cmp	r2, r1
 8003ab0:	d006      	beq.n	8003ac0 <HAL_GPIO_Init+0x98>
 8003ab2:	4a73      	ldr	r2, [pc, #460]	; (8003c80 <HAL_GPIO_Init+0x258>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d003      	beq.n	8003ac0 <HAL_GPIO_Init+0x98>
 8003ab8:	486f      	ldr	r0, [pc, #444]	; (8003c78 <HAL_GPIO_Init+0x250>)
 8003aba:	21c7      	movs	r1, #199	; 0xc7
 8003abc:	f7fd fe56 	bl	800176c <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003ac0:	68ab      	ldr	r3, [r5, #8]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d903      	bls.n	8003ace <HAL_GPIO_Init+0xa6>
 8003ac6:	486c      	ldr	r0, [pc, #432]	; (8003c78 <HAL_GPIO_Init+0x250>)
 8003ac8:	21c8      	movs	r1, #200	; 0xc8
 8003aca:	f7fd fe4f 	bl	800176c <assert_failed>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ace:	2600      	movs	r6, #0

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ad0:	2301      	movs	r3, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ad2:	682f      	ldr	r7, [r5, #0]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ad4:	40b3      	lsls	r3, r6
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ad6:	401f      	ands	r7, r3

    if(iocurrent == ioposition)
 8003ad8:	429f      	cmp	r7, r3
 8003ada:	f040 80c5 	bne.w	8003c68 <HAL_GPIO_Init+0x240>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ade:	686b      	ldr	r3, [r5, #4]
 8003ae0:	f023 0310 	bic.w	r3, r3, #16
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d117      	bne.n	8003b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003ae8:	692b      	ldr	r3, [r5, #16]
 8003aea:	2b0d      	cmp	r3, #13
 8003aec:	d905      	bls.n	8003afa <HAL_GPIO_Init+0xd2>
 8003aee:	2b0f      	cmp	r3, #15
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_Init+0xd2>
 8003af2:	4861      	ldr	r0, [pc, #388]	; (8003c78 <HAL_GPIO_Init+0x250>)
 8003af4:	21d9      	movs	r1, #217	; 0xd9
 8003af6:	f7fd fe39 	bl	800176c <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003afa:	08f2      	lsrs	r2, r6, #3
 8003afc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b00:	f006 0107 	and.w	r1, r6, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b04:	6a10      	ldr	r0, [r2, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b06:	0089      	lsls	r1, r1, #2
 8003b08:	230f      	movs	r3, #15
 8003b0a:	408b      	lsls	r3, r1
 8003b0c:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b10:	692b      	ldr	r3, [r5, #16]
 8003b12:	408b      	lsls	r3, r1
 8003b14:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3] = temp;
 8003b16:	6213      	str	r3, [r2, #32]
 8003b18:	ea4f 0946 	mov.w	r9, r6, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b1c:	f04f 0803 	mov.w	r8, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b20:	6822      	ldr	r2, [r4, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b22:	686b      	ldr	r3, [r5, #4]
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b24:	fa08 f809 	lsl.w	r8, r8, r9
 8003b28:	ea6f 0808 	mvn.w	r8, r8
 8003b2c:	ea08 0102 	and.w	r1, r8, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b30:	f003 0203 	and.w	r2, r3, #3
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b34:	f023 0310 	bic.w	r3, r3, #16
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b38:	fa02 f209 	lsl.w	r2, r2, r9
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b3c:	3b01      	subs	r3, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b3e:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b40:	2b01      	cmp	r3, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8003b42:	6022      	str	r2, [r4, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b44:	d817      	bhi.n	8003b76 <HAL_GPIO_Init+0x14e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003b46:	68eb      	ldr	r3, [r5, #12]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d903      	bls.n	8003b54 <HAL_GPIO_Init+0x12c>
 8003b4c:	484a      	ldr	r0, [pc, #296]	; (8003c78 <HAL_GPIO_Init+0x250>)
 8003b4e:	21ec      	movs	r1, #236	; 0xec
 8003b50:	f7fd fe0c 	bl	800176c <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b54:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b56:	ea08 0203 	and.w	r2, r8, r3
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b5a:	68eb      	ldr	r3, [r5, #12]
 8003b5c:	fa03 f309 	lsl.w	r3, r3, r9
 8003b60:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8003b62:	60a3      	str	r3, [r4, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b64:	6863      	ldr	r3, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b66:	ea23 0207 	bic.w	r2, r3, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003b6a:	686b      	ldr	r3, [r5, #4]
 8003b6c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003b70:	40b3      	lsls	r3, r6
 8003b72:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8003b74:	6063      	str	r3, [r4, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b76:	68e3      	ldr	r3, [r4, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b78:	6869      	ldr	r1, [r5, #4]
        GPIOx->OTYPER = temp;
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b7a:	ea08 0803 	and.w	r8, r8, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b7e:	68ab      	ldr	r3, [r5, #8]
 8003b80:	fa03 f309 	lsl.w	r3, r3, r9
 8003b84:	ea48 0303 	orr.w	r3, r8, r3
      GPIOx->PUPDR = temp;
 8003b88:	60e3      	str	r3, [r4, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b8a:	00cb      	lsls	r3, r1, #3
 8003b8c:	d56c      	bpl.n	8003c68 <HAL_GPIO_Init+0x240>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8e:	4a3d      	ldr	r2, [pc, #244]	; (8003c84 <HAL_GPIO_Init+0x25c>)
 8003b90:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b96:	6453      	str	r3, [r2, #68]	; 0x44
 8003b98:	f026 0203 	bic.w	r2, r6, #3
 8003b9c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003ba0:	f502 329c 	add.w	r2, r2, #79872	; 0x13800

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ba4:	f006 0e03 	and.w	lr, r6, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 8003ba8:	6890      	ldr	r0, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003baa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003bae:	230f      	movs	r3, #15
 8003bb0:	fa03 f30e 	lsl.w	r3, r3, lr
 8003bb4:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003bb8:	4b2e      	ldr	r3, [pc, #184]	; (8003c74 <HAL_GPIO_Init+0x24c>)
 8003bba:	429c      	cmp	r4, r3
 8003bbc:	d022      	beq.n	8003c04 <HAL_GPIO_Init+0x1dc>
 8003bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bc2:	429c      	cmp	r4, r3
 8003bc4:	d020      	beq.n	8003c08 <HAL_GPIO_Init+0x1e0>
 8003bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bca:	429c      	cmp	r4, r3
 8003bcc:	d01e      	beq.n	8003c0c <HAL_GPIO_Init+0x1e4>
 8003bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bd2:	429c      	cmp	r4, r3
 8003bd4:	d01c      	beq.n	8003c10 <HAL_GPIO_Init+0x1e8>
 8003bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bda:	429c      	cmp	r4, r3
 8003bdc:	d01a      	beq.n	8003c14 <HAL_GPIO_Init+0x1ec>
 8003bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003be2:	429c      	cmp	r4, r3
 8003be4:	d018      	beq.n	8003c18 <HAL_GPIO_Init+0x1f0>
 8003be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bea:	429c      	cmp	r4, r3
 8003bec:	d016      	beq.n	8003c1c <HAL_GPIO_Init+0x1f4>
 8003bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bf2:	429c      	cmp	r4, r3
 8003bf4:	d014      	beq.n	8003c20 <HAL_GPIO_Init+0x1f8>
 8003bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bfa:	429c      	cmp	r4, r3
 8003bfc:	bf0c      	ite	eq
 8003bfe:	2308      	moveq	r3, #8
 8003c00:	2309      	movne	r3, #9
 8003c02:	e00e      	b.n	8003c22 <HAL_GPIO_Init+0x1fa>
 8003c04:	2300      	movs	r3, #0
 8003c06:	e00c      	b.n	8003c22 <HAL_GPIO_Init+0x1fa>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e00a      	b.n	8003c22 <HAL_GPIO_Init+0x1fa>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e008      	b.n	8003c22 <HAL_GPIO_Init+0x1fa>
 8003c10:	2303      	movs	r3, #3
 8003c12:	e006      	b.n	8003c22 <HAL_GPIO_Init+0x1fa>
 8003c14:	2304      	movs	r3, #4
 8003c16:	e004      	b.n	8003c22 <HAL_GPIO_Init+0x1fa>
 8003c18:	2305      	movs	r3, #5
 8003c1a:	e002      	b.n	8003c22 <HAL_GPIO_Init+0x1fa>
 8003c1c:	2306      	movs	r3, #6
 8003c1e:	e000      	b.n	8003c22 <HAL_GPIO_Init+0x1fa>
 8003c20:	2307      	movs	r3, #7
 8003c22:	fa03 f30e 	lsl.w	r3, r3, lr
 8003c26:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c28:	4817      	ldr	r0, [pc, #92]	; (8003c88 <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c2a:	6093      	str	r3, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c2c:	6803      	ldr	r3, [r0, #0]
        temp &= ~((uint32_t)iocurrent);
 8003c2e:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c30:	f411 3f80 	tst.w	r1, #65536	; 0x10000
        {
          temp |= iocurrent;
 8003c34:	bf14      	ite	ne
 8003c36:	433b      	orrne	r3, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8003c38:	4013      	andeq	r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003c3a:	6003      	str	r3, [r0, #0]

        temp = EXTI->EMR;
 8003c3c:	6843      	ldr	r3, [r0, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c3e:	0388      	lsls	r0, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8003c40:	4811      	ldr	r0, [pc, #68]	; (8003c88 <HAL_GPIO_Init+0x260>)

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8003c42:	bf4c      	ite	mi
 8003c44:	433b      	orrmi	r3, r7
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8003c46:	4013      	andpl	r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8003c48:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c4a:	6883      	ldr	r3, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8003c50:	bf14      	ite	ne
 8003c52:	433b      	orrne	r3, r7
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8003c54:	4013      	andeq	r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8003c56:	6083      	str	r3, [r0, #8]

        temp = EXTI->FTSR;
 8003c58:	68c3      	ldr	r3, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c5a:	0289      	lsls	r1, r1, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8003c5c:	bf54      	ite	pl
 8003c5e:	ea02 0703 	andpl.w	r7, r2, r3
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8003c62:	431f      	orrmi	r7, r3
        }
        EXTI->FTSR = temp;
 8003c64:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <HAL_GPIO_Init+0x260>)
 8003c66:	60df      	str	r7, [r3, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c68:	3601      	adds	r6, #1
 8003c6a:	2e10      	cmp	r6, #16
 8003c6c:	f47f af30 	bne.w	8003ad0 <HAL_GPIO_Init+0xa8>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8003c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c74:	40020000 	.word	0x40020000
 8003c78:	080096d5 	.word	0x080096d5
 8003c7c:	10110000 	.word	0x10110000
 8003c80:	10220000 	.word	0x10220000
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40013c00 	.word	0x40013c00

08003c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	4605      	mov	r5, r0
 8003c90:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003c92:	460c      	mov	r4, r1
 8003c94:	b921      	cbnz	r1, 8003ca0 <HAL_GPIO_WritePin+0x14>
 8003c96:	4808      	ldr	r0, [pc, #32]	; (8003cb8 <HAL_GPIO_WritePin+0x2c>)
 8003c98:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8003c9c:	f7fd fd66 	bl	800176c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003ca0:	2e01      	cmp	r6, #1
 8003ca2:	d905      	bls.n	8003cb0 <HAL_GPIO_WritePin+0x24>
 8003ca4:	4804      	ldr	r0, [pc, #16]	; (8003cb8 <HAL_GPIO_WritePin+0x2c>)
 8003ca6:	f240 11ad 	movw	r1, #429	; 0x1ad
 8003caa:	f7fd fd5f 	bl	800176c <assert_failed>
 8003cae:	e001      	b.n	8003cb4 <HAL_GPIO_WritePin+0x28>

  if(PinState != GPIO_PIN_RESET)
 8003cb0:	b906      	cbnz	r6, 8003cb4 <HAL_GPIO_WritePin+0x28>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003cb2:	0424      	lsls	r4, r4, #16
 8003cb4:	61ac      	str	r4, [r5, #24]
 8003cb6:	bd70      	pop	{r4, r5, r6, pc}
 8003cb8:	080096d5 	.word	0x080096d5

08003cbc <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cbc:	b538      	push	{r3, r4, r5, lr}
 8003cbe:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003cc0:	460d      	mov	r5, r1
 8003cc2:	b921      	cbnz	r1, 8003cce <HAL_GPIO_TogglePin+0x12>
 8003cc4:	4804      	ldr	r0, [pc, #16]	; (8003cd8 <HAL_GPIO_TogglePin+0x1c>)
 8003cc6:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003cca:	f7fd fd4f 	bl	800176c <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 8003cce:	6961      	ldr	r1, [r4, #20]
 8003cd0:	4069      	eors	r1, r5
 8003cd2:	6161      	str	r1, [r4, #20]
 8003cd4:	bd38      	pop	{r3, r4, r5, pc}
 8003cd6:	bf00      	nop
 8003cd8:	080096d5 	.word	0x080096d5

08003cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cdc:	b510      	push	{r4, lr}
 8003cde:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003ce0:	f7fe fff8 	bl	8002cd4 <HAL_RCC_GetHCLKFreq>
 8003ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ce8:	fbb0 f0f3 	udiv	r0, r0, r3
 8003cec:	f7ff f99a 	bl	8003024 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f7ff f93e 	bl	8002f78 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	bd10      	pop	{r4, pc}

08003d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d00:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <HAL_Init+0x28>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d12:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d14:	2003      	movs	r0, #3
 8003d16:	f7ff f913 	bl	8002f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d1a:	200f      	movs	r0, #15
 8003d1c:	f7ff ffde 	bl	8003cdc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003d20:	f7fd fe12 	bl	8001948 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8003d24:	2000      	movs	r0, #0
 8003d26:	bd08      	pop	{r3, pc}
 8003d28:	40023c00 	.word	0x40023c00

08003d2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003d2c:	4a02      	ldr	r2, [pc, #8]	; (8003d38 <HAL_IncTick+0xc>)
 8003d2e:	6813      	ldr	r3, [r2, #0]
 8003d30:	3301      	adds	r3, #1
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20001348 	.word	0x20001348

08003d3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003d3c:	4b01      	ldr	r3, [pc, #4]	; (8003d44 <HAL_GetTick+0x8>)
 8003d3e:	6818      	ldr	r0, [r3, #0]
}
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20001348 	.word	0x20001348

08003d48 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003d48:	4b01      	ldr	r3, [pc, #4]	; (8003d50 <HAL_GetREVID+0x8>)
 8003d4a:	6818      	ldr	r0, [r3, #0]
}
 8003d4c:	0c00      	lsrs	r0, r0, #16
 8003d4e:	4770      	bx	lr
 8003d50:	e0042000 	.word	0xe0042000

08003d54 <__assert_func>:
 8003d54:	b500      	push	{lr}
 8003d56:	4c0a      	ldr	r4, [pc, #40]	; (8003d80 <__assert_func+0x2c>)
 8003d58:	6824      	ldr	r4, [r4, #0]
 8003d5a:	4605      	mov	r5, r0
 8003d5c:	b085      	sub	sp, #20
 8003d5e:	68e0      	ldr	r0, [r4, #12]
 8003d60:	b152      	cbz	r2, 8003d78 <__assert_func+0x24>
 8003d62:	4c08      	ldr	r4, [pc, #32]	; (8003d84 <__assert_func+0x30>)
 8003d64:	9202      	str	r2, [sp, #8]
 8003d66:	e88d 0012 	stmia.w	sp, {r1, r4}
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4906      	ldr	r1, [pc, #24]	; (8003d88 <__assert_func+0x34>)
 8003d6e:	462b      	mov	r3, r5
 8003d70:	f000 f80e 	bl	8003d90 <fiprintf>
 8003d74:	f002 f9b0 	bl	80060d8 <abort>
 8003d78:	4c04      	ldr	r4, [pc, #16]	; (8003d8c <__assert_func+0x38>)
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	e7f2      	b.n	8003d64 <__assert_func+0x10>
 8003d7e:	bf00      	nop
 8003d80:	200004b8 	.word	0x200004b8
 8003d84:	08009728 	.word	0x08009728
 8003d88:	08009738 	.word	0x08009738
 8003d8c:	08009734 	.word	0x08009734

08003d90 <fiprintf>:
 8003d90:	b40e      	push	{r1, r2, r3}
 8003d92:	b510      	push	{r4, lr}
 8003d94:	b083      	sub	sp, #12
 8003d96:	ab05      	add	r3, sp, #20
 8003d98:	4c06      	ldr	r4, [pc, #24]	; (8003db4 <fiprintf+0x24>)
 8003d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	4601      	mov	r1, r0
 8003da2:	6820      	ldr	r0, [r4, #0]
 8003da4:	f000 f8c8 	bl	8003f38 <_vfiprintf_r>
 8003da8:	b003      	add	sp, #12
 8003daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dae:	b003      	add	sp, #12
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	200004b8 	.word	0x200004b8

08003db8 <printf>:
 8003db8:	b40f      	push	{r0, r1, r2, r3}
 8003dba:	b500      	push	{lr}
 8003dbc:	4907      	ldr	r1, [pc, #28]	; (8003ddc <printf+0x24>)
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	ab04      	add	r3, sp, #16
 8003dc2:	6808      	ldr	r0, [r1, #0]
 8003dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dc8:	6881      	ldr	r1, [r0, #8]
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	f000 fef2 	bl	8004bb4 <_vfprintf_r>
 8003dd0:	b003      	add	sp, #12
 8003dd2:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dd6:	b004      	add	sp, #16
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	200004b8 	.word	0x200004b8

08003de0 <_puts_r>:
 8003de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de2:	4604      	mov	r4, r0
 8003de4:	b089      	sub	sp, #36	; 0x24
 8003de6:	4608      	mov	r0, r1
 8003de8:	460d      	mov	r5, r1
 8003dea:	f000 f82f 	bl	8003e4c <strlen>
 8003dee:	68a3      	ldr	r3, [r4, #8]
 8003df0:	4f11      	ldr	r7, [pc, #68]	; (8003e38 <_puts_r+0x58>)
 8003df2:	899a      	ldrh	r2, [r3, #12]
 8003df4:	9504      	str	r5, [sp, #16]
 8003df6:	2102      	movs	r1, #2
 8003df8:	f100 0e01 	add.w	lr, r0, #1
 8003dfc:	2601      	movs	r6, #1
 8003dfe:	ad04      	add	r5, sp, #16
 8003e00:	9102      	str	r1, [sp, #8]
 8003e02:	0491      	lsls	r1, r2, #18
 8003e04:	9005      	str	r0, [sp, #20]
 8003e06:	f8cd e00c 	str.w	lr, [sp, #12]
 8003e0a:	9706      	str	r7, [sp, #24]
 8003e0c:	9607      	str	r6, [sp, #28]
 8003e0e:	9501      	str	r5, [sp, #4]
 8003e10:	d406      	bmi.n	8003e20 <_puts_r+0x40>
 8003e12:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e18:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8003e1c:	819a      	strh	r2, [r3, #12]
 8003e1e:	6659      	str	r1, [r3, #100]	; 0x64
 8003e20:	4620      	mov	r0, r4
 8003e22:	4619      	mov	r1, r3
 8003e24:	aa01      	add	r2, sp, #4
 8003e26:	f003 fc13 	bl	8007650 <__sfvwrite_r>
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	bf14      	ite	ne
 8003e2e:	f04f 30ff 	movne.w	r0, #4294967295
 8003e32:	200a      	moveq	r0, #10
 8003e34:	b009      	add	sp, #36	; 0x24
 8003e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e38:	0800976c 	.word	0x0800976c

08003e3c <puts>:
 8003e3c:	4b02      	ldr	r3, [pc, #8]	; (8003e48 <puts+0xc>)
 8003e3e:	4601      	mov	r1, r0
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	f7ff bfcd 	b.w	8003de0 <_puts_r>
 8003e46:	bf00      	nop
 8003e48:	200004b8 	.word	0x200004b8

08003e4c <strlen>:
 8003e4c:	f020 0103 	bic.w	r1, r0, #3
 8003e50:	f010 0003 	ands.w	r0, r0, #3
 8003e54:	f1c0 0000 	rsb	r0, r0, #0
 8003e58:	f851 3b04 	ldr.w	r3, [r1], #4
 8003e5c:	f100 0c04 	add.w	ip, r0, #4
 8003e60:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8003e64:	f06f 0200 	mvn.w	r2, #0
 8003e68:	bf1c      	itt	ne
 8003e6a:	fa22 f20c 	lsrne.w	r2, r2, ip
 8003e6e:	4313      	orrne	r3, r2
 8003e70:	f04f 0c01 	mov.w	ip, #1
 8003e74:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8003e78:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8003e7c:	eba3 020c 	sub.w	r2, r3, ip
 8003e80:	ea22 0203 	bic.w	r2, r2, r3
 8003e84:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8003e88:	bf04      	itt	eq
 8003e8a:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003e8e:	3004      	addeq	r0, #4
 8003e90:	d0f4      	beq.n	8003e7c <strlen+0x30>
 8003e92:	f1c2 0100 	rsb	r1, r2, #0
 8003e96:	ea02 0201 	and.w	r2, r2, r1
 8003e9a:	fab2 f282 	clz	r2, r2
 8003e9e:	f1c2 021f 	rsb	r2, r2, #31
 8003ea2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8003ea6:	4770      	bx	lr

08003ea8 <__sprint_r.part.0>:
 8003ea8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8003eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eae:	049c      	lsls	r4, r3, #18
 8003eb0:	460f      	mov	r7, r1
 8003eb2:	4692      	mov	sl, r2
 8003eb4:	d52b      	bpl.n	8003f0e <__sprint_r.part.0+0x66>
 8003eb6:	6893      	ldr	r3, [r2, #8]
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	b333      	cbz	r3, 8003f0a <__sprint_r.part.0+0x62>
 8003ebc:	4680      	mov	r8, r0
 8003ebe:	f102 0908 	add.w	r9, r2, #8
 8003ec2:	e919 0060 	ldmdb	r9, {r5, r6}
 8003ec6:	08b6      	lsrs	r6, r6, #2
 8003ec8:	d017      	beq.n	8003efa <__sprint_r.part.0+0x52>
 8003eca:	3d04      	subs	r5, #4
 8003ecc:	2400      	movs	r4, #0
 8003ece:	e001      	b.n	8003ed4 <__sprint_r.part.0+0x2c>
 8003ed0:	42a6      	cmp	r6, r4
 8003ed2:	d010      	beq.n	8003ef6 <__sprint_r.part.0+0x4e>
 8003ed4:	4640      	mov	r0, r8
 8003ed6:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8003eda:	463a      	mov	r2, r7
 8003edc:	f003 fa30 	bl	8007340 <_fputwc_r>
 8003ee0:	1c43      	adds	r3, r0, #1
 8003ee2:	f104 0401 	add.w	r4, r4, #1
 8003ee6:	d1f3      	bne.n	8003ed0 <__sprint_r.part.0+0x28>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8ca 3008 	str.w	r3, [sl, #8]
 8003eee:	f8ca 3004 	str.w	r3, [sl, #4]
 8003ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef6:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003efa:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 8003efe:	f8ca 3008 	str.w	r3, [sl, #8]
 8003f02:	f109 0908 	add.w	r9, r9, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1db      	bne.n	8003ec2 <__sprint_r.part.0+0x1a>
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	e7ec      	b.n	8003ee8 <__sprint_r.part.0+0x40>
 8003f0e:	f003 fb9f 	bl	8007650 <__sfvwrite_r>
 8003f12:	2300      	movs	r3, #0
 8003f14:	f8ca 3008 	str.w	r3, [sl, #8]
 8003f18:	f8ca 3004 	str.w	r3, [sl, #4]
 8003f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003f20 <__sprint_r>:
 8003f20:	6893      	ldr	r3, [r2, #8]
 8003f22:	b410      	push	{r4}
 8003f24:	b11b      	cbz	r3, 8003f2e <__sprint_r+0xe>
 8003f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f2a:	f7ff bfbd 	b.w	8003ea8 <__sprint_r.part.0>
 8003f2e:	4618      	mov	r0, r3
 8003f30:	6053      	str	r3, [r2, #4]
 8003f32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <_vfiprintf_r>:
 8003f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3c:	b0ab      	sub	sp, #172	; 0xac
 8003f3e:	461c      	mov	r4, r3
 8003f40:	9100      	str	r1, [sp, #0]
 8003f42:	4693      	mov	fp, r2
 8003f44:	9304      	str	r3, [sp, #16]
 8003f46:	9001      	str	r0, [sp, #4]
 8003f48:	b118      	cbz	r0, 8003f52 <_vfiprintf_r+0x1a>
 8003f4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80e1 	beq.w	8004114 <_vfiprintf_r+0x1dc>
 8003f52:	9b00      	ldr	r3, [sp, #0]
 8003f54:	8999      	ldrh	r1, [r3, #12]
 8003f56:	b28a      	uxth	r2, r1
 8003f58:	0490      	lsls	r0, r2, #18
 8003f5a:	d408      	bmi.n	8003f6e <_vfiprintf_r+0x36>
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f60:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 8003f64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f68:	8182      	strh	r2, [r0, #12]
 8003f6a:	6643      	str	r3, [r0, #100]	; 0x64
 8003f6c:	b292      	uxth	r2, r2
 8003f6e:	0711      	lsls	r1, r2, #28
 8003f70:	f140 80b0 	bpl.w	80040d4 <_vfiprintf_r+0x19c>
 8003f74:	9b00      	ldr	r3, [sp, #0]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80ab 	beq.w	80040d4 <_vfiprintf_r+0x19c>
 8003f7e:	f002 021a 	and.w	r2, r2, #26
 8003f82:	2a0a      	cmp	r2, #10
 8003f84:	f000 80b2 	beq.w	80040ec <_vfiprintf_r+0x1b4>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8003f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f90:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f92:	930e      	str	r3, [sp, #56]	; 0x38
 8003f94:	9302      	str	r3, [sp, #8]
 8003f96:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003f9a:	4654      	mov	r4, sl
 8003f9c:	f89b 3000 	ldrb.w	r3, [fp]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 849d 	beq.w	80048e0 <_vfiprintf_r+0x9a8>
 8003fa6:	2b25      	cmp	r3, #37	; 0x25
 8003fa8:	f000 849a 	beq.w	80048e0 <_vfiprintf_r+0x9a8>
 8003fac:	465a      	mov	r2, fp
 8003fae:	e001      	b.n	8003fb4 <_vfiprintf_r+0x7c>
 8003fb0:	2b25      	cmp	r3, #37	; 0x25
 8003fb2:	d003      	beq.n	8003fbc <_vfiprintf_r+0x84>
 8003fb4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f9      	bne.n	8003fb0 <_vfiprintf_r+0x78>
 8003fbc:	ebcb 0602 	rsb	r6, fp, r2
 8003fc0:	4615      	mov	r5, r2
 8003fc2:	b196      	cbz	r6, 8003fea <_vfiprintf_r+0xb2>
 8003fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003fc8:	f8c4 b000 	str.w	fp, [r4]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	4432      	add	r2, r6
 8003fd0:	2b07      	cmp	r3, #7
 8003fd2:	6066      	str	r6, [r4, #4]
 8003fd4:	920f      	str	r2, [sp, #60]	; 0x3c
 8003fd6:	930e      	str	r3, [sp, #56]	; 0x38
 8003fd8:	dd77      	ble.n	80040ca <_vfiprintf_r+0x192>
 8003fda:	2a00      	cmp	r2, #0
 8003fdc:	f040 84a9 	bne.w	8004932 <_vfiprintf_r+0x9fa>
 8003fe0:	9b02      	ldr	r3, [sp, #8]
 8003fe2:	920e      	str	r2, [sp, #56]	; 0x38
 8003fe4:	4433      	add	r3, r6
 8003fe6:	4654      	mov	r4, sl
 8003fe8:	9302      	str	r3, [sp, #8]
 8003fea:	782b      	ldrb	r3, [r5, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 8359 	beq.w	80046a4 <_vfiprintf_r+0x76c>
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	f04f 3cff 	mov.w	ip, #4294967295
 8003ff8:	1c68      	adds	r0, r5, #1
 8003ffa:	786b      	ldrb	r3, [r5, #1]
 8003ffc:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8004000:	4688      	mov	r8, r1
 8004002:	460d      	mov	r5, r1
 8004004:	4666      	mov	r6, ip
 8004006:	f100 0b01 	add.w	fp, r0, #1
 800400a:	f1a3 0220 	sub.w	r2, r3, #32
 800400e:	2a58      	cmp	r2, #88	; 0x58
 8004010:	f200 82a7 	bhi.w	8004562 <_vfiprintf_r+0x62a>
 8004014:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004018:	02a50297 	.word	0x02a50297
 800401c:	029f02a5 	.word	0x029f02a5
 8004020:	02a502a5 	.word	0x02a502a5
 8004024:	02a502a5 	.word	0x02a502a5
 8004028:	02a502a5 	.word	0x02a502a5
 800402c:	025f0252 	.word	0x025f0252
 8004030:	010c02a5 	.word	0x010c02a5
 8004034:	02a5026a 	.word	0x02a5026a
 8004038:	012e0128 	.word	0x012e0128
 800403c:	012e012e 	.word	0x012e012e
 8004040:	012e012e 	.word	0x012e012e
 8004044:	012e012e 	.word	0x012e012e
 8004048:	012e012e 	.word	0x012e012e
 800404c:	02a502a5 	.word	0x02a502a5
 8004050:	02a502a5 	.word	0x02a502a5
 8004054:	02a502a5 	.word	0x02a502a5
 8004058:	02a502a5 	.word	0x02a502a5
 800405c:	02a502a5 	.word	0x02a502a5
 8004060:	02a5013c 	.word	0x02a5013c
 8004064:	02a502a5 	.word	0x02a502a5
 8004068:	02a502a5 	.word	0x02a502a5
 800406c:	02a502a5 	.word	0x02a502a5
 8004070:	02a502a5 	.word	0x02a502a5
 8004074:	017302a5 	.word	0x017302a5
 8004078:	02a502a5 	.word	0x02a502a5
 800407c:	02a502a5 	.word	0x02a502a5
 8004080:	018a02a5 	.word	0x018a02a5
 8004084:	02a502a5 	.word	0x02a502a5
 8004088:	02a501a2 	.word	0x02a501a2
 800408c:	02a502a5 	.word	0x02a502a5
 8004090:	02a502a5 	.word	0x02a502a5
 8004094:	02a502a5 	.word	0x02a502a5
 8004098:	02a502a5 	.word	0x02a502a5
 800409c:	01c602a5 	.word	0x01c602a5
 80040a0:	02a501d8 	.word	0x02a501d8
 80040a4:	02a502a5 	.word	0x02a502a5
 80040a8:	01d80122 	.word	0x01d80122
 80040ac:	02a502a5 	.word	0x02a502a5
 80040b0:	02a50249 	.word	0x02a50249
 80040b4:	01120286 	.word	0x01120286
 80040b8:	020501f1 	.word	0x020501f1
 80040bc:	020b02a5 	.word	0x020b02a5
 80040c0:	008102a5 	.word	0x008102a5
 80040c4:	02a502a5 	.word	0x02a502a5
 80040c8:	0230      	.short	0x0230
 80040ca:	3408      	adds	r4, #8
 80040cc:	9b02      	ldr	r3, [sp, #8]
 80040ce:	4433      	add	r3, r6
 80040d0:	9302      	str	r3, [sp, #8]
 80040d2:	e78a      	b.n	8003fea <_vfiprintf_r+0xb2>
 80040d4:	9801      	ldr	r0, [sp, #4]
 80040d6:	9900      	ldr	r1, [sp, #0]
 80040d8:	f001 ff9c 	bl	8006014 <__swsetup_r>
 80040dc:	b9a8      	cbnz	r0, 800410a <_vfiprintf_r+0x1d2>
 80040de:	9b00      	ldr	r3, [sp, #0]
 80040e0:	899a      	ldrh	r2, [r3, #12]
 80040e2:	f002 021a 	and.w	r2, r2, #26
 80040e6:	2a0a      	cmp	r2, #10
 80040e8:	f47f af4e 	bne.w	8003f88 <_vfiprintf_r+0x50>
 80040ec:	9b00      	ldr	r3, [sp, #0]
 80040ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f6ff af48 	blt.w	8003f88 <_vfiprintf_r+0x50>
 80040f8:	9801      	ldr	r0, [sp, #4]
 80040fa:	9900      	ldr	r1, [sp, #0]
 80040fc:	465a      	mov	r2, fp
 80040fe:	4623      	mov	r3, r4
 8004100:	f000 fd1c 	bl	8004b3c <__sbprintf>
 8004104:	b02b      	add	sp, #172	; 0xac
 8004106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410a:	f04f 30ff 	mov.w	r0, #4294967295
 800410e:	b02b      	add	sp, #172	; 0xac
 8004110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004114:	f003 f90a 	bl	800732c <__sinit>
 8004118:	e71b      	b.n	8003f52 <_vfiprintf_r+0x1a>
 800411a:	f018 0f20 	tst.w	r8, #32
 800411e:	9503      	str	r5, [sp, #12]
 8004120:	46b4      	mov	ip, r6
 8004122:	f000 810b 	beq.w	800433c <_vfiprintf_r+0x404>
 8004126:	9b04      	ldr	r3, [sp, #16]
 8004128:	3307      	adds	r3, #7
 800412a:	f023 0307 	bic.w	r3, r3, #7
 800412e:	f103 0208 	add.w	r2, r3, #8
 8004132:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004136:	9204      	str	r2, [sp, #16]
 8004138:	2301      	movs	r3, #1
 800413a:	2200      	movs	r2, #0
 800413c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8004140:	46e1      	mov	r9, ip
 8004142:	4615      	mov	r5, r2
 8004144:	f1bc 0f00 	cmp.w	ip, #0
 8004148:	bfa8      	it	ge
 800414a:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 800414e:	ea56 0207 	orrs.w	r2, r6, r7
 8004152:	f040 80c4 	bne.w	80042de <_vfiprintf_r+0x3a6>
 8004156:	f1bc 0f00 	cmp.w	ip, #0
 800415a:	f000 837d 	beq.w	8004858 <_vfiprintf_r+0x920>
 800415e:	2b01      	cmp	r3, #1
 8004160:	f000 80c5 	beq.w	80042ee <_vfiprintf_r+0x3b6>
 8004164:	2b02      	cmp	r3, #2
 8004166:	f000 8383 	beq.w	8004870 <_vfiprintf_r+0x938>
 800416a:	4651      	mov	r1, sl
 800416c:	08f2      	lsrs	r2, r6, #3
 800416e:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8004172:	08f8      	lsrs	r0, r7, #3
 8004174:	f006 0307 	and.w	r3, r6, #7
 8004178:	4607      	mov	r7, r0
 800417a:	4616      	mov	r6, r2
 800417c:	3330      	adds	r3, #48	; 0x30
 800417e:	ea56 0207 	orrs.w	r2, r6, r7
 8004182:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8004186:	d1f1      	bne.n	800416c <_vfiprintf_r+0x234>
 8004188:	f018 0f01 	tst.w	r8, #1
 800418c:	9107      	str	r1, [sp, #28]
 800418e:	f040 83f9 	bne.w	8004984 <_vfiprintf_r+0xa4c>
 8004192:	ebc1 090a 	rsb	r9, r1, sl
 8004196:	45e1      	cmp	r9, ip
 8004198:	464e      	mov	r6, r9
 800419a:	bfb8      	it	lt
 800419c:	4666      	movlt	r6, ip
 800419e:	b105      	cbz	r5, 80041a2 <_vfiprintf_r+0x26a>
 80041a0:	3601      	adds	r6, #1
 80041a2:	f018 0302 	ands.w	r3, r8, #2
 80041a6:	9305      	str	r3, [sp, #20]
 80041a8:	bf18      	it	ne
 80041aa:	3602      	addne	r6, #2
 80041ac:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 80041b0:	9306      	str	r3, [sp, #24]
 80041b2:	f040 81f6 	bne.w	80045a2 <_vfiprintf_r+0x66a>
 80041b6:	9b03      	ldr	r3, [sp, #12]
 80041b8:	1b9d      	subs	r5, r3, r6
 80041ba:	2d00      	cmp	r5, #0
 80041bc:	f340 81f1 	ble.w	80045a2 <_vfiprintf_r+0x66a>
 80041c0:	2d10      	cmp	r5, #16
 80041c2:	f340 8489 	ble.w	8004ad8 <_vfiprintf_r+0xba0>
 80041c6:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 80041ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80041cc:	4fc4      	ldr	r7, [pc, #784]	; (80044e0 <_vfiprintf_r+0x5a8>)
 80041ce:	4620      	mov	r0, r4
 80041d0:	2310      	movs	r3, #16
 80041d2:	4664      	mov	r4, ip
 80041d4:	4671      	mov	r1, lr
 80041d6:	4684      	mov	ip, r0
 80041d8:	e007      	b.n	80041ea <_vfiprintf_r+0x2b2>
 80041da:	f101 0e02 	add.w	lr, r1, #2
 80041de:	f10c 0c08 	add.w	ip, ip, #8
 80041e2:	4601      	mov	r1, r0
 80041e4:	3d10      	subs	r5, #16
 80041e6:	2d10      	cmp	r5, #16
 80041e8:	dd13      	ble.n	8004212 <_vfiprintf_r+0x2da>
 80041ea:	1c48      	adds	r0, r1, #1
 80041ec:	3210      	adds	r2, #16
 80041ee:	2807      	cmp	r0, #7
 80041f0:	920f      	str	r2, [sp, #60]	; 0x3c
 80041f2:	f8cc 7000 	str.w	r7, [ip]
 80041f6:	f8cc 3004 	str.w	r3, [ip, #4]
 80041fa:	900e      	str	r0, [sp, #56]	; 0x38
 80041fc:	dded      	ble.n	80041da <_vfiprintf_r+0x2a2>
 80041fe:	2a00      	cmp	r2, #0
 8004200:	f040 81bf 	bne.w	8004582 <_vfiprintf_r+0x64a>
 8004204:	3d10      	subs	r5, #16
 8004206:	2d10      	cmp	r5, #16
 8004208:	4611      	mov	r1, r2
 800420a:	f04f 0e01 	mov.w	lr, #1
 800420e:	46d4      	mov	ip, sl
 8004210:	dceb      	bgt.n	80041ea <_vfiprintf_r+0x2b2>
 8004212:	4663      	mov	r3, ip
 8004214:	4671      	mov	r1, lr
 8004216:	46a4      	mov	ip, r4
 8004218:	461c      	mov	r4, r3
 800421a:	442a      	add	r2, r5
 800421c:	2907      	cmp	r1, #7
 800421e:	920f      	str	r2, [sp, #60]	; 0x3c
 8004220:	6027      	str	r7, [r4, #0]
 8004222:	6065      	str	r5, [r4, #4]
 8004224:	910e      	str	r1, [sp, #56]	; 0x38
 8004226:	f300 8343 	bgt.w	80048b0 <_vfiprintf_r+0x978>
 800422a:	3408      	adds	r4, #8
 800422c:	1c48      	adds	r0, r1, #1
 800422e:	e1bb      	b.n	80045a8 <_vfiprintf_r+0x670>
 8004230:	4658      	mov	r0, fp
 8004232:	f048 0804 	orr.w	r8, r8, #4
 8004236:	f89b 3000 	ldrb.w	r3, [fp]
 800423a:	e6e4      	b.n	8004006 <_vfiprintf_r+0xce>
 800423c:	f018 0320 	ands.w	r3, r8, #32
 8004240:	9503      	str	r5, [sp, #12]
 8004242:	46b4      	mov	ip, r6
 8004244:	d062      	beq.n	800430c <_vfiprintf_r+0x3d4>
 8004246:	9b04      	ldr	r3, [sp, #16]
 8004248:	3307      	adds	r3, #7
 800424a:	f023 0307 	bic.w	r3, r3, #7
 800424e:	f103 0208 	add.w	r2, r3, #8
 8004252:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004256:	9204      	str	r2, [sp, #16]
 8004258:	2300      	movs	r3, #0
 800425a:	e76e      	b.n	800413a <_vfiprintf_r+0x202>
 800425c:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 8004260:	f89b 3000 	ldrb.w	r3, [fp]
 8004264:	4658      	mov	r0, fp
 8004266:	e6ce      	b.n	8004006 <_vfiprintf_r+0xce>
 8004268:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 800426c:	f89b 3000 	ldrb.w	r3, [fp]
 8004270:	4658      	mov	r0, fp
 8004272:	e6c8      	b.n	8004006 <_vfiprintf_r+0xce>
 8004274:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004278:	2500      	movs	r5, #0
 800427a:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800427e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004282:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8004286:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800428a:	2a09      	cmp	r2, #9
 800428c:	d9f5      	bls.n	800427a <_vfiprintf_r+0x342>
 800428e:	e6bc      	b.n	800400a <_vfiprintf_r+0xd2>
 8004290:	f048 0810 	orr.w	r8, r8, #16
 8004294:	f018 0f20 	tst.w	r8, #32
 8004298:	9503      	str	r5, [sp, #12]
 800429a:	46b4      	mov	ip, r6
 800429c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80042a0:	f000 809a 	beq.w	80043d8 <_vfiprintf_r+0x4a0>
 80042a4:	9904      	ldr	r1, [sp, #16]
 80042a6:	3107      	adds	r1, #7
 80042a8:	f021 0107 	bic.w	r1, r1, #7
 80042ac:	e9d1 2300 	ldrd	r2, r3, [r1]
 80042b0:	3108      	adds	r1, #8
 80042b2:	9104      	str	r1, [sp, #16]
 80042b4:	4616      	mov	r6, r2
 80042b6:	461f      	mov	r7, r3
 80042b8:	2a00      	cmp	r2, #0
 80042ba:	f173 0300 	sbcs.w	r3, r3, #0
 80042be:	f2c0 83a3 	blt.w	8004a08 <_vfiprintf_r+0xad0>
 80042c2:	f1bc 0f00 	cmp.w	ip, #0
 80042c6:	bfa8      	it	ge
 80042c8:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 80042cc:	ea56 0207 	orrs.w	r2, r6, r7
 80042d0:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 80042d4:	46e1      	mov	r9, ip
 80042d6:	f04f 0301 	mov.w	r3, #1
 80042da:	f43f af3c 	beq.w	8004156 <_vfiprintf_r+0x21e>
 80042de:	2b01      	cmp	r3, #1
 80042e0:	f47f af40 	bne.w	8004164 <_vfiprintf_r+0x22c>
 80042e4:	2f00      	cmp	r7, #0
 80042e6:	bf08      	it	eq
 80042e8:	2e0a      	cmpeq	r6, #10
 80042ea:	f080 8331 	bcs.w	8004950 <_vfiprintf_r+0xa18>
 80042ee:	ab2a      	add	r3, sp, #168	; 0xa8
 80042f0:	3630      	adds	r6, #48	; 0x30
 80042f2:	f803 6d41 	strb.w	r6, [r3, #-65]!
 80042f6:	ebc3 090a 	rsb	r9, r3, sl
 80042fa:	9307      	str	r3, [sp, #28]
 80042fc:	e74b      	b.n	8004196 <_vfiprintf_r+0x25e>
 80042fe:	f048 0810 	orr.w	r8, r8, #16
 8004302:	f018 0320 	ands.w	r3, r8, #32
 8004306:	9503      	str	r5, [sp, #12]
 8004308:	46b4      	mov	ip, r6
 800430a:	d19c      	bne.n	8004246 <_vfiprintf_r+0x30e>
 800430c:	f018 0210 	ands.w	r2, r8, #16
 8004310:	f040 82f4 	bne.w	80048fc <_vfiprintf_r+0x9c4>
 8004314:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8004318:	f000 82f0 	beq.w	80048fc <_vfiprintf_r+0x9c4>
 800431c:	9904      	ldr	r1, [sp, #16]
 800431e:	4613      	mov	r3, r2
 8004320:	460a      	mov	r2, r1
 8004322:	3204      	adds	r2, #4
 8004324:	880e      	ldrh	r6, [r1, #0]
 8004326:	9204      	str	r2, [sp, #16]
 8004328:	2700      	movs	r7, #0
 800432a:	e706      	b.n	800413a <_vfiprintf_r+0x202>
 800432c:	f048 0810 	orr.w	r8, r8, #16
 8004330:	f018 0f20 	tst.w	r8, #32
 8004334:	9503      	str	r5, [sp, #12]
 8004336:	46b4      	mov	ip, r6
 8004338:	f47f aef5 	bne.w	8004126 <_vfiprintf_r+0x1ee>
 800433c:	9a04      	ldr	r2, [sp, #16]
 800433e:	f018 0f10 	tst.w	r8, #16
 8004342:	4613      	mov	r3, r2
 8004344:	f040 82e1 	bne.w	800490a <_vfiprintf_r+0x9d2>
 8004348:	f018 0f40 	tst.w	r8, #64	; 0x40
 800434c:	f000 82dd 	beq.w	800490a <_vfiprintf_r+0x9d2>
 8004350:	8816      	ldrh	r6, [r2, #0]
 8004352:	3204      	adds	r2, #4
 8004354:	2700      	movs	r7, #0
 8004356:	2301      	movs	r3, #1
 8004358:	9204      	str	r2, [sp, #16]
 800435a:	e6ee      	b.n	800413a <_vfiprintf_r+0x202>
 800435c:	4a61      	ldr	r2, [pc, #388]	; (80044e4 <_vfiprintf_r+0x5ac>)
 800435e:	9503      	str	r5, [sp, #12]
 8004360:	f018 0f20 	tst.w	r8, #32
 8004364:	46b4      	mov	ip, r6
 8004366:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800436a:	9209      	str	r2, [sp, #36]	; 0x24
 800436c:	f000 808e 	beq.w	800448c <_vfiprintf_r+0x554>
 8004370:	9a04      	ldr	r2, [sp, #16]
 8004372:	3207      	adds	r2, #7
 8004374:	f022 0207 	bic.w	r2, r2, #7
 8004378:	e9d2 6700 	ldrd	r6, r7, [r2]
 800437c:	f102 0108 	add.w	r1, r2, #8
 8004380:	9104      	str	r1, [sp, #16]
 8004382:	f018 0f01 	tst.w	r8, #1
 8004386:	f000 828c 	beq.w	80048a2 <_vfiprintf_r+0x96a>
 800438a:	ea56 0207 	orrs.w	r2, r6, r7
 800438e:	f000 8288 	beq.w	80048a2 <_vfiprintf_r+0x96a>
 8004392:	2230      	movs	r2, #48	; 0x30
 8004394:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8004398:	f048 0802 	orr.w	r8, r8, #2
 800439c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 80043a0:	2302      	movs	r3, #2
 80043a2:	e6ca      	b.n	800413a <_vfiprintf_r+0x202>
 80043a4:	9a04      	ldr	r2, [sp, #16]
 80043a6:	9503      	str	r5, [sp, #12]
 80043a8:	6813      	ldr	r3, [r2, #0]
 80043aa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80043ae:	4613      	mov	r3, r2
 80043b0:	3304      	adds	r3, #4
 80043b2:	2601      	movs	r6, #1
 80043b4:	2100      	movs	r1, #0
 80043b6:	9304      	str	r3, [sp, #16]
 80043b8:	ab10      	add	r3, sp, #64	; 0x40
 80043ba:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80043be:	46b1      	mov	r9, r6
 80043c0:	9307      	str	r3, [sp, #28]
 80043c2:	f04f 0c00 	mov.w	ip, #0
 80043c6:	e6ec      	b.n	80041a2 <_vfiprintf_r+0x26a>
 80043c8:	f018 0f20 	tst.w	r8, #32
 80043cc:	9503      	str	r5, [sp, #12]
 80043ce:	46b4      	mov	ip, r6
 80043d0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80043d4:	f47f af66 	bne.w	80042a4 <_vfiprintf_r+0x36c>
 80043d8:	f018 0f10 	tst.w	r8, #16
 80043dc:	f040 82a0 	bne.w	8004920 <_vfiprintf_r+0x9e8>
 80043e0:	f018 0f40 	tst.w	r8, #64	; 0x40
 80043e4:	f000 829c 	beq.w	8004920 <_vfiprintf_r+0x9e8>
 80043e8:	9904      	ldr	r1, [sp, #16]
 80043ea:	f9b1 6000 	ldrsh.w	r6, [r1]
 80043ee:	3104      	adds	r1, #4
 80043f0:	17f7      	asrs	r7, r6, #31
 80043f2:	4632      	mov	r2, r6
 80043f4:	463b      	mov	r3, r7
 80043f6:	9104      	str	r1, [sp, #16]
 80043f8:	e75e      	b.n	80042b8 <_vfiprintf_r+0x380>
 80043fa:	9904      	ldr	r1, [sp, #16]
 80043fc:	9503      	str	r5, [sp, #12]
 80043fe:	2330      	movs	r3, #48	; 0x30
 8004400:	460a      	mov	r2, r1
 8004402:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8004406:	2378      	movs	r3, #120	; 0x78
 8004408:	3204      	adds	r2, #4
 800440a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 800440e:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <_vfiprintf_r+0x5b0>)
 8004410:	9309      	str	r3, [sp, #36]	; 0x24
 8004412:	46b4      	mov	ip, r6
 8004414:	f048 0802 	orr.w	r8, r8, #2
 8004418:	680e      	ldr	r6, [r1, #0]
 800441a:	9204      	str	r2, [sp, #16]
 800441c:	2700      	movs	r7, #0
 800441e:	2302      	movs	r3, #2
 8004420:	e68b      	b.n	800413a <_vfiprintf_r+0x202>
 8004422:	f048 0820 	orr.w	r8, r8, #32
 8004426:	f89b 3000 	ldrb.w	r3, [fp]
 800442a:	4658      	mov	r0, fp
 800442c:	e5eb      	b.n	8004006 <_vfiprintf_r+0xce>
 800442e:	9a04      	ldr	r2, [sp, #16]
 8004430:	9503      	str	r5, [sp, #12]
 8004432:	6813      	ldr	r3, [r2, #0]
 8004434:	9307      	str	r3, [sp, #28]
 8004436:	2100      	movs	r1, #0
 8004438:	46b4      	mov	ip, r6
 800443a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800443e:	1d16      	adds	r6, r2, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 834f 	beq.w	8004ae4 <_vfiprintf_r+0xbac>
 8004446:	f1bc 0f00 	cmp.w	ip, #0
 800444a:	f2c0 8329 	blt.w	8004aa0 <_vfiprintf_r+0xb68>
 800444e:	9d07      	ldr	r5, [sp, #28]
 8004450:	f8cd c010 	str.w	ip, [sp, #16]
 8004454:	4662      	mov	r2, ip
 8004456:	4628      	mov	r0, r5
 8004458:	2100      	movs	r1, #0
 800445a:	f003 fdbb 	bl	8007fd4 <memchr>
 800445e:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004462:	2800      	cmp	r0, #0
 8004464:	f000 834f 	beq.w	8004b06 <_vfiprintf_r+0xbce>
 8004468:	ebc5 0900 	rsb	r9, r5, r0
 800446c:	9604      	str	r6, [sp, #16]
 800446e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 8004472:	f04f 0c00 	mov.w	ip, #0
 8004476:	e68e      	b.n	8004196 <_vfiprintf_r+0x25e>
 8004478:	4a1b      	ldr	r2, [pc, #108]	; (80044e8 <_vfiprintf_r+0x5b0>)
 800447a:	9503      	str	r5, [sp, #12]
 800447c:	f018 0f20 	tst.w	r8, #32
 8004480:	46b4      	mov	ip, r6
 8004482:	9209      	str	r2, [sp, #36]	; 0x24
 8004484:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8004488:	f47f af72 	bne.w	8004370 <_vfiprintf_r+0x438>
 800448c:	9904      	ldr	r1, [sp, #16]
 800448e:	f018 0f10 	tst.w	r8, #16
 8004492:	460a      	mov	r2, r1
 8004494:	f040 823f 	bne.w	8004916 <_vfiprintf_r+0x9de>
 8004498:	f018 0f40 	tst.w	r8, #64	; 0x40
 800449c:	f000 823b 	beq.w	8004916 <_vfiprintf_r+0x9de>
 80044a0:	3204      	adds	r2, #4
 80044a2:	880e      	ldrh	r6, [r1, #0]
 80044a4:	9204      	str	r2, [sp, #16]
 80044a6:	2700      	movs	r7, #0
 80044a8:	e76b      	b.n	8004382 <_vfiprintf_r+0x44a>
 80044aa:	f89b 3000 	ldrb.w	r3, [fp]
 80044ae:	2b6c      	cmp	r3, #108	; 0x6c
 80044b0:	f000 82e9 	beq.w	8004a86 <_vfiprintf_r+0xb4e>
 80044b4:	f048 0810 	orr.w	r8, r8, #16
 80044b8:	4658      	mov	r0, fp
 80044ba:	e5a4      	b.n	8004006 <_vfiprintf_r+0xce>
 80044bc:	9a04      	ldr	r2, [sp, #16]
 80044be:	6815      	ldr	r5, [r2, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	2d00      	cmp	r5, #0
 80044c4:	f103 0304 	add.w	r3, r3, #4
 80044c8:	f2c0 82e5 	blt.w	8004a96 <_vfiprintf_r+0xb5e>
 80044cc:	9304      	str	r3, [sp, #16]
 80044ce:	f89b 3000 	ldrb.w	r3, [fp]
 80044d2:	4658      	mov	r0, fp
 80044d4:	e597      	b.n	8004006 <_vfiprintf_r+0xce>
 80044d6:	f89b 3000 	ldrb.w	r3, [fp]
 80044da:	4658      	mov	r0, fp
 80044dc:	212b      	movs	r1, #43	; 0x2b
 80044de:	e592      	b.n	8004006 <_vfiprintf_r+0xce>
 80044e0:	08009780 	.word	0x08009780
 80044e4:	08009790 	.word	0x08009790
 80044e8:	080097a4 	.word	0x080097a4
 80044ec:	f89b 3000 	ldrb.w	r3, [fp]
 80044f0:	2b2a      	cmp	r3, #42	; 0x2a
 80044f2:	f10b 0001 	add.w	r0, fp, #1
 80044f6:	f000 830f 	beq.w	8004b18 <_vfiprintf_r+0xbe0>
 80044fa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80044fe:	2a09      	cmp	r2, #9
 8004500:	4683      	mov	fp, r0
 8004502:	f04f 0600 	mov.w	r6, #0
 8004506:	f63f ad80 	bhi.w	800400a <_vfiprintf_r+0xd2>
 800450a:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800450e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8004512:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 8004516:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800451a:	2a09      	cmp	r2, #9
 800451c:	d9f5      	bls.n	800450a <_vfiprintf_r+0x5d2>
 800451e:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8004522:	e572      	b.n	800400a <_vfiprintf_r+0xd2>
 8004524:	f018 0f20 	tst.w	r8, #32
 8004528:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800452c:	f000 8283 	beq.w	8004a36 <_vfiprintf_r+0xafe>
 8004530:	9a04      	ldr	r2, [sp, #16]
 8004532:	9902      	ldr	r1, [sp, #8]
 8004534:	6813      	ldr	r3, [r2, #0]
 8004536:	17cf      	asrs	r7, r1, #31
 8004538:	4608      	mov	r0, r1
 800453a:	3204      	adds	r2, #4
 800453c:	4639      	mov	r1, r7
 800453e:	9204      	str	r2, [sp, #16]
 8004540:	e9c3 0100 	strd	r0, r1, [r3]
 8004544:	e52a      	b.n	8003f9c <_vfiprintf_r+0x64>
 8004546:	4658      	mov	r0, fp
 8004548:	f89b 3000 	ldrb.w	r3, [fp]
 800454c:	2900      	cmp	r1, #0
 800454e:	f47f ad5a 	bne.w	8004006 <_vfiprintf_r+0xce>
 8004552:	2120      	movs	r1, #32
 8004554:	e557      	b.n	8004006 <_vfiprintf_r+0xce>
 8004556:	f048 0801 	orr.w	r8, r8, #1
 800455a:	4658      	mov	r0, fp
 800455c:	f89b 3000 	ldrb.w	r3, [fp]
 8004560:	e551      	b.n	8004006 <_vfiprintf_r+0xce>
 8004562:	9503      	str	r5, [sp, #12]
 8004564:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 809b 	beq.w	80046a4 <_vfiprintf_r+0x76c>
 800456e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8004572:	2300      	movs	r3, #0
 8004574:	2601      	movs	r6, #1
 8004576:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800457a:	ab10      	add	r3, sp, #64	; 0x40
 800457c:	46b1      	mov	r9, r6
 800457e:	9307      	str	r3, [sp, #28]
 8004580:	e71f      	b.n	80043c2 <_vfiprintf_r+0x48a>
 8004582:	9801      	ldr	r0, [sp, #4]
 8004584:	9900      	ldr	r1, [sp, #0]
 8004586:	9308      	str	r3, [sp, #32]
 8004588:	aa0d      	add	r2, sp, #52	; 0x34
 800458a:	f7ff fc8d 	bl	8003ea8 <__sprint_r.part.0>
 800458e:	2800      	cmp	r0, #0
 8004590:	f040 808f 	bne.w	80046b2 <_vfiprintf_r+0x77a>
 8004594:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004596:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004598:	9b08      	ldr	r3, [sp, #32]
 800459a:	f101 0e01 	add.w	lr, r1, #1
 800459e:	46d4      	mov	ip, sl
 80045a0:	e620      	b.n	80041e4 <_vfiprintf_r+0x2ac>
 80045a2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80045a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045a6:	1c48      	adds	r0, r1, #1
 80045a8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80045ac:	b16b      	cbz	r3, 80045ca <_vfiprintf_r+0x692>
 80045ae:	3201      	adds	r2, #1
 80045b0:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80045b4:	2101      	movs	r1, #1
 80045b6:	2807      	cmp	r0, #7
 80045b8:	920f      	str	r2, [sp, #60]	; 0x3c
 80045ba:	900e      	str	r0, [sp, #56]	; 0x38
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	6061      	str	r1, [r4, #4]
 80045c0:	f300 8134 	bgt.w	800482c <_vfiprintf_r+0x8f4>
 80045c4:	4601      	mov	r1, r0
 80045c6:	3408      	adds	r4, #8
 80045c8:	3001      	adds	r0, #1
 80045ca:	9b05      	ldr	r3, [sp, #20]
 80045cc:	b163      	cbz	r3, 80045e8 <_vfiprintf_r+0x6b0>
 80045ce:	3202      	adds	r2, #2
 80045d0:	a90c      	add	r1, sp, #48	; 0x30
 80045d2:	2302      	movs	r3, #2
 80045d4:	2807      	cmp	r0, #7
 80045d6:	920f      	str	r2, [sp, #60]	; 0x3c
 80045d8:	900e      	str	r0, [sp, #56]	; 0x38
 80045da:	e884 000a 	stmia.w	r4, {r1, r3}
 80045de:	f300 8134 	bgt.w	800484a <_vfiprintf_r+0x912>
 80045e2:	4601      	mov	r1, r0
 80045e4:	3408      	adds	r4, #8
 80045e6:	3001      	adds	r0, #1
 80045e8:	9b06      	ldr	r3, [sp, #24]
 80045ea:	2b80      	cmp	r3, #128	; 0x80
 80045ec:	f000 80d4 	beq.w	8004798 <_vfiprintf_r+0x860>
 80045f0:	ebc9 070c 	rsb	r7, r9, ip
 80045f4:	2f00      	cmp	r7, #0
 80045f6:	dd2b      	ble.n	8004650 <_vfiprintf_r+0x718>
 80045f8:	2f10      	cmp	r7, #16
 80045fa:	4dab      	ldr	r5, [pc, #684]	; (80048a8 <_vfiprintf_r+0x970>)
 80045fc:	dd1f      	ble.n	800463e <_vfiprintf_r+0x706>
 80045fe:	46a6      	mov	lr, r4
 8004600:	2310      	movs	r3, #16
 8004602:	9c01      	ldr	r4, [sp, #4]
 8004604:	e007      	b.n	8004616 <_vfiprintf_r+0x6de>
 8004606:	f101 0c02 	add.w	ip, r1, #2
 800460a:	f10e 0e08 	add.w	lr, lr, #8
 800460e:	4601      	mov	r1, r0
 8004610:	3f10      	subs	r7, #16
 8004612:	2f10      	cmp	r7, #16
 8004614:	dd11      	ble.n	800463a <_vfiprintf_r+0x702>
 8004616:	1c48      	adds	r0, r1, #1
 8004618:	3210      	adds	r2, #16
 800461a:	2807      	cmp	r0, #7
 800461c:	920f      	str	r2, [sp, #60]	; 0x3c
 800461e:	f8ce 5000 	str.w	r5, [lr]
 8004622:	f8ce 3004 	str.w	r3, [lr, #4]
 8004626:	900e      	str	r0, [sp, #56]	; 0x38
 8004628:	dded      	ble.n	8004606 <_vfiprintf_r+0x6ce>
 800462a:	bb6a      	cbnz	r2, 8004688 <_vfiprintf_r+0x750>
 800462c:	3f10      	subs	r7, #16
 800462e:	2f10      	cmp	r7, #16
 8004630:	f04f 0c01 	mov.w	ip, #1
 8004634:	4611      	mov	r1, r2
 8004636:	46d6      	mov	lr, sl
 8004638:	dced      	bgt.n	8004616 <_vfiprintf_r+0x6de>
 800463a:	4674      	mov	r4, lr
 800463c:	4660      	mov	r0, ip
 800463e:	443a      	add	r2, r7
 8004640:	2807      	cmp	r0, #7
 8004642:	920f      	str	r2, [sp, #60]	; 0x3c
 8004644:	e884 00a0 	stmia.w	r4, {r5, r7}
 8004648:	900e      	str	r0, [sp, #56]	; 0x38
 800464a:	dc3b      	bgt.n	80046c4 <_vfiprintf_r+0x78c>
 800464c:	3408      	adds	r4, #8
 800464e:	3001      	adds	r0, #1
 8004650:	eb02 0309 	add.w	r3, r2, r9
 8004654:	9a07      	ldr	r2, [sp, #28]
 8004656:	930f      	str	r3, [sp, #60]	; 0x3c
 8004658:	2807      	cmp	r0, #7
 800465a:	e884 0204 	stmia.w	r4, {r2, r9}
 800465e:	900e      	str	r0, [sp, #56]	; 0x38
 8004660:	dd3d      	ble.n	80046de <_vfiprintf_r+0x7a6>
 8004662:	2b00      	cmp	r3, #0
 8004664:	f040 813f 	bne.w	80048e6 <_vfiprintf_r+0x9ae>
 8004668:	f018 0f04 	tst.w	r8, #4
 800466c:	930e      	str	r3, [sp, #56]	; 0x38
 800466e:	f040 8130 	bne.w	80048d2 <_vfiprintf_r+0x99a>
 8004672:	9b02      	ldr	r3, [sp, #8]
 8004674:	9a03      	ldr	r2, [sp, #12]
 8004676:	4296      	cmp	r6, r2
 8004678:	bfac      	ite	ge
 800467a:	199b      	addge	r3, r3, r6
 800467c:	189b      	addlt	r3, r3, r2
 800467e:	9302      	str	r3, [sp, #8]
 8004680:	2300      	movs	r3, #0
 8004682:	930e      	str	r3, [sp, #56]	; 0x38
 8004684:	4654      	mov	r4, sl
 8004686:	e489      	b.n	8003f9c <_vfiprintf_r+0x64>
 8004688:	4620      	mov	r0, r4
 800468a:	9900      	ldr	r1, [sp, #0]
 800468c:	9305      	str	r3, [sp, #20]
 800468e:	aa0d      	add	r2, sp, #52	; 0x34
 8004690:	f7ff fc0a 	bl	8003ea8 <__sprint_r.part.0>
 8004694:	b968      	cbnz	r0, 80046b2 <_vfiprintf_r+0x77a>
 8004696:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004698:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800469a:	9b05      	ldr	r3, [sp, #20]
 800469c:	f101 0c01 	add.w	ip, r1, #1
 80046a0:	46d6      	mov	lr, sl
 80046a2:	e7b5      	b.n	8004610 <_vfiprintf_r+0x6d8>
 80046a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046a6:	b123      	cbz	r3, 80046b2 <_vfiprintf_r+0x77a>
 80046a8:	9801      	ldr	r0, [sp, #4]
 80046aa:	9900      	ldr	r1, [sp, #0]
 80046ac:	aa0d      	add	r2, sp, #52	; 0x34
 80046ae:	f7ff fbfb 	bl	8003ea8 <__sprint_r.part.0>
 80046b2:	9b00      	ldr	r3, [sp, #0]
 80046b4:	899b      	ldrh	r3, [r3, #12]
 80046b6:	065b      	lsls	r3, r3, #25
 80046b8:	f53f ad27 	bmi.w	800410a <_vfiprintf_r+0x1d2>
 80046bc:	9802      	ldr	r0, [sp, #8]
 80046be:	b02b      	add	sp, #172	; 0xac
 80046c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c4:	2a00      	cmp	r2, #0
 80046c6:	f040 8192 	bne.w	80049ee <_vfiprintf_r+0xab6>
 80046ca:	2201      	movs	r2, #1
 80046cc:	9907      	ldr	r1, [sp, #28]
 80046ce:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 80046d2:	464b      	mov	r3, r9
 80046d4:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80046d8:	911a      	str	r1, [sp, #104]	; 0x68
 80046da:	920e      	str	r2, [sp, #56]	; 0x38
 80046dc:	4654      	mov	r4, sl
 80046de:	f104 0208 	add.w	r2, r4, #8
 80046e2:	f018 0f04 	tst.w	r8, #4
 80046e6:	d039      	beq.n	800475c <_vfiprintf_r+0x824>
 80046e8:	9903      	ldr	r1, [sp, #12]
 80046ea:	1b8d      	subs	r5, r1, r6
 80046ec:	2d00      	cmp	r5, #0
 80046ee:	dd35      	ble.n	800475c <_vfiprintf_r+0x824>
 80046f0:	2d10      	cmp	r5, #16
 80046f2:	f340 8203 	ble.w	8004afc <_vfiprintf_r+0xbc4>
 80046f6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80046f8:	4f6c      	ldr	r7, [pc, #432]	; (80048ac <_vfiprintf_r+0x974>)
 80046fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80046fe:	f8dd 9000 	ldr.w	r9, [sp]
 8004702:	2410      	movs	r4, #16
 8004704:	e006      	b.n	8004714 <_vfiprintf_r+0x7dc>
 8004706:	f100 0e02 	add.w	lr, r0, #2
 800470a:	3208      	adds	r2, #8
 800470c:	4608      	mov	r0, r1
 800470e:	3d10      	subs	r5, #16
 8004710:	2d10      	cmp	r5, #16
 8004712:	dd10      	ble.n	8004736 <_vfiprintf_r+0x7fe>
 8004714:	1c41      	adds	r1, r0, #1
 8004716:	3310      	adds	r3, #16
 8004718:	2907      	cmp	r1, #7
 800471a:	930f      	str	r3, [sp, #60]	; 0x3c
 800471c:	6017      	str	r7, [r2, #0]
 800471e:	6054      	str	r4, [r2, #4]
 8004720:	910e      	str	r1, [sp, #56]	; 0x38
 8004722:	ddf0      	ble.n	8004706 <_vfiprintf_r+0x7ce>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d12a      	bne.n	800477e <_vfiprintf_r+0x846>
 8004728:	3d10      	subs	r5, #16
 800472a:	2d10      	cmp	r5, #16
 800472c:	f04f 0e01 	mov.w	lr, #1
 8004730:	4618      	mov	r0, r3
 8004732:	4652      	mov	r2, sl
 8004734:	dcee      	bgt.n	8004714 <_vfiprintf_r+0x7dc>
 8004736:	442b      	add	r3, r5
 8004738:	f1be 0f07 	cmp.w	lr, #7
 800473c:	930f      	str	r3, [sp, #60]	; 0x3c
 800473e:	6017      	str	r7, [r2, #0]
 8004740:	6055      	str	r5, [r2, #4]
 8004742:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8004746:	dd09      	ble.n	800475c <_vfiprintf_r+0x824>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d092      	beq.n	8004672 <_vfiprintf_r+0x73a>
 800474c:	9801      	ldr	r0, [sp, #4]
 800474e:	9900      	ldr	r1, [sp, #0]
 8004750:	aa0d      	add	r2, sp, #52	; 0x34
 8004752:	f7ff fba9 	bl	8003ea8 <__sprint_r.part.0>
 8004756:	2800      	cmp	r0, #0
 8004758:	d1ab      	bne.n	80046b2 <_vfiprintf_r+0x77a>
 800475a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800475c:	9a02      	ldr	r2, [sp, #8]
 800475e:	9903      	ldr	r1, [sp, #12]
 8004760:	428e      	cmp	r6, r1
 8004762:	bfac      	ite	ge
 8004764:	1992      	addge	r2, r2, r6
 8004766:	1852      	addlt	r2, r2, r1
 8004768:	9202      	str	r2, [sp, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d088      	beq.n	8004680 <_vfiprintf_r+0x748>
 800476e:	9801      	ldr	r0, [sp, #4]
 8004770:	9900      	ldr	r1, [sp, #0]
 8004772:	aa0d      	add	r2, sp, #52	; 0x34
 8004774:	f7ff fb98 	bl	8003ea8 <__sprint_r.part.0>
 8004778:	2800      	cmp	r0, #0
 800477a:	d081      	beq.n	8004680 <_vfiprintf_r+0x748>
 800477c:	e799      	b.n	80046b2 <_vfiprintf_r+0x77a>
 800477e:	4640      	mov	r0, r8
 8004780:	4649      	mov	r1, r9
 8004782:	aa0d      	add	r2, sp, #52	; 0x34
 8004784:	f7ff fb90 	bl	8003ea8 <__sprint_r.part.0>
 8004788:	2800      	cmp	r0, #0
 800478a:	d192      	bne.n	80046b2 <_vfiprintf_r+0x77a>
 800478c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800478e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004790:	f100 0e01 	add.w	lr, r0, #1
 8004794:	4652      	mov	r2, sl
 8004796:	e7ba      	b.n	800470e <_vfiprintf_r+0x7d6>
 8004798:	9b03      	ldr	r3, [sp, #12]
 800479a:	1b9f      	subs	r7, r3, r6
 800479c:	2f00      	cmp	r7, #0
 800479e:	f77f af27 	ble.w	80045f0 <_vfiprintf_r+0x6b8>
 80047a2:	2f10      	cmp	r7, #16
 80047a4:	4d40      	ldr	r5, [pc, #256]	; (80048a8 <_vfiprintf_r+0x970>)
 80047a6:	f340 81b5 	ble.w	8004b14 <_vfiprintf_r+0xbdc>
 80047aa:	4620      	mov	r0, r4
 80047ac:	2310      	movs	r3, #16
 80047ae:	4664      	mov	r4, ip
 80047b0:	4684      	mov	ip, r0
 80047b2:	e007      	b.n	80047c4 <_vfiprintf_r+0x88c>
 80047b4:	f101 0e02 	add.w	lr, r1, #2
 80047b8:	f10c 0c08 	add.w	ip, ip, #8
 80047bc:	4601      	mov	r1, r0
 80047be:	3f10      	subs	r7, #16
 80047c0:	2f10      	cmp	r7, #16
 80047c2:	dd11      	ble.n	80047e8 <_vfiprintf_r+0x8b0>
 80047c4:	1c48      	adds	r0, r1, #1
 80047c6:	3210      	adds	r2, #16
 80047c8:	2807      	cmp	r0, #7
 80047ca:	920f      	str	r2, [sp, #60]	; 0x3c
 80047cc:	f8cc 5000 	str.w	r5, [ip]
 80047d0:	f8cc 3004 	str.w	r3, [ip, #4]
 80047d4:	900e      	str	r0, [sp, #56]	; 0x38
 80047d6:	dded      	ble.n	80047b4 <_vfiprintf_r+0x87c>
 80047d8:	b9c2      	cbnz	r2, 800480c <_vfiprintf_r+0x8d4>
 80047da:	3f10      	subs	r7, #16
 80047dc:	2f10      	cmp	r7, #16
 80047de:	f04f 0e01 	mov.w	lr, #1
 80047e2:	4611      	mov	r1, r2
 80047e4:	46d4      	mov	ip, sl
 80047e6:	dced      	bgt.n	80047c4 <_vfiprintf_r+0x88c>
 80047e8:	4663      	mov	r3, ip
 80047ea:	46a4      	mov	ip, r4
 80047ec:	461c      	mov	r4, r3
 80047ee:	443a      	add	r2, r7
 80047f0:	f1be 0f07 	cmp.w	lr, #7
 80047f4:	920f      	str	r2, [sp, #60]	; 0x3c
 80047f6:	e884 00a0 	stmia.w	r4, {r5, r7}
 80047fa:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 80047fe:	f300 80f0 	bgt.w	80049e2 <_vfiprintf_r+0xaaa>
 8004802:	3408      	adds	r4, #8
 8004804:	f10e 0001 	add.w	r0, lr, #1
 8004808:	4671      	mov	r1, lr
 800480a:	e6f1      	b.n	80045f0 <_vfiprintf_r+0x6b8>
 800480c:	9801      	ldr	r0, [sp, #4]
 800480e:	9900      	ldr	r1, [sp, #0]
 8004810:	9305      	str	r3, [sp, #20]
 8004812:	aa0d      	add	r2, sp, #52	; 0x34
 8004814:	f7ff fb48 	bl	8003ea8 <__sprint_r.part.0>
 8004818:	2800      	cmp	r0, #0
 800481a:	f47f af4a 	bne.w	80046b2 <_vfiprintf_r+0x77a>
 800481e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004820:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004822:	9b05      	ldr	r3, [sp, #20]
 8004824:	f101 0e01 	add.w	lr, r1, #1
 8004828:	46d4      	mov	ip, sl
 800482a:	e7c8      	b.n	80047be <_vfiprintf_r+0x886>
 800482c:	2a00      	cmp	r2, #0
 800482e:	f040 80c7 	bne.w	80049c0 <_vfiprintf_r+0xa88>
 8004832:	9b05      	ldr	r3, [sp, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8087 	beq.w	8004948 <_vfiprintf_r+0xa10>
 800483a:	aa0c      	add	r2, sp, #48	; 0x30
 800483c:	2302      	movs	r3, #2
 800483e:	921a      	str	r2, [sp, #104]	; 0x68
 8004840:	4608      	mov	r0, r1
 8004842:	931b      	str	r3, [sp, #108]	; 0x6c
 8004844:	461a      	mov	r2, r3
 8004846:	4654      	mov	r4, sl
 8004848:	e6cb      	b.n	80045e2 <_vfiprintf_r+0x6aa>
 800484a:	2a00      	cmp	r2, #0
 800484c:	f040 80a7 	bne.w	800499e <_vfiprintf_r+0xa66>
 8004850:	2001      	movs	r0, #1
 8004852:	4611      	mov	r1, r2
 8004854:	4654      	mov	r4, sl
 8004856:	e6c7      	b.n	80045e8 <_vfiprintf_r+0x6b0>
 8004858:	bb03      	cbnz	r3, 800489c <_vfiprintf_r+0x964>
 800485a:	f018 0f01 	tst.w	r8, #1
 800485e:	d01d      	beq.n	800489c <_vfiprintf_r+0x964>
 8004860:	ab2a      	add	r3, sp, #168	; 0xa8
 8004862:	2230      	movs	r2, #48	; 0x30
 8004864:	f803 2d41 	strb.w	r2, [r3, #-65]!
 8004868:	ebc3 090a 	rsb	r9, r3, sl
 800486c:	9307      	str	r3, [sp, #28]
 800486e:	e492      	b.n	8004196 <_vfiprintf_r+0x25e>
 8004870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004872:	46d1      	mov	r9, sl
 8004874:	0933      	lsrs	r3, r6, #4
 8004876:	f006 010f 	and.w	r1, r6, #15
 800487a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800487e:	093a      	lsrs	r2, r7, #4
 8004880:	461e      	mov	r6, r3
 8004882:	4617      	mov	r7, r2
 8004884:	5c43      	ldrb	r3, [r0, r1]
 8004886:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800488a:	ea56 0307 	orrs.w	r3, r6, r7
 800488e:	d1f1      	bne.n	8004874 <_vfiprintf_r+0x93c>
 8004890:	464b      	mov	r3, r9
 8004892:	f8cd 901c 	str.w	r9, [sp, #28]
 8004896:	ebc3 090a 	rsb	r9, r3, sl
 800489a:	e47c      	b.n	8004196 <_vfiprintf_r+0x25e>
 800489c:	f8cd a01c 	str.w	sl, [sp, #28]
 80048a0:	e479      	b.n	8004196 <_vfiprintf_r+0x25e>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e449      	b.n	800413a <_vfiprintf_r+0x202>
 80048a6:	bf00      	nop
 80048a8:	08009770 	.word	0x08009770
 80048ac:	08009780 	.word	0x08009780
 80048b0:	2a00      	cmp	r2, #0
 80048b2:	f040 80d7 	bne.w	8004a64 <_vfiprintf_r+0xb2c>
 80048b6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 80ae 	beq.w	8004a1c <_vfiprintf_r+0xae4>
 80048c0:	2301      	movs	r3, #1
 80048c2:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 80048c6:	4618      	mov	r0, r3
 80048c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80048ca:	461a      	mov	r2, r3
 80048cc:	911a      	str	r1, [sp, #104]	; 0x68
 80048ce:	4654      	mov	r4, sl
 80048d0:	e678      	b.n	80045c4 <_vfiprintf_r+0x68c>
 80048d2:	9a03      	ldr	r2, [sp, #12]
 80048d4:	1b95      	subs	r5, r2, r6
 80048d6:	2d00      	cmp	r5, #0
 80048d8:	4652      	mov	r2, sl
 80048da:	f73f af09 	bgt.w	80046f0 <_vfiprintf_r+0x7b8>
 80048de:	e6c8      	b.n	8004672 <_vfiprintf_r+0x73a>
 80048e0:	465d      	mov	r5, fp
 80048e2:	f7ff bb82 	b.w	8003fea <_vfiprintf_r+0xb2>
 80048e6:	9801      	ldr	r0, [sp, #4]
 80048e8:	9900      	ldr	r1, [sp, #0]
 80048ea:	aa0d      	add	r2, sp, #52	; 0x34
 80048ec:	f7ff fadc 	bl	8003ea8 <__sprint_r.part.0>
 80048f0:	2800      	cmp	r0, #0
 80048f2:	f47f aede 	bne.w	80046b2 <_vfiprintf_r+0x77a>
 80048f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048f8:	4652      	mov	r2, sl
 80048fa:	e6f2      	b.n	80046e2 <_vfiprintf_r+0x7aa>
 80048fc:	9904      	ldr	r1, [sp, #16]
 80048fe:	460a      	mov	r2, r1
 8004900:	3204      	adds	r2, #4
 8004902:	680e      	ldr	r6, [r1, #0]
 8004904:	9204      	str	r2, [sp, #16]
 8004906:	2700      	movs	r7, #0
 8004908:	e417      	b.n	800413a <_vfiprintf_r+0x202>
 800490a:	3204      	adds	r2, #4
 800490c:	681e      	ldr	r6, [r3, #0]
 800490e:	9204      	str	r2, [sp, #16]
 8004910:	2301      	movs	r3, #1
 8004912:	2700      	movs	r7, #0
 8004914:	e411      	b.n	800413a <_vfiprintf_r+0x202>
 8004916:	6816      	ldr	r6, [r2, #0]
 8004918:	3204      	adds	r2, #4
 800491a:	9204      	str	r2, [sp, #16]
 800491c:	2700      	movs	r7, #0
 800491e:	e530      	b.n	8004382 <_vfiprintf_r+0x44a>
 8004920:	9a04      	ldr	r2, [sp, #16]
 8004922:	6816      	ldr	r6, [r2, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	3304      	adds	r3, #4
 8004928:	17f7      	asrs	r7, r6, #31
 800492a:	9304      	str	r3, [sp, #16]
 800492c:	4632      	mov	r2, r6
 800492e:	463b      	mov	r3, r7
 8004930:	e4c2      	b.n	80042b8 <_vfiprintf_r+0x380>
 8004932:	9801      	ldr	r0, [sp, #4]
 8004934:	9900      	ldr	r1, [sp, #0]
 8004936:	aa0d      	add	r2, sp, #52	; 0x34
 8004938:	f7ff fab6 	bl	8003ea8 <__sprint_r.part.0>
 800493c:	2800      	cmp	r0, #0
 800493e:	f47f aeb8 	bne.w	80046b2 <_vfiprintf_r+0x77a>
 8004942:	4654      	mov	r4, sl
 8004944:	f7ff bbc2 	b.w	80040cc <_vfiprintf_r+0x194>
 8004948:	4608      	mov	r0, r1
 800494a:	4654      	mov	r4, sl
 800494c:	4611      	mov	r1, r2
 800494e:	e64b      	b.n	80045e8 <_vfiprintf_r+0x6b0>
 8004950:	46d1      	mov	r9, sl
 8004952:	f8cd c014 	str.w	ip, [sp, #20]
 8004956:	4630      	mov	r0, r6
 8004958:	4639      	mov	r1, r7
 800495a:	220a      	movs	r2, #10
 800495c:	2300      	movs	r3, #0
 800495e:	f7fc f92f 	bl	8000bc0 <__aeabi_uldivmod>
 8004962:	3230      	adds	r2, #48	; 0x30
 8004964:	4630      	mov	r0, r6
 8004966:	4639      	mov	r1, r7
 8004968:	f809 2d01 	strb.w	r2, [r9, #-1]!
 800496c:	2300      	movs	r3, #0
 800496e:	220a      	movs	r2, #10
 8004970:	f7fc f926 	bl	8000bc0 <__aeabi_uldivmod>
 8004974:	4606      	mov	r6, r0
 8004976:	460f      	mov	r7, r1
 8004978:	ea56 0307 	orrs.w	r3, r6, r7
 800497c:	d1eb      	bne.n	8004956 <_vfiprintf_r+0xa1e>
 800497e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8004982:	e785      	b.n	8004890 <_vfiprintf_r+0x958>
 8004984:	2b30      	cmp	r3, #48	; 0x30
 8004986:	9b07      	ldr	r3, [sp, #28]
 8004988:	d085      	beq.n	8004896 <_vfiprintf_r+0x95e>
 800498a:	3b01      	subs	r3, #1
 800498c:	461a      	mov	r2, r3
 800498e:	9307      	str	r3, [sp, #28]
 8004990:	2330      	movs	r3, #48	; 0x30
 8004992:	ebc2 090a 	rsb	r9, r2, sl
 8004996:	f801 3c01 	strb.w	r3, [r1, #-1]
 800499a:	f7ff bbfc 	b.w	8004196 <_vfiprintf_r+0x25e>
 800499e:	9801      	ldr	r0, [sp, #4]
 80049a0:	9900      	ldr	r1, [sp, #0]
 80049a2:	f8cd c014 	str.w	ip, [sp, #20]
 80049a6:	aa0d      	add	r2, sp, #52	; 0x34
 80049a8:	f7ff fa7e 	bl	8003ea8 <__sprint_r.part.0>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	f47f ae80 	bne.w	80046b2 <_vfiprintf_r+0x77a>
 80049b2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80049b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80049b6:	f8dd c014 	ldr.w	ip, [sp, #20]
 80049ba:	1c48      	adds	r0, r1, #1
 80049bc:	4654      	mov	r4, sl
 80049be:	e613      	b.n	80045e8 <_vfiprintf_r+0x6b0>
 80049c0:	9801      	ldr	r0, [sp, #4]
 80049c2:	9900      	ldr	r1, [sp, #0]
 80049c4:	f8cd c020 	str.w	ip, [sp, #32]
 80049c8:	aa0d      	add	r2, sp, #52	; 0x34
 80049ca:	f7ff fa6d 	bl	8003ea8 <__sprint_r.part.0>
 80049ce:	2800      	cmp	r0, #0
 80049d0:	f47f ae6f 	bne.w	80046b2 <_vfiprintf_r+0x77a>
 80049d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80049d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80049d8:	f8dd c020 	ldr.w	ip, [sp, #32]
 80049dc:	1c48      	adds	r0, r1, #1
 80049de:	4654      	mov	r4, sl
 80049e0:	e5f3      	b.n	80045ca <_vfiprintf_r+0x692>
 80049e2:	2a00      	cmp	r2, #0
 80049e4:	d167      	bne.n	8004ab6 <_vfiprintf_r+0xb7e>
 80049e6:	2001      	movs	r0, #1
 80049e8:	4611      	mov	r1, r2
 80049ea:	4654      	mov	r4, sl
 80049ec:	e600      	b.n	80045f0 <_vfiprintf_r+0x6b8>
 80049ee:	9801      	ldr	r0, [sp, #4]
 80049f0:	9900      	ldr	r1, [sp, #0]
 80049f2:	aa0d      	add	r2, sp, #52	; 0x34
 80049f4:	f7ff fa58 	bl	8003ea8 <__sprint_r.part.0>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	f47f ae5a 	bne.w	80046b2 <_vfiprintf_r+0x77a>
 80049fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004a00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a02:	3001      	adds	r0, #1
 8004a04:	4654      	mov	r4, sl
 8004a06:	e623      	b.n	8004650 <_vfiprintf_r+0x718>
 8004a08:	252d      	movs	r5, #45	; 0x2d
 8004a0a:	4276      	negs	r6, r6
 8004a0c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004a10:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 8004a14:	46e1      	mov	r9, ip
 8004a16:	2301      	movs	r3, #1
 8004a18:	f7ff bb94 	b.w	8004144 <_vfiprintf_r+0x20c>
 8004a1c:	9b05      	ldr	r3, [sp, #20]
 8004a1e:	4611      	mov	r1, r2
 8004a20:	2001      	movs	r0, #1
 8004a22:	4654      	mov	r4, sl
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f43f ade3 	beq.w	80045f0 <_vfiprintf_r+0x6b8>
 8004a2a:	aa0c      	add	r2, sp, #48	; 0x30
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e88a 000c 	stmia.w	sl, {r2, r3}
 8004a32:	461a      	mov	r2, r3
 8004a34:	e5d5      	b.n	80045e2 <_vfiprintf_r+0x6aa>
 8004a36:	f018 0f10 	tst.w	r8, #16
 8004a3a:	d10b      	bne.n	8004a54 <_vfiprintf_r+0xb1c>
 8004a3c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8004a40:	d008      	beq.n	8004a54 <_vfiprintf_r+0xb1c>
 8004a42:	9a04      	ldr	r2, [sp, #16]
 8004a44:	6813      	ldr	r3, [r2, #0]
 8004a46:	3204      	adds	r2, #4
 8004a48:	9204      	str	r2, [sp, #16]
 8004a4a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8004a4e:	801a      	strh	r2, [r3, #0]
 8004a50:	f7ff baa4 	b.w	8003f9c <_vfiprintf_r+0x64>
 8004a54:	9a04      	ldr	r2, [sp, #16]
 8004a56:	6813      	ldr	r3, [r2, #0]
 8004a58:	3204      	adds	r2, #4
 8004a5a:	9204      	str	r2, [sp, #16]
 8004a5c:	9a02      	ldr	r2, [sp, #8]
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	f7ff ba9c 	b.w	8003f9c <_vfiprintf_r+0x64>
 8004a64:	9801      	ldr	r0, [sp, #4]
 8004a66:	9900      	ldr	r1, [sp, #0]
 8004a68:	f8cd c020 	str.w	ip, [sp, #32]
 8004a6c:	aa0d      	add	r2, sp, #52	; 0x34
 8004a6e:	f7ff fa1b 	bl	8003ea8 <__sprint_r.part.0>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	f47f ae1d 	bne.w	80046b2 <_vfiprintf_r+0x77a>
 8004a78:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004a7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a7c:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004a80:	1c48      	adds	r0, r1, #1
 8004a82:	4654      	mov	r4, sl
 8004a84:	e590      	b.n	80045a8 <_vfiprintf_r+0x670>
 8004a86:	f048 0820 	orr.w	r8, r8, #32
 8004a8a:	f10b 0001 	add.w	r0, fp, #1
 8004a8e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8004a92:	f7ff bab8 	b.w	8004006 <_vfiprintf_r+0xce>
 8004a96:	426d      	negs	r5, r5
 8004a98:	9304      	str	r3, [sp, #16]
 8004a9a:	4658      	mov	r0, fp
 8004a9c:	f7ff bbc9 	b.w	8004232 <_vfiprintf_r+0x2fa>
 8004aa0:	9807      	ldr	r0, [sp, #28]
 8004aa2:	9604      	str	r6, [sp, #16]
 8004aa4:	f7ff f9d2 	bl	8003e4c <strlen>
 8004aa8:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 8004aac:	4681      	mov	r9, r0
 8004aae:	f04f 0c00 	mov.w	ip, #0
 8004ab2:	f7ff bb70 	b.w	8004196 <_vfiprintf_r+0x25e>
 8004ab6:	9801      	ldr	r0, [sp, #4]
 8004ab8:	9900      	ldr	r1, [sp, #0]
 8004aba:	f8cd c014 	str.w	ip, [sp, #20]
 8004abe:	aa0d      	add	r2, sp, #52	; 0x34
 8004ac0:	f7ff f9f2 	bl	8003ea8 <__sprint_r.part.0>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	f47f adf4 	bne.w	80046b2 <_vfiprintf_r+0x77a>
 8004aca:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004acc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ace:	f8dd c014 	ldr.w	ip, [sp, #20]
 8004ad2:	1c48      	adds	r0, r1, #1
 8004ad4:	4654      	mov	r4, sl
 8004ad6:	e58b      	b.n	80045f0 <_vfiprintf_r+0x6b8>
 8004ad8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004ada:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004adc:	4f15      	ldr	r7, [pc, #84]	; (8004b34 <_vfiprintf_r+0xbfc>)
 8004ade:	3101      	adds	r1, #1
 8004ae0:	f7ff bb9b 	b.w	800421a <_vfiprintf_r+0x2e2>
 8004ae4:	f1bc 0f06 	cmp.w	ip, #6
 8004ae8:	bf28      	it	cs
 8004aea:	f04f 0c06 	movcs.w	ip, #6
 8004aee:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <_vfiprintf_r+0xc00>)
 8004af0:	9604      	str	r6, [sp, #16]
 8004af2:	46e1      	mov	r9, ip
 8004af4:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
 8004af8:	9307      	str	r3, [sp, #28]
 8004afa:	e462      	b.n	80043c2 <_vfiprintf_r+0x48a>
 8004afc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004afe:	4f0d      	ldr	r7, [pc, #52]	; (8004b34 <_vfiprintf_r+0xbfc>)
 8004b00:	f101 0e01 	add.w	lr, r1, #1
 8004b04:	e617      	b.n	8004736 <_vfiprintf_r+0x7fe>
 8004b06:	46e1      	mov	r9, ip
 8004b08:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 8004b0c:	9604      	str	r6, [sp, #16]
 8004b0e:	4684      	mov	ip, r0
 8004b10:	f7ff bb41 	b.w	8004196 <_vfiprintf_r+0x25e>
 8004b14:	4686      	mov	lr, r0
 8004b16:	e66a      	b.n	80047ee <_vfiprintf_r+0x8b6>
 8004b18:	9a04      	ldr	r2, [sp, #16]
 8004b1a:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8004b1e:	6816      	ldr	r6, [r2, #0]
 8004b20:	3204      	adds	r2, #4
 8004b22:	2e00      	cmp	r6, #0
 8004b24:	9204      	str	r2, [sp, #16]
 8004b26:	f6bf aa6e 	bge.w	8004006 <_vfiprintf_r+0xce>
 8004b2a:	f04f 36ff 	mov.w	r6, #4294967295
 8004b2e:	f7ff ba6a 	b.w	8004006 <_vfiprintf_r+0xce>
 8004b32:	bf00      	nop
 8004b34:	08009780 	.word	0x08009780
 8004b38:	080097b8 	.word	0x080097b8

08004b3c <__sbprintf>:
 8004b3c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8004b40:	460c      	mov	r4, r1
 8004b42:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8004b46:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8004b4a:	69e7      	ldr	r7, [r4, #28]
 8004b4c:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8004b4e:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 8004b52:	9119      	str	r1, [sp, #100]	; 0x64
 8004b54:	ad1a      	add	r5, sp, #104	; 0x68
 8004b56:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004b5a:	f02e 0e02 	bic.w	lr, lr, #2
 8004b5e:	f04f 0c00 	mov.w	ip, #0
 8004b62:	9707      	str	r7, [sp, #28]
 8004b64:	4669      	mov	r1, sp
 8004b66:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8004b68:	9500      	str	r5, [sp, #0]
 8004b6a:	9504      	str	r5, [sp, #16]
 8004b6c:	9602      	str	r6, [sp, #8]
 8004b6e:	9605      	str	r6, [sp, #20]
 8004b70:	f8ad e00c 	strh.w	lr, [sp, #12]
 8004b74:	f8ad 900e 	strh.w	r9, [sp, #14]
 8004b78:	9709      	str	r7, [sp, #36]	; 0x24
 8004b7a:	f8cd c018 	str.w	ip, [sp, #24]
 8004b7e:	4606      	mov	r6, r0
 8004b80:	f7ff f9da 	bl	8003f38 <_vfiprintf_r>
 8004b84:	1e05      	subs	r5, r0, #0
 8004b86:	db07      	blt.n	8004b98 <__sbprintf+0x5c>
 8004b88:	4630      	mov	r0, r6
 8004b8a:	4669      	mov	r1, sp
 8004b8c:	f002 fb3a 	bl	8007204 <_fflush_r>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	bf18      	it	ne
 8004b94:	f04f 35ff 	movne.w	r5, #4294967295
 8004b98:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004b9c:	065b      	lsls	r3, r3, #25
 8004b9e:	d503      	bpl.n	8004ba8 <__sbprintf+0x6c>
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba6:	81a3      	strh	r3, [r4, #12]
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8004bae:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8004bb2:	bf00      	nop

08004bb4 <_vfprintf_r>:
 8004bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb8:	b0bf      	sub	sp, #252	; 0xfc
 8004bba:	461c      	mov	r4, r3
 8004bbc:	4689      	mov	r9, r1
 8004bbe:	9208      	str	r2, [sp, #32]
 8004bc0:	4607      	mov	r7, r0
 8004bc2:	f002 ff05 	bl	80079d0 <_localeconv_r>
 8004bc6:	6803      	ldr	r3, [r0, #0]
 8004bc8:	9315      	str	r3, [sp, #84]	; 0x54
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff f93e 	bl	8003e4c <strlen>
 8004bd0:	940c      	str	r4, [sp, #48]	; 0x30
 8004bd2:	9016      	str	r0, [sp, #88]	; 0x58
 8004bd4:	b11f      	cbz	r7, 8004bde <_vfprintf_r+0x2a>
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80f3 	beq.w	8004dc4 <_vfprintf_r+0x210>
 8004bde:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8004be2:	b293      	uxth	r3, r2
 8004be4:	049d      	lsls	r5, r3, #18
 8004be6:	d40a      	bmi.n	8004bfe <_vfprintf_r+0x4a>
 8004be8:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 8004bec:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8004bf0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8004bf4:	f8a9 300c 	strh.w	r3, [r9, #12]
 8004bf8:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	0718      	lsls	r0, r3, #28
 8004c00:	f140 80aa 	bpl.w	8004d58 <_vfprintf_r+0x1a4>
 8004c04:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8004c08:	2a00      	cmp	r2, #0
 8004c0a:	f000 80a5 	beq.w	8004d58 <_vfprintf_r+0x1a4>
 8004c0e:	f003 031a 	and.w	r3, r3, #26
 8004c12:	2b0a      	cmp	r3, #10
 8004c14:	f000 80ac 	beq.w	8004d70 <_vfprintf_r+0x1bc>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	9311      	str	r3, [sp, #68]	; 0x44
 8004c1e:	9323      	str	r3, [sp, #140]	; 0x8c
 8004c20:	9322      	str	r3, [sp, #136]	; 0x88
 8004c22:	9314      	str	r3, [sp, #80]	; 0x50
 8004c24:	9317      	str	r3, [sp, #92]	; 0x5c
 8004c26:	9309      	str	r3, [sp, #36]	; 0x24
 8004c28:	ab2e      	add	r3, sp, #184	; 0xb8
 8004c2a:	469c      	mov	ip, r3
 8004c2c:	9321      	str	r3, [sp, #132]	; 0x84
 8004c2e:	9212      	str	r2, [sp, #72]	; 0x48
 8004c30:	9213      	str	r2, [sp, #76]	; 0x4c
 8004c32:	4664      	mov	r4, ip
 8004c34:	46b8      	mov	r8, r7
 8004c36:	9d08      	ldr	r5, [sp, #32]
 8004c38:	782b      	ldrb	r3, [r5, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80c6 	beq.w	8004dcc <_vfprintf_r+0x218>
 8004c40:	2b25      	cmp	r3, #37	; 0x25
 8004c42:	d102      	bne.n	8004c4a <_vfprintf_r+0x96>
 8004c44:	e0c2      	b.n	8004dcc <_vfprintf_r+0x218>
 8004c46:	2b25      	cmp	r3, #37	; 0x25
 8004c48:	d003      	beq.n	8004c52 <_vfprintf_r+0x9e>
 8004c4a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f9      	bne.n	8004c46 <_vfprintf_r+0x92>
 8004c52:	9b08      	ldr	r3, [sp, #32]
 8004c54:	1aee      	subs	r6, r5, r3
 8004c56:	b17e      	cbz	r6, 8004c78 <_vfprintf_r+0xc4>
 8004c58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c5a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8004c5c:	9908      	ldr	r1, [sp, #32]
 8004c5e:	6021      	str	r1, [r4, #0]
 8004c60:	3301      	adds	r3, #1
 8004c62:	4432      	add	r2, r6
 8004c64:	2b07      	cmp	r3, #7
 8004c66:	6066      	str	r6, [r4, #4]
 8004c68:	9223      	str	r2, [sp, #140]	; 0x8c
 8004c6a:	9322      	str	r3, [sp, #136]	; 0x88
 8004c6c:	f300 8093 	bgt.w	8004d96 <_vfprintf_r+0x1e2>
 8004c70:	3408      	adds	r4, #8
 8004c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c74:	4433      	add	r3, r6
 8004c76:	9309      	str	r3, [sp, #36]	; 0x24
 8004c78:	782b      	ldrb	r3, [r5, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 8093 	beq.w	8004da6 <_vfprintf_r+0x1f2>
 8004c80:	2300      	movs	r3, #0
 8004c82:	1c69      	adds	r1, r5, #1
 8004c84:	f04f 3aff 	mov.w	sl, #4294967295
 8004c88:	786d      	ldrb	r5, [r5, #1]
 8004c8a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004c8e:	461a      	mov	r2, r3
 8004c90:	930a      	str	r3, [sp, #40]	; 0x28
 8004c92:	9306      	str	r3, [sp, #24]
 8004c94:	4656      	mov	r6, sl
 8004c96:	1c4b      	adds	r3, r1, #1
 8004c98:	f1a5 0120 	sub.w	r1, r5, #32
 8004c9c:	2958      	cmp	r1, #88	; 0x58
 8004c9e:	f200 83c1 	bhi.w	8005424 <_vfprintf_r+0x870>
 8004ca2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004ca6:	0256      	.short	0x0256
 8004ca8:	03bf03bf 	.word	0x03bf03bf
 8004cac:	03bf02f6 	.word	0x03bf02f6
 8004cb0:	03bf03bf 	.word	0x03bf03bf
 8004cb4:	03bf03bf 	.word	0x03bf03bf
 8004cb8:	02fd03bf 	.word	0x02fd03bf
 8004cbc:	03bf02c6 	.word	0x03bf02c6
 8004cc0:	034701f2 	.word	0x034701f2
 8004cc4:	02ca03bf 	.word	0x02ca03bf
 8004cc8:	02d102d1 	.word	0x02d102d1
 8004ccc:	02d102d1 	.word	0x02d102d1
 8004cd0:	02d102d1 	.word	0x02d102d1
 8004cd4:	02d102d1 	.word	0x02d102d1
 8004cd8:	03bf02d1 	.word	0x03bf02d1
 8004cdc:	03bf03bf 	.word	0x03bf03bf
 8004ce0:	03bf03bf 	.word	0x03bf03bf
 8004ce4:	03bf03bf 	.word	0x03bf03bf
 8004ce8:	03bf03bf 	.word	0x03bf03bf
 8004cec:	026b03bf 	.word	0x026b03bf
 8004cf0:	03bf028d 	.word	0x03bf028d
 8004cf4:	03bf028d 	.word	0x03bf028d
 8004cf8:	03bf03bf 	.word	0x03bf03bf
 8004cfc:	02bf03bf 	.word	0x02bf03bf
 8004d00:	03bf03bf 	.word	0x03bf03bf
 8004d04:	03bf0362 	.word	0x03bf0362
 8004d08:	03bf03bf 	.word	0x03bf03bf
 8004d0c:	03bf03bf 	.word	0x03bf03bf
 8004d10:	03bf03a9 	.word	0x03bf03a9
 8004d14:	037f03bf 	.word	0x037f03bf
 8004d18:	03bf03bf 	.word	0x03bf03bf
 8004d1c:	03bf03bf 	.word	0x03bf03bf
 8004d20:	03bf03bf 	.word	0x03bf03bf
 8004d24:	03bf03bf 	.word	0x03bf03bf
 8004d28:	03bf03bf 	.word	0x03bf03bf
 8004d2c:	030b0394 	.word	0x030b0394
 8004d30:	028d028d 	.word	0x028d028d
 8004d34:	0324028d 	.word	0x0324028d
 8004d38:	03bf030b 	.word	0x03bf030b
 8004d3c:	032b03bf 	.word	0x032b03bf
 8004d40:	033503bf 	.word	0x033503bf
 8004d44:	02e001f9 	.word	0x02e001f9
 8004d48:	03bf025d 	.word	0x03bf025d
 8004d4c:	03bf020b 	.word	0x03bf020b
 8004d50:	03bf0095 	.word	0x03bf0095
 8004d54:	023003bf 	.word	0x023003bf
 8004d58:	4638      	mov	r0, r7
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	f001 f95a 	bl	8006014 <__swsetup_r>
 8004d60:	b9a0      	cbnz	r0, 8004d8c <_vfprintf_r+0x1d8>
 8004d62:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004d66:	f003 031a 	and.w	r3, r3, #26
 8004d6a:	2b0a      	cmp	r3, #10
 8004d6c:	f47f af54 	bne.w	8004c18 <_vfprintf_r+0x64>
 8004d70:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f6ff af4f 	blt.w	8004c18 <_vfprintf_r+0x64>
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	9a08      	ldr	r2, [sp, #32]
 8004d80:	4623      	mov	r3, r4
 8004d82:	f001 f90b 	bl	8005f9c <__sbprintf>
 8004d86:	b03f      	add	sp, #252	; 0xfc
 8004d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d90:	b03f      	add	sp, #252	; 0xfc
 8004d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d96:	4640      	mov	r0, r8
 8004d98:	4649      	mov	r1, r9
 8004d9a:	aa21      	add	r2, sp, #132	; 0x84
 8004d9c:	f7ff f8c0 	bl	8003f20 <__sprint_r>
 8004da0:	b940      	cbnz	r0, 8004db4 <_vfprintf_r+0x200>
 8004da2:	ac2e      	add	r4, sp, #184	; 0xb8
 8004da4:	e765      	b.n	8004c72 <_vfprintf_r+0xbe>
 8004da6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004da8:	b123      	cbz	r3, 8004db4 <_vfprintf_r+0x200>
 8004daa:	4640      	mov	r0, r8
 8004dac:	4649      	mov	r1, r9
 8004dae:	aa21      	add	r2, sp, #132	; 0x84
 8004db0:	f7ff f8b6 	bl	8003f20 <__sprint_r>
 8004db4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004db8:	065a      	lsls	r2, r3, #25
 8004dba:	d4e7      	bmi.n	8004d8c <_vfprintf_r+0x1d8>
 8004dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dbe:	b03f      	add	sp, #252	; 0xfc
 8004dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc4:	4638      	mov	r0, r7
 8004dc6:	f002 fab1 	bl	800732c <__sinit>
 8004dca:	e708      	b.n	8004bde <_vfprintf_r+0x2a>
 8004dcc:	9d08      	ldr	r5, [sp, #32]
 8004dce:	e753      	b.n	8004c78 <_vfprintf_r+0xc4>
 8004dd0:	9308      	str	r3, [sp, #32]
 8004dd2:	9b06      	ldr	r3, [sp, #24]
 8004dd4:	46b2      	mov	sl, r6
 8004dd6:	069e      	lsls	r6, r3, #26
 8004dd8:	f140 8318 	bpl.w	800540c <_vfprintf_r+0x858>
 8004ddc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004dde:	3707      	adds	r7, #7
 8004de0:	f027 0307 	bic.w	r3, r7, #7
 8004de4:	f103 0208 	add.w	r2, r3, #8
 8004de8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004dec:	920c      	str	r2, [sp, #48]	; 0x30
 8004dee:	2301      	movs	r3, #1
 8004df0:	f04f 0c00 	mov.w	ip, #0
 8004df4:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8004df8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8004dfc:	f1ba 0f00 	cmp.w	sl, #0
 8004e00:	db03      	blt.n	8004e0a <_vfprintf_r+0x256>
 8004e02:	9a06      	ldr	r2, [sp, #24]
 8004e04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e08:	9206      	str	r2, [sp, #24]
 8004e0a:	ea56 0207 	orrs.w	r2, r6, r7
 8004e0e:	f040 8319 	bne.w	8005444 <_vfprintf_r+0x890>
 8004e12:	f1ba 0f00 	cmp.w	sl, #0
 8004e16:	f000 8416 	beq.w	8005646 <_vfprintf_r+0xa92>
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	f000 831a 	beq.w	8005454 <_vfprintf_r+0x8a0>
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	f000 844c 	beq.w	80056be <_vfprintf_r+0xb0a>
 8004e26:	a92e      	add	r1, sp, #184	; 0xb8
 8004e28:	08f2      	lsrs	r2, r6, #3
 8004e2a:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8004e2e:	08f8      	lsrs	r0, r7, #3
 8004e30:	f006 0307 	and.w	r3, r6, #7
 8004e34:	4607      	mov	r7, r0
 8004e36:	4616      	mov	r6, r2
 8004e38:	3330      	adds	r3, #48	; 0x30
 8004e3a:	ea56 0207 	orrs.w	r2, r6, r7
 8004e3e:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8004e42:	d1f1      	bne.n	8004e28 <_vfprintf_r+0x274>
 8004e44:	9a06      	ldr	r2, [sp, #24]
 8004e46:	910e      	str	r1, [sp, #56]	; 0x38
 8004e48:	07d0      	lsls	r0, r2, #31
 8004e4a:	f100 850d 	bmi.w	8005868 <_vfprintf_r+0xcb4>
 8004e4e:	ab2e      	add	r3, sp, #184	; 0xb8
 8004e50:	1a5b      	subs	r3, r3, r1
 8004e52:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e56:	4592      	cmp	sl, r2
 8004e58:	4653      	mov	r3, sl
 8004e5a:	bfb8      	it	lt
 8004e5c:	4613      	movlt	r3, r2
 8004e5e:	9307      	str	r3, [sp, #28]
 8004e60:	2300      	movs	r3, #0
 8004e62:	9310      	str	r3, [sp, #64]	; 0x40
 8004e64:	f1bc 0f00 	cmp.w	ip, #0
 8004e68:	d002      	beq.n	8004e70 <_vfprintf_r+0x2bc>
 8004e6a:	9b07      	ldr	r3, [sp, #28]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	9307      	str	r3, [sp, #28]
 8004e70:	9b06      	ldr	r3, [sp, #24]
 8004e72:	f013 0302 	ands.w	r3, r3, #2
 8004e76:	930d      	str	r3, [sp, #52]	; 0x34
 8004e78:	d002      	beq.n	8004e80 <_vfprintf_r+0x2cc>
 8004e7a:	9b07      	ldr	r3, [sp, #28]
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	9307      	str	r3, [sp, #28]
 8004e80:	9b06      	ldr	r3, [sp, #24]
 8004e82:	f013 0684 	ands.w	r6, r3, #132	; 0x84
 8004e86:	f040 82da 	bne.w	800543e <_vfprintf_r+0x88a>
 8004e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e8c:	9a07      	ldr	r2, [sp, #28]
 8004e8e:	ebc2 0a03 	rsb	sl, r2, r3
 8004e92:	f1ba 0f00 	cmp.w	sl, #0
 8004e96:	f340 82d2 	ble.w	800543e <_vfprintf_r+0x88a>
 8004e9a:	f1ba 0f10 	cmp.w	sl, #16
 8004e9e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8004ea0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004ea2:	4fb3      	ldr	r7, [pc, #716]	; (8005170 <_vfprintf_r+0x5bc>)
 8004ea4:	bfc8      	it	gt
 8004ea6:	f04f 0b10 	movgt.w	fp, #16
 8004eaa:	dc07      	bgt.n	8004ebc <_vfprintf_r+0x308>
 8004eac:	e01e      	b.n	8004eec <_vfprintf_r+0x338>
 8004eae:	f1aa 0a10 	sub.w	sl, sl, #16
 8004eb2:	f1ba 0f10 	cmp.w	sl, #16
 8004eb6:	f104 0408 	add.w	r4, r4, #8
 8004eba:	dd17      	ble.n	8004eec <_vfprintf_r+0x338>
 8004ebc:	3201      	adds	r2, #1
 8004ebe:	3110      	adds	r1, #16
 8004ec0:	2a07      	cmp	r2, #7
 8004ec2:	9123      	str	r1, [sp, #140]	; 0x8c
 8004ec4:	9222      	str	r2, [sp, #136]	; 0x88
 8004ec6:	e884 0880 	stmia.w	r4, {r7, fp}
 8004eca:	ddf0      	ble.n	8004eae <_vfprintf_r+0x2fa>
 8004ecc:	4640      	mov	r0, r8
 8004ece:	4649      	mov	r1, r9
 8004ed0:	aa21      	add	r2, sp, #132	; 0x84
 8004ed2:	f7ff f825 	bl	8003f20 <__sprint_r>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	f47f af6c 	bne.w	8004db4 <_vfprintf_r+0x200>
 8004edc:	f1aa 0a10 	sub.w	sl, sl, #16
 8004ee0:	f1ba 0f10 	cmp.w	sl, #16
 8004ee4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8004ee6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004ee8:	ac2e      	add	r4, sp, #184	; 0xb8
 8004eea:	dce7      	bgt.n	8004ebc <_vfprintf_r+0x308>
 8004eec:	3201      	adds	r2, #1
 8004eee:	eb0a 0b01 	add.w	fp, sl, r1
 8004ef2:	2a07      	cmp	r2, #7
 8004ef4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004ef8:	9222      	str	r2, [sp, #136]	; 0x88
 8004efa:	e884 0480 	stmia.w	r4, {r7, sl}
 8004efe:	f300 8443 	bgt.w	8005788 <_vfprintf_r+0xbd4>
 8004f02:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8004f06:	3408      	adds	r4, #8
 8004f08:	f1bc 0f00 	cmp.w	ip, #0
 8004f0c:	d00f      	beq.n	8004f2e <_vfprintf_r+0x37a>
 8004f0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f10:	3301      	adds	r3, #1
 8004f12:	f10b 0b01 	add.w	fp, fp, #1
 8004f16:	f10d 0167 	add.w	r1, sp, #103	; 0x67
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	2b07      	cmp	r3, #7
 8004f1e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004f22:	9322      	str	r3, [sp, #136]	; 0x88
 8004f24:	e884 0006 	stmia.w	r4, {r1, r2}
 8004f28:	f300 83b7 	bgt.w	800569a <_vfprintf_r+0xae6>
 8004f2c:	3408      	adds	r4, #8
 8004f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f30:	b173      	cbz	r3, 8004f50 <_vfprintf_r+0x39c>
 8004f32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f34:	3301      	adds	r3, #1
 8004f36:	f10b 0b02 	add.w	fp, fp, #2
 8004f3a:	a91a      	add	r1, sp, #104	; 0x68
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	2b07      	cmp	r3, #7
 8004f40:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004f44:	9322      	str	r3, [sp, #136]	; 0x88
 8004f46:	e884 0006 	stmia.w	r4, {r1, r2}
 8004f4a:	f300 839a 	bgt.w	8005682 <_vfprintf_r+0xace>
 8004f4e:	3408      	adds	r4, #8
 8004f50:	2e80      	cmp	r6, #128	; 0x80
 8004f52:	f000 82ea 	beq.w	800552a <_vfprintf_r+0x976>
 8004f56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f5a:	ebc2 0a03 	rsb	sl, r2, r3
 8004f5e:	f1ba 0f00 	cmp.w	sl, #0
 8004f62:	dd32      	ble.n	8004fca <_vfprintf_r+0x416>
 8004f64:	f1ba 0f10 	cmp.w	sl, #16
 8004f68:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004f6a:	4f82      	ldr	r7, [pc, #520]	; (8005174 <_vfprintf_r+0x5c0>)
 8004f6c:	dd22      	ble.n	8004fb4 <_vfprintf_r+0x400>
 8004f6e:	2610      	movs	r6, #16
 8004f70:	465b      	mov	r3, fp
 8004f72:	e006      	b.n	8004f82 <_vfprintf_r+0x3ce>
 8004f74:	f1aa 0a10 	sub.w	sl, sl, #16
 8004f78:	f1ba 0f10 	cmp.w	sl, #16
 8004f7c:	f104 0408 	add.w	r4, r4, #8
 8004f80:	dd17      	ble.n	8004fb2 <_vfprintf_r+0x3fe>
 8004f82:	3201      	adds	r2, #1
 8004f84:	3310      	adds	r3, #16
 8004f86:	2a07      	cmp	r2, #7
 8004f88:	9323      	str	r3, [sp, #140]	; 0x8c
 8004f8a:	9222      	str	r2, [sp, #136]	; 0x88
 8004f8c:	6027      	str	r7, [r4, #0]
 8004f8e:	6066      	str	r6, [r4, #4]
 8004f90:	ddf0      	ble.n	8004f74 <_vfprintf_r+0x3c0>
 8004f92:	4640      	mov	r0, r8
 8004f94:	4649      	mov	r1, r9
 8004f96:	aa21      	add	r2, sp, #132	; 0x84
 8004f98:	f7fe ffc2 	bl	8003f20 <__sprint_r>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	f47f af09 	bne.w	8004db4 <_vfprintf_r+0x200>
 8004fa2:	f1aa 0a10 	sub.w	sl, sl, #16
 8004fa6:	f1ba 0f10 	cmp.w	sl, #16
 8004faa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004fae:	ac2e      	add	r4, sp, #184	; 0xb8
 8004fb0:	dce7      	bgt.n	8004f82 <_vfprintf_r+0x3ce>
 8004fb2:	469b      	mov	fp, r3
 8004fb4:	3201      	adds	r2, #1
 8004fb6:	44d3      	add	fp, sl
 8004fb8:	2a07      	cmp	r2, #7
 8004fba:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004fbe:	9222      	str	r2, [sp, #136]	; 0x88
 8004fc0:	e884 0480 	stmia.w	r4, {r7, sl}
 8004fc4:	f300 8351 	bgt.w	800566a <_vfprintf_r+0xab6>
 8004fc8:	3408      	adds	r4, #8
 8004fca:	9b06      	ldr	r3, [sp, #24]
 8004fcc:	05db      	lsls	r3, r3, #23
 8004fce:	f100 8255 	bmi.w	800547c <_vfprintf_r+0x8c8>
 8004fd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fd8:	6022      	str	r2, [r4, #0]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	448b      	add	fp, r1
 8004fde:	2b07      	cmp	r3, #7
 8004fe0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004fe4:	6061      	str	r1, [r4, #4]
 8004fe6:	9322      	str	r3, [sp, #136]	; 0x88
 8004fe8:	f300 8317 	bgt.w	800561a <_vfprintf_r+0xa66>
 8004fec:	3408      	adds	r4, #8
 8004fee:	9b06      	ldr	r3, [sp, #24]
 8004ff0:	0759      	lsls	r1, r3, #29
 8004ff2:	d53a      	bpl.n	800506a <_vfprintf_r+0x4b6>
 8004ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ff6:	9a07      	ldr	r2, [sp, #28]
 8004ff8:	1a9d      	subs	r5, r3, r2
 8004ffa:	2d00      	cmp	r5, #0
 8004ffc:	dd35      	ble.n	800506a <_vfprintf_r+0x4b6>
 8004ffe:	2d10      	cmp	r5, #16
 8005000:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005002:	4f5b      	ldr	r7, [pc, #364]	; (8005170 <_vfprintf_r+0x5bc>)
 8005004:	dd1e      	ble.n	8005044 <_vfprintf_r+0x490>
 8005006:	2610      	movs	r6, #16
 8005008:	465a      	mov	r2, fp
 800500a:	e004      	b.n	8005016 <_vfprintf_r+0x462>
 800500c:	3d10      	subs	r5, #16
 800500e:	2d10      	cmp	r5, #16
 8005010:	f104 0408 	add.w	r4, r4, #8
 8005014:	dd15      	ble.n	8005042 <_vfprintf_r+0x48e>
 8005016:	3301      	adds	r3, #1
 8005018:	3210      	adds	r2, #16
 800501a:	2b07      	cmp	r3, #7
 800501c:	9223      	str	r2, [sp, #140]	; 0x8c
 800501e:	9322      	str	r3, [sp, #136]	; 0x88
 8005020:	6027      	str	r7, [r4, #0]
 8005022:	6066      	str	r6, [r4, #4]
 8005024:	ddf2      	ble.n	800500c <_vfprintf_r+0x458>
 8005026:	4640      	mov	r0, r8
 8005028:	4649      	mov	r1, r9
 800502a:	aa21      	add	r2, sp, #132	; 0x84
 800502c:	f7fe ff78 	bl	8003f20 <__sprint_r>
 8005030:	2800      	cmp	r0, #0
 8005032:	f47f aebf 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005036:	3d10      	subs	r5, #16
 8005038:	2d10      	cmp	r5, #16
 800503a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800503c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800503e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005040:	dce9      	bgt.n	8005016 <_vfprintf_r+0x462>
 8005042:	4693      	mov	fp, r2
 8005044:	3301      	adds	r3, #1
 8005046:	44ab      	add	fp, r5
 8005048:	2b07      	cmp	r3, #7
 800504a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800504e:	9322      	str	r3, [sp, #136]	; 0x88
 8005050:	6027      	str	r7, [r4, #0]
 8005052:	6065      	str	r5, [r4, #4]
 8005054:	dd09      	ble.n	800506a <_vfprintf_r+0x4b6>
 8005056:	4640      	mov	r0, r8
 8005058:	4649      	mov	r1, r9
 800505a:	aa21      	add	r2, sp, #132	; 0x84
 800505c:	f7fe ff60 	bl	8003f20 <__sprint_r>
 8005060:	2800      	cmp	r0, #0
 8005062:	f47f aea7 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005066:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800506a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800506c:	9a07      	ldr	r2, [sp, #28]
 800506e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005070:	428a      	cmp	r2, r1
 8005072:	bfac      	ite	ge
 8005074:	189b      	addge	r3, r3, r2
 8005076:	185b      	addlt	r3, r3, r1
 8005078:	9309      	str	r3, [sp, #36]	; 0x24
 800507a:	f1bb 0f00 	cmp.w	fp, #0
 800507e:	f040 82d8 	bne.w	8005632 <_vfprintf_r+0xa7e>
 8005082:	2300      	movs	r3, #0
 8005084:	9322      	str	r3, [sp, #136]	; 0x88
 8005086:	ac2e      	add	r4, sp, #184	; 0xb8
 8005088:	e5d5      	b.n	8004c36 <_vfprintf_r+0x82>
 800508a:	4619      	mov	r1, r3
 800508c:	9806      	ldr	r0, [sp, #24]
 800508e:	781d      	ldrb	r5, [r3, #0]
 8005090:	f040 0004 	orr.w	r0, r0, #4
 8005094:	9006      	str	r0, [sp, #24]
 8005096:	e5fe      	b.n	8004c96 <_vfprintf_r+0xe2>
 8005098:	9308      	str	r3, [sp, #32]
 800509a:	9b06      	ldr	r3, [sp, #24]
 800509c:	f013 0320 	ands.w	r3, r3, #32
 80050a0:	46b2      	mov	sl, r6
 80050a2:	f000 816d 	beq.w	8005380 <_vfprintf_r+0x7cc>
 80050a6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80050a8:	3707      	adds	r7, #7
 80050aa:	f027 0307 	bic.w	r3, r7, #7
 80050ae:	f103 0208 	add.w	r2, r3, #8
 80050b2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80050b6:	920c      	str	r2, [sp, #48]	; 0x30
 80050b8:	2300      	movs	r3, #0
 80050ba:	e699      	b.n	8004df0 <_vfprintf_r+0x23c>
 80050bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050be:	9308      	str	r3, [sp, #32]
 80050c0:	6813      	ldr	r3, [r2, #0]
 80050c2:	930e      	str	r3, [sp, #56]	; 0x38
 80050c4:	f04f 0b00 	mov.w	fp, #0
 80050c8:	f88d b067 	strb.w	fp, [sp, #103]	; 0x67
 80050cc:	1d17      	adds	r7, r2, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 864f 	beq.w	8005d72 <_vfprintf_r+0x11be>
 80050d4:	2e00      	cmp	r6, #0
 80050d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80050d8:	f2c0 8601 	blt.w	8005cde <_vfprintf_r+0x112a>
 80050dc:	4659      	mov	r1, fp
 80050de:	4632      	mov	r2, r6
 80050e0:	f002 ff78 	bl	8007fd4 <memchr>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	f000 8680 	beq.w	8005dea <_vfprintf_r+0x1236>
 80050ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050ec:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 80050f0:	1ac3      	subs	r3, r0, r3
 80050f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80050f4:	970c      	str	r7, [sp, #48]	; 0x30
 80050f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80050fa:	9307      	str	r3, [sp, #28]
 80050fc:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8005100:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8005104:	e6ae      	b.n	8004e64 <_vfprintf_r+0x2b0>
 8005106:	9308      	str	r3, [sp, #32]
 8005108:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <_vfprintf_r+0x5c4>)
 800510a:	9314      	str	r3, [sp, #80]	; 0x50
 800510c:	9b06      	ldr	r3, [sp, #24]
 800510e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005112:	0699      	lsls	r1, r3, #26
 8005114:	46b2      	mov	sl, r6
 8005116:	f140 814f 	bpl.w	80053b8 <_vfprintf_r+0x804>
 800511a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800511c:	3707      	adds	r7, #7
 800511e:	f027 0307 	bic.w	r3, r7, #7
 8005122:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005126:	f103 0208 	add.w	r2, r3, #8
 800512a:	920c      	str	r2, [sp, #48]	; 0x30
 800512c:	9b06      	ldr	r3, [sp, #24]
 800512e:	07db      	lsls	r3, r3, #31
 8005130:	f140 82de 	bpl.w	80056f0 <_vfprintf_r+0xb3c>
 8005134:	ea56 0307 	orrs.w	r3, r6, r7
 8005138:	f000 82da 	beq.w	80056f0 <_vfprintf_r+0xb3c>
 800513c:	9a06      	ldr	r2, [sp, #24]
 800513e:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 8005142:	2330      	movs	r3, #48	; 0x30
 8005144:	f042 0202 	orr.w	r2, r2, #2
 8005148:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800514c:	9206      	str	r2, [sp, #24]
 800514e:	2302      	movs	r3, #2
 8005150:	e64e      	b.n	8004df0 <_vfprintf_r+0x23c>
 8005152:	781d      	ldrb	r5, [r3, #0]
 8005154:	4619      	mov	r1, r3
 8005156:	2a00      	cmp	r2, #0
 8005158:	f47f ad9d 	bne.w	8004c96 <_vfprintf_r+0xe2>
 800515c:	2220      	movs	r2, #32
 800515e:	e59a      	b.n	8004c96 <_vfprintf_r+0xe2>
 8005160:	9906      	ldr	r1, [sp, #24]
 8005162:	f041 0120 	orr.w	r1, r1, #32
 8005166:	9106      	str	r1, [sp, #24]
 8005168:	781d      	ldrb	r5, [r3, #0]
 800516a:	4619      	mov	r1, r3
 800516c:	e593      	b.n	8004c96 <_vfprintf_r+0xe2>
 800516e:	bf00      	nop
 8005170:	080097e4 	.word	0x080097e4
 8005174:	080097c0 	.word	0x080097c0
 8005178:	080097a4 	.word	0x080097a4
 800517c:	9308      	str	r3, [sp, #32]
 800517e:	9b06      	ldr	r3, [sp, #24]
 8005180:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005184:	f043 0310 	orr.w	r3, r3, #16
 8005188:	9306      	str	r3, [sp, #24]
 800518a:	9b06      	ldr	r3, [sp, #24]
 800518c:	0699      	lsls	r1, r3, #26
 800518e:	46b2      	mov	sl, r6
 8005190:	f140 809c 	bpl.w	80052cc <_vfprintf_r+0x718>
 8005194:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005196:	3707      	adds	r7, #7
 8005198:	f027 0707 	bic.w	r7, r7, #7
 800519c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a0:	f107 0108 	add.w	r1, r7, #8
 80051a4:	910c      	str	r1, [sp, #48]	; 0x30
 80051a6:	4616      	mov	r6, r2
 80051a8:	461f      	mov	r7, r3
 80051aa:	2a00      	cmp	r2, #0
 80051ac:	f173 0300 	sbcs.w	r3, r3, #0
 80051b0:	f2c0 8415 	blt.w	80059de <_vfprintf_r+0xe2a>
 80051b4:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 80051b8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80051bc:	2301      	movs	r3, #1
 80051be:	e61d      	b.n	8004dfc <_vfprintf_r+0x248>
 80051c0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80051c2:	9308      	str	r3, [sp, #32]
 80051c4:	3707      	adds	r7, #7
 80051c6:	f027 0307 	bic.w	r3, r7, #7
 80051ca:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80051ce:	f103 0208 	add.w	r2, r3, #8
 80051d2:	920c      	str	r2, [sp, #48]	; 0x30
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	9212      	str	r2, [sp, #72]	; 0x48
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	9313      	str	r3, [sp, #76]	; 0x4c
 80051dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80051de:	9812      	ldr	r0, [sp, #72]	; 0x48
 80051e0:	f003 fce2 	bl	8008ba8 <__fpclassifyd>
 80051e4:	2801      	cmp	r0, #1
 80051e6:	46b3      	mov	fp, r6
 80051e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80051ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80051ec:	f040 8406 	bne.w	80059fc <_vfprintf_r+0xe48>
 80051f0:	2200      	movs	r2, #0
 80051f2:	2300      	movs	r3, #0
 80051f4:	f7fb fc94 	bl	8000b20 <__aeabi_dcmplt>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	f040 85ee 	bne.w	8005dda <_vfprintf_r+0x1226>
 80051fe:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8005202:	9e06      	ldr	r6, [sp, #24]
 8005204:	4a99      	ldr	r2, [pc, #612]	; (800546c <_vfprintf_r+0x8b8>)
 8005206:	4b9a      	ldr	r3, [pc, #616]	; (8005470 <_vfprintf_r+0x8bc>)
 8005208:	2103      	movs	r1, #3
 800520a:	2000      	movs	r0, #0
 800520c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8005210:	2d47      	cmp	r5, #71	; 0x47
 8005212:	bfd8      	it	le
 8005214:	461a      	movle	r2, r3
 8005216:	9107      	str	r1, [sp, #28]
 8005218:	900f      	str	r0, [sp, #60]	; 0x3c
 800521a:	9606      	str	r6, [sp, #24]
 800521c:	920e      	str	r2, [sp, #56]	; 0x38
 800521e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005220:	9010      	str	r0, [sp, #64]	; 0x40
 8005222:	e61f      	b.n	8004e64 <_vfprintf_r+0x2b0>
 8005224:	9906      	ldr	r1, [sp, #24]
 8005226:	f041 0108 	orr.w	r1, r1, #8
 800522a:	9106      	str	r1, [sp, #24]
 800522c:	781d      	ldrb	r5, [r3, #0]
 800522e:	4619      	mov	r1, r3
 8005230:	e531      	b.n	8004c96 <_vfprintf_r+0xe2>
 8005232:	781d      	ldrb	r5, [r3, #0]
 8005234:	4619      	mov	r1, r3
 8005236:	222b      	movs	r2, #43	; 0x2b
 8005238:	e52d      	b.n	8004c96 <_vfprintf_r+0xe2>
 800523a:	9906      	ldr	r1, [sp, #24]
 800523c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005240:	9106      	str	r1, [sp, #24]
 8005242:	781d      	ldrb	r5, [r3, #0]
 8005244:	4619      	mov	r1, r3
 8005246:	e526      	b.n	8004c96 <_vfprintf_r+0xe2>
 8005248:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 800524c:	2100      	movs	r1, #0
 800524e:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005252:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005256:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800525a:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 800525e:	2809      	cmp	r0, #9
 8005260:	d9f5      	bls.n	800524e <_vfprintf_r+0x69a>
 8005262:	910a      	str	r1, [sp, #40]	; 0x28
 8005264:	e518      	b.n	8004c98 <_vfprintf_r+0xe4>
 8005266:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005268:	9308      	str	r3, [sp, #32]
 800526a:	2330      	movs	r3, #48	; 0x30
 800526c:	9a06      	ldr	r2, [sp, #24]
 800526e:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8005272:	460b      	mov	r3, r1
 8005274:	3304      	adds	r3, #4
 8005276:	2578      	movs	r5, #120	; 0x78
 8005278:	f042 0202 	orr.w	r2, r2, #2
 800527c:	930c      	str	r3, [sp, #48]	; 0x30
 800527e:	4b7d      	ldr	r3, [pc, #500]	; (8005474 <_vfprintf_r+0x8c0>)
 8005280:	9314      	str	r3, [sp, #80]	; 0x50
 8005282:	46b2      	mov	sl, r6
 8005284:	9206      	str	r2, [sp, #24]
 8005286:	680e      	ldr	r6, [r1, #0]
 8005288:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 800528c:	2700      	movs	r7, #0
 800528e:	2302      	movs	r3, #2
 8005290:	e5ae      	b.n	8004df0 <_vfprintf_r+0x23c>
 8005292:	9906      	ldr	r1, [sp, #24]
 8005294:	f041 0101 	orr.w	r1, r1, #1
 8005298:	9106      	str	r1, [sp, #24]
 800529a:	781d      	ldrb	r5, [r3, #0]
 800529c:	4619      	mov	r1, r3
 800529e:	e4fa      	b.n	8004c96 <_vfprintf_r+0xe2>
 80052a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052a2:	6829      	ldr	r1, [r5, #0]
 80052a4:	910a      	str	r1, [sp, #40]	; 0x28
 80052a6:	4608      	mov	r0, r1
 80052a8:	2800      	cmp	r0, #0
 80052aa:	4629      	mov	r1, r5
 80052ac:	f101 0104 	add.w	r1, r1, #4
 80052b0:	f2c0 84e3 	blt.w	8005c7a <_vfprintf_r+0x10c6>
 80052b4:	910c      	str	r1, [sp, #48]	; 0x30
 80052b6:	781d      	ldrb	r5, [r3, #0]
 80052b8:	4619      	mov	r1, r3
 80052ba:	e4ec      	b.n	8004c96 <_vfprintf_r+0xe2>
 80052bc:	9308      	str	r3, [sp, #32]
 80052be:	9b06      	ldr	r3, [sp, #24]
 80052c0:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80052c4:	0699      	lsls	r1, r3, #26
 80052c6:	46b2      	mov	sl, r6
 80052c8:	f53f af64 	bmi.w	8005194 <_vfprintf_r+0x5e0>
 80052cc:	9b06      	ldr	r3, [sp, #24]
 80052ce:	06da      	lsls	r2, r3, #27
 80052d0:	f100 8292 	bmi.w	80057f8 <_vfprintf_r+0xc44>
 80052d4:	9b06      	ldr	r3, [sp, #24]
 80052d6:	065b      	lsls	r3, r3, #25
 80052d8:	f140 828e 	bpl.w	80057f8 <_vfprintf_r+0xc44>
 80052dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052de:	f9b1 6000 	ldrsh.w	r6, [r1]
 80052e2:	3104      	adds	r1, #4
 80052e4:	17f7      	asrs	r7, r6, #31
 80052e6:	4632      	mov	r2, r6
 80052e8:	463b      	mov	r3, r7
 80052ea:	910c      	str	r1, [sp, #48]	; 0x30
 80052ec:	e75d      	b.n	80051aa <_vfprintf_r+0x5f6>
 80052ee:	9906      	ldr	r1, [sp, #24]
 80052f0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80052f4:	9106      	str	r1, [sp, #24]
 80052f6:	781d      	ldrb	r5, [r3, #0]
 80052f8:	4619      	mov	r1, r3
 80052fa:	e4cc      	b.n	8004c96 <_vfprintf_r+0xe2>
 80052fc:	781d      	ldrb	r5, [r3, #0]
 80052fe:	9906      	ldr	r1, [sp, #24]
 8005300:	2d6c      	cmp	r5, #108	; 0x6c
 8005302:	f000 84b3 	beq.w	8005c6c <_vfprintf_r+0x10b8>
 8005306:	f041 0110 	orr.w	r1, r1, #16
 800530a:	9106      	str	r1, [sp, #24]
 800530c:	4619      	mov	r1, r3
 800530e:	e4c2      	b.n	8004c96 <_vfprintf_r+0xe2>
 8005310:	9308      	str	r3, [sp, #32]
 8005312:	9b06      	ldr	r3, [sp, #24]
 8005314:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005318:	069a      	lsls	r2, r3, #26
 800531a:	f140 8400 	bpl.w	8005b1e <_vfprintf_r+0xf6a>
 800531e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005320:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005322:	6813      	ldr	r3, [r2, #0]
 8005324:	17cf      	asrs	r7, r1, #31
 8005326:	4608      	mov	r0, r1
 8005328:	3204      	adds	r2, #4
 800532a:	4639      	mov	r1, r7
 800532c:	920c      	str	r2, [sp, #48]	; 0x30
 800532e:	e9c3 0100 	strd	r0, r1, [r3]
 8005332:	e480      	b.n	8004c36 <_vfprintf_r+0x82>
 8005334:	781d      	ldrb	r5, [r3, #0]
 8005336:	2d2a      	cmp	r5, #42	; 0x2a
 8005338:	f103 0101 	add.w	r1, r3, #1
 800533c:	f000 860e 	beq.w	8005f5c <_vfprintf_r+0x13a8>
 8005340:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8005344:	2809      	cmp	r0, #9
 8005346:	460b      	mov	r3, r1
 8005348:	f04f 0600 	mov.w	r6, #0
 800534c:	f63f aca4 	bhi.w	8004c98 <_vfprintf_r+0xe4>
 8005350:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005354:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8005358:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800535c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8005360:	2809      	cmp	r0, #9
 8005362:	d9f5      	bls.n	8005350 <_vfprintf_r+0x79c>
 8005364:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8005368:	e496      	b.n	8004c98 <_vfprintf_r+0xe4>
 800536a:	9308      	str	r3, [sp, #32]
 800536c:	9b06      	ldr	r3, [sp, #24]
 800536e:	f043 0310 	orr.w	r3, r3, #16
 8005372:	9306      	str	r3, [sp, #24]
 8005374:	9b06      	ldr	r3, [sp, #24]
 8005376:	f013 0320 	ands.w	r3, r3, #32
 800537a:	46b2      	mov	sl, r6
 800537c:	f47f ae93 	bne.w	80050a6 <_vfprintf_r+0x4f2>
 8005380:	9a06      	ldr	r2, [sp, #24]
 8005382:	f012 0210 	ands.w	r2, r2, #16
 8005386:	f040 8240 	bne.w	800580a <_vfprintf_r+0xc56>
 800538a:	9b06      	ldr	r3, [sp, #24]
 800538c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005390:	f000 823b 	beq.w	800580a <_vfprintf_r+0xc56>
 8005394:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005396:	4613      	mov	r3, r2
 8005398:	460a      	mov	r2, r1
 800539a:	3204      	adds	r2, #4
 800539c:	880e      	ldrh	r6, [r1, #0]
 800539e:	920c      	str	r2, [sp, #48]	; 0x30
 80053a0:	2700      	movs	r7, #0
 80053a2:	e525      	b.n	8004df0 <_vfprintf_r+0x23c>
 80053a4:	9308      	str	r3, [sp, #32]
 80053a6:	4b34      	ldr	r3, [pc, #208]	; (8005478 <_vfprintf_r+0x8c4>)
 80053a8:	9314      	str	r3, [sp, #80]	; 0x50
 80053aa:	9b06      	ldr	r3, [sp, #24]
 80053ac:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80053b0:	0699      	lsls	r1, r3, #26
 80053b2:	46b2      	mov	sl, r6
 80053b4:	f53f aeb1 	bmi.w	800511a <_vfprintf_r+0x566>
 80053b8:	9b06      	ldr	r3, [sp, #24]
 80053ba:	06da      	lsls	r2, r3, #27
 80053bc:	f140 83c6 	bpl.w	8005b4c <_vfprintf_r+0xf98>
 80053c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053c2:	4613      	mov	r3, r2
 80053c4:	3304      	adds	r3, #4
 80053c6:	6816      	ldr	r6, [r2, #0]
 80053c8:	930c      	str	r3, [sp, #48]	; 0x30
 80053ca:	2700      	movs	r7, #0
 80053cc:	e6ae      	b.n	800512c <_vfprintf_r+0x578>
 80053ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80053d0:	9308      	str	r3, [sp, #32]
 80053d2:	680a      	ldr	r2, [r1, #0]
 80053d4:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 80053d8:	2300      	movs	r3, #0
 80053da:	2201      	movs	r2, #1
 80053dc:	3104      	adds	r1, #4
 80053de:	469c      	mov	ip, r3
 80053e0:	9207      	str	r2, [sp, #28]
 80053e2:	910c      	str	r1, [sp, #48]	; 0x30
 80053e4:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80053e8:	ab24      	add	r3, sp, #144	; 0x90
 80053ea:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80053ee:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80053f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80053f4:	930e      	str	r3, [sp, #56]	; 0x38
 80053f6:	e53b      	b.n	8004e70 <_vfprintf_r+0x2bc>
 80053f8:	9308      	str	r3, [sp, #32]
 80053fa:	9b06      	ldr	r3, [sp, #24]
 80053fc:	f043 0310 	orr.w	r3, r3, #16
 8005400:	9306      	str	r3, [sp, #24]
 8005402:	9b06      	ldr	r3, [sp, #24]
 8005404:	46b2      	mov	sl, r6
 8005406:	069e      	lsls	r6, r3, #26
 8005408:	f53f ace8 	bmi.w	8004ddc <_vfprintf_r+0x228>
 800540c:	9b06      	ldr	r3, [sp, #24]
 800540e:	06d8      	lsls	r0, r3, #27
 8005410:	f140 8377 	bpl.w	8005b02 <_vfprintf_r+0xf4e>
 8005414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005416:	4613      	mov	r3, r2
 8005418:	3204      	adds	r2, #4
 800541a:	681e      	ldr	r6, [r3, #0]
 800541c:	920c      	str	r2, [sp, #48]	; 0x30
 800541e:	2301      	movs	r3, #1
 8005420:	2700      	movs	r7, #0
 8005422:	e4e5      	b.n	8004df0 <_vfprintf_r+0x23c>
 8005424:	9308      	str	r3, [sp, #32]
 8005426:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800542a:	2d00      	cmp	r5, #0
 800542c:	f43f acbb 	beq.w	8004da6 <_vfprintf_r+0x1f2>
 8005430:	2300      	movs	r3, #0
 8005432:	2201      	movs	r2, #1
 8005434:	469c      	mov	ip, r3
 8005436:	9207      	str	r2, [sp, #28]
 8005438:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
 800543c:	e7d2      	b.n	80053e4 <_vfprintf_r+0x830>
 800543e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005442:	e561      	b.n	8004f08 <_vfprintf_r+0x354>
 8005444:	2b01      	cmp	r3, #1
 8005446:	f47f aceb 	bne.w	8004e20 <_vfprintf_r+0x26c>
 800544a:	2f00      	cmp	r7, #0
 800544c:	bf08      	it	eq
 800544e:	2e0a      	cmpeq	r6, #10
 8005450:	f080 81ef 	bcs.w	8005832 <_vfprintf_r+0xc7e>
 8005454:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 8005458:	3630      	adds	r6, #48	; 0x30
 800545a:	f80b 6d41 	strb.w	r6, [fp, #-65]!
 800545e:	ab2e      	add	r3, sp, #184	; 0xb8
 8005460:	ebcb 0303 	rsb	r3, fp, r3
 8005464:	930b      	str	r3, [sp, #44]	; 0x2c
 8005466:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800546a:	e4f3      	b.n	8004e54 <_vfprintf_r+0x2a0>
 800546c:	080097d4 	.word	0x080097d4
 8005470:	080097d0 	.word	0x080097d0
 8005474:	080097a4 	.word	0x080097a4
 8005478:	08009790 	.word	0x08009790
 800547c:	2d65      	cmp	r5, #101	; 0x65
 800547e:	f340 808a 	ble.w	8005596 <_vfprintf_r+0x9e2>
 8005482:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005484:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005486:	2200      	movs	r2, #0
 8005488:	2300      	movs	r3, #0
 800548a:	f7fb fb3f 	bl	8000b0c <__aeabi_dcmpeq>
 800548e:	2800      	cmp	r0, #0
 8005490:	f000 8131 	beq.w	80056f6 <_vfprintf_r+0xb42>
 8005494:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005496:	4aba      	ldr	r2, [pc, #744]	; (8005780 <_vfprintf_r+0xbcc>)
 8005498:	6022      	str	r2, [r4, #0]
 800549a:	3301      	adds	r3, #1
 800549c:	f10b 0b01 	add.w	fp, fp, #1
 80054a0:	2201      	movs	r2, #1
 80054a2:	2b07      	cmp	r3, #7
 80054a4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80054a8:	9322      	str	r3, [sp, #136]	; 0x88
 80054aa:	6062      	str	r2, [r4, #4]
 80054ac:	f300 8367 	bgt.w	8005b7e <_vfprintf_r+0xfca>
 80054b0:	3408      	adds	r4, #8
 80054b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80054b6:	4293      	cmp	r3, r2
 80054b8:	db03      	blt.n	80054c2 <_vfprintf_r+0x90e>
 80054ba:	9b06      	ldr	r3, [sp, #24]
 80054bc:	07df      	lsls	r7, r3, #31
 80054be:	f57f ad96 	bpl.w	8004fee <_vfprintf_r+0x43a>
 80054c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80054c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80054c8:	6022      	str	r2, [r4, #0]
 80054ca:	3301      	adds	r3, #1
 80054cc:	448b      	add	fp, r1
 80054ce:	2b07      	cmp	r3, #7
 80054d0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80054d4:	6061      	str	r1, [r4, #4]
 80054d6:	9322      	str	r3, [sp, #136]	; 0x88
 80054d8:	f300 83d6 	bgt.w	8005c88 <_vfprintf_r+0x10d4>
 80054dc:	3408      	adds	r4, #8
 80054de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054e0:	1e5d      	subs	r5, r3, #1
 80054e2:	2d00      	cmp	r5, #0
 80054e4:	f77f ad83 	ble.w	8004fee <_vfprintf_r+0x43a>
 80054e8:	2d10      	cmp	r5, #16
 80054ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054ec:	4fa5      	ldr	r7, [pc, #660]	; (8005784 <_vfprintf_r+0xbd0>)
 80054ee:	f340 8195 	ble.w	800581c <_vfprintf_r+0xc68>
 80054f2:	2610      	movs	r6, #16
 80054f4:	465a      	mov	r2, fp
 80054f6:	e004      	b.n	8005502 <_vfprintf_r+0x94e>
 80054f8:	3408      	adds	r4, #8
 80054fa:	3d10      	subs	r5, #16
 80054fc:	2d10      	cmp	r5, #16
 80054fe:	f340 818c 	ble.w	800581a <_vfprintf_r+0xc66>
 8005502:	3301      	adds	r3, #1
 8005504:	3210      	adds	r2, #16
 8005506:	2b07      	cmp	r3, #7
 8005508:	9223      	str	r2, [sp, #140]	; 0x8c
 800550a:	9322      	str	r3, [sp, #136]	; 0x88
 800550c:	6027      	str	r7, [r4, #0]
 800550e:	6066      	str	r6, [r4, #4]
 8005510:	ddf2      	ble.n	80054f8 <_vfprintf_r+0x944>
 8005512:	4640      	mov	r0, r8
 8005514:	4649      	mov	r1, r9
 8005516:	aa21      	add	r2, sp, #132	; 0x84
 8005518:	f7fe fd02 	bl	8003f20 <__sprint_r>
 800551c:	2800      	cmp	r0, #0
 800551e:	f47f ac49 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005522:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005524:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005526:	ac2e      	add	r4, sp, #184	; 0xb8
 8005528:	e7e7      	b.n	80054fa <_vfprintf_r+0x946>
 800552a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800552c:	9a07      	ldr	r2, [sp, #28]
 800552e:	1a9e      	subs	r6, r3, r2
 8005530:	2e00      	cmp	r6, #0
 8005532:	f77f ad10 	ble.w	8004f56 <_vfprintf_r+0x3a2>
 8005536:	2e10      	cmp	r6, #16
 8005538:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800553a:	4f92      	ldr	r7, [pc, #584]	; (8005784 <_vfprintf_r+0xbd0>)
 800553c:	dd1f      	ble.n	800557e <_vfprintf_r+0x9ca>
 800553e:	f04f 0a10 	mov.w	sl, #16
 8005542:	465b      	mov	r3, fp
 8005544:	e004      	b.n	8005550 <_vfprintf_r+0x99c>
 8005546:	3e10      	subs	r6, #16
 8005548:	2e10      	cmp	r6, #16
 800554a:	f104 0408 	add.w	r4, r4, #8
 800554e:	dd15      	ble.n	800557c <_vfprintf_r+0x9c8>
 8005550:	3201      	adds	r2, #1
 8005552:	3310      	adds	r3, #16
 8005554:	2a07      	cmp	r2, #7
 8005556:	9323      	str	r3, [sp, #140]	; 0x8c
 8005558:	9222      	str	r2, [sp, #136]	; 0x88
 800555a:	e884 0480 	stmia.w	r4, {r7, sl}
 800555e:	ddf2      	ble.n	8005546 <_vfprintf_r+0x992>
 8005560:	4640      	mov	r0, r8
 8005562:	4649      	mov	r1, r9
 8005564:	aa21      	add	r2, sp, #132	; 0x84
 8005566:	f7fe fcdb 	bl	8003f20 <__sprint_r>
 800556a:	2800      	cmp	r0, #0
 800556c:	f47f ac22 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005570:	3e10      	subs	r6, #16
 8005572:	2e10      	cmp	r6, #16
 8005574:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005576:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005578:	ac2e      	add	r4, sp, #184	; 0xb8
 800557a:	dce9      	bgt.n	8005550 <_vfprintf_r+0x99c>
 800557c:	469b      	mov	fp, r3
 800557e:	3201      	adds	r2, #1
 8005580:	44b3      	add	fp, r6
 8005582:	2a07      	cmp	r2, #7
 8005584:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005588:	9222      	str	r2, [sp, #136]	; 0x88
 800558a:	6027      	str	r7, [r4, #0]
 800558c:	6066      	str	r6, [r4, #4]
 800558e:	f300 8219 	bgt.w	80059c4 <_vfprintf_r+0xe10>
 8005592:	3408      	adds	r4, #8
 8005594:	e4df      	b.n	8004f56 <_vfprintf_r+0x3a2>
 8005596:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005598:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800559a:	2b01      	cmp	r3, #1
 800559c:	f340 81d4 	ble.w	8005948 <_vfprintf_r+0xd94>
 80055a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055a2:	6023      	str	r3, [r4, #0]
 80055a4:	3501      	adds	r5, #1
 80055a6:	f10b 0601 	add.w	r6, fp, #1
 80055aa:	2301      	movs	r3, #1
 80055ac:	2d07      	cmp	r5, #7
 80055ae:	9623      	str	r6, [sp, #140]	; 0x8c
 80055b0:	9522      	str	r5, [sp, #136]	; 0x88
 80055b2:	6063      	str	r3, [r4, #4]
 80055b4:	f300 81e4 	bgt.w	8005980 <_vfprintf_r+0xdcc>
 80055b8:	3408      	adds	r4, #8
 80055ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80055bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055be:	6023      	str	r3, [r4, #0]
 80055c0:	3501      	adds	r5, #1
 80055c2:	4416      	add	r6, r2
 80055c4:	2d07      	cmp	r5, #7
 80055c6:	9623      	str	r6, [sp, #140]	; 0x8c
 80055c8:	9522      	str	r5, [sp, #136]	; 0x88
 80055ca:	6062      	str	r2, [r4, #4]
 80055cc:	f300 81e4 	bgt.w	8005998 <_vfprintf_r+0xde4>
 80055d0:	3408      	adds	r4, #8
 80055d2:	2300      	movs	r3, #0
 80055d4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80055d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80055d8:	2200      	movs	r2, #0
 80055da:	f7fb fa97 	bl	8000b0c <__aeabi_dcmpeq>
 80055de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055e0:	2800      	cmp	r0, #0
 80055e2:	f040 80e0 	bne.w	80057a6 <_vfprintf_r+0xbf2>
 80055e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055e8:	3b01      	subs	r3, #1
 80055ea:	3501      	adds	r5, #1
 80055ec:	3201      	adds	r2, #1
 80055ee:	441e      	add	r6, r3
 80055f0:	2d07      	cmp	r5, #7
 80055f2:	9522      	str	r5, [sp, #136]	; 0x88
 80055f4:	9623      	str	r6, [sp, #140]	; 0x8c
 80055f6:	6022      	str	r2, [r4, #0]
 80055f8:	6063      	str	r3, [r4, #4]
 80055fa:	f300 81b5 	bgt.w	8005968 <_vfprintf_r+0xdb4>
 80055fe:	3408      	adds	r4, #8
 8005600:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005602:	6062      	str	r2, [r4, #4]
 8005604:	3501      	adds	r5, #1
 8005606:	eb06 0b02 	add.w	fp, r6, r2
 800560a:	ab1d      	add	r3, sp, #116	; 0x74
 800560c:	2d07      	cmp	r5, #7
 800560e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005612:	9522      	str	r5, [sp, #136]	; 0x88
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	f77f ace9 	ble.w	8004fec <_vfprintf_r+0x438>
 800561a:	4640      	mov	r0, r8
 800561c:	4649      	mov	r1, r9
 800561e:	aa21      	add	r2, sp, #132	; 0x84
 8005620:	f7fe fc7e 	bl	8003f20 <__sprint_r>
 8005624:	2800      	cmp	r0, #0
 8005626:	f47f abc5 	bne.w	8004db4 <_vfprintf_r+0x200>
 800562a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800562e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005630:	e4dd      	b.n	8004fee <_vfprintf_r+0x43a>
 8005632:	4640      	mov	r0, r8
 8005634:	4649      	mov	r1, r9
 8005636:	aa21      	add	r2, sp, #132	; 0x84
 8005638:	f7fe fc72 	bl	8003f20 <__sprint_r>
 800563c:	2800      	cmp	r0, #0
 800563e:	f43f ad20 	beq.w	8005082 <_vfprintf_r+0x4ce>
 8005642:	f7ff bbb7 	b.w	8004db4 <_vfprintf_r+0x200>
 8005646:	2b00      	cmp	r3, #0
 8005648:	d133      	bne.n	80056b2 <_vfprintf_r+0xafe>
 800564a:	9b06      	ldr	r3, [sp, #24]
 800564c:	07da      	lsls	r2, r3, #31
 800564e:	d530      	bpl.n	80056b2 <_vfprintf_r+0xafe>
 8005650:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 8005654:	2330      	movs	r3, #48	; 0x30
 8005656:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 800565a:	ab2e      	add	r3, sp, #184	; 0xb8
 800565c:	ebcb 0303 	rsb	r3, fp, r3
 8005660:	930b      	str	r3, [sp, #44]	; 0x2c
 8005662:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005666:	f7ff bbf5 	b.w	8004e54 <_vfprintf_r+0x2a0>
 800566a:	4640      	mov	r0, r8
 800566c:	4649      	mov	r1, r9
 800566e:	aa21      	add	r2, sp, #132	; 0x84
 8005670:	f7fe fc56 	bl	8003f20 <__sprint_r>
 8005674:	2800      	cmp	r0, #0
 8005676:	f47f ab9d 	bne.w	8004db4 <_vfprintf_r+0x200>
 800567a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800567e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005680:	e4a3      	b.n	8004fca <_vfprintf_r+0x416>
 8005682:	4640      	mov	r0, r8
 8005684:	4649      	mov	r1, r9
 8005686:	aa21      	add	r2, sp, #132	; 0x84
 8005688:	f7fe fc4a 	bl	8003f20 <__sprint_r>
 800568c:	2800      	cmp	r0, #0
 800568e:	f47f ab91 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005692:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005696:	ac2e      	add	r4, sp, #184	; 0xb8
 8005698:	e45a      	b.n	8004f50 <_vfprintf_r+0x39c>
 800569a:	4640      	mov	r0, r8
 800569c:	4649      	mov	r1, r9
 800569e:	aa21      	add	r2, sp, #132	; 0x84
 80056a0:	f7fe fc3e 	bl	8003f20 <__sprint_r>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	f47f ab85 	bne.w	8004db4 <_vfprintf_r+0x200>
 80056aa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80056ae:	ac2e      	add	r4, sp, #184	; 0xb8
 80056b0:	e43d      	b.n	8004f2e <_vfprintf_r+0x37a>
 80056b2:	ab2e      	add	r3, sp, #184	; 0xb8
 80056b4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80056b8:	930e      	str	r3, [sp, #56]	; 0x38
 80056ba:	f7ff bbcb 	b.w	8004e54 <_vfprintf_r+0x2a0>
 80056be:	9814      	ldr	r0, [sp, #80]	; 0x50
 80056c0:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
 80056c4:	0933      	lsrs	r3, r6, #4
 80056c6:	f006 010f 	and.w	r1, r6, #15
 80056ca:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80056ce:	093a      	lsrs	r2, r7, #4
 80056d0:	461e      	mov	r6, r3
 80056d2:	4617      	mov	r7, r2
 80056d4:	5c43      	ldrb	r3, [r0, r1]
 80056d6:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80056da:	ea56 0307 	orrs.w	r3, r6, r7
 80056de:	d1f1      	bne.n	80056c4 <_vfprintf_r+0xb10>
 80056e0:	465a      	mov	r2, fp
 80056e2:	ab2e      	add	r3, sp, #184	; 0xb8
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80056ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80056ec:	f7ff bbb2 	b.w	8004e54 <_vfprintf_r+0x2a0>
 80056f0:	2302      	movs	r3, #2
 80056f2:	f7ff bb7d 	b.w	8004df0 <_vfprintf_r+0x23c>
 80056f6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80056f8:	2d00      	cmp	r5, #0
 80056fa:	f340 824c 	ble.w	8005b96 <_vfprintf_r+0xfe2>
 80056fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005700:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005702:	428a      	cmp	r2, r1
 8005704:	4613      	mov	r3, r2
 8005706:	bfa8      	it	ge
 8005708:	460b      	movge	r3, r1
 800570a:	461d      	mov	r5, r3
 800570c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800570e:	2d00      	cmp	r5, #0
 8005710:	eb01 0a02 	add.w	sl, r1, r2
 8005714:	dd0b      	ble.n	800572e <_vfprintf_r+0xb7a>
 8005716:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005718:	6021      	str	r1, [r4, #0]
 800571a:	3301      	adds	r3, #1
 800571c:	44ab      	add	fp, r5
 800571e:	2b07      	cmp	r3, #7
 8005720:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005724:	6065      	str	r5, [r4, #4]
 8005726:	9322      	str	r3, [sp, #136]	; 0x88
 8005728:	f300 8300 	bgt.w	8005d2c <_vfprintf_r+0x1178>
 800572c:	3408      	adds	r4, #8
 800572e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005730:	2d00      	cmp	r5, #0
 8005732:	bfa8      	it	ge
 8005734:	1b5b      	subge	r3, r3, r5
 8005736:	2b00      	cmp	r3, #0
 8005738:	461d      	mov	r5, r3
 800573a:	f340 80af 	ble.w	800589c <_vfprintf_r+0xce8>
 800573e:	2d10      	cmp	r5, #16
 8005740:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005742:	4f10      	ldr	r7, [pc, #64]	; (8005784 <_vfprintf_r+0xbd0>)
 8005744:	f340 820f 	ble.w	8005b66 <_vfprintf_r+0xfb2>
 8005748:	2610      	movs	r6, #16
 800574a:	465a      	mov	r2, fp
 800574c:	e004      	b.n	8005758 <_vfprintf_r+0xba4>
 800574e:	3408      	adds	r4, #8
 8005750:	3d10      	subs	r5, #16
 8005752:	2d10      	cmp	r5, #16
 8005754:	f340 8206 	ble.w	8005b64 <_vfprintf_r+0xfb0>
 8005758:	3301      	adds	r3, #1
 800575a:	3210      	adds	r2, #16
 800575c:	2b07      	cmp	r3, #7
 800575e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005760:	9322      	str	r3, [sp, #136]	; 0x88
 8005762:	6027      	str	r7, [r4, #0]
 8005764:	6066      	str	r6, [r4, #4]
 8005766:	ddf2      	ble.n	800574e <_vfprintf_r+0xb9a>
 8005768:	4640      	mov	r0, r8
 800576a:	4649      	mov	r1, r9
 800576c:	aa21      	add	r2, sp, #132	; 0x84
 800576e:	f7fe fbd7 	bl	8003f20 <__sprint_r>
 8005772:	2800      	cmp	r0, #0
 8005774:	f47f ab1e 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005778:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800577a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800577c:	ac2e      	add	r4, sp, #184	; 0xb8
 800577e:	e7e7      	b.n	8005750 <_vfprintf_r+0xb9c>
 8005780:	080097e0 	.word	0x080097e0
 8005784:	080097c0 	.word	0x080097c0
 8005788:	4640      	mov	r0, r8
 800578a:	4649      	mov	r1, r9
 800578c:	aa21      	add	r2, sp, #132	; 0x84
 800578e:	f7fe fbc7 	bl	8003f20 <__sprint_r>
 8005792:	2800      	cmp	r0, #0
 8005794:	f47f ab0e 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005798:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 800579c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80057a0:	ac2e      	add	r4, sp, #184	; 0xb8
 80057a2:	f7ff bbb1 	b.w	8004f08 <_vfprintf_r+0x354>
 80057a6:	f103 3aff 	add.w	sl, r3, #4294967295
 80057aa:	f1ba 0f00 	cmp.w	sl, #0
 80057ae:	f77f af27 	ble.w	8005600 <_vfprintf_r+0xa4c>
 80057b2:	f1ba 0f10 	cmp.w	sl, #16
 80057b6:	4f90      	ldr	r7, [pc, #576]	; (80059f8 <_vfprintf_r+0xe44>)
 80057b8:	bfc8      	it	gt
 80057ba:	f04f 0b10 	movgt.w	fp, #16
 80057be:	dc07      	bgt.n	80057d0 <_vfprintf_r+0xc1c>
 80057c0:	e0f6      	b.n	80059b0 <_vfprintf_r+0xdfc>
 80057c2:	3408      	adds	r4, #8
 80057c4:	f1aa 0a10 	sub.w	sl, sl, #16
 80057c8:	f1ba 0f10 	cmp.w	sl, #16
 80057cc:	f340 80f0 	ble.w	80059b0 <_vfprintf_r+0xdfc>
 80057d0:	3501      	adds	r5, #1
 80057d2:	3610      	adds	r6, #16
 80057d4:	2d07      	cmp	r5, #7
 80057d6:	9623      	str	r6, [sp, #140]	; 0x8c
 80057d8:	9522      	str	r5, [sp, #136]	; 0x88
 80057da:	e884 0880 	stmia.w	r4, {r7, fp}
 80057de:	ddf0      	ble.n	80057c2 <_vfprintf_r+0xc0e>
 80057e0:	4640      	mov	r0, r8
 80057e2:	4649      	mov	r1, r9
 80057e4:	aa21      	add	r2, sp, #132	; 0x84
 80057e6:	f7fe fb9b 	bl	8003f20 <__sprint_r>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	f47f aae2 	bne.w	8004db4 <_vfprintf_r+0x200>
 80057f0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80057f2:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80057f4:	ac2e      	add	r4, sp, #184	; 0xb8
 80057f6:	e7e5      	b.n	80057c4 <_vfprintf_r+0xc10>
 80057f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057fa:	6816      	ldr	r6, [r2, #0]
 80057fc:	4613      	mov	r3, r2
 80057fe:	3304      	adds	r3, #4
 8005800:	17f7      	asrs	r7, r6, #31
 8005802:	930c      	str	r3, [sp, #48]	; 0x30
 8005804:	4632      	mov	r2, r6
 8005806:	463b      	mov	r3, r7
 8005808:	e4cf      	b.n	80051aa <_vfprintf_r+0x5f6>
 800580a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800580c:	460a      	mov	r2, r1
 800580e:	3204      	adds	r2, #4
 8005810:	680e      	ldr	r6, [r1, #0]
 8005812:	920c      	str	r2, [sp, #48]	; 0x30
 8005814:	2700      	movs	r7, #0
 8005816:	f7ff baeb 	b.w	8004df0 <_vfprintf_r+0x23c>
 800581a:	4693      	mov	fp, r2
 800581c:	3301      	adds	r3, #1
 800581e:	44ab      	add	fp, r5
 8005820:	2b07      	cmp	r3, #7
 8005822:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005826:	9322      	str	r3, [sp, #136]	; 0x88
 8005828:	6027      	str	r7, [r4, #0]
 800582a:	6065      	str	r5, [r4, #4]
 800582c:	f77f abde 	ble.w	8004fec <_vfprintf_r+0x438>
 8005830:	e6f3      	b.n	800561a <_vfprintf_r+0xa66>
 8005832:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
 8005836:	f8cd c01c 	str.w	ip, [sp, #28]
 800583a:	4630      	mov	r0, r6
 800583c:	4639      	mov	r1, r7
 800583e:	220a      	movs	r2, #10
 8005840:	2300      	movs	r3, #0
 8005842:	f7fb f9bd 	bl	8000bc0 <__aeabi_uldivmod>
 8005846:	3230      	adds	r2, #48	; 0x30
 8005848:	4630      	mov	r0, r6
 800584a:	4639      	mov	r1, r7
 800584c:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8005850:	2300      	movs	r3, #0
 8005852:	220a      	movs	r2, #10
 8005854:	f7fb f9b4 	bl	8000bc0 <__aeabi_uldivmod>
 8005858:	4606      	mov	r6, r0
 800585a:	460f      	mov	r7, r1
 800585c:	ea56 0307 	orrs.w	r3, r6, r7
 8005860:	d1eb      	bne.n	800583a <_vfprintf_r+0xc86>
 8005862:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005866:	e73b      	b.n	80056e0 <_vfprintf_r+0xb2c>
 8005868:	2b30      	cmp	r3, #48	; 0x30
 800586a:	f000 8219 	beq.w	8005ca0 <_vfprintf_r+0x10ec>
 800586e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005870:	3b01      	subs	r3, #1
 8005872:	461a      	mov	r2, r3
 8005874:	a82e      	add	r0, sp, #184	; 0xb8
 8005876:	930e      	str	r3, [sp, #56]	; 0x38
 8005878:	1a82      	subs	r2, r0, r2
 800587a:	2330      	movs	r3, #48	; 0x30
 800587c:	920b      	str	r2, [sp, #44]	; 0x2c
 800587e:	f801 3c01 	strb.w	r3, [r1, #-1]
 8005882:	f7ff bae7 	b.w	8004e54 <_vfprintf_r+0x2a0>
 8005886:	4640      	mov	r0, r8
 8005888:	4649      	mov	r1, r9
 800588a:	aa21      	add	r2, sp, #132	; 0x84
 800588c:	f7fe fb48 	bl	8003f20 <__sprint_r>
 8005890:	2800      	cmp	r0, #0
 8005892:	f47f aa8f 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005896:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800589a:	ac2e      	add	r4, sp, #184	; 0xb8
 800589c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800589e:	9910      	ldr	r1, [sp, #64]	; 0x40
 80058a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058a2:	440a      	add	r2, r1
 80058a4:	4616      	mov	r6, r2
 80058a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80058a8:	4293      	cmp	r3, r2
 80058aa:	db3e      	blt.n	800592a <_vfprintf_r+0xd76>
 80058ac:	9a06      	ldr	r2, [sp, #24]
 80058ae:	07d5      	lsls	r5, r2, #31
 80058b0:	d43b      	bmi.n	800592a <_vfprintf_r+0xd76>
 80058b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80058b4:	ebc6 050a 	rsb	r5, r6, sl
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	429d      	cmp	r5, r3
 80058bc:	bfa8      	it	ge
 80058be:	461d      	movge	r5, r3
 80058c0:	2d00      	cmp	r5, #0
 80058c2:	462f      	mov	r7, r5
 80058c4:	dd0b      	ble.n	80058de <_vfprintf_r+0xd2a>
 80058c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80058c8:	6026      	str	r6, [r4, #0]
 80058ca:	3201      	adds	r2, #1
 80058cc:	44ab      	add	fp, r5
 80058ce:	2a07      	cmp	r2, #7
 80058d0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80058d4:	6065      	str	r5, [r4, #4]
 80058d6:	9222      	str	r2, [sp, #136]	; 0x88
 80058d8:	f300 825e 	bgt.w	8005d98 <_vfprintf_r+0x11e4>
 80058dc:	3408      	adds	r4, #8
 80058de:	2f00      	cmp	r7, #0
 80058e0:	bfac      	ite	ge
 80058e2:	1bdd      	subge	r5, r3, r7
 80058e4:	461d      	movlt	r5, r3
 80058e6:	2d00      	cmp	r5, #0
 80058e8:	f77f ab81 	ble.w	8004fee <_vfprintf_r+0x43a>
 80058ec:	2d10      	cmp	r5, #16
 80058ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058f0:	4f41      	ldr	r7, [pc, #260]	; (80059f8 <_vfprintf_r+0xe44>)
 80058f2:	dd93      	ble.n	800581c <_vfprintf_r+0xc68>
 80058f4:	2610      	movs	r6, #16
 80058f6:	465a      	mov	r2, fp
 80058f8:	e003      	b.n	8005902 <_vfprintf_r+0xd4e>
 80058fa:	3408      	adds	r4, #8
 80058fc:	3d10      	subs	r5, #16
 80058fe:	2d10      	cmp	r5, #16
 8005900:	dd8b      	ble.n	800581a <_vfprintf_r+0xc66>
 8005902:	3301      	adds	r3, #1
 8005904:	3210      	adds	r2, #16
 8005906:	2b07      	cmp	r3, #7
 8005908:	9223      	str	r2, [sp, #140]	; 0x8c
 800590a:	9322      	str	r3, [sp, #136]	; 0x88
 800590c:	6027      	str	r7, [r4, #0]
 800590e:	6066      	str	r6, [r4, #4]
 8005910:	ddf3      	ble.n	80058fa <_vfprintf_r+0xd46>
 8005912:	4640      	mov	r0, r8
 8005914:	4649      	mov	r1, r9
 8005916:	aa21      	add	r2, sp, #132	; 0x84
 8005918:	f7fe fb02 	bl	8003f20 <__sprint_r>
 800591c:	2800      	cmp	r0, #0
 800591e:	f47f aa49 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005922:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005924:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005926:	ac2e      	add	r4, sp, #184	; 0xb8
 8005928:	e7e8      	b.n	80058fc <_vfprintf_r+0xd48>
 800592a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800592c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800592e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005930:	6021      	str	r1, [r4, #0]
 8005932:	3201      	adds	r2, #1
 8005934:	4483      	add	fp, r0
 8005936:	2a07      	cmp	r2, #7
 8005938:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800593c:	6060      	str	r0, [r4, #4]
 800593e:	9222      	str	r2, [sp, #136]	; 0x88
 8005940:	f300 820a 	bgt.w	8005d58 <_vfprintf_r+0x11a4>
 8005944:	3408      	adds	r4, #8
 8005946:	e7b4      	b.n	80058b2 <_vfprintf_r+0xcfe>
 8005948:	9b06      	ldr	r3, [sp, #24]
 800594a:	07d8      	lsls	r0, r3, #31
 800594c:	f53f ae28 	bmi.w	80055a0 <_vfprintf_r+0x9ec>
 8005950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005952:	6023      	str	r3, [r4, #0]
 8005954:	3501      	adds	r5, #1
 8005956:	f10b 0601 	add.w	r6, fp, #1
 800595a:	2301      	movs	r3, #1
 800595c:	2d07      	cmp	r5, #7
 800595e:	9623      	str	r6, [sp, #140]	; 0x8c
 8005960:	9522      	str	r5, [sp, #136]	; 0x88
 8005962:	6063      	str	r3, [r4, #4]
 8005964:	f77f ae4b 	ble.w	80055fe <_vfprintf_r+0xa4a>
 8005968:	4640      	mov	r0, r8
 800596a:	4649      	mov	r1, r9
 800596c:	aa21      	add	r2, sp, #132	; 0x84
 800596e:	f7fe fad7 	bl	8003f20 <__sprint_r>
 8005972:	2800      	cmp	r0, #0
 8005974:	f47f aa1e 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005978:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800597a:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800597c:	ac2e      	add	r4, sp, #184	; 0xb8
 800597e:	e63f      	b.n	8005600 <_vfprintf_r+0xa4c>
 8005980:	4640      	mov	r0, r8
 8005982:	4649      	mov	r1, r9
 8005984:	aa21      	add	r2, sp, #132	; 0x84
 8005986:	f7fe facb 	bl	8003f20 <__sprint_r>
 800598a:	2800      	cmp	r0, #0
 800598c:	f47f aa12 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005990:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8005992:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8005994:	ac2e      	add	r4, sp, #184	; 0xb8
 8005996:	e610      	b.n	80055ba <_vfprintf_r+0xa06>
 8005998:	4640      	mov	r0, r8
 800599a:	4649      	mov	r1, r9
 800599c:	aa21      	add	r2, sp, #132	; 0x84
 800599e:	f7fe fabf 	bl	8003f20 <__sprint_r>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	f47f aa06 	bne.w	8004db4 <_vfprintf_r+0x200>
 80059a8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80059aa:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80059ac:	ac2e      	add	r4, sp, #184	; 0xb8
 80059ae:	e610      	b.n	80055d2 <_vfprintf_r+0xa1e>
 80059b0:	3501      	adds	r5, #1
 80059b2:	4456      	add	r6, sl
 80059b4:	2d07      	cmp	r5, #7
 80059b6:	9623      	str	r6, [sp, #140]	; 0x8c
 80059b8:	9522      	str	r5, [sp, #136]	; 0x88
 80059ba:	e884 0480 	stmia.w	r4, {r7, sl}
 80059be:	f77f ae1e 	ble.w	80055fe <_vfprintf_r+0xa4a>
 80059c2:	e7d1      	b.n	8005968 <_vfprintf_r+0xdb4>
 80059c4:	4640      	mov	r0, r8
 80059c6:	4649      	mov	r1, r9
 80059c8:	aa21      	add	r2, sp, #132	; 0x84
 80059ca:	f7fe faa9 	bl	8003f20 <__sprint_r>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	f47f a9f0 	bne.w	8004db4 <_vfprintf_r+0x200>
 80059d4:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80059d8:	ac2e      	add	r4, sp, #184	; 0xb8
 80059da:	f7ff babc 	b.w	8004f56 <_vfprintf_r+0x3a2>
 80059de:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80059e2:	4276      	negs	r6, r6
 80059e4:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80059e8:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 80059ec:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80059f0:	2301      	movs	r3, #1
 80059f2:	f7ff ba03 	b.w	8004dfc <_vfprintf_r+0x248>
 80059f6:	bf00      	nop
 80059f8:	080097c0 	.word	0x080097c0
 80059fc:	f003 f8d4 	bl	8008ba8 <__fpclassifyd>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	f000 810d 	beq.w	8005c20 <_vfprintf_r+0x106c>
 8005a06:	f025 0320 	bic.w	r3, r5, #32
 8005a0a:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005a0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a10:	f000 8258 	beq.w	8005ec4 <_vfprintf_r+0x1310>
 8005a14:	2b47      	cmp	r3, #71	; 0x47
 8005a16:	d104      	bne.n	8005a22 <_vfprintf_r+0xe6e>
 8005a18:	2e00      	cmp	r6, #0
 8005a1a:	bf14      	ite	ne
 8005a1c:	46b3      	movne	fp, r6
 8005a1e:	f04f 0b01 	moveq.w	fp, #1
 8005a22:	9b06      	ldr	r3, [sp, #24]
 8005a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a28:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a2c:	f1b3 0a00 	subs.w	sl, r3, #0
 8005a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a32:	9307      	str	r3, [sp, #28]
 8005a34:	bfbb      	ittet	lt
 8005a36:	4653      	movlt	r3, sl
 8005a38:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
 8005a3c:	2300      	movge	r3, #0
 8005a3e:	232d      	movlt	r3, #45	; 0x2d
 8005a40:	2d66      	cmp	r5, #102	; 0x66
 8005a42:	930d      	str	r3, [sp, #52]	; 0x34
 8005a44:	f000 8154 	beq.w	8005cf0 <_vfprintf_r+0x113c>
 8005a48:	2d46      	cmp	r5, #70	; 0x46
 8005a4a:	f000 8151 	beq.w	8005cf0 <_vfprintf_r+0x113c>
 8005a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a50:	9a07      	ldr	r2, [sp, #28]
 8005a52:	2b45      	cmp	r3, #69	; 0x45
 8005a54:	bf0c      	ite	eq
 8005a56:	f10b 0701 	addeq.w	r7, fp, #1
 8005a5a:	465f      	movne	r7, fp
 8005a5c:	2002      	movs	r0, #2
 8005a5e:	a91b      	add	r1, sp, #108	; 0x6c
 8005a60:	e88d 0081 	stmia.w	sp, {r0, r7}
 8005a64:	9102      	str	r1, [sp, #8]
 8005a66:	a81c      	add	r0, sp, #112	; 0x70
 8005a68:	a91f      	add	r1, sp, #124	; 0x7c
 8005a6a:	9003      	str	r0, [sp, #12]
 8005a6c:	4653      	mov	r3, sl
 8005a6e:	9104      	str	r1, [sp, #16]
 8005a70:	4640      	mov	r0, r8
 8005a72:	f000 fbd1 	bl	8006218 <_dtoa_r>
 8005a76:	2d67      	cmp	r5, #103	; 0x67
 8005a78:	900e      	str	r0, [sp, #56]	; 0x38
 8005a7a:	d002      	beq.n	8005a82 <_vfprintf_r+0xece>
 8005a7c:	2d47      	cmp	r5, #71	; 0x47
 8005a7e:	f040 8147 	bne.w	8005d10 <_vfprintf_r+0x115c>
 8005a82:	9b06      	ldr	r3, [sp, #24]
 8005a84:	07db      	lsls	r3, r3, #31
 8005a86:	f140 823a 	bpl.w	8005efe <_vfprintf_r+0x134a>
 8005a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a8c:	19de      	adds	r6, r3, r7
 8005a8e:	9807      	ldr	r0, [sp, #28]
 8005a90:	4651      	mov	r1, sl
 8005a92:	2200      	movs	r2, #0
 8005a94:	2300      	movs	r3, #0
 8005a96:	f7fb f839 	bl	8000b0c <__aeabi_dcmpeq>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	f040 81a3 	bne.w	8005de6 <_vfprintf_r+0x1232>
 8005aa0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005aa2:	429e      	cmp	r6, r3
 8005aa4:	d906      	bls.n	8005ab4 <_vfprintf_r+0xf00>
 8005aa6:	2130      	movs	r1, #48	; 0x30
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	921f      	str	r2, [sp, #124]	; 0x7c
 8005aac:	7019      	strb	r1, [r3, #0]
 8005aae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ab0:	429e      	cmp	r6, r3
 8005ab2:	d8f9      	bhi.n	8005aa8 <_vfprintf_r+0xef4>
 8005ab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	9311      	str	r3, [sp, #68]	; 0x44
 8005aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005abc:	2b47      	cmp	r3, #71	; 0x47
 8005abe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ac0:	f000 8179 	beq.w	8005db6 <_vfprintf_r+0x1202>
 8005ac4:	2d65      	cmp	r5, #101	; 0x65
 8005ac6:	f340 819c 	ble.w	8005e02 <_vfprintf_r+0x124e>
 8005aca:	2d66      	cmp	r5, #102	; 0x66
 8005acc:	9310      	str	r3, [sp, #64]	; 0x40
 8005ace:	f000 8209 	beq.w	8005ee4 <_vfprintf_r+0x1330>
 8005ad2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ad4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	f300 81f7 	bgt.w	8005eca <_vfprintf_r+0x1316>
 8005adc:	9b06      	ldr	r3, [sp, #24]
 8005ade:	07d9      	lsls	r1, r3, #31
 8005ae0:	f100 8217 	bmi.w	8005f12 <_vfprintf_r+0x135e>
 8005ae4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005ae8:	920b      	str	r2, [sp, #44]	; 0x2c
 8005aea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005aec:	2a00      	cmp	r2, #0
 8005aee:	f040 8169 	bne.w	8005dc4 <_vfprintf_r+0x1210>
 8005af2:	9307      	str	r3, [sp, #28]
 8005af4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005af6:	9306      	str	r3, [sp, #24]
 8005af8:	920f      	str	r2, [sp, #60]	; 0x3c
 8005afa:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8005afe:	f7ff b9b1 	b.w	8004e64 <_vfprintf_r+0x2b0>
 8005b02:	9b06      	ldr	r3, [sp, #24]
 8005b04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b06:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	f43f ac84 	beq.w	8005418 <_vfprintf_r+0x864>
 8005b10:	8816      	ldrh	r6, [r2, #0]
 8005b12:	3204      	adds	r2, #4
 8005b14:	2700      	movs	r7, #0
 8005b16:	2301      	movs	r3, #1
 8005b18:	920c      	str	r2, [sp, #48]	; 0x30
 8005b1a:	f7ff b969 	b.w	8004df0 <_vfprintf_r+0x23c>
 8005b1e:	9b06      	ldr	r3, [sp, #24]
 8005b20:	06db      	lsls	r3, r3, #27
 8005b22:	d40b      	bmi.n	8005b3c <_vfprintf_r+0xf88>
 8005b24:	9b06      	ldr	r3, [sp, #24]
 8005b26:	065f      	lsls	r7, r3, #25
 8005b28:	d508      	bpl.n	8005b3c <_vfprintf_r+0xf88>
 8005b2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b2c:	6813      	ldr	r3, [r2, #0]
 8005b2e:	3204      	adds	r2, #4
 8005b30:	920c      	str	r2, [sp, #48]	; 0x30
 8005b32:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8005b36:	801a      	strh	r2, [r3, #0]
 8005b38:	f7ff b87d 	b.w	8004c36 <_vfprintf_r+0x82>
 8005b3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b3e:	6813      	ldr	r3, [r2, #0]
 8005b40:	3204      	adds	r2, #4
 8005b42:	920c      	str	r2, [sp, #48]	; 0x30
 8005b44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	f7ff b875 	b.w	8004c36 <_vfprintf_r+0x82>
 8005b4c:	9b06      	ldr	r3, [sp, #24]
 8005b4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b50:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b54:	4613      	mov	r3, r2
 8005b56:	d076      	beq.n	8005c46 <_vfprintf_r+0x1092>
 8005b58:	3304      	adds	r3, #4
 8005b5a:	8816      	ldrh	r6, [r2, #0]
 8005b5c:	930c      	str	r3, [sp, #48]	; 0x30
 8005b5e:	2700      	movs	r7, #0
 8005b60:	f7ff bae4 	b.w	800512c <_vfprintf_r+0x578>
 8005b64:	4693      	mov	fp, r2
 8005b66:	3301      	adds	r3, #1
 8005b68:	44ab      	add	fp, r5
 8005b6a:	2b07      	cmp	r3, #7
 8005b6c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005b70:	9322      	str	r3, [sp, #136]	; 0x88
 8005b72:	6027      	str	r7, [r4, #0]
 8005b74:	6065      	str	r5, [r4, #4]
 8005b76:	f73f ae86 	bgt.w	8005886 <_vfprintf_r+0xcd2>
 8005b7a:	3408      	adds	r4, #8
 8005b7c:	e68e      	b.n	800589c <_vfprintf_r+0xce8>
 8005b7e:	4640      	mov	r0, r8
 8005b80:	4649      	mov	r1, r9
 8005b82:	aa21      	add	r2, sp, #132	; 0x84
 8005b84:	f7fe f9cc 	bl	8003f20 <__sprint_r>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	f47f a913 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005b8e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005b92:	ac2e      	add	r4, sp, #184	; 0xb8
 8005b94:	e48d      	b.n	80054b2 <_vfprintf_r+0x8fe>
 8005b96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b98:	4ab0      	ldr	r2, [pc, #704]	; (8005e5c <_vfprintf_r+0x12a8>)
 8005b9a:	6022      	str	r2, [r4, #0]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	f10b 0b01 	add.w	fp, fp, #1
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	2b07      	cmp	r3, #7
 8005ba6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005baa:	9322      	str	r3, [sp, #136]	; 0x88
 8005bac:	6062      	str	r2, [r4, #4]
 8005bae:	dc50      	bgt.n	8005c52 <_vfprintf_r+0x109e>
 8005bb0:	3408      	adds	r4, #8
 8005bb2:	b92d      	cbnz	r5, 8005bc0 <_vfprintf_r+0x100c>
 8005bb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005bb6:	b91b      	cbnz	r3, 8005bc0 <_vfprintf_r+0x100c>
 8005bb8:	9b06      	ldr	r3, [sp, #24]
 8005bba:	07de      	lsls	r6, r3, #31
 8005bbc:	f57f aa17 	bpl.w	8004fee <_vfprintf_r+0x43a>
 8005bc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bc2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005bc4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005bc6:	6022      	str	r2, [r4, #0]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	eb0b 0201 	add.w	r2, fp, r1
 8005bce:	2b07      	cmp	r3, #7
 8005bd0:	9223      	str	r2, [sp, #140]	; 0x8c
 8005bd2:	6061      	str	r1, [r4, #4]
 8005bd4:	9322      	str	r3, [sp, #136]	; 0x88
 8005bd6:	f300 8168 	bgt.w	8005eaa <_vfprintf_r+0x12f6>
 8005bda:	3408      	adds	r4, #8
 8005bdc:	426d      	negs	r5, r5
 8005bde:	2d00      	cmp	r5, #0
 8005be0:	dd6f      	ble.n	8005cc2 <_vfprintf_r+0x110e>
 8005be2:	2d10      	cmp	r5, #16
 8005be4:	4f9e      	ldr	r7, [pc, #632]	; (8005e60 <_vfprintf_r+0x12ac>)
 8005be6:	bfc8      	it	gt
 8005be8:	2610      	movgt	r6, #16
 8005bea:	dc05      	bgt.n	8005bf8 <_vfprintf_r+0x1044>
 8005bec:	e0aa      	b.n	8005d44 <_vfprintf_r+0x1190>
 8005bee:	3408      	adds	r4, #8
 8005bf0:	3d10      	subs	r5, #16
 8005bf2:	2d10      	cmp	r5, #16
 8005bf4:	f340 80a6 	ble.w	8005d44 <_vfprintf_r+0x1190>
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	3210      	adds	r2, #16
 8005bfc:	2b07      	cmp	r3, #7
 8005bfe:	9223      	str	r2, [sp, #140]	; 0x8c
 8005c00:	9322      	str	r3, [sp, #136]	; 0x88
 8005c02:	6027      	str	r7, [r4, #0]
 8005c04:	6066      	str	r6, [r4, #4]
 8005c06:	ddf2      	ble.n	8005bee <_vfprintf_r+0x103a>
 8005c08:	4640      	mov	r0, r8
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	aa21      	add	r2, sp, #132	; 0x84
 8005c0e:	f7fe f987 	bl	8003f20 <__sprint_r>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	f47f a8ce 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005c18:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005c1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c1c:	ac2e      	add	r4, sp, #184	; 0xb8
 8005c1e:	e7e7      	b.n	8005bf0 <_vfprintf_r+0x103c>
 8005c20:	9e06      	ldr	r6, [sp, #24]
 8005c22:	4a90      	ldr	r2, [pc, #576]	; (8005e64 <_vfprintf_r+0x12b0>)
 8005c24:	4b90      	ldr	r3, [pc, #576]	; (8005e68 <_vfprintf_r+0x12b4>)
 8005c26:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8005c2a:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c2c:	2103      	movs	r1, #3
 8005c2e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8005c32:	2d47      	cmp	r5, #71	; 0x47
 8005c34:	bfd8      	it	le
 8005c36:	461a      	movle	r2, r3
 8005c38:	9107      	str	r1, [sp, #28]
 8005c3a:	9606      	str	r6, [sp, #24]
 8005c3c:	9010      	str	r0, [sp, #64]	; 0x40
 8005c3e:	920e      	str	r2, [sp, #56]	; 0x38
 8005c40:	910b      	str	r1, [sp, #44]	; 0x2c
 8005c42:	f7ff b90f 	b.w	8004e64 <_vfprintf_r+0x2b0>
 8005c46:	3304      	adds	r3, #4
 8005c48:	6816      	ldr	r6, [r2, #0]
 8005c4a:	930c      	str	r3, [sp, #48]	; 0x30
 8005c4c:	2700      	movs	r7, #0
 8005c4e:	f7ff ba6d 	b.w	800512c <_vfprintf_r+0x578>
 8005c52:	4640      	mov	r0, r8
 8005c54:	4649      	mov	r1, r9
 8005c56:	aa21      	add	r2, sp, #132	; 0x84
 8005c58:	f7fe f962 	bl	8003f20 <__sprint_r>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	f47f a8a9 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005c62:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005c64:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005c68:	ac2e      	add	r4, sp, #184	; 0xb8
 8005c6a:	e7a2      	b.n	8005bb2 <_vfprintf_r+0xffe>
 8005c6c:	f041 0120 	orr.w	r1, r1, #32
 8005c70:	9106      	str	r1, [sp, #24]
 8005c72:	785d      	ldrb	r5, [r3, #1]
 8005c74:	1c59      	adds	r1, r3, #1
 8005c76:	f7ff b80e 	b.w	8004c96 <_vfprintf_r+0xe2>
 8005c7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005c7c:	910c      	str	r1, [sp, #48]	; 0x30
 8005c7e:	4240      	negs	r0, r0
 8005c80:	900a      	str	r0, [sp, #40]	; 0x28
 8005c82:	4619      	mov	r1, r3
 8005c84:	f7ff ba02 	b.w	800508c <_vfprintf_r+0x4d8>
 8005c88:	4640      	mov	r0, r8
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	aa21      	add	r2, sp, #132	; 0x84
 8005c8e:	f7fe f947 	bl	8003f20 <__sprint_r>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	f47f a88e 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005c98:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005c9c:	ac2e      	add	r4, sp, #184	; 0xb8
 8005c9e:	e41e      	b.n	80054de <_vfprintf_r+0x92a>
 8005ca0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ca2:	ab2e      	add	r3, sp, #184	; 0xb8
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ca8:	f7ff b8d4 	b.w	8004e54 <_vfprintf_r+0x2a0>
 8005cac:	4640      	mov	r0, r8
 8005cae:	4649      	mov	r1, r9
 8005cb0:	aa21      	add	r2, sp, #132	; 0x84
 8005cb2:	f7fe f935 	bl	8003f20 <__sprint_r>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	f47f a87c 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005cbc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005cbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cc0:	ac2e      	add	r4, sp, #184	; 0xb8
 8005cc2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005cc4:	6060      	str	r0, [r4, #4]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	eb02 0b00 	add.w	fp, r2, r0
 8005ccc:	2b07      	cmp	r3, #7
 8005cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cd0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005cd4:	9322      	str	r3, [sp, #136]	; 0x88
 8005cd6:	6022      	str	r2, [r4, #0]
 8005cd8:	f77f a988 	ble.w	8004fec <_vfprintf_r+0x438>
 8005cdc:	e49d      	b.n	800561a <_vfprintf_r+0xa66>
 8005cde:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8005ce2:	f7fe f8b3 	bl	8003e4c <strlen>
 8005ce6:	970c      	str	r7, [sp, #48]	; 0x30
 8005ce8:	900b      	str	r0, [sp, #44]	; 0x2c
 8005cea:	4603      	mov	r3, r0
 8005cec:	f7ff ba03 	b.w	80050f6 <_vfprintf_r+0x542>
 8005cf0:	2003      	movs	r0, #3
 8005cf2:	a91b      	add	r1, sp, #108	; 0x6c
 8005cf4:	e88d 0801 	stmia.w	sp, {r0, fp}
 8005cf8:	9102      	str	r1, [sp, #8]
 8005cfa:	a81c      	add	r0, sp, #112	; 0x70
 8005cfc:	a91f      	add	r1, sp, #124	; 0x7c
 8005cfe:	9003      	str	r0, [sp, #12]
 8005d00:	9a07      	ldr	r2, [sp, #28]
 8005d02:	9104      	str	r1, [sp, #16]
 8005d04:	4653      	mov	r3, sl
 8005d06:	4640      	mov	r0, r8
 8005d08:	f000 fa86 	bl	8006218 <_dtoa_r>
 8005d0c:	465f      	mov	r7, fp
 8005d0e:	900e      	str	r0, [sp, #56]	; 0x38
 8005d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d12:	19de      	adds	r6, r3, r7
 8005d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d16:	2b46      	cmp	r3, #70	; 0x46
 8005d18:	f47f aeb9 	bne.w	8005a8e <_vfprintf_r+0xeda>
 8005d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b30      	cmp	r3, #48	; 0x30
 8005d22:	f000 80fc 	beq.w	8005f1e <_vfprintf_r+0x136a>
 8005d26:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8005d28:	443e      	add	r6, r7
 8005d2a:	e6b0      	b.n	8005a8e <_vfprintf_r+0xeda>
 8005d2c:	4640      	mov	r0, r8
 8005d2e:	4649      	mov	r1, r9
 8005d30:	aa21      	add	r2, sp, #132	; 0x84
 8005d32:	f7fe f8f5 	bl	8003f20 <__sprint_r>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	f47f a83c 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005d3c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005d40:	ac2e      	add	r4, sp, #184	; 0xb8
 8005d42:	e4f4      	b.n	800572e <_vfprintf_r+0xb7a>
 8005d44:	3301      	adds	r3, #1
 8005d46:	442a      	add	r2, r5
 8005d48:	2b07      	cmp	r3, #7
 8005d4a:	9223      	str	r2, [sp, #140]	; 0x8c
 8005d4c:	9322      	str	r3, [sp, #136]	; 0x88
 8005d4e:	6027      	str	r7, [r4, #0]
 8005d50:	6065      	str	r5, [r4, #4]
 8005d52:	dcab      	bgt.n	8005cac <_vfprintf_r+0x10f8>
 8005d54:	3408      	adds	r4, #8
 8005d56:	e7b4      	b.n	8005cc2 <_vfprintf_r+0x110e>
 8005d58:	4640      	mov	r0, r8
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	aa21      	add	r2, sp, #132	; 0x84
 8005d5e:	f7fe f8df 	bl	8003f20 <__sprint_r>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	f47f a826 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005d68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d6a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005d6e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005d70:	e59f      	b.n	80058b2 <_vfprintf_r+0xcfe>
 8005d72:	2e06      	cmp	r6, #6
 8005d74:	4633      	mov	r3, r6
 8005d76:	bf28      	it	cs
 8005d78:	2306      	movcs	r3, #6
 8005d7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d80:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8005d84:	9307      	str	r3, [sp, #28]
 8005d86:	4b39      	ldr	r3, [pc, #228]	; (8005e6c <_vfprintf_r+0x12b8>)
 8005d88:	970c      	str	r7, [sp, #48]	; 0x30
 8005d8a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8005d8e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8005d92:	930e      	str	r3, [sp, #56]	; 0x38
 8005d94:	f7ff b866 	b.w	8004e64 <_vfprintf_r+0x2b0>
 8005d98:	4640      	mov	r0, r8
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	aa21      	add	r2, sp, #132	; 0x84
 8005d9e:	f7fe f8bf 	bl	8003f20 <__sprint_r>
 8005da2:	2800      	cmp	r0, #0
 8005da4:	f47f a806 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005da8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005daa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005dac:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	ac2e      	add	r4, sp, #184	; 0xb8
 8005db4:	e593      	b.n	80058de <_vfprintf_r+0xd2a>
 8005db6:	1cdf      	adds	r7, r3, #3
 8005db8:	db22      	blt.n	8005e00 <_vfprintf_r+0x124c>
 8005dba:	459b      	cmp	fp, r3
 8005dbc:	db20      	blt.n	8005e00 <_vfprintf_r+0x124c>
 8005dbe:	9310      	str	r3, [sp, #64]	; 0x40
 8005dc0:	2567      	movs	r5, #103	; 0x67
 8005dc2:	e686      	b.n	8005ad2 <_vfprintf_r+0xf1e>
 8005dc4:	9307      	str	r3, [sp, #28]
 8005dc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dc8:	9306      	str	r3, [sp, #24]
 8005dca:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8005dd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dd6:	f7ff b848 	b.w	8004e6a <_vfprintf_r+0x2b6>
 8005dda:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8005dde:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8005de2:	f7ff ba0e 	b.w	8005202 <_vfprintf_r+0x64e>
 8005de6:	4633      	mov	r3, r6
 8005de8:	e664      	b.n	8005ab4 <_vfprintf_r+0xf00>
 8005dea:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8005dee:	900f      	str	r0, [sp, #60]	; 0x3c
 8005df0:	970c      	str	r7, [sp, #48]	; 0x30
 8005df2:	9010      	str	r0, [sp, #64]	; 0x40
 8005df4:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8005df8:	9307      	str	r3, [sp, #28]
 8005dfa:	960b      	str	r6, [sp, #44]	; 0x2c
 8005dfc:	f7ff b832 	b.w	8004e64 <_vfprintf_r+0x2b0>
 8005e00:	3d02      	subs	r5, #2
 8005e02:	3b01      	subs	r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e08:	bfba      	itte	lt
 8005e0a:	425b      	neglt	r3, r3
 8005e0c:	222d      	movlt	r2, #45	; 0x2d
 8005e0e:	222b      	movge	r2, #43	; 0x2b
 8005e10:	2b09      	cmp	r3, #9
 8005e12:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
 8005e16:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8005e1a:	dd72      	ble.n	8005f02 <_vfprintf_r+0x134e>
 8005e1c:	f10d 0683 	add.w	r6, sp, #131	; 0x83
 8005e20:	4630      	mov	r0, r6
 8005e22:	4a13      	ldr	r2, [pc, #76]	; (8005e70 <_vfprintf_r+0x12bc>)
 8005e24:	fb82 2103 	smull	r2, r1, r2, r3
 8005e28:	17da      	asrs	r2, r3, #31
 8005e2a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8005e2e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005e32:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8005e36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e3a:	2a09      	cmp	r2, #9
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8005e42:	dcee      	bgt.n	8005e22 <_vfprintf_r+0x126e>
 8005e44:	4602      	mov	r2, r0
 8005e46:	3330      	adds	r3, #48	; 0x30
 8005e48:	b2d9      	uxtb	r1, r3
 8005e4a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8005e4e:	4296      	cmp	r6, r2
 8005e50:	f240 80a0 	bls.w	8005f94 <_vfprintf_r+0x13e0>
 8005e54:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8005e58:	4603      	mov	r3, r0
 8005e5a:	e00d      	b.n	8005e78 <_vfprintf_r+0x12c4>
 8005e5c:	080097e0 	.word	0x080097e0
 8005e60:	080097c0 	.word	0x080097c0
 8005e64:	080097dc 	.word	0x080097dc
 8005e68:	080097d8 	.word	0x080097d8
 8005e6c:	080097b8 	.word	0x080097b8
 8005e70:	66666667 	.word	0x66666667
 8005e74:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005e78:	f802 1b01 	strb.w	r1, [r2], #1
 8005e7c:	42b3      	cmp	r3, r6
 8005e7e:	d1f9      	bne.n	8005e74 <_vfprintf_r+0x12c0>
 8005e80:	ab21      	add	r3, sp, #132	; 0x84
 8005e82:	1a1b      	subs	r3, r3, r0
 8005e84:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8005e88:	4413      	add	r3, r2
 8005e8a:	aa1d      	add	r2, sp, #116	; 0x74
 8005e8c:	1a9b      	subs	r3, r3, r2
 8005e8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005e90:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e92:	2a01      	cmp	r2, #1
 8005e94:	4413      	add	r3, r2
 8005e96:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e98:	dd6d      	ble.n	8005f76 <_vfprintf_r+0x13c2>
 8005e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ea2:	9210      	str	r2, [sp, #64]	; 0x40
 8005ea4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005ea8:	e61f      	b.n	8005aea <_vfprintf_r+0xf36>
 8005eaa:	4640      	mov	r0, r8
 8005eac:	4649      	mov	r1, r9
 8005eae:	aa21      	add	r2, sp, #132	; 0x84
 8005eb0:	f7fe f836 	bl	8003f20 <__sprint_r>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	f47e af7d 	bne.w	8004db4 <_vfprintf_r+0x200>
 8005eba:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005ebc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005ebe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ec0:	ac2e      	add	r4, sp, #184	; 0xb8
 8005ec2:	e68b      	b.n	8005bdc <_vfprintf_r+0x1028>
 8005ec4:	f04f 0b06 	mov.w	fp, #6
 8005ec8:	e5ab      	b.n	8005a22 <_vfprintf_r+0xe6e>
 8005eca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	bfd8      	it	le
 8005ed0:	f1c3 0602 	rsble	r6, r3, #2
 8005ed4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ed6:	bfc8      	it	gt
 8005ed8:	2601      	movgt	r6, #1
 8005eda:	18f3      	adds	r3, r6, r3
 8005edc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ede:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005ee2:	e602      	b.n	8005aea <_vfprintf_r+0xf36>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	dd30      	ble.n	8005f4a <_vfprintf_r+0x1396>
 8005ee8:	f1bb 0f00 	cmp.w	fp, #0
 8005eec:	d125      	bne.n	8005f3a <_vfprintf_r+0x1386>
 8005eee:	9b06      	ldr	r3, [sp, #24]
 8005ef0:	07de      	lsls	r6, r3, #31
 8005ef2:	d422      	bmi.n	8005f3a <_vfprintf_r+0x1386>
 8005ef4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ef6:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ef8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005efc:	e5f5      	b.n	8005aea <_vfprintf_r+0xf36>
 8005efe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005f00:	e5d8      	b.n	8005ab4 <_vfprintf_r+0xf00>
 8005f02:	3330      	adds	r3, #48	; 0x30
 8005f04:	2230      	movs	r2, #48	; 0x30
 8005f06:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8005f0a:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8005f0e:	ab1e      	add	r3, sp, #120	; 0x78
 8005f10:	e7bb      	b.n	8005e8a <_vfprintf_r+0x12d6>
 8005f12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f14:	3301      	adds	r3, #1
 8005f16:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f1c:	e5e5      	b.n	8005aea <_vfprintf_r+0xf36>
 8005f1e:	9807      	ldr	r0, [sp, #28]
 8005f20:	4651      	mov	r1, sl
 8005f22:	2200      	movs	r2, #0
 8005f24:	2300      	movs	r3, #0
 8005f26:	f7fa fdf1 	bl	8000b0c <__aeabi_dcmpeq>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	f47f aefb 	bne.w	8005d26 <_vfprintf_r+0x1172>
 8005f30:	f1c7 0701 	rsb	r7, r7, #1
 8005f34:	971b      	str	r7, [sp, #108]	; 0x6c
 8005f36:	443e      	add	r6, r7
 8005f38:	e5a9      	b.n	8005a8e <_vfprintf_r+0xeda>
 8005f3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f3c:	f10b 0601 	add.w	r6, fp, #1
 8005f40:	4433      	add	r3, r6
 8005f42:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f48:	e5cf      	b.n	8005aea <_vfprintf_r+0xf36>
 8005f4a:	f1bb 0f00 	cmp.w	fp, #0
 8005f4e:	d11b      	bne.n	8005f88 <_vfprintf_r+0x13d4>
 8005f50:	9b06      	ldr	r3, [sp, #24]
 8005f52:	07d8      	lsls	r0, r3, #31
 8005f54:	d418      	bmi.n	8005f88 <_vfprintf_r+0x13d4>
 8005f56:	2301      	movs	r3, #1
 8005f58:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f5a:	e5c6      	b.n	8005aea <_vfprintf_r+0xf36>
 8005f5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f5e:	682e      	ldr	r6, [r5, #0]
 8005f60:	4628      	mov	r0, r5
 8005f62:	3004      	adds	r0, #4
 8005f64:	2e00      	cmp	r6, #0
 8005f66:	785d      	ldrb	r5, [r3, #1]
 8005f68:	900c      	str	r0, [sp, #48]	; 0x30
 8005f6a:	f6be ae94 	bge.w	8004c96 <_vfprintf_r+0xe2>
 8005f6e:	f04f 36ff 	mov.w	r6, #4294967295
 8005f72:	f7fe be90 	b.w	8004c96 <_vfprintf_r+0xe2>
 8005f76:	9b06      	ldr	r3, [sp, #24]
 8005f78:	f013 0301 	ands.w	r3, r3, #1
 8005f7c:	d18d      	bne.n	8005e9a <_vfprintf_r+0x12e6>
 8005f7e:	9310      	str	r3, [sp, #64]	; 0x40
 8005f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f86:	e5b0      	b.n	8005aea <_vfprintf_r+0xf36>
 8005f88:	f10b 0302 	add.w	r3, fp, #2
 8005f8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f92:	e5aa      	b.n	8005aea <_vfprintf_r+0xf36>
 8005f94:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8005f98:	e777      	b.n	8005e8a <_vfprintf_r+0x12d6>
 8005f9a:	bf00      	nop

08005f9c <__sbprintf>:
 8005f9c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8005fa6:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8005faa:	69e7      	ldr	r7, [r4, #28]
 8005fac:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8005fae:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 8005fb2:	9119      	str	r1, [sp, #100]	; 0x64
 8005fb4:	ad1a      	add	r5, sp, #104	; 0x68
 8005fb6:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8005fba:	f02e 0e02 	bic.w	lr, lr, #2
 8005fbe:	f04f 0c00 	mov.w	ip, #0
 8005fc2:	9707      	str	r7, [sp, #28]
 8005fc4:	4669      	mov	r1, sp
 8005fc6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005fc8:	9500      	str	r5, [sp, #0]
 8005fca:	9504      	str	r5, [sp, #16]
 8005fcc:	9602      	str	r6, [sp, #8]
 8005fce:	9605      	str	r6, [sp, #20]
 8005fd0:	f8ad e00c 	strh.w	lr, [sp, #12]
 8005fd4:	f8ad 900e 	strh.w	r9, [sp, #14]
 8005fd8:	9709      	str	r7, [sp, #36]	; 0x24
 8005fda:	f8cd c018 	str.w	ip, [sp, #24]
 8005fde:	4606      	mov	r6, r0
 8005fe0:	f7fe fde8 	bl	8004bb4 <_vfprintf_r>
 8005fe4:	1e05      	subs	r5, r0, #0
 8005fe6:	db07      	blt.n	8005ff8 <__sbprintf+0x5c>
 8005fe8:	4630      	mov	r0, r6
 8005fea:	4669      	mov	r1, sp
 8005fec:	f001 f90a 	bl	8007204 <_fflush_r>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	bf18      	it	ne
 8005ff4:	f04f 35ff 	movne.w	r5, #4294967295
 8005ff8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005ffc:	065b      	lsls	r3, r3, #25
 8005ffe:	d503      	bpl.n	8006008 <__sbprintf+0x6c>
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006006:	81a3      	strh	r3, [r4, #12]
 8006008:	4628      	mov	r0, r5
 800600a:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 800600e:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8006012:	bf00      	nop

08006014 <__swsetup_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	4b2f      	ldr	r3, [pc, #188]	; (80060d4 <__swsetup_r+0xc0>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4605      	mov	r5, r0
 800601c:	460c      	mov	r4, r1
 800601e:	b113      	cbz	r3, 8006026 <__swsetup_r+0x12>
 8006020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006022:	2a00      	cmp	r2, #0
 8006024:	d036      	beq.n	8006094 <__swsetup_r+0x80>
 8006026:	89a2      	ldrh	r2, [r4, #12]
 8006028:	b293      	uxth	r3, r2
 800602a:	0718      	lsls	r0, r3, #28
 800602c:	d50c      	bpl.n	8006048 <__swsetup_r+0x34>
 800602e:	6920      	ldr	r0, [r4, #16]
 8006030:	b1a8      	cbz	r0, 800605e <__swsetup_r+0x4a>
 8006032:	f013 0201 	ands.w	r2, r3, #1
 8006036:	d01e      	beq.n	8006076 <__swsetup_r+0x62>
 8006038:	6963      	ldr	r3, [r4, #20]
 800603a:	2200      	movs	r2, #0
 800603c:	425b      	negs	r3, r3
 800603e:	61a3      	str	r3, [r4, #24]
 8006040:	60a2      	str	r2, [r4, #8]
 8006042:	b1f0      	cbz	r0, 8006082 <__swsetup_r+0x6e>
 8006044:	2000      	movs	r0, #0
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	06d9      	lsls	r1, r3, #27
 800604a:	d53b      	bpl.n	80060c4 <__swsetup_r+0xb0>
 800604c:	0758      	lsls	r0, r3, #29
 800604e:	d425      	bmi.n	800609c <__swsetup_r+0x88>
 8006050:	6920      	ldr	r0, [r4, #16]
 8006052:	f042 0308 	orr.w	r3, r2, #8
 8006056:	81a3      	strh	r3, [r4, #12]
 8006058:	b29b      	uxth	r3, r3
 800605a:	2800      	cmp	r0, #0
 800605c:	d1e9      	bne.n	8006032 <__swsetup_r+0x1e>
 800605e:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8006062:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006066:	d0e4      	beq.n	8006032 <__swsetup_r+0x1e>
 8006068:	4628      	mov	r0, r5
 800606a:	4621      	mov	r1, r4
 800606c:	f001 fcb4 	bl	80079d8 <__smakebuf_r>
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	6920      	ldr	r0, [r4, #16]
 8006074:	e7dd      	b.n	8006032 <__swsetup_r+0x1e>
 8006076:	0799      	lsls	r1, r3, #30
 8006078:	bf58      	it	pl
 800607a:	6962      	ldrpl	r2, [r4, #20]
 800607c:	60a2      	str	r2, [r4, #8]
 800607e:	2800      	cmp	r0, #0
 8006080:	d1e0      	bne.n	8006044 <__swsetup_r+0x30>
 8006082:	89a3      	ldrh	r3, [r4, #12]
 8006084:	061a      	lsls	r2, r3, #24
 8006086:	d5de      	bpl.n	8006046 <__swsetup_r+0x32>
 8006088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800608c:	81a3      	strh	r3, [r4, #12]
 800608e:	f04f 30ff 	mov.w	r0, #4294967295
 8006092:	bd38      	pop	{r3, r4, r5, pc}
 8006094:	4618      	mov	r0, r3
 8006096:	f001 f949 	bl	800732c <__sinit>
 800609a:	e7c4      	b.n	8006026 <__swsetup_r+0x12>
 800609c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800609e:	b149      	cbz	r1, 80060b4 <__swsetup_r+0xa0>
 80060a0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80060a4:	4299      	cmp	r1, r3
 80060a6:	d003      	beq.n	80060b0 <__swsetup_r+0x9c>
 80060a8:	4628      	mov	r0, r5
 80060aa:	f001 f9f9 	bl	80074a0 <_free_r>
 80060ae:	89a2      	ldrh	r2, [r4, #12]
 80060b0:	2300      	movs	r3, #0
 80060b2:	6323      	str	r3, [r4, #48]	; 0x30
 80060b4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80060b8:	2300      	movs	r3, #0
 80060ba:	6920      	ldr	r0, [r4, #16]
 80060bc:	6063      	str	r3, [r4, #4]
 80060be:	b292      	uxth	r2, r2
 80060c0:	6020      	str	r0, [r4, #0]
 80060c2:	e7c6      	b.n	8006052 <__swsetup_r+0x3e>
 80060c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060c8:	2309      	movs	r3, #9
 80060ca:	602b      	str	r3, [r5, #0]
 80060cc:	f04f 30ff 	mov.w	r0, #4294967295
 80060d0:	81a2      	strh	r2, [r4, #12]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	200004b8 	.word	0x200004b8

080060d8 <abort>:
 80060d8:	b508      	push	{r3, lr}
 80060da:	2006      	movs	r0, #6
 80060dc:	f002 fdce 	bl	8008c7c <raise>
 80060e0:	2001      	movs	r0, #1
 80060e2:	f7fb fc85 	bl	80019f0 <_exit>
 80060e6:	bf00      	nop

080060e8 <quorem>:
 80060e8:	6902      	ldr	r2, [r0, #16]
 80060ea:	690b      	ldr	r3, [r1, #16]
 80060ec:	4293      	cmp	r3, r2
 80060ee:	f300 808f 	bgt.w	8006210 <quorem+0x128>
 80060f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80060fa:	f101 0714 	add.w	r7, r1, #20
 80060fe:	f100 0b14 	add.w	fp, r0, #20
 8006102:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8006106:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800610a:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800610e:	b083      	sub	sp, #12
 8006110:	3201      	adds	r2, #1
 8006112:	fbb3 f9f2 	udiv	r9, r3, r2
 8006116:	eb0b 0304 	add.w	r3, fp, r4
 800611a:	9400      	str	r4, [sp, #0]
 800611c:	eb07 0a04 	add.w	sl, r7, r4
 8006120:	9301      	str	r3, [sp, #4]
 8006122:	f1b9 0f00 	cmp.w	r9, #0
 8006126:	d03b      	beq.n	80061a0 <quorem+0xb8>
 8006128:	2600      	movs	r6, #0
 800612a:	4632      	mov	r2, r6
 800612c:	46bc      	mov	ip, r7
 800612e:	46de      	mov	lr, fp
 8006130:	4634      	mov	r4, r6
 8006132:	f85c 6b04 	ldr.w	r6, [ip], #4
 8006136:	f8de 5000 	ldr.w	r5, [lr]
 800613a:	b2b3      	uxth	r3, r6
 800613c:	0c36      	lsrs	r6, r6, #16
 800613e:	fb03 4409 	mla	r4, r3, r9, r4
 8006142:	fb06 f609 	mul.w	r6, r6, r9
 8006146:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 800614a:	b2a3      	uxth	r3, r4
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	b2b4      	uxth	r4, r6
 8006150:	fa13 f385 	uxtah	r3, r3, r5
 8006154:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 8006158:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800615c:	b29b      	uxth	r3, r3
 800615e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006162:	45e2      	cmp	sl, ip
 8006164:	ea4f 4224 	mov.w	r2, r4, asr #16
 8006168:	f84e 3b04 	str.w	r3, [lr], #4
 800616c:	ea4f 4416 	mov.w	r4, r6, lsr #16
 8006170:	d2df      	bcs.n	8006132 <quorem+0x4a>
 8006172:	9b00      	ldr	r3, [sp, #0]
 8006174:	f85b 3003 	ldr.w	r3, [fp, r3]
 8006178:	b993      	cbnz	r3, 80061a0 <quorem+0xb8>
 800617a:	9c01      	ldr	r4, [sp, #4]
 800617c:	1f23      	subs	r3, r4, #4
 800617e:	459b      	cmp	fp, r3
 8006180:	d20c      	bcs.n	800619c <quorem+0xb4>
 8006182:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006186:	b94b      	cbnz	r3, 800619c <quorem+0xb4>
 8006188:	f1a4 0308 	sub.w	r3, r4, #8
 800618c:	e002      	b.n	8006194 <quorem+0xac>
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	3b04      	subs	r3, #4
 8006192:	b91a      	cbnz	r2, 800619c <quorem+0xb4>
 8006194:	459b      	cmp	fp, r3
 8006196:	f108 38ff 	add.w	r8, r8, #4294967295
 800619a:	d3f8      	bcc.n	800618e <quorem+0xa6>
 800619c:	f8c0 8010 	str.w	r8, [r0, #16]
 80061a0:	4604      	mov	r4, r0
 80061a2:	f002 fa21 	bl	80085e8 <__mcmp>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	db2e      	blt.n	8006208 <quorem+0x120>
 80061aa:	f109 0901 	add.w	r9, r9, #1
 80061ae:	465d      	mov	r5, fp
 80061b0:	2300      	movs	r3, #0
 80061b2:	f857 1b04 	ldr.w	r1, [r7], #4
 80061b6:	6828      	ldr	r0, [r5, #0]
 80061b8:	b28a      	uxth	r2, r1
 80061ba:	1a9a      	subs	r2, r3, r2
 80061bc:	0c09      	lsrs	r1, r1, #16
 80061be:	fa12 f280 	uxtah	r2, r2, r0
 80061c2:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 80061c6:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80061ca:	b291      	uxth	r1, r2
 80061cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80061d0:	45ba      	cmp	sl, r7
 80061d2:	f845 1b04 	str.w	r1, [r5], #4
 80061d6:	ea4f 4323 	mov.w	r3, r3, asr #16
 80061da:	d2ea      	bcs.n	80061b2 <quorem+0xca>
 80061dc:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80061e0:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80061e4:	b982      	cbnz	r2, 8006208 <quorem+0x120>
 80061e6:	1f1a      	subs	r2, r3, #4
 80061e8:	4593      	cmp	fp, r2
 80061ea:	d20b      	bcs.n	8006204 <quorem+0x11c>
 80061ec:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80061f0:	b942      	cbnz	r2, 8006204 <quorem+0x11c>
 80061f2:	3b08      	subs	r3, #8
 80061f4:	e002      	b.n	80061fc <quorem+0x114>
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	3b04      	subs	r3, #4
 80061fa:	b91a      	cbnz	r2, 8006204 <quorem+0x11c>
 80061fc:	459b      	cmp	fp, r3
 80061fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8006202:	d3f8      	bcc.n	80061f6 <quorem+0x10e>
 8006204:	f8c4 8010 	str.w	r8, [r4, #16]
 8006208:	4648      	mov	r0, r9
 800620a:	b003      	add	sp, #12
 800620c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006210:	2000      	movs	r0, #0
 8006212:	4770      	bx	lr
 8006214:	0000      	movs	r0, r0
	...

08006218 <_dtoa_r>:
 8006218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800621e:	b097      	sub	sp, #92	; 0x5c
 8006220:	4604      	mov	r4, r0
 8006222:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8006224:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006228:	b141      	cbz	r1, 800623c <_dtoa_r+0x24>
 800622a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800622c:	604a      	str	r2, [r1, #4]
 800622e:	2301      	movs	r3, #1
 8006230:	4093      	lsls	r3, r2
 8006232:	608b      	str	r3, [r1, #8]
 8006234:	f001 fff4 	bl	8008220 <_Bfree>
 8006238:	2300      	movs	r3, #0
 800623a:	6423      	str	r3, [r4, #64]	; 0x40
 800623c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	4699      	mov	r9, r3
 8006244:	db36      	blt.n	80062b4 <_dtoa_r+0x9c>
 8006246:	2300      	movs	r3, #0
 8006248:	602b      	str	r3, [r5, #0]
 800624a:	4ba5      	ldr	r3, [pc, #660]	; (80064e0 <_dtoa_r+0x2c8>)
 800624c:	461a      	mov	r2, r3
 800624e:	ea09 0303 	and.w	r3, r9, r3
 8006252:	4293      	cmp	r3, r2
 8006254:	d017      	beq.n	8006286 <_dtoa_r+0x6e>
 8006256:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800625a:	2200      	movs	r2, #0
 800625c:	4630      	mov	r0, r6
 800625e:	4639      	mov	r1, r7
 8006260:	2300      	movs	r3, #0
 8006262:	f7fa fc53 	bl	8000b0c <__aeabi_dcmpeq>
 8006266:	4680      	mov	r8, r0
 8006268:	2800      	cmp	r0, #0
 800626a:	d02b      	beq.n	80062c4 <_dtoa_r+0xac>
 800626c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800626e:	2301      	movs	r3, #1
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 80cb 	beq.w	8006410 <_dtoa_r+0x1f8>
 800627a:	489a      	ldr	r0, [pc, #616]	; (80064e4 <_dtoa_r+0x2cc>)
 800627c:	6018      	str	r0, [r3, #0]
 800627e:	3801      	subs	r0, #1
 8006280:	b017      	add	sp, #92	; 0x5c
 8006282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006286:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006288:	f242 730f 	movw	r3, #9999	; 0x270f
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	9b02      	ldr	r3, [sp, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 80a6 	beq.w	80063e2 <_dtoa_r+0x1ca>
 8006296:	4894      	ldr	r0, [pc, #592]	; (80064e8 <_dtoa_r+0x2d0>)
 8006298:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f0      	beq.n	8006280 <_dtoa_r+0x68>
 800629e:	78c3      	ldrb	r3, [r0, #3]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80b7 	beq.w	8006414 <_dtoa_r+0x1fc>
 80062a6:	f100 0308 	add.w	r3, r0, #8
 80062aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	b017      	add	sp, #92	; 0x5c
 80062b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b4:	9a03      	ldr	r2, [sp, #12]
 80062b6:	2301      	movs	r3, #1
 80062b8:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 80062bc:	602b      	str	r3, [r5, #0]
 80062be:	f8cd 900c 	str.w	r9, [sp, #12]
 80062c2:	e7c2      	b.n	800624a <_dtoa_r+0x32>
 80062c4:	aa15      	add	r2, sp, #84	; 0x54
 80062c6:	ab14      	add	r3, sp, #80	; 0x50
 80062c8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80062cc:	4620      	mov	r0, r4
 80062ce:	4632      	mov	r2, r6
 80062d0:	463b      	mov	r3, r7
 80062d2:	f002 fa17 	bl	8008704 <__d2b>
 80062d6:	ea5f 5519 	movs.w	r5, r9, lsr #20
 80062da:	4683      	mov	fp, r0
 80062dc:	f040 808a 	bne.w	80063f4 <_dtoa_r+0x1dc>
 80062e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80062e4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80062e6:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80062ea:	4445      	add	r5, r8
 80062ec:	429d      	cmp	r5, r3
 80062ee:	f2c0 8297 	blt.w	8006820 <_dtoa_r+0x608>
 80062f2:	4a7e      	ldr	r2, [pc, #504]	; (80064ec <_dtoa_r+0x2d4>)
 80062f4:	1b52      	subs	r2, r2, r5
 80062f6:	fa09 f902 	lsl.w	r9, r9, r2
 80062fa:	9a02      	ldr	r2, [sp, #8]
 80062fc:	f205 4312 	addw	r3, r5, #1042	; 0x412
 8006300:	fa22 f003 	lsr.w	r0, r2, r3
 8006304:	ea49 0000 	orr.w	r0, r9, r0
 8006308:	f7fa f922 	bl	8000550 <__aeabi_ui2d>
 800630c:	2301      	movs	r3, #1
 800630e:	3d01      	subs	r5, #1
 8006310:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006314:	930d      	str	r3, [sp, #52]	; 0x34
 8006316:	2200      	movs	r2, #0
 8006318:	4b75      	ldr	r3, [pc, #468]	; (80064f0 <_dtoa_r+0x2d8>)
 800631a:	f7f9 ffdb 	bl	80002d4 <__aeabi_dsub>
 800631e:	a36a      	add	r3, pc, #424	; (adr r3, 80064c8 <_dtoa_r+0x2b0>)
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f7fa f98a 	bl	800063c <__aeabi_dmul>
 8006328:	a369      	add	r3, pc, #420	; (adr r3, 80064d0 <_dtoa_r+0x2b8>)
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	f7f9 ffd3 	bl	80002d8 <__adddf3>
 8006332:	4606      	mov	r6, r0
 8006334:	4628      	mov	r0, r5
 8006336:	460f      	mov	r7, r1
 8006338:	f7fa f91a 	bl	8000570 <__aeabi_i2d>
 800633c:	a366      	add	r3, pc, #408	; (adr r3, 80064d8 <_dtoa_r+0x2c0>)
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	f7fa f97b 	bl	800063c <__aeabi_dmul>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4630      	mov	r0, r6
 800634c:	4639      	mov	r1, r7
 800634e:	f7f9 ffc3 	bl	80002d8 <__adddf3>
 8006352:	4606      	mov	r6, r0
 8006354:	460f      	mov	r7, r1
 8006356:	f7fa fc0b 	bl	8000b70 <__aeabi_d2iz>
 800635a:	4639      	mov	r1, r7
 800635c:	9004      	str	r0, [sp, #16]
 800635e:	2200      	movs	r2, #0
 8006360:	4630      	mov	r0, r6
 8006362:	2300      	movs	r3, #0
 8006364:	f7fa fbdc 	bl	8000b20 <__aeabi_dcmplt>
 8006368:	2800      	cmp	r0, #0
 800636a:	f040 81a6 	bne.w	80066ba <_dtoa_r+0x4a2>
 800636e:	9b04      	ldr	r3, [sp, #16]
 8006370:	2b16      	cmp	r3, #22
 8006372:	f200 819f 	bhi.w	80066b4 <_dtoa_r+0x49c>
 8006376:	9a04      	ldr	r2, [sp, #16]
 8006378:	4b5e      	ldr	r3, [pc, #376]	; (80064f4 <_dtoa_r+0x2dc>)
 800637a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800637e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006386:	f7fa fbe9 	bl	8000b5c <__aeabi_dcmpgt>
 800638a:	2800      	cmp	r0, #0
 800638c:	f000 824e 	beq.w	800682c <_dtoa_r+0x614>
 8006390:	9b04      	ldr	r3, [sp, #16]
 8006392:	3b01      	subs	r3, #1
 8006394:	9304      	str	r3, [sp, #16]
 8006396:	2300      	movs	r3, #0
 8006398:	930b      	str	r3, [sp, #44]	; 0x2c
 800639a:	ebc5 0508 	rsb	r5, r5, r8
 800639e:	f1b5 0a01 	subs.w	sl, r5, #1
 80063a2:	f100 81a1 	bmi.w	80066e8 <_dtoa_r+0x4d0>
 80063a6:	2300      	movs	r3, #0
 80063a8:	9305      	str	r3, [sp, #20]
 80063aa:	9b04      	ldr	r3, [sp, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f2c0 8192 	blt.w	80066d6 <_dtoa_r+0x4be>
 80063b2:	449a      	add	sl, r3
 80063b4:	930a      	str	r3, [sp, #40]	; 0x28
 80063b6:	2300      	movs	r3, #0
 80063b8:	9308      	str	r3, [sp, #32]
 80063ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80063bc:	2b09      	cmp	r3, #9
 80063be:	d82b      	bhi.n	8006418 <_dtoa_r+0x200>
 80063c0:	2b05      	cmp	r3, #5
 80063c2:	f340 8670 	ble.w	80070a6 <_dtoa_r+0xe8e>
 80063c6:	3b04      	subs	r3, #4
 80063c8:	9320      	str	r3, [sp, #128]	; 0x80
 80063ca:	2500      	movs	r5, #0
 80063cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80063ce:	3b02      	subs	r3, #2
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	f200 864e 	bhi.w	8007072 <_dtoa_r+0xe5a>
 80063d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80063da:	03cc      	.short	0x03cc
 80063dc:	02b203be 	.word	0x02b203be
 80063e0:	0663      	.short	0x0663
 80063e2:	4b41      	ldr	r3, [pc, #260]	; (80064e8 <_dtoa_r+0x2d0>)
 80063e4:	4a44      	ldr	r2, [pc, #272]	; (80064f8 <_dtoa_r+0x2e0>)
 80063e6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80063ea:	2800      	cmp	r0, #0
 80063ec:	bf14      	ite	ne
 80063ee:	4618      	movne	r0, r3
 80063f0:	4610      	moveq	r0, r2
 80063f2:	e751      	b.n	8006298 <_dtoa_r+0x80>
 80063f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80063f8:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80063fc:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8006400:	4630      	mov	r0, r6
 8006402:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006406:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800640a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800640e:	e782      	b.n	8006316 <_dtoa_r+0xfe>
 8006410:	483a      	ldr	r0, [pc, #232]	; (80064fc <_dtoa_r+0x2e4>)
 8006412:	e735      	b.n	8006280 <_dtoa_r+0x68>
 8006414:	1cc3      	adds	r3, r0, #3
 8006416:	e748      	b.n	80062aa <_dtoa_r+0x92>
 8006418:	2100      	movs	r1, #0
 800641a:	6461      	str	r1, [r4, #68]	; 0x44
 800641c:	4620      	mov	r0, r4
 800641e:	9120      	str	r1, [sp, #128]	; 0x80
 8006420:	f001 fed8 	bl	80081d4 <_Balloc>
 8006424:	f04f 33ff 	mov.w	r3, #4294967295
 8006428:	9306      	str	r3, [sp, #24]
 800642a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800642c:	930c      	str	r3, [sp, #48]	; 0x30
 800642e:	2301      	movs	r3, #1
 8006430:	9007      	str	r0, [sp, #28]
 8006432:	9221      	str	r2, [sp, #132]	; 0x84
 8006434:	6420      	str	r0, [r4, #64]	; 0x40
 8006436:	9309      	str	r3, [sp, #36]	; 0x24
 8006438:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800643a:	2b00      	cmp	r3, #0
 800643c:	f2c0 80d2 	blt.w	80065e4 <_dtoa_r+0x3cc>
 8006440:	9a04      	ldr	r2, [sp, #16]
 8006442:	2a0e      	cmp	r2, #14
 8006444:	f300 80ce 	bgt.w	80065e4 <_dtoa_r+0x3cc>
 8006448:	4b2a      	ldr	r3, [pc, #168]	; (80064f4 <_dtoa_r+0x2dc>)
 800644a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800644e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006452:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006454:	2b00      	cmp	r3, #0
 8006456:	f2c0 838f 	blt.w	8006b78 <_dtoa_r+0x960>
 800645a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800645e:	4642      	mov	r2, r8
 8006460:	464b      	mov	r3, r9
 8006462:	4630      	mov	r0, r6
 8006464:	4639      	mov	r1, r7
 8006466:	f7fa fa13 	bl	8000890 <__aeabi_ddiv>
 800646a:	f7fa fb81 	bl	8000b70 <__aeabi_d2iz>
 800646e:	4682      	mov	sl, r0
 8006470:	f7fa f87e 	bl	8000570 <__aeabi_i2d>
 8006474:	4642      	mov	r2, r8
 8006476:	464b      	mov	r3, r9
 8006478:	f7fa f8e0 	bl	800063c <__aeabi_dmul>
 800647c:	460b      	mov	r3, r1
 800647e:	4602      	mov	r2, r0
 8006480:	4639      	mov	r1, r7
 8006482:	4630      	mov	r0, r6
 8006484:	f7f9 ff26 	bl	80002d4 <__aeabi_dsub>
 8006488:	9d07      	ldr	r5, [sp, #28]
 800648a:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 800648e:	702b      	strb	r3, [r5, #0]
 8006490:	9b06      	ldr	r3, [sp, #24]
 8006492:	2b01      	cmp	r3, #1
 8006494:	4606      	mov	r6, r0
 8006496:	460f      	mov	r7, r1
 8006498:	f105 0501 	add.w	r5, r5, #1
 800649c:	d062      	beq.n	8006564 <_dtoa_r+0x34c>
 800649e:	2200      	movs	r2, #0
 80064a0:	4b17      	ldr	r3, [pc, #92]	; (8006500 <_dtoa_r+0x2e8>)
 80064a2:	f7fa f8cb 	bl	800063c <__aeabi_dmul>
 80064a6:	2200      	movs	r2, #0
 80064a8:	2300      	movs	r3, #0
 80064aa:	4606      	mov	r6, r0
 80064ac:	460f      	mov	r7, r1
 80064ae:	f7fa fb2d 	bl	8000b0c <__aeabi_dcmpeq>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	f040 8083 	bne.w	80065be <_dtoa_r+0x3a6>
 80064b8:	f8cd b008 	str.w	fp, [sp, #8]
 80064bc:	9405      	str	r4, [sp, #20]
 80064be:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80064c2:	9c06      	ldr	r4, [sp, #24]
 80064c4:	e029      	b.n	800651a <_dtoa_r+0x302>
 80064c6:	bf00      	nop
 80064c8:	636f4361 	.word	0x636f4361
 80064cc:	3fd287a7 	.word	0x3fd287a7
 80064d0:	8b60c8b3 	.word	0x8b60c8b3
 80064d4:	3fc68a28 	.word	0x3fc68a28
 80064d8:	509f79fb 	.word	0x509f79fb
 80064dc:	3fd34413 	.word	0x3fd34413
 80064e0:	7ff00000 	.word	0x7ff00000
 80064e4:	080097e1 	.word	0x080097e1
 80064e8:	08009800 	.word	0x08009800
 80064ec:	fffffc0e 	.word	0xfffffc0e
 80064f0:	3ff80000 	.word	0x3ff80000
 80064f4:	08009810 	.word	0x08009810
 80064f8:	080097f4 	.word	0x080097f4
 80064fc:	080097e0 	.word	0x080097e0
 8006500:	40240000 	.word	0x40240000
 8006504:	f7fa f89a 	bl	800063c <__aeabi_dmul>
 8006508:	2200      	movs	r2, #0
 800650a:	2300      	movs	r3, #0
 800650c:	4606      	mov	r6, r0
 800650e:	460f      	mov	r7, r1
 8006510:	f7fa fafc 	bl	8000b0c <__aeabi_dcmpeq>
 8006514:	2800      	cmp	r0, #0
 8006516:	f040 83de 	bne.w	8006cd6 <_dtoa_r+0xabe>
 800651a:	4642      	mov	r2, r8
 800651c:	464b      	mov	r3, r9
 800651e:	4630      	mov	r0, r6
 8006520:	4639      	mov	r1, r7
 8006522:	f7fa f9b5 	bl	8000890 <__aeabi_ddiv>
 8006526:	f7fa fb23 	bl	8000b70 <__aeabi_d2iz>
 800652a:	4682      	mov	sl, r0
 800652c:	f7fa f820 	bl	8000570 <__aeabi_i2d>
 8006530:	4642      	mov	r2, r8
 8006532:	464b      	mov	r3, r9
 8006534:	f7fa f882 	bl	800063c <__aeabi_dmul>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4630      	mov	r0, r6
 800653e:	4639      	mov	r1, r7
 8006540:	f7f9 fec8 	bl	80002d4 <__aeabi_dsub>
 8006544:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8006548:	f805 eb01 	strb.w	lr, [r5], #1
 800654c:	ebcb 0e05 	rsb	lr, fp, r5
 8006550:	4574      	cmp	r4, lr
 8006552:	4606      	mov	r6, r0
 8006554:	460f      	mov	r7, r1
 8006556:	f04f 0200 	mov.w	r2, #0
 800655a:	4bb5      	ldr	r3, [pc, #724]	; (8006830 <_dtoa_r+0x618>)
 800655c:	d1d2      	bne.n	8006504 <_dtoa_r+0x2ec>
 800655e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006562:	9c05      	ldr	r4, [sp, #20]
 8006564:	4632      	mov	r2, r6
 8006566:	463b      	mov	r3, r7
 8006568:	4630      	mov	r0, r6
 800656a:	4639      	mov	r1, r7
 800656c:	f7f9 feb4 	bl	80002d8 <__adddf3>
 8006570:	4606      	mov	r6, r0
 8006572:	460f      	mov	r7, r1
 8006574:	4640      	mov	r0, r8
 8006576:	4649      	mov	r1, r9
 8006578:	4632      	mov	r2, r6
 800657a:	463b      	mov	r3, r7
 800657c:	f7fa fad0 	bl	8000b20 <__aeabi_dcmplt>
 8006580:	b948      	cbnz	r0, 8006596 <_dtoa_r+0x37e>
 8006582:	4640      	mov	r0, r8
 8006584:	4649      	mov	r1, r9
 8006586:	4632      	mov	r2, r6
 8006588:	463b      	mov	r3, r7
 800658a:	f7fa fabf 	bl	8000b0c <__aeabi_dcmpeq>
 800658e:	b1b0      	cbz	r0, 80065be <_dtoa_r+0x3a6>
 8006590:	f01a 0f01 	tst.w	sl, #1
 8006594:	d013      	beq.n	80065be <_dtoa_r+0x3a6>
 8006596:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 800659a:	9907      	ldr	r1, [sp, #28]
 800659c:	1e6b      	subs	r3, r5, #1
 800659e:	e004      	b.n	80065aa <_dtoa_r+0x392>
 80065a0:	428b      	cmp	r3, r1
 80065a2:	f000 8440 	beq.w	8006e26 <_dtoa_r+0xc0e>
 80065a6:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 80065aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80065ae:	f103 0501 	add.w	r5, r3, #1
 80065b2:	461a      	mov	r2, r3
 80065b4:	d0f4      	beq.n	80065a0 <_dtoa_r+0x388>
 80065b6:	f108 0301 	add.w	r3, r8, #1
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	7013      	strb	r3, [r2, #0]
 80065be:	4620      	mov	r0, r4
 80065c0:	4659      	mov	r1, fp
 80065c2:	f001 fe2d 	bl	8008220 <_Bfree>
 80065c6:	2200      	movs	r2, #0
 80065c8:	9b04      	ldr	r3, [sp, #16]
 80065ca:	702a      	strb	r2, [r5, #0]
 80065cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80065ce:	3301      	adds	r3, #1
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8345 	beq.w	8006c64 <_dtoa_r+0xa4c>
 80065da:	9807      	ldr	r0, [sp, #28]
 80065dc:	601d      	str	r5, [r3, #0]
 80065de:	b017      	add	sp, #92	; 0x5c
 80065e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065e6:	2a00      	cmp	r2, #0
 80065e8:	f000 8084 	beq.w	80066f4 <_dtoa_r+0x4dc>
 80065ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80065ee:	2a01      	cmp	r2, #1
 80065f0:	f340 8304 	ble.w	8006bfc <_dtoa_r+0x9e4>
 80065f4:	9b06      	ldr	r3, [sp, #24]
 80065f6:	1e5f      	subs	r7, r3, #1
 80065f8:	9b08      	ldr	r3, [sp, #32]
 80065fa:	42bb      	cmp	r3, r7
 80065fc:	f2c0 83a9 	blt.w	8006d52 <_dtoa_r+0xb3a>
 8006600:	1bdf      	subs	r7, r3, r7
 8006602:	9b06      	ldr	r3, [sp, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f2c0 849c 	blt.w	8006f42 <_dtoa_r+0xd2a>
 800660a:	9d05      	ldr	r5, [sp, #20]
 800660c:	9b06      	ldr	r3, [sp, #24]
 800660e:	9a05      	ldr	r2, [sp, #20]
 8006610:	4620      	mov	r0, r4
 8006612:	441a      	add	r2, r3
 8006614:	2101      	movs	r1, #1
 8006616:	9205      	str	r2, [sp, #20]
 8006618:	449a      	add	sl, r3
 800661a:	f001 fe9b 	bl	8008354 <__i2b>
 800661e:	4606      	mov	r6, r0
 8006620:	b165      	cbz	r5, 800663c <_dtoa_r+0x424>
 8006622:	f1ba 0f00 	cmp.w	sl, #0
 8006626:	dd09      	ble.n	800663c <_dtoa_r+0x424>
 8006628:	45aa      	cmp	sl, r5
 800662a:	9a05      	ldr	r2, [sp, #20]
 800662c:	4653      	mov	r3, sl
 800662e:	bfa8      	it	ge
 8006630:	462b      	movge	r3, r5
 8006632:	1ad2      	subs	r2, r2, r3
 8006634:	9205      	str	r2, [sp, #20]
 8006636:	1aed      	subs	r5, r5, r3
 8006638:	ebc3 0a0a 	rsb	sl, r3, sl
 800663c:	9b08      	ldr	r3, [sp, #32]
 800663e:	2b00      	cmp	r3, #0
 8006640:	dd1a      	ble.n	8006678 <_dtoa_r+0x460>
 8006642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 837d 	beq.w	8006d44 <_dtoa_r+0xb2c>
 800664a:	2f00      	cmp	r7, #0
 800664c:	dd10      	ble.n	8006670 <_dtoa_r+0x458>
 800664e:	4631      	mov	r1, r6
 8006650:	463a      	mov	r2, r7
 8006652:	4620      	mov	r0, r4
 8006654:	f001 ff22 	bl	800849c <__pow5mult>
 8006658:	4606      	mov	r6, r0
 800665a:	465a      	mov	r2, fp
 800665c:	4631      	mov	r1, r6
 800665e:	4620      	mov	r0, r4
 8006660:	f001 fe82 	bl	8008368 <__multiply>
 8006664:	4659      	mov	r1, fp
 8006666:	4680      	mov	r8, r0
 8006668:	4620      	mov	r0, r4
 800666a:	f001 fdd9 	bl	8008220 <_Bfree>
 800666e:	46c3      	mov	fp, r8
 8006670:	9b08      	ldr	r3, [sp, #32]
 8006672:	1bda      	subs	r2, r3, r7
 8006674:	f040 82a2 	bne.w	8006bbc <_dtoa_r+0x9a4>
 8006678:	4620      	mov	r0, r4
 800667a:	2101      	movs	r1, #1
 800667c:	f001 fe6a 	bl	8008354 <__i2b>
 8006680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006682:	2b00      	cmp	r3, #0
 8006684:	4680      	mov	r8, r0
 8006686:	dd39      	ble.n	80066fc <_dtoa_r+0x4e4>
 8006688:	4601      	mov	r1, r0
 800668a:	461a      	mov	r2, r3
 800668c:	4620      	mov	r0, r4
 800668e:	f001 ff05 	bl	800849c <__pow5mult>
 8006692:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006694:	2b01      	cmp	r3, #1
 8006696:	4680      	mov	r8, r0
 8006698:	f340 8296 	ble.w	8006bc8 <_dtoa_r+0x9b0>
 800669c:	f04f 0900 	mov.w	r9, #0
 80066a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80066a4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80066a8:	6918      	ldr	r0, [r3, #16]
 80066aa:	f001 fe05 	bl	80082b8 <__hi0bits>
 80066ae:	f1c0 0020 	rsb	r0, r0, #32
 80066b2:	e02d      	b.n	8006710 <_dtoa_r+0x4f8>
 80066b4:	2301      	movs	r3, #1
 80066b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80066b8:	e66f      	b.n	800639a <_dtoa_r+0x182>
 80066ba:	9804      	ldr	r0, [sp, #16]
 80066bc:	f7f9 ff58 	bl	8000570 <__aeabi_i2d>
 80066c0:	4632      	mov	r2, r6
 80066c2:	463b      	mov	r3, r7
 80066c4:	f7fa fa22 	bl	8000b0c <__aeabi_dcmpeq>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	f47f ae50 	bne.w	800636e <_dtoa_r+0x156>
 80066ce:	9b04      	ldr	r3, [sp, #16]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	9304      	str	r3, [sp, #16]
 80066d4:	e64b      	b.n	800636e <_dtoa_r+0x156>
 80066d6:	9a05      	ldr	r2, [sp, #20]
 80066d8:	9b04      	ldr	r3, [sp, #16]
 80066da:	1ad2      	subs	r2, r2, r3
 80066dc:	425b      	negs	r3, r3
 80066de:	9308      	str	r3, [sp, #32]
 80066e0:	2300      	movs	r3, #0
 80066e2:	9205      	str	r2, [sp, #20]
 80066e4:	930a      	str	r3, [sp, #40]	; 0x28
 80066e6:	e668      	b.n	80063ba <_dtoa_r+0x1a2>
 80066e8:	f1ca 0300 	rsb	r3, sl, #0
 80066ec:	9305      	str	r3, [sp, #20]
 80066ee:	f04f 0a00 	mov.w	sl, #0
 80066f2:	e65a      	b.n	80063aa <_dtoa_r+0x192>
 80066f4:	9f08      	ldr	r7, [sp, #32]
 80066f6:	9d05      	ldr	r5, [sp, #20]
 80066f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80066fa:	e791      	b.n	8006620 <_dtoa_r+0x408>
 80066fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80066fe:	2b01      	cmp	r3, #1
 8006700:	f340 82b3 	ble.w	8006c6a <_dtoa_r+0xa52>
 8006704:	f04f 0900 	mov.w	r9, #0
 8006708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1c8      	bne.n	80066a0 <_dtoa_r+0x488>
 800670e:	2001      	movs	r0, #1
 8006710:	4450      	add	r0, sl
 8006712:	f010 001f 	ands.w	r0, r0, #31
 8006716:	f000 8081 	beq.w	800681c <_dtoa_r+0x604>
 800671a:	f1c0 0320 	rsb	r3, r0, #32
 800671e:	2b04      	cmp	r3, #4
 8006720:	f340 84b8 	ble.w	8007094 <_dtoa_r+0xe7c>
 8006724:	f1c0 001c 	rsb	r0, r0, #28
 8006728:	9b05      	ldr	r3, [sp, #20]
 800672a:	4403      	add	r3, r0
 800672c:	9305      	str	r3, [sp, #20]
 800672e:	4405      	add	r5, r0
 8006730:	4482      	add	sl, r0
 8006732:	9b05      	ldr	r3, [sp, #20]
 8006734:	2b00      	cmp	r3, #0
 8006736:	dd05      	ble.n	8006744 <_dtoa_r+0x52c>
 8006738:	4659      	mov	r1, fp
 800673a:	461a      	mov	r2, r3
 800673c:	4620      	mov	r0, r4
 800673e:	f001 fefd 	bl	800853c <__lshift>
 8006742:	4683      	mov	fp, r0
 8006744:	f1ba 0f00 	cmp.w	sl, #0
 8006748:	dd05      	ble.n	8006756 <_dtoa_r+0x53e>
 800674a:	4641      	mov	r1, r8
 800674c:	4652      	mov	r2, sl
 800674e:	4620      	mov	r0, r4
 8006750:	f001 fef4 	bl	800853c <__lshift>
 8006754:	4680      	mov	r8, r0
 8006756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006758:	2b00      	cmp	r3, #0
 800675a:	f040 8268 	bne.w	8006c2e <_dtoa_r+0xa16>
 800675e:	9b06      	ldr	r3, [sp, #24]
 8006760:	2b00      	cmp	r3, #0
 8006762:	f340 8295 	ble.w	8006c90 <_dtoa_r+0xa78>
 8006766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006768:	2b00      	cmp	r3, #0
 800676a:	d171      	bne.n	8006850 <_dtoa_r+0x638>
 800676c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8006770:	9f06      	ldr	r7, [sp, #24]
 8006772:	464d      	mov	r5, r9
 8006774:	e002      	b.n	800677c <_dtoa_r+0x564>
 8006776:	f001 fd5d 	bl	8008234 <__multadd>
 800677a:	4683      	mov	fp, r0
 800677c:	4641      	mov	r1, r8
 800677e:	4658      	mov	r0, fp
 8006780:	f7ff fcb2 	bl	80060e8 <quorem>
 8006784:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8006788:	f805 cb01 	strb.w	ip, [r5], #1
 800678c:	ebc9 0305 	rsb	r3, r9, r5
 8006790:	42bb      	cmp	r3, r7
 8006792:	4620      	mov	r0, r4
 8006794:	4659      	mov	r1, fp
 8006796:	f04f 020a 	mov.w	r2, #10
 800679a:	f04f 0300 	mov.w	r3, #0
 800679e:	dbea      	blt.n	8006776 <_dtoa_r+0x55e>
 80067a0:	9b07      	ldr	r3, [sp, #28]
 80067a2:	9a06      	ldr	r2, [sp, #24]
 80067a4:	2a01      	cmp	r2, #1
 80067a6:	bfac      	ite	ge
 80067a8:	189b      	addge	r3, r3, r2
 80067aa:	3301      	addlt	r3, #1
 80067ac:	461d      	mov	r5, r3
 80067ae:	f04f 0a00 	mov.w	sl, #0
 80067b2:	4659      	mov	r1, fp
 80067b4:	2201      	movs	r2, #1
 80067b6:	4620      	mov	r0, r4
 80067b8:	f8cd c008 	str.w	ip, [sp, #8]
 80067bc:	f001 febe 	bl	800853c <__lshift>
 80067c0:	4641      	mov	r1, r8
 80067c2:	4683      	mov	fp, r0
 80067c4:	f001 ff10 	bl	80085e8 <__mcmp>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	f8dd c008 	ldr.w	ip, [sp, #8]
 80067ce:	f340 82f6 	ble.w	8006dbe <_dtoa_r+0xba6>
 80067d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067d6:	9907      	ldr	r1, [sp, #28]
 80067d8:	1e6b      	subs	r3, r5, #1
 80067da:	e004      	b.n	80067e6 <_dtoa_r+0x5ce>
 80067dc:	428b      	cmp	r3, r1
 80067de:	f000 8273 	beq.w	8006cc8 <_dtoa_r+0xab0>
 80067e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067e6:	2a39      	cmp	r2, #57	; 0x39
 80067e8:	f103 0501 	add.w	r5, r3, #1
 80067ec:	d0f6      	beq.n	80067dc <_dtoa_r+0x5c4>
 80067ee:	3201      	adds	r2, #1
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	4641      	mov	r1, r8
 80067f4:	4620      	mov	r0, r4
 80067f6:	f001 fd13 	bl	8008220 <_Bfree>
 80067fa:	2e00      	cmp	r6, #0
 80067fc:	f43f aedf 	beq.w	80065be <_dtoa_r+0x3a6>
 8006800:	f1ba 0f00 	cmp.w	sl, #0
 8006804:	d005      	beq.n	8006812 <_dtoa_r+0x5fa>
 8006806:	45b2      	cmp	sl, r6
 8006808:	d003      	beq.n	8006812 <_dtoa_r+0x5fa>
 800680a:	4651      	mov	r1, sl
 800680c:	4620      	mov	r0, r4
 800680e:	f001 fd07 	bl	8008220 <_Bfree>
 8006812:	4631      	mov	r1, r6
 8006814:	4620      	mov	r0, r4
 8006816:	f001 fd03 	bl	8008220 <_Bfree>
 800681a:	e6d0      	b.n	80065be <_dtoa_r+0x3a6>
 800681c:	201c      	movs	r0, #28
 800681e:	e783      	b.n	8006728 <_dtoa_r+0x510>
 8006820:	4b04      	ldr	r3, [pc, #16]	; (8006834 <_dtoa_r+0x61c>)
 8006822:	9a02      	ldr	r2, [sp, #8]
 8006824:	1b5b      	subs	r3, r3, r5
 8006826:	fa02 f003 	lsl.w	r0, r2, r3
 800682a:	e56d      	b.n	8006308 <_dtoa_r+0xf0>
 800682c:	900b      	str	r0, [sp, #44]	; 0x2c
 800682e:	e5b4      	b.n	800639a <_dtoa_r+0x182>
 8006830:	40240000 	.word	0x40240000
 8006834:	fffffbee 	.word	0xfffffbee
 8006838:	4631      	mov	r1, r6
 800683a:	2300      	movs	r3, #0
 800683c:	4620      	mov	r0, r4
 800683e:	220a      	movs	r2, #10
 8006840:	f001 fcf8 	bl	8008234 <__multadd>
 8006844:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006846:	2b00      	cmp	r3, #0
 8006848:	4606      	mov	r6, r0
 800684a:	f340 840c 	ble.w	8007066 <_dtoa_r+0xe4e>
 800684e:	9306      	str	r3, [sp, #24]
 8006850:	2d00      	cmp	r5, #0
 8006852:	dd05      	ble.n	8006860 <_dtoa_r+0x648>
 8006854:	4631      	mov	r1, r6
 8006856:	462a      	mov	r2, r5
 8006858:	4620      	mov	r0, r4
 800685a:	f001 fe6f 	bl	800853c <__lshift>
 800685e:	4606      	mov	r6, r0
 8006860:	f1b9 0f00 	cmp.w	r9, #0
 8006864:	f040 82e9 	bne.w	8006e3a <_dtoa_r+0xc22>
 8006868:	46b1      	mov	r9, r6
 800686a:	9b06      	ldr	r3, [sp, #24]
 800686c:	9a07      	ldr	r2, [sp, #28]
 800686e:	3b01      	subs	r3, #1
 8006870:	18d3      	adds	r3, r2, r3
 8006872:	9308      	str	r3, [sp, #32]
 8006874:	9b02      	ldr	r3, [sp, #8]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	9309      	str	r3, [sp, #36]	; 0x24
 800687c:	4617      	mov	r7, r2
 800687e:	4641      	mov	r1, r8
 8006880:	4658      	mov	r0, fp
 8006882:	f7ff fc31 	bl	80060e8 <quorem>
 8006886:	4631      	mov	r1, r6
 8006888:	4605      	mov	r5, r0
 800688a:	4658      	mov	r0, fp
 800688c:	f001 feac 	bl	80085e8 <__mcmp>
 8006890:	464a      	mov	r2, r9
 8006892:	4682      	mov	sl, r0
 8006894:	4641      	mov	r1, r8
 8006896:	4620      	mov	r0, r4
 8006898:	f001 feca 	bl	8008630 <__mdiff>
 800689c:	68c2      	ldr	r2, [r0, #12]
 800689e:	4603      	mov	r3, r0
 80068a0:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 80068a4:	2a00      	cmp	r2, #0
 80068a6:	f040 81b8 	bne.w	8006c1a <_dtoa_r+0xa02>
 80068aa:	4619      	mov	r1, r3
 80068ac:	4658      	mov	r0, fp
 80068ae:	f8cd c018 	str.w	ip, [sp, #24]
 80068b2:	9305      	str	r3, [sp, #20]
 80068b4:	f001 fe98 	bl	80085e8 <__mcmp>
 80068b8:	9b05      	ldr	r3, [sp, #20]
 80068ba:	9002      	str	r0, [sp, #8]
 80068bc:	4619      	mov	r1, r3
 80068be:	4620      	mov	r0, r4
 80068c0:	f001 fcae 	bl	8008220 <_Bfree>
 80068c4:	9a02      	ldr	r2, [sp, #8]
 80068c6:	f8dd c018 	ldr.w	ip, [sp, #24]
 80068ca:	b92a      	cbnz	r2, 80068d8 <_dtoa_r+0x6c0>
 80068cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80068ce:	b91b      	cbnz	r3, 80068d8 <_dtoa_r+0x6c0>
 80068d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 83a7 	beq.w	8007026 <_dtoa_r+0xe0e>
 80068d8:	f1ba 0f00 	cmp.w	sl, #0
 80068dc:	f2c0 8251 	blt.w	8006d82 <_dtoa_r+0xb6a>
 80068e0:	d105      	bne.n	80068ee <_dtoa_r+0x6d6>
 80068e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80068e4:	b91b      	cbnz	r3, 80068ee <_dtoa_r+0x6d6>
 80068e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 824a 	beq.w	8006d82 <_dtoa_r+0xb6a>
 80068ee:	2a00      	cmp	r2, #0
 80068f0:	f300 82b7 	bgt.w	8006e62 <_dtoa_r+0xc4a>
 80068f4:	9b08      	ldr	r3, [sp, #32]
 80068f6:	f887 c000 	strb.w	ip, [r7]
 80068fa:	f107 0a01 	add.w	sl, r7, #1
 80068fe:	429f      	cmp	r7, r3
 8006900:	4655      	mov	r5, sl
 8006902:	f000 82ba 	beq.w	8006e7a <_dtoa_r+0xc62>
 8006906:	4659      	mov	r1, fp
 8006908:	220a      	movs	r2, #10
 800690a:	2300      	movs	r3, #0
 800690c:	4620      	mov	r0, r4
 800690e:	f001 fc91 	bl	8008234 <__multadd>
 8006912:	454e      	cmp	r6, r9
 8006914:	4683      	mov	fp, r0
 8006916:	4631      	mov	r1, r6
 8006918:	4620      	mov	r0, r4
 800691a:	f04f 020a 	mov.w	r2, #10
 800691e:	f04f 0300 	mov.w	r3, #0
 8006922:	f000 8174 	beq.w	8006c0e <_dtoa_r+0x9f6>
 8006926:	f001 fc85 	bl	8008234 <__multadd>
 800692a:	4649      	mov	r1, r9
 800692c:	4606      	mov	r6, r0
 800692e:	220a      	movs	r2, #10
 8006930:	4620      	mov	r0, r4
 8006932:	2300      	movs	r3, #0
 8006934:	f001 fc7e 	bl	8008234 <__multadd>
 8006938:	4657      	mov	r7, sl
 800693a:	4681      	mov	r9, r0
 800693c:	e79f      	b.n	800687e <_dtoa_r+0x666>
 800693e:	2301      	movs	r3, #1
 8006940:	9309      	str	r3, [sp, #36]	; 0x24
 8006942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006944:	2b00      	cmp	r3, #0
 8006946:	f340 8213 	ble.w	8006d70 <_dtoa_r+0xb58>
 800694a:	461f      	mov	r7, r3
 800694c:	461e      	mov	r6, r3
 800694e:	930c      	str	r3, [sp, #48]	; 0x30
 8006950:	9306      	str	r3, [sp, #24]
 8006952:	2100      	movs	r1, #0
 8006954:	2f17      	cmp	r7, #23
 8006956:	6461      	str	r1, [r4, #68]	; 0x44
 8006958:	d90a      	bls.n	8006970 <_dtoa_r+0x758>
 800695a:	2201      	movs	r2, #1
 800695c:	2304      	movs	r3, #4
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	f103 0014 	add.w	r0, r3, #20
 8006964:	4287      	cmp	r7, r0
 8006966:	4611      	mov	r1, r2
 8006968:	f102 0201 	add.w	r2, r2, #1
 800696c:	d2f7      	bcs.n	800695e <_dtoa_r+0x746>
 800696e:	6461      	str	r1, [r4, #68]	; 0x44
 8006970:	4620      	mov	r0, r4
 8006972:	f001 fc2f 	bl	80081d4 <_Balloc>
 8006976:	2e0e      	cmp	r6, #14
 8006978:	9007      	str	r0, [sp, #28]
 800697a:	6420      	str	r0, [r4, #64]	; 0x40
 800697c:	f63f ad5c 	bhi.w	8006438 <_dtoa_r+0x220>
 8006980:	2d00      	cmp	r5, #0
 8006982:	f43f ad59 	beq.w	8006438 <_dtoa_r+0x220>
 8006986:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800698a:	9904      	ldr	r1, [sp, #16]
 800698c:	2900      	cmp	r1, #0
 800698e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006992:	f340 8221 	ble.w	8006dd8 <_dtoa_r+0xbc0>
 8006996:	4bb7      	ldr	r3, [pc, #732]	; (8006c74 <_dtoa_r+0xa5c>)
 8006998:	f001 020f 	and.w	r2, r1, #15
 800699c:	110d      	asrs	r5, r1, #4
 800699e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069a2:	06e9      	lsls	r1, r5, #27
 80069a4:	e9d3 6700 	ldrd	r6, r7, [r3]
 80069a8:	f140 81db 	bpl.w	8006d62 <_dtoa_r+0xb4a>
 80069ac:	4bb2      	ldr	r3, [pc, #712]	; (8006c78 <_dtoa_r+0xa60>)
 80069ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80069b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069b6:	f7f9 ff6b 	bl	8000890 <__aeabi_ddiv>
 80069ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069be:	f005 050f 	and.w	r5, r5, #15
 80069c2:	f04f 0803 	mov.w	r8, #3
 80069c6:	b18d      	cbz	r5, 80069ec <_dtoa_r+0x7d4>
 80069c8:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8006c78 <_dtoa_r+0xa60>
 80069cc:	4630      	mov	r0, r6
 80069ce:	4639      	mov	r1, r7
 80069d0:	07ea      	lsls	r2, r5, #31
 80069d2:	d505      	bpl.n	80069e0 <_dtoa_r+0x7c8>
 80069d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80069d8:	f108 0801 	add.w	r8, r8, #1
 80069dc:	f7f9 fe2e 	bl	800063c <__aeabi_dmul>
 80069e0:	106d      	asrs	r5, r5, #1
 80069e2:	f109 0908 	add.w	r9, r9, #8
 80069e6:	d1f3      	bne.n	80069d0 <_dtoa_r+0x7b8>
 80069e8:	4606      	mov	r6, r0
 80069ea:	460f      	mov	r7, r1
 80069ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069f0:	4632      	mov	r2, r6
 80069f2:	463b      	mov	r3, r7
 80069f4:	f7f9 ff4c 	bl	8000890 <__aeabi_ddiv>
 80069f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069fe:	b143      	cbz	r3, 8006a12 <_dtoa_r+0x7fa>
 8006a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a04:	2200      	movs	r2, #0
 8006a06:	4b9d      	ldr	r3, [pc, #628]	; (8006c7c <_dtoa_r+0xa64>)
 8006a08:	f7fa f88a 	bl	8000b20 <__aeabi_dcmplt>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	f040 82ac 	bne.w	8006f6a <_dtoa_r+0xd52>
 8006a12:	4640      	mov	r0, r8
 8006a14:	f7f9 fdac 	bl	8000570 <__aeabi_i2d>
 8006a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a1c:	f7f9 fe0e 	bl	800063c <__aeabi_dmul>
 8006a20:	4b97      	ldr	r3, [pc, #604]	; (8006c80 <_dtoa_r+0xa68>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	f7f9 fc58 	bl	80002d8 <__adddf3>
 8006a28:	9b06      	ldr	r3, [sp, #24]
 8006a2a:	4606      	mov	r6, r0
 8006a2c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 8162 	beq.w	8006cfa <_dtoa_r+0xae2>
 8006a36:	9b04      	ldr	r3, [sp, #16]
 8006a38:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8006a3c:	9312      	str	r3, [sp, #72]	; 0x48
 8006a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 8221 	beq.w	8006e88 <_dtoa_r+0xc70>
 8006a46:	4b8b      	ldr	r3, [pc, #556]	; (8006c74 <_dtoa_r+0xa5c>)
 8006a48:	498e      	ldr	r1, [pc, #568]	; (8006c84 <_dtoa_r+0xa6c>)
 8006a4a:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006a4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a52:	2000      	movs	r0, #0
 8006a54:	f7f9 ff1c 	bl	8000890 <__aeabi_ddiv>
 8006a58:	4632      	mov	r2, r6
 8006a5a:	463b      	mov	r3, r7
 8006a5c:	f7f9 fc3a 	bl	80002d4 <__aeabi_dsub>
 8006a60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a68:	4639      	mov	r1, r7
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f7fa f880 	bl	8000b70 <__aeabi_d2iz>
 8006a70:	4605      	mov	r5, r0
 8006a72:	f7f9 fd7d 	bl	8000570 <__aeabi_i2d>
 8006a76:	3530      	adds	r5, #48	; 0x30
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	4639      	mov	r1, r7
 8006a80:	f7f9 fc28 	bl	80002d4 <__aeabi_dsub>
 8006a84:	fa5f f885 	uxtb.w	r8, r5
 8006a88:	9d07      	ldr	r5, [sp, #28]
 8006a8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a8e:	f885 8000 	strb.w	r8, [r5]
 8006a92:	4606      	mov	r6, r0
 8006a94:	460f      	mov	r7, r1
 8006a96:	3501      	adds	r5, #1
 8006a98:	f7fa f842 	bl	8000b20 <__aeabi_dcmplt>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	f040 82b2 	bne.w	8007006 <_dtoa_r+0xdee>
 8006aa2:	4632      	mov	r2, r6
 8006aa4:	463b      	mov	r3, r7
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	4974      	ldr	r1, [pc, #464]	; (8006c7c <_dtoa_r+0xa64>)
 8006aaa:	f7f9 fc13 	bl	80002d4 <__aeabi_dsub>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ab6:	f7fa f851 	bl	8000b5c <__aeabi_dcmpgt>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	f040 82ac 	bne.w	8007018 <_dtoa_r+0xe00>
 8006ac0:	f1b9 0f01 	cmp.w	r9, #1
 8006ac4:	f340 8138 	ble.w	8006d38 <_dtoa_r+0xb20>
 8006ac8:	9b07      	ldr	r3, [sp, #28]
 8006aca:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8006ace:	f8cd b008 	str.w	fp, [sp, #8]
 8006ad2:	4499      	add	r9, r3
 8006ad4:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 8006ad8:	46a0      	mov	r8, r4
 8006ada:	e00d      	b.n	8006af8 <_dtoa_r+0x8e0>
 8006adc:	2000      	movs	r0, #0
 8006ade:	4967      	ldr	r1, [pc, #412]	; (8006c7c <_dtoa_r+0xa64>)
 8006ae0:	f7f9 fbf8 	bl	80002d4 <__aeabi_dsub>
 8006ae4:	4652      	mov	r2, sl
 8006ae6:	465b      	mov	r3, fp
 8006ae8:	f7fa f81a 	bl	8000b20 <__aeabi_dcmplt>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	f040 828e 	bne.w	800700e <_dtoa_r+0xdf6>
 8006af2:	454d      	cmp	r5, r9
 8006af4:	f000 811b 	beq.w	8006d2e <_dtoa_r+0xb16>
 8006af8:	4650      	mov	r0, sl
 8006afa:	4659      	mov	r1, fp
 8006afc:	2200      	movs	r2, #0
 8006afe:	4b62      	ldr	r3, [pc, #392]	; (8006c88 <_dtoa_r+0xa70>)
 8006b00:	f7f9 fd9c 	bl	800063c <__aeabi_dmul>
 8006b04:	2200      	movs	r2, #0
 8006b06:	4b60      	ldr	r3, [pc, #384]	; (8006c88 <_dtoa_r+0xa70>)
 8006b08:	4682      	mov	sl, r0
 8006b0a:	468b      	mov	fp, r1
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	4639      	mov	r1, r7
 8006b10:	f7f9 fd94 	bl	800063c <__aeabi_dmul>
 8006b14:	460f      	mov	r7, r1
 8006b16:	4606      	mov	r6, r0
 8006b18:	f7fa f82a 	bl	8000b70 <__aeabi_d2iz>
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	f7f9 fd27 	bl	8000570 <__aeabi_i2d>
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	4630      	mov	r0, r6
 8006b28:	4639      	mov	r1, r7
 8006b2a:	f7f9 fbd3 	bl	80002d4 <__aeabi_dsub>
 8006b2e:	3430      	adds	r4, #48	; 0x30
 8006b30:	b2e4      	uxtb	r4, r4
 8006b32:	4652      	mov	r2, sl
 8006b34:	465b      	mov	r3, fp
 8006b36:	f805 4b01 	strb.w	r4, [r5], #1
 8006b3a:	4606      	mov	r6, r0
 8006b3c:	460f      	mov	r7, r1
 8006b3e:	f7f9 ffef 	bl	8000b20 <__aeabi_dcmplt>
 8006b42:	4632      	mov	r2, r6
 8006b44:	463b      	mov	r3, r7
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d0c8      	beq.n	8006adc <_dtoa_r+0x8c4>
 8006b4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b4c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006b50:	9304      	str	r3, [sp, #16]
 8006b52:	4644      	mov	r4, r8
 8006b54:	e533      	b.n	80065be <_dtoa_r+0x3a6>
 8006b56:	2300      	movs	r3, #0
 8006b58:	9309      	str	r3, [sp, #36]	; 0x24
 8006b5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b5c:	9a04      	ldr	r2, [sp, #16]
 8006b5e:	4413      	add	r3, r2
 8006b60:	930c      	str	r3, [sp, #48]	; 0x30
 8006b62:	3301      	adds	r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	9306      	str	r3, [sp, #24]
 8006b68:	f340 8109 	ble.w	8006d7e <_dtoa_r+0xb66>
 8006b6c:	9e06      	ldr	r6, [sp, #24]
 8006b6e:	4637      	mov	r7, r6
 8006b70:	e6ef      	b.n	8006952 <_dtoa_r+0x73a>
 8006b72:	2300      	movs	r3, #0
 8006b74:	9309      	str	r3, [sp, #36]	; 0x24
 8006b76:	e6e4      	b.n	8006942 <_dtoa_r+0x72a>
 8006b78:	9b06      	ldr	r3, [sp, #24]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f73f ac6d 	bgt.w	800645a <_dtoa_r+0x242>
 8006b80:	f040 8262 	bne.w	8007048 <_dtoa_r+0xe30>
 8006b84:	4640      	mov	r0, r8
 8006b86:	2200      	movs	r2, #0
 8006b88:	4b40      	ldr	r3, [pc, #256]	; (8006c8c <_dtoa_r+0xa74>)
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	f7f9 fd56 	bl	800063c <__aeabi_dmul>
 8006b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b94:	f7f9 ffd8 	bl	8000b48 <__aeabi_dcmpge>
 8006b98:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006b9c:	4646      	mov	r6, r8
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	f000 808a 	beq.w	8006cb8 <_dtoa_r+0xaa0>
 8006ba4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ba6:	9d07      	ldr	r5, [sp, #28]
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	9304      	str	r3, [sp, #16]
 8006bac:	4641      	mov	r1, r8
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f001 fb36 	bl	8008220 <_Bfree>
 8006bb4:	2e00      	cmp	r6, #0
 8006bb6:	f47f ae2c 	bne.w	8006812 <_dtoa_r+0x5fa>
 8006bba:	e500      	b.n	80065be <_dtoa_r+0x3a6>
 8006bbc:	4659      	mov	r1, fp
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f001 fc6c 	bl	800849c <__pow5mult>
 8006bc4:	4683      	mov	fp, r0
 8006bc6:	e557      	b.n	8006678 <_dtoa_r+0x460>
 8006bc8:	9b02      	ldr	r3, [sp, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f47f ad66 	bne.w	800669c <_dtoa_r+0x484>
 8006bd0:	9b03      	ldr	r3, [sp, #12]
 8006bd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f47f ad94 	bne.w	8006704 <_dtoa_r+0x4ec>
 8006bdc:	9b03      	ldr	r3, [sp, #12]
 8006bde:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8006be2:	0d3f      	lsrs	r7, r7, #20
 8006be4:	053f      	lsls	r7, r7, #20
 8006be6:	2f00      	cmp	r7, #0
 8006be8:	f000 821a 	beq.w	8007020 <_dtoa_r+0xe08>
 8006bec:	9b05      	ldr	r3, [sp, #20]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	9305      	str	r3, [sp, #20]
 8006bf2:	f10a 0a01 	add.w	sl, sl, #1
 8006bf6:	f04f 0901 	mov.w	r9, #1
 8006bfa:	e585      	b.n	8006708 <_dtoa_r+0x4f0>
 8006bfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bfe:	2a00      	cmp	r2, #0
 8006c00:	f000 81a5 	beq.w	8006f4e <_dtoa_r+0xd36>
 8006c04:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c08:	9f08      	ldr	r7, [sp, #32]
 8006c0a:	9d05      	ldr	r5, [sp, #20]
 8006c0c:	e4ff      	b.n	800660e <_dtoa_r+0x3f6>
 8006c0e:	f001 fb11 	bl	8008234 <__multadd>
 8006c12:	4657      	mov	r7, sl
 8006c14:	4606      	mov	r6, r0
 8006c16:	4681      	mov	r9, r0
 8006c18:	e631      	b.n	800687e <_dtoa_r+0x666>
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f8cd c008 	str.w	ip, [sp, #8]
 8006c22:	f001 fafd 	bl	8008220 <_Bfree>
 8006c26:	2201      	movs	r2, #1
 8006c28:	f8dd c008 	ldr.w	ip, [sp, #8]
 8006c2c:	e654      	b.n	80068d8 <_dtoa_r+0x6c0>
 8006c2e:	4658      	mov	r0, fp
 8006c30:	4641      	mov	r1, r8
 8006c32:	f001 fcd9 	bl	80085e8 <__mcmp>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	f6bf ad91 	bge.w	800675e <_dtoa_r+0x546>
 8006c3c:	9f04      	ldr	r7, [sp, #16]
 8006c3e:	4659      	mov	r1, fp
 8006c40:	2300      	movs	r3, #0
 8006c42:	4620      	mov	r0, r4
 8006c44:	220a      	movs	r2, #10
 8006c46:	3f01      	subs	r7, #1
 8006c48:	9704      	str	r7, [sp, #16]
 8006c4a:	f001 faf3 	bl	8008234 <__multadd>
 8006c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c50:	4683      	mov	fp, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f47f adf0 	bne.w	8006838 <_dtoa_r+0x620>
 8006c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f340 81f8 	ble.w	8007050 <_dtoa_r+0xe38>
 8006c60:	9306      	str	r3, [sp, #24]
 8006c62:	e583      	b.n	800676c <_dtoa_r+0x554>
 8006c64:	9807      	ldr	r0, [sp, #28]
 8006c66:	f7ff bb0b 	b.w	8006280 <_dtoa_r+0x68>
 8006c6a:	9b02      	ldr	r3, [sp, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f47f ad49 	bne.w	8006704 <_dtoa_r+0x4ec>
 8006c72:	e7ad      	b.n	8006bd0 <_dtoa_r+0x9b8>
 8006c74:	08009810 	.word	0x08009810
 8006c78:	080098d8 	.word	0x080098d8
 8006c7c:	3ff00000 	.word	0x3ff00000
 8006c80:	401c0000 	.word	0x401c0000
 8006c84:	3fe00000 	.word	0x3fe00000
 8006c88:	40240000 	.word	0x40240000
 8006c8c:	40140000 	.word	0x40140000
 8006c90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	f77f ad67 	ble.w	8006766 <_dtoa_r+0x54e>
 8006c98:	9b06      	ldr	r3, [sp, #24]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d182      	bne.n	8006ba4 <_dtoa_r+0x98c>
 8006c9e:	4641      	mov	r1, r8
 8006ca0:	2205      	movs	r2, #5
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f001 fac6 	bl	8008234 <__multadd>
 8006ca8:	4680      	mov	r8, r0
 8006caa:	4641      	mov	r1, r8
 8006cac:	4658      	mov	r0, fp
 8006cae:	f001 fc9b 	bl	80085e8 <__mcmp>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	f77f af76 	ble.w	8006ba4 <_dtoa_r+0x98c>
 8006cb8:	9a04      	ldr	r2, [sp, #16]
 8006cba:	9907      	ldr	r1, [sp, #28]
 8006cbc:	2331      	movs	r3, #49	; 0x31
 8006cbe:	3201      	adds	r2, #1
 8006cc0:	9204      	str	r2, [sp, #16]
 8006cc2:	700b      	strb	r3, [r1, #0]
 8006cc4:	1c4d      	adds	r5, r1, #1
 8006cc6:	e771      	b.n	8006bac <_dtoa_r+0x994>
 8006cc8:	9a04      	ldr	r2, [sp, #16]
 8006cca:	3201      	adds	r2, #1
 8006ccc:	9204      	str	r2, [sp, #16]
 8006cce:	9a07      	ldr	r2, [sp, #28]
 8006cd0:	2331      	movs	r3, #49	; 0x31
 8006cd2:	7013      	strb	r3, [r2, #0]
 8006cd4:	e58d      	b.n	80067f2 <_dtoa_r+0x5da>
 8006cd6:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006cda:	9c05      	ldr	r4, [sp, #20]
 8006cdc:	e46f      	b.n	80065be <_dtoa_r+0x3a6>
 8006cde:	4640      	mov	r0, r8
 8006ce0:	f7f9 fc46 	bl	8000570 <__aeabi_i2d>
 8006ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ce8:	f7f9 fca8 	bl	800063c <__aeabi_dmul>
 8006cec:	2200      	movs	r2, #0
 8006cee:	4bbc      	ldr	r3, [pc, #752]	; (8006fe0 <_dtoa_r+0xdc8>)
 8006cf0:	f7f9 faf2 	bl	80002d8 <__adddf3>
 8006cf4:	4606      	mov	r6, r0
 8006cf6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8006cfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	4bb8      	ldr	r3, [pc, #736]	; (8006fe4 <_dtoa_r+0xdcc>)
 8006d02:	f7f9 fae7 	bl	80002d4 <__aeabi_dsub>
 8006d06:	4632      	mov	r2, r6
 8006d08:	463b      	mov	r3, r7
 8006d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d0e:	f7f9 ff25 	bl	8000b5c <__aeabi_dcmpgt>
 8006d12:	4680      	mov	r8, r0
 8006d14:	2800      	cmp	r0, #0
 8006d16:	f040 80b3 	bne.w	8006e80 <_dtoa_r+0xc68>
 8006d1a:	4632      	mov	r2, r6
 8006d1c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006d20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d24:	f7f9 fefc 	bl	8000b20 <__aeabi_dcmplt>
 8006d28:	b130      	cbz	r0, 8006d38 <_dtoa_r+0xb20>
 8006d2a:	4646      	mov	r6, r8
 8006d2c:	e73a      	b.n	8006ba4 <_dtoa_r+0x98c>
 8006d2e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006d32:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006d36:	4644      	mov	r4, r8
 8006d38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006d3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d40:	f7ff bb7a 	b.w	8006438 <_dtoa_r+0x220>
 8006d44:	4659      	mov	r1, fp
 8006d46:	9a08      	ldr	r2, [sp, #32]
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f001 fba7 	bl	800849c <__pow5mult>
 8006d4e:	4683      	mov	fp, r0
 8006d50:	e492      	b.n	8006678 <_dtoa_r+0x460>
 8006d52:	9b08      	ldr	r3, [sp, #32]
 8006d54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d56:	9708      	str	r7, [sp, #32]
 8006d58:	1afb      	subs	r3, r7, r3
 8006d5a:	441a      	add	r2, r3
 8006d5c:	920a      	str	r2, [sp, #40]	; 0x28
 8006d5e:	2700      	movs	r7, #0
 8006d60:	e44f      	b.n	8006602 <_dtoa_r+0x3ea>
 8006d62:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006d66:	f04f 0802 	mov.w	r8, #2
 8006d6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d6e:	e62a      	b.n	80069c6 <_dtoa_r+0x7ae>
 8006d70:	2601      	movs	r6, #1
 8006d72:	9621      	str	r6, [sp, #132]	; 0x84
 8006d74:	960c      	str	r6, [sp, #48]	; 0x30
 8006d76:	9606      	str	r6, [sp, #24]
 8006d78:	2100      	movs	r1, #0
 8006d7a:	6461      	str	r1, [r4, #68]	; 0x44
 8006d7c:	e5f8      	b.n	8006970 <_dtoa_r+0x758>
 8006d7e:	461e      	mov	r6, r3
 8006d80:	e7fa      	b.n	8006d78 <_dtoa_r+0xb60>
 8006d82:	2a00      	cmp	r2, #0
 8006d84:	dd15      	ble.n	8006db2 <_dtoa_r+0xb9a>
 8006d86:	4659      	mov	r1, fp
 8006d88:	2201      	movs	r2, #1
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f8cd c008 	str.w	ip, [sp, #8]
 8006d90:	f001 fbd4 	bl	800853c <__lshift>
 8006d94:	4641      	mov	r1, r8
 8006d96:	4683      	mov	fp, r0
 8006d98:	f001 fc26 	bl	80085e8 <__mcmp>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8006da2:	f340 814a 	ble.w	800703a <_dtoa_r+0xe22>
 8006da6:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8006daa:	f000 8106 	beq.w	8006fba <_dtoa_r+0xda2>
 8006dae:	f10c 0c01 	add.w	ip, ip, #1
 8006db2:	46b2      	mov	sl, r6
 8006db4:	f887 c000 	strb.w	ip, [r7]
 8006db8:	1c7d      	adds	r5, r7, #1
 8006dba:	464e      	mov	r6, r9
 8006dbc:	e519      	b.n	80067f2 <_dtoa_r+0x5da>
 8006dbe:	d104      	bne.n	8006dca <_dtoa_r+0xbb2>
 8006dc0:	f01c 0f01 	tst.w	ip, #1
 8006dc4:	d001      	beq.n	8006dca <_dtoa_r+0xbb2>
 8006dc6:	e504      	b.n	80067d2 <_dtoa_r+0x5ba>
 8006dc8:	4615      	mov	r5, r2
 8006dca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006dce:	2b30      	cmp	r3, #48	; 0x30
 8006dd0:	f105 32ff 	add.w	r2, r5, #4294967295
 8006dd4:	d0f8      	beq.n	8006dc8 <_dtoa_r+0xbb0>
 8006dd6:	e50c      	b.n	80067f2 <_dtoa_r+0x5da>
 8006dd8:	9b04      	ldr	r3, [sp, #16]
 8006dda:	425d      	negs	r5, r3
 8006ddc:	2d00      	cmp	r5, #0
 8006dde:	f000 80bd 	beq.w	8006f5c <_dtoa_r+0xd44>
 8006de2:	4b81      	ldr	r3, [pc, #516]	; (8006fe8 <_dtoa_r+0xdd0>)
 8006de4:	f005 020f 	and.w	r2, r5, #15
 8006de8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006df4:	f7f9 fc22 	bl	800063c <__aeabi_dmul>
 8006df8:	112d      	asrs	r5, r5, #4
 8006dfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dfe:	f000 812c 	beq.w	800705a <_dtoa_r+0xe42>
 8006e02:	4e7a      	ldr	r6, [pc, #488]	; (8006fec <_dtoa_r+0xdd4>)
 8006e04:	f04f 0802 	mov.w	r8, #2
 8006e08:	07eb      	lsls	r3, r5, #31
 8006e0a:	d505      	bpl.n	8006e18 <_dtoa_r+0xc00>
 8006e0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e10:	f108 0801 	add.w	r8, r8, #1
 8006e14:	f7f9 fc12 	bl	800063c <__aeabi_dmul>
 8006e18:	106d      	asrs	r5, r5, #1
 8006e1a:	f106 0608 	add.w	r6, r6, #8
 8006e1e:	d1f3      	bne.n	8006e08 <_dtoa_r+0xbf0>
 8006e20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e24:	e5ea      	b.n	80069fc <_dtoa_r+0x7e4>
 8006e26:	9a04      	ldr	r2, [sp, #16]
 8006e28:	3201      	adds	r2, #1
 8006e2a:	9204      	str	r2, [sp, #16]
 8006e2c:	9a07      	ldr	r2, [sp, #28]
 8006e2e:	2330      	movs	r3, #48	; 0x30
 8006e30:	7013      	strb	r3, [r2, #0]
 8006e32:	2331      	movs	r3, #49	; 0x31
 8006e34:	7013      	strb	r3, [r2, #0]
 8006e36:	f7ff bbc2 	b.w	80065be <_dtoa_r+0x3a6>
 8006e3a:	6871      	ldr	r1, [r6, #4]
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f001 f9c9 	bl	80081d4 <_Balloc>
 8006e42:	6933      	ldr	r3, [r6, #16]
 8006e44:	1c9a      	adds	r2, r3, #2
 8006e46:	4605      	mov	r5, r0
 8006e48:	0092      	lsls	r2, r2, #2
 8006e4a:	f106 010c 	add.w	r1, r6, #12
 8006e4e:	300c      	adds	r0, #12
 8006e50:	f7f9 f9a2 	bl	8000198 <memcpy>
 8006e54:	4620      	mov	r0, r4
 8006e56:	4629      	mov	r1, r5
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f001 fb6f 	bl	800853c <__lshift>
 8006e5e:	4681      	mov	r9, r0
 8006e60:	e503      	b.n	800686a <_dtoa_r+0x652>
 8006e62:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8006e66:	f000 80a8 	beq.w	8006fba <_dtoa_r+0xda2>
 8006e6a:	f10c 0c01 	add.w	ip, ip, #1
 8006e6e:	46b2      	mov	sl, r6
 8006e70:	f887 c000 	strb.w	ip, [r7]
 8006e74:	1c7d      	adds	r5, r7, #1
 8006e76:	464e      	mov	r6, r9
 8006e78:	e4bb      	b.n	80067f2 <_dtoa_r+0x5da>
 8006e7a:	46b2      	mov	sl, r6
 8006e7c:	464e      	mov	r6, r9
 8006e7e:	e498      	b.n	80067b2 <_dtoa_r+0x59a>
 8006e80:	f04f 0800 	mov.w	r8, #0
 8006e84:	4646      	mov	r6, r8
 8006e86:	e717      	b.n	8006cb8 <_dtoa_r+0xaa0>
 8006e88:	4957      	ldr	r1, [pc, #348]	; (8006fe8 <_dtoa_r+0xdd0>)
 8006e8a:	f109 33ff 	add.w	r3, r9, #4294967295
 8006e8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e92:	4632      	mov	r2, r6
 8006e94:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	f7f9 fbce 	bl	800063c <__aeabi_dmul>
 8006ea0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ea4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ea8:	4639      	mov	r1, r7
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f7f9 fe60 	bl	8000b70 <__aeabi_d2iz>
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	f7f9 fb5d 	bl	8000570 <__aeabi_i2d>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4630      	mov	r0, r6
 8006ebc:	4639      	mov	r1, r7
 8006ebe:	f7f9 fa09 	bl	80002d4 <__aeabi_dsub>
 8006ec2:	9a07      	ldr	r2, [sp, #28]
 8006ec4:	3530      	adds	r5, #48	; 0x30
 8006ec6:	f1b9 0f01 	cmp.w	r9, #1
 8006eca:	7015      	strb	r5, [r2, #0]
 8006ecc:	4606      	mov	r6, r0
 8006ece:	460f      	mov	r7, r1
 8006ed0:	f102 0501 	add.w	r5, r2, #1
 8006ed4:	d023      	beq.n	8006f1e <_dtoa_r+0xd06>
 8006ed6:	9b07      	ldr	r3, [sp, #28]
 8006ed8:	f8cd a008 	str.w	sl, [sp, #8]
 8006edc:	444b      	add	r3, r9
 8006ede:	465e      	mov	r6, fp
 8006ee0:	469a      	mov	sl, r3
 8006ee2:	46ab      	mov	fp, r5
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	4b42      	ldr	r3, [pc, #264]	; (8006ff0 <_dtoa_r+0xdd8>)
 8006ee8:	f7f9 fba8 	bl	800063c <__aeabi_dmul>
 8006eec:	4689      	mov	r9, r1
 8006eee:	4680      	mov	r8, r0
 8006ef0:	f7f9 fe3e 	bl	8000b70 <__aeabi_d2iz>
 8006ef4:	4607      	mov	r7, r0
 8006ef6:	f7f9 fb3b 	bl	8000570 <__aeabi_i2d>
 8006efa:	3730      	adds	r7, #48	; 0x30
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4640      	mov	r0, r8
 8006f02:	4649      	mov	r1, r9
 8006f04:	f7f9 f9e6 	bl	80002d4 <__aeabi_dsub>
 8006f08:	f80b 7b01 	strb.w	r7, [fp], #1
 8006f0c:	45d3      	cmp	fp, sl
 8006f0e:	d1e9      	bne.n	8006ee4 <_dtoa_r+0xccc>
 8006f10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f12:	f8dd a008 	ldr.w	sl, [sp, #8]
 8006f16:	46b3      	mov	fp, r6
 8006f18:	460f      	mov	r7, r1
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	441d      	add	r5, r3
 8006f1e:	2200      	movs	r2, #0
 8006f20:	4b34      	ldr	r3, [pc, #208]	; (8006ff4 <_dtoa_r+0xddc>)
 8006f22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f26:	f7f9 f9d7 	bl	80002d8 <__adddf3>
 8006f2a:	4632      	mov	r2, r6
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	f7f9 fdf7 	bl	8000b20 <__aeabi_dcmplt>
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d047      	beq.n	8006fc6 <_dtoa_r+0xdae>
 8006f36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f38:	9304      	str	r3, [sp, #16]
 8006f3a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8006f3e:	f7ff bb2c 	b.w	800659a <_dtoa_r+0x382>
 8006f42:	9b05      	ldr	r3, [sp, #20]
 8006f44:	9a06      	ldr	r2, [sp, #24]
 8006f46:	1a9d      	subs	r5, r3, r2
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f7ff bb60 	b.w	800660e <_dtoa_r+0x3f6>
 8006f4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f50:	9f08      	ldr	r7, [sp, #32]
 8006f52:	9d05      	ldr	r5, [sp, #20]
 8006f54:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f58:	f7ff bb59 	b.w	800660e <_dtoa_r+0x3f6>
 8006f5c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006f60:	f04f 0802 	mov.w	r8, #2
 8006f64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f68:	e548      	b.n	80069fc <_dtoa_r+0x7e4>
 8006f6a:	9b06      	ldr	r3, [sp, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f43f aeb6 	beq.w	8006cde <_dtoa_r+0xac6>
 8006f72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f74:	2d00      	cmp	r5, #0
 8006f76:	f77f aedf 	ble.w	8006d38 <_dtoa_r+0xb20>
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	4b1c      	ldr	r3, [pc, #112]	; (8006ff0 <_dtoa_r+0xdd8>)
 8006f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f82:	f7f9 fb5b 	bl	800063c <__aeabi_dmul>
 8006f86:	4606      	mov	r6, r0
 8006f88:	460f      	mov	r7, r1
 8006f8a:	f108 0001 	add.w	r0, r8, #1
 8006f8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006f92:	f7f9 faed 	bl	8000570 <__aeabi_i2d>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	4639      	mov	r1, r7
 8006f9e:	f7f9 fb4d 	bl	800063c <__aeabi_dmul>
 8006fa2:	4b0f      	ldr	r3, [pc, #60]	; (8006fe0 <_dtoa_r+0xdc8>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f7f9 f997 	bl	80002d8 <__adddf3>
 8006faa:	9b04      	ldr	r3, [sp, #16]
 8006fac:	3b01      	subs	r3, #1
 8006fae:	4606      	mov	r6, r0
 8006fb0:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8006fb4:	9312      	str	r3, [sp, #72]	; 0x48
 8006fb6:	46a9      	mov	r9, r5
 8006fb8:	e541      	b.n	8006a3e <_dtoa_r+0x826>
 8006fba:	2239      	movs	r2, #57	; 0x39
 8006fbc:	46b2      	mov	sl, r6
 8006fbe:	703a      	strb	r2, [r7, #0]
 8006fc0:	464e      	mov	r6, r9
 8006fc2:	1c7d      	adds	r5, r7, #1
 8006fc4:	e407      	b.n	80067d6 <_dtoa_r+0x5be>
 8006fc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006fca:	2000      	movs	r0, #0
 8006fcc:	4909      	ldr	r1, [pc, #36]	; (8006ff4 <_dtoa_r+0xddc>)
 8006fce:	f7f9 f981 	bl	80002d4 <__aeabi_dsub>
 8006fd2:	4632      	mov	r2, r6
 8006fd4:	463b      	mov	r3, r7
 8006fd6:	f7f9 fdc1 	bl	8000b5c <__aeabi_dcmpgt>
 8006fda:	b970      	cbnz	r0, 8006ffa <_dtoa_r+0xde2>
 8006fdc:	e6ac      	b.n	8006d38 <_dtoa_r+0xb20>
 8006fde:	bf00      	nop
 8006fe0:	401c0000 	.word	0x401c0000
 8006fe4:	40140000 	.word	0x40140000
 8006fe8:	08009810 	.word	0x08009810
 8006fec:	080098d8 	.word	0x080098d8
 8006ff0:	40240000 	.word	0x40240000
 8006ff4:	3fe00000 	.word	0x3fe00000
 8006ff8:	4615      	mov	r5, r2
 8006ffa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ffe:	2b30      	cmp	r3, #48	; 0x30
 8007000:	f105 32ff 	add.w	r2, r5, #4294967295
 8007004:	d0f8      	beq.n	8006ff8 <_dtoa_r+0xde0>
 8007006:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007008:	9304      	str	r3, [sp, #16]
 800700a:	f7ff bad8 	b.w	80065be <_dtoa_r+0x3a6>
 800700e:	4643      	mov	r3, r8
 8007010:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007014:	46a0      	mov	r8, r4
 8007016:	461c      	mov	r4, r3
 8007018:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800701a:	9304      	str	r3, [sp, #16]
 800701c:	f7ff babd 	b.w	800659a <_dtoa_r+0x382>
 8007020:	46b9      	mov	r9, r7
 8007022:	f7ff bb71 	b.w	8006708 <_dtoa_r+0x4f0>
 8007026:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 800702a:	d0c6      	beq.n	8006fba <_dtoa_r+0xda2>
 800702c:	f1ba 0f00 	cmp.w	sl, #0
 8007030:	f77f aebf 	ble.w	8006db2 <_dtoa_r+0xb9a>
 8007034:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 8007038:	e6bb      	b.n	8006db2 <_dtoa_r+0xb9a>
 800703a:	f47f aeba 	bne.w	8006db2 <_dtoa_r+0xb9a>
 800703e:	f01c 0f01 	tst.w	ip, #1
 8007042:	f43f aeb6 	beq.w	8006db2 <_dtoa_r+0xb9a>
 8007046:	e6ae      	b.n	8006da6 <_dtoa_r+0xb8e>
 8007048:	f04f 0800 	mov.w	r8, #0
 800704c:	4646      	mov	r6, r8
 800704e:	e5a9      	b.n	8006ba4 <_dtoa_r+0x98c>
 8007050:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007052:	2b02      	cmp	r3, #2
 8007054:	dc04      	bgt.n	8007060 <_dtoa_r+0xe48>
 8007056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007058:	e602      	b.n	8006c60 <_dtoa_r+0xa48>
 800705a:	f04f 0802 	mov.w	r8, #2
 800705e:	e4cd      	b.n	80069fc <_dtoa_r+0x7e4>
 8007060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007062:	9306      	str	r3, [sp, #24]
 8007064:	e618      	b.n	8006c98 <_dtoa_r+0xa80>
 8007066:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007068:	2b02      	cmp	r3, #2
 800706a:	dcf9      	bgt.n	8007060 <_dtoa_r+0xe48>
 800706c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800706e:	f7ff bbee 	b.w	800684e <_dtoa_r+0x636>
 8007072:	2500      	movs	r5, #0
 8007074:	6465      	str	r5, [r4, #68]	; 0x44
 8007076:	4629      	mov	r1, r5
 8007078:	4620      	mov	r0, r4
 800707a:	f001 f8ab 	bl	80081d4 <_Balloc>
 800707e:	f04f 33ff 	mov.w	r3, #4294967295
 8007082:	9306      	str	r3, [sp, #24]
 8007084:	930c      	str	r3, [sp, #48]	; 0x30
 8007086:	2301      	movs	r3, #1
 8007088:	9007      	str	r0, [sp, #28]
 800708a:	9521      	str	r5, [sp, #132]	; 0x84
 800708c:	6420      	str	r0, [r4, #64]	; 0x40
 800708e:	9309      	str	r3, [sp, #36]	; 0x24
 8007090:	f7ff b9d2 	b.w	8006438 <_dtoa_r+0x220>
 8007094:	f43f ab4d 	beq.w	8006732 <_dtoa_r+0x51a>
 8007098:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800709c:	f7ff bb44 	b.w	8006728 <_dtoa_r+0x510>
 80070a0:	2301      	movs	r3, #1
 80070a2:	9309      	str	r3, [sp, #36]	; 0x24
 80070a4:	e559      	b.n	8006b5a <_dtoa_r+0x942>
 80070a6:	2501      	movs	r5, #1
 80070a8:	f7ff b990 	b.w	80063cc <_dtoa_r+0x1b4>
 80070ac:	f3af 8000 	nop.w

080070b0 <__sflush_r>:
 80070b0:	898b      	ldrh	r3, [r1, #12]
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b8:	460d      	mov	r5, r1
 80070ba:	0711      	lsls	r1, r2, #28
 80070bc:	4680      	mov	r8, r0
 80070be:	d43c      	bmi.n	800713a <__sflush_r+0x8a>
 80070c0:	686a      	ldr	r2, [r5, #4]
 80070c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070c6:	2a00      	cmp	r2, #0
 80070c8:	81ab      	strh	r3, [r5, #12]
 80070ca:	dd65      	ble.n	8007198 <__sflush_r+0xe8>
 80070cc:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80070ce:	2e00      	cmp	r6, #0
 80070d0:	d04b      	beq.n	800716a <__sflush_r+0xba>
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80070d8:	2100      	movs	r1, #0
 80070da:	b292      	uxth	r2, r2
 80070dc:	f8d8 4000 	ldr.w	r4, [r8]
 80070e0:	f8c8 1000 	str.w	r1, [r8]
 80070e4:	2a00      	cmp	r2, #0
 80070e6:	d05b      	beq.n	80071a0 <__sflush_r+0xf0>
 80070e8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80070ea:	075f      	lsls	r7, r3, #29
 80070ec:	d505      	bpl.n	80070fa <__sflush_r+0x4a>
 80070ee:	6869      	ldr	r1, [r5, #4]
 80070f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80070f2:	1a52      	subs	r2, r2, r1
 80070f4:	b10b      	cbz	r3, 80070fa <__sflush_r+0x4a>
 80070f6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80070f8:	1ad2      	subs	r2, r2, r3
 80070fa:	4640      	mov	r0, r8
 80070fc:	69e9      	ldr	r1, [r5, #28]
 80070fe:	2300      	movs	r3, #0
 8007100:	47b0      	blx	r6
 8007102:	1c46      	adds	r6, r0, #1
 8007104:	d056      	beq.n	80071b4 <__sflush_r+0x104>
 8007106:	89ab      	ldrh	r3, [r5, #12]
 8007108:	692a      	ldr	r2, [r5, #16]
 800710a:	602a      	str	r2, [r5, #0]
 800710c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007110:	b29b      	uxth	r3, r3
 8007112:	2200      	movs	r2, #0
 8007114:	606a      	str	r2, [r5, #4]
 8007116:	04da      	lsls	r2, r3, #19
 8007118:	81ab      	strh	r3, [r5, #12]
 800711a:	d43b      	bmi.n	8007194 <__sflush_r+0xe4>
 800711c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800711e:	f8c8 4000 	str.w	r4, [r8]
 8007122:	b311      	cbz	r1, 800716a <__sflush_r+0xba>
 8007124:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8007128:	4299      	cmp	r1, r3
 800712a:	d002      	beq.n	8007132 <__sflush_r+0x82>
 800712c:	4640      	mov	r0, r8
 800712e:	f000 f9b7 	bl	80074a0 <_free_r>
 8007132:	2000      	movs	r0, #0
 8007134:	6328      	str	r0, [r5, #48]	; 0x30
 8007136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800713a:	692e      	ldr	r6, [r5, #16]
 800713c:	b1ae      	cbz	r6, 800716a <__sflush_r+0xba>
 800713e:	682c      	ldr	r4, [r5, #0]
 8007140:	602e      	str	r6, [r5, #0]
 8007142:	0791      	lsls	r1, r2, #30
 8007144:	bf0c      	ite	eq
 8007146:	696b      	ldreq	r3, [r5, #20]
 8007148:	2300      	movne	r3, #0
 800714a:	1ba4      	subs	r4, r4, r6
 800714c:	60ab      	str	r3, [r5, #8]
 800714e:	e00a      	b.n	8007166 <__sflush_r+0xb6>
 8007150:	4632      	mov	r2, r6
 8007152:	4623      	mov	r3, r4
 8007154:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8007156:	69e9      	ldr	r1, [r5, #28]
 8007158:	4640      	mov	r0, r8
 800715a:	47b8      	blx	r7
 800715c:	2800      	cmp	r0, #0
 800715e:	eba4 0400 	sub.w	r4, r4, r0
 8007162:	4406      	add	r6, r0
 8007164:	dd04      	ble.n	8007170 <__sflush_r+0xc0>
 8007166:	2c00      	cmp	r4, #0
 8007168:	dcf2      	bgt.n	8007150 <__sflush_r+0xa0>
 800716a:	2000      	movs	r0, #0
 800716c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007170:	89ab      	ldrh	r3, [r5, #12]
 8007172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007176:	81ab      	strh	r3, [r5, #12]
 8007178:	f04f 30ff 	mov.w	r0, #4294967295
 800717c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007180:	89ab      	ldrh	r3, [r5, #12]
 8007182:	692a      	ldr	r2, [r5, #16]
 8007184:	6069      	str	r1, [r5, #4]
 8007186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800718a:	b29b      	uxth	r3, r3
 800718c:	81ab      	strh	r3, [r5, #12]
 800718e:	04db      	lsls	r3, r3, #19
 8007190:	602a      	str	r2, [r5, #0]
 8007192:	d5c3      	bpl.n	800711c <__sflush_r+0x6c>
 8007194:	6528      	str	r0, [r5, #80]	; 0x50
 8007196:	e7c1      	b.n	800711c <__sflush_r+0x6c>
 8007198:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800719a:	2a00      	cmp	r2, #0
 800719c:	dc96      	bgt.n	80070cc <__sflush_r+0x1c>
 800719e:	e7e4      	b.n	800716a <__sflush_r+0xba>
 80071a0:	2301      	movs	r3, #1
 80071a2:	4640      	mov	r0, r8
 80071a4:	69e9      	ldr	r1, [r5, #28]
 80071a6:	47b0      	blx	r6
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	4602      	mov	r2, r0
 80071ac:	d019      	beq.n	80071e2 <__sflush_r+0x132>
 80071ae:	89ab      	ldrh	r3, [r5, #12]
 80071b0:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80071b2:	e79a      	b.n	80070ea <__sflush_r+0x3a>
 80071b4:	f8d8 1000 	ldr.w	r1, [r8]
 80071b8:	2900      	cmp	r1, #0
 80071ba:	d0e1      	beq.n	8007180 <__sflush_r+0xd0>
 80071bc:	291d      	cmp	r1, #29
 80071be:	d007      	beq.n	80071d0 <__sflush_r+0x120>
 80071c0:	2916      	cmp	r1, #22
 80071c2:	d005      	beq.n	80071d0 <__sflush_r+0x120>
 80071c4:	89ab      	ldrh	r3, [r5, #12]
 80071c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ca:	81ab      	strh	r3, [r5, #12]
 80071cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d0:	89ab      	ldrh	r3, [r5, #12]
 80071d2:	692a      	ldr	r2, [r5, #16]
 80071d4:	602a      	str	r2, [r5, #0]
 80071d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071da:	2200      	movs	r2, #0
 80071dc:	81ab      	strh	r3, [r5, #12]
 80071de:	606a      	str	r2, [r5, #4]
 80071e0:	e79c      	b.n	800711c <__sflush_r+0x6c>
 80071e2:	f8d8 3000 	ldr.w	r3, [r8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0e1      	beq.n	80071ae <__sflush_r+0xfe>
 80071ea:	2b1d      	cmp	r3, #29
 80071ec:	d007      	beq.n	80071fe <__sflush_r+0x14e>
 80071ee:	2b16      	cmp	r3, #22
 80071f0:	d005      	beq.n	80071fe <__sflush_r+0x14e>
 80071f2:	89ab      	ldrh	r3, [r5, #12]
 80071f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071f8:	81ab      	strh	r3, [r5, #12]
 80071fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071fe:	f8c8 4000 	str.w	r4, [r8]
 8007202:	e7b2      	b.n	800716a <__sflush_r+0xba>

08007204 <_fflush_r>:
 8007204:	b510      	push	{r4, lr}
 8007206:	4604      	mov	r4, r0
 8007208:	b082      	sub	sp, #8
 800720a:	b108      	cbz	r0, 8007210 <_fflush_r+0xc>
 800720c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800720e:	b153      	cbz	r3, 8007226 <_fflush_r+0x22>
 8007210:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8007214:	b908      	cbnz	r0, 800721a <_fflush_r+0x16>
 8007216:	b002      	add	sp, #8
 8007218:	bd10      	pop	{r4, pc}
 800721a:	4620      	mov	r0, r4
 800721c:	b002      	add	sp, #8
 800721e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007222:	f7ff bf45 	b.w	80070b0 <__sflush_r>
 8007226:	9101      	str	r1, [sp, #4]
 8007228:	f000 f880 	bl	800732c <__sinit>
 800722c:	9901      	ldr	r1, [sp, #4]
 800722e:	e7ef      	b.n	8007210 <_fflush_r+0xc>

08007230 <_cleanup_r>:
 8007230:	4901      	ldr	r1, [pc, #4]	; (8007238 <_cleanup_r+0x8>)
 8007232:	f000 bb99 	b.w	8007968 <_fwalk_reent>
 8007236:	bf00      	nop
 8007238:	08008f01 	.word	0x08008f01

0800723c <__sinit.part.1>:
 800723c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007240:	4b35      	ldr	r3, [pc, #212]	; (8007318 <__sinit.part.1+0xdc>)
 8007242:	6845      	ldr	r5, [r0, #4]
 8007244:	63c3      	str	r3, [r0, #60]	; 0x3c
 8007246:	2400      	movs	r4, #0
 8007248:	4607      	mov	r7, r0
 800724a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800724e:	2304      	movs	r3, #4
 8007250:	2103      	movs	r1, #3
 8007252:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8007256:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 800725a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 800725e:	b083      	sub	sp, #12
 8007260:	602c      	str	r4, [r5, #0]
 8007262:	606c      	str	r4, [r5, #4]
 8007264:	60ac      	str	r4, [r5, #8]
 8007266:	666c      	str	r4, [r5, #100]	; 0x64
 8007268:	81ec      	strh	r4, [r5, #14]
 800726a:	612c      	str	r4, [r5, #16]
 800726c:	616c      	str	r4, [r5, #20]
 800726e:	61ac      	str	r4, [r5, #24]
 8007270:	81ab      	strh	r3, [r5, #12]
 8007272:	4621      	mov	r1, r4
 8007274:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8007278:	2208      	movs	r2, #8
 800727a:	f000 ff59 	bl	8008130 <memset>
 800727e:	68be      	ldr	r6, [r7, #8]
 8007280:	f8df b098 	ldr.w	fp, [pc, #152]	; 800731c <__sinit.part.1+0xe0>
 8007284:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007320 <__sinit.part.1+0xe4>
 8007288:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8007324 <__sinit.part.1+0xe8>
 800728c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8007328 <__sinit.part.1+0xec>
 8007290:	f8c5 b020 	str.w	fp, [r5, #32]
 8007294:	2301      	movs	r3, #1
 8007296:	2209      	movs	r2, #9
 8007298:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800729c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80072a0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80072a4:	61ed      	str	r5, [r5, #28]
 80072a6:	4621      	mov	r1, r4
 80072a8:	81f3      	strh	r3, [r6, #14]
 80072aa:	81b2      	strh	r2, [r6, #12]
 80072ac:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80072b0:	6034      	str	r4, [r6, #0]
 80072b2:	6074      	str	r4, [r6, #4]
 80072b4:	60b4      	str	r4, [r6, #8]
 80072b6:	6674      	str	r4, [r6, #100]	; 0x64
 80072b8:	6134      	str	r4, [r6, #16]
 80072ba:	6174      	str	r4, [r6, #20]
 80072bc:	61b4      	str	r4, [r6, #24]
 80072be:	2208      	movs	r2, #8
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	f000 ff35 	bl	8008130 <memset>
 80072c6:	68fd      	ldr	r5, [r7, #12]
 80072c8:	61f6      	str	r6, [r6, #28]
 80072ca:	2012      	movs	r0, #18
 80072cc:	2202      	movs	r2, #2
 80072ce:	f8c6 b020 	str.w	fp, [r6, #32]
 80072d2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 80072d6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 80072da:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 80072de:	4621      	mov	r1, r4
 80072e0:	81a8      	strh	r0, [r5, #12]
 80072e2:	81ea      	strh	r2, [r5, #14]
 80072e4:	602c      	str	r4, [r5, #0]
 80072e6:	606c      	str	r4, [r5, #4]
 80072e8:	60ac      	str	r4, [r5, #8]
 80072ea:	666c      	str	r4, [r5, #100]	; 0x64
 80072ec:	612c      	str	r4, [r5, #16]
 80072ee:	616c      	str	r4, [r5, #20]
 80072f0:	61ac      	str	r4, [r5, #24]
 80072f2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80072f6:	2208      	movs	r2, #8
 80072f8:	f000 ff1a 	bl	8008130 <memset>
 80072fc:	9b01      	ldr	r3, [sp, #4]
 80072fe:	61ed      	str	r5, [r5, #28]
 8007300:	f8c5 b020 	str.w	fp, [r5, #32]
 8007304:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8007308:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800730c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8007310:	63bb      	str	r3, [r7, #56]	; 0x38
 8007312:	b003      	add	sp, #12
 8007314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007318:	08007231 	.word	0x08007231
 800731c:	08008cb9 	.word	0x08008cb9
 8007320:	08008cdd 	.word	0x08008cdd
 8007324:	08008d15 	.word	0x08008d15
 8007328:	08008d35 	.word	0x08008d35

0800732c <__sinit>:
 800732c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800732e:	b103      	cbz	r3, 8007332 <__sinit+0x6>
 8007330:	4770      	bx	lr
 8007332:	f7ff bf83 	b.w	800723c <__sinit.part.1>
 8007336:	bf00      	nop

08007338 <__sfp_lock_acquire>:
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop

0800733c <__sfp_lock_release>:
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop

08007340 <_fputwc_r>:
 8007340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007344:	8993      	ldrh	r3, [r2, #12]
 8007346:	4614      	mov	r4, r2
 8007348:	049a      	lsls	r2, r3, #18
 800734a:	b082      	sub	sp, #8
 800734c:	4607      	mov	r7, r0
 800734e:	460e      	mov	r6, r1
 8007350:	d406      	bmi.n	8007360 <_fputwc_r+0x20>
 8007352:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007354:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800735c:	81a3      	strh	r3, [r4, #12]
 800735e:	6662      	str	r2, [r4, #100]	; 0x64
 8007360:	f000 fb30 	bl	80079c4 <__locale_mb_cur_max>
 8007364:	2801      	cmp	r0, #1
 8007366:	d041      	beq.n	80073ec <_fputwc_r+0xac>
 8007368:	4638      	mov	r0, r7
 800736a:	a901      	add	r1, sp, #4
 800736c:	4632      	mov	r2, r6
 800736e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8007372:	f001 fd37 	bl	8008de4 <_wcrtomb_r>
 8007376:	f1b0 3fff 	cmp.w	r0, #4294967295
 800737a:	4680      	mov	r8, r0
 800737c:	d02f      	beq.n	80073de <_fputwc_r+0x9e>
 800737e:	2800      	cmp	r0, #0
 8007380:	d03c      	beq.n	80073fc <_fputwc_r+0xbc>
 8007382:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8007386:	2500      	movs	r5, #0
 8007388:	e009      	b.n	800739e <_fputwc_r+0x5e>
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	7019      	strb	r1, [r3, #0]
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	3301      	adds	r3, #1
 8007392:	6023      	str	r3, [r4, #0]
 8007394:	3501      	adds	r5, #1
 8007396:	45a8      	cmp	r8, r5
 8007398:	d930      	bls.n	80073fc <_fputwc_r+0xbc>
 800739a:	ab01      	add	r3, sp, #4
 800739c:	5d59      	ldrb	r1, [r3, r5]
 800739e:	68a3      	ldr	r3, [r4, #8]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	60a3      	str	r3, [r4, #8]
 80073a6:	daf0      	bge.n	800738a <_fputwc_r+0x4a>
 80073a8:	69a2      	ldr	r2, [r4, #24]
 80073aa:	4293      	cmp	r3, r2
 80073ac:	db07      	blt.n	80073be <_fputwc_r+0x7e>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	7019      	strb	r1, [r3, #0]
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	7819      	ldrb	r1, [r3, #0]
 80073b6:	290a      	cmp	r1, #10
 80073b8:	f103 0301 	add.w	r3, r3, #1
 80073bc:	d1e9      	bne.n	8007392 <_fputwc_r+0x52>
 80073be:	4638      	mov	r0, r7
 80073c0:	4622      	mov	r2, r4
 80073c2:	f001 fcbb 	bl	8008d3c <__swbuf_r>
 80073c6:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 80073ca:	fab0 f080 	clz	r0, r0
 80073ce:	0940      	lsrs	r0, r0, #5
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d0df      	beq.n	8007394 <_fputwc_r+0x54>
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295
 80073d8:	b002      	add	sp, #8
 80073da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073de:	89a3      	ldrh	r3, [r4, #12]
 80073e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073e4:	81a3      	strh	r3, [r4, #12]
 80073e6:	b002      	add	sp, #8
 80073e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ec:	1e73      	subs	r3, r6, #1
 80073ee:	2bfe      	cmp	r3, #254	; 0xfe
 80073f0:	d8ba      	bhi.n	8007368 <_fputwc_r+0x28>
 80073f2:	b2f1      	uxtb	r1, r6
 80073f4:	4680      	mov	r8, r0
 80073f6:	f88d 1004 	strb.w	r1, [sp, #4]
 80073fa:	e7c4      	b.n	8007386 <_fputwc_r+0x46>
 80073fc:	4630      	mov	r0, r6
 80073fe:	b002      	add	sp, #8
 8007400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007404 <_malloc_trim_r>:
 8007404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007406:	4f23      	ldr	r7, [pc, #140]	; (8007494 <_malloc_trim_r+0x90>)
 8007408:	460c      	mov	r4, r1
 800740a:	4606      	mov	r6, r0
 800740c:	f000 fede 	bl	80081cc <__malloc_lock>
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	685d      	ldr	r5, [r3, #4]
 8007414:	f025 0503 	bic.w	r5, r5, #3
 8007418:	1b29      	subs	r1, r5, r4
 800741a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800741e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8007422:	f021 010f 	bic.w	r1, r1, #15
 8007426:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800742a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800742e:	db07      	blt.n	8007440 <_malloc_trim_r+0x3c>
 8007430:	4630      	mov	r0, r6
 8007432:	2100      	movs	r1, #0
 8007434:	f001 fbe4 	bl	8008c00 <_sbrk_r>
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	442b      	add	r3, r5
 800743c:	4298      	cmp	r0, r3
 800743e:	d004      	beq.n	800744a <_malloc_trim_r+0x46>
 8007440:	4630      	mov	r0, r6
 8007442:	f000 fec5 	bl	80081d0 <__malloc_unlock>
 8007446:	2000      	movs	r0, #0
 8007448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800744a:	4630      	mov	r0, r6
 800744c:	4261      	negs	r1, r4
 800744e:	f001 fbd7 	bl	8008c00 <_sbrk_r>
 8007452:	3001      	adds	r0, #1
 8007454:	d00d      	beq.n	8007472 <_malloc_trim_r+0x6e>
 8007456:	4b10      	ldr	r3, [pc, #64]	; (8007498 <_malloc_trim_r+0x94>)
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	6819      	ldr	r1, [r3, #0]
 800745c:	1b2d      	subs	r5, r5, r4
 800745e:	f045 0501 	orr.w	r5, r5, #1
 8007462:	4630      	mov	r0, r6
 8007464:	1b09      	subs	r1, r1, r4
 8007466:	6055      	str	r5, [r2, #4]
 8007468:	6019      	str	r1, [r3, #0]
 800746a:	f000 feb1 	bl	80081d0 <__malloc_unlock>
 800746e:	2001      	movs	r0, #1
 8007470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007472:	4630      	mov	r0, r6
 8007474:	2100      	movs	r1, #0
 8007476:	f001 fbc3 	bl	8008c00 <_sbrk_r>
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	1a83      	subs	r3, r0, r2
 800747e:	2b0f      	cmp	r3, #15
 8007480:	ddde      	ble.n	8007440 <_malloc_trim_r+0x3c>
 8007482:	4c06      	ldr	r4, [pc, #24]	; (800749c <_malloc_trim_r+0x98>)
 8007484:	4904      	ldr	r1, [pc, #16]	; (8007498 <_malloc_trim_r+0x94>)
 8007486:	6824      	ldr	r4, [r4, #0]
 8007488:	f043 0301 	orr.w	r3, r3, #1
 800748c:	1b00      	subs	r0, r0, r4
 800748e:	6053      	str	r3, [r2, #4]
 8007490:	6008      	str	r0, [r1, #0]
 8007492:	e7d5      	b.n	8007440 <_malloc_trim_r+0x3c>
 8007494:	20000518 	.word	0x20000518
 8007498:	20001358 	.word	0x20001358
 800749c:	20000924 	.word	0x20000924

080074a0 <_free_r>:
 80074a0:	2900      	cmp	r1, #0
 80074a2:	d04e      	beq.n	8007542 <_free_r+0xa2>
 80074a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a8:	460c      	mov	r4, r1
 80074aa:	4680      	mov	r8, r0
 80074ac:	f000 fe8e 	bl	80081cc <__malloc_lock>
 80074b0:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80074b4:	4962      	ldr	r1, [pc, #392]	; (8007640 <_free_r+0x1a0>)
 80074b6:	f027 0201 	bic.w	r2, r7, #1
 80074ba:	f1a4 0508 	sub.w	r5, r4, #8
 80074be:	18ab      	adds	r3, r5, r2
 80074c0:	688e      	ldr	r6, [r1, #8]
 80074c2:	6858      	ldr	r0, [r3, #4]
 80074c4:	429e      	cmp	r6, r3
 80074c6:	f020 0003 	bic.w	r0, r0, #3
 80074ca:	d05a      	beq.n	8007582 <_free_r+0xe2>
 80074cc:	07fe      	lsls	r6, r7, #31
 80074ce:	6058      	str	r0, [r3, #4]
 80074d0:	d40b      	bmi.n	80074ea <_free_r+0x4a>
 80074d2:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80074d6:	1bed      	subs	r5, r5, r7
 80074d8:	f101 0e08 	add.w	lr, r1, #8
 80074dc:	68ac      	ldr	r4, [r5, #8]
 80074de:	4574      	cmp	r4, lr
 80074e0:	443a      	add	r2, r7
 80074e2:	d067      	beq.n	80075b4 <_free_r+0x114>
 80074e4:	68ef      	ldr	r7, [r5, #12]
 80074e6:	60e7      	str	r7, [r4, #12]
 80074e8:	60bc      	str	r4, [r7, #8]
 80074ea:	181c      	adds	r4, r3, r0
 80074ec:	6864      	ldr	r4, [r4, #4]
 80074ee:	07e4      	lsls	r4, r4, #31
 80074f0:	d40c      	bmi.n	800750c <_free_r+0x6c>
 80074f2:	4f54      	ldr	r7, [pc, #336]	; (8007644 <_free_r+0x1a4>)
 80074f4:	689c      	ldr	r4, [r3, #8]
 80074f6:	42bc      	cmp	r4, r7
 80074f8:	4402      	add	r2, r0
 80074fa:	d07c      	beq.n	80075f6 <_free_r+0x156>
 80074fc:	68d8      	ldr	r0, [r3, #12]
 80074fe:	60e0      	str	r0, [r4, #12]
 8007500:	f042 0301 	orr.w	r3, r2, #1
 8007504:	6084      	str	r4, [r0, #8]
 8007506:	606b      	str	r3, [r5, #4]
 8007508:	50aa      	str	r2, [r5, r2]
 800750a:	e003      	b.n	8007514 <_free_r+0x74>
 800750c:	f042 0301 	orr.w	r3, r2, #1
 8007510:	606b      	str	r3, [r5, #4]
 8007512:	50aa      	str	r2, [r5, r2]
 8007514:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007518:	d214      	bcs.n	8007544 <_free_r+0xa4>
 800751a:	08d2      	lsrs	r2, r2, #3
 800751c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8007520:	6848      	ldr	r0, [r1, #4]
 8007522:	689f      	ldr	r7, [r3, #8]
 8007524:	60af      	str	r7, [r5, #8]
 8007526:	1092      	asrs	r2, r2, #2
 8007528:	2401      	movs	r4, #1
 800752a:	fa04 f202 	lsl.w	r2, r4, r2
 800752e:	4310      	orrs	r0, r2
 8007530:	60eb      	str	r3, [r5, #12]
 8007532:	6048      	str	r0, [r1, #4]
 8007534:	609d      	str	r5, [r3, #8]
 8007536:	60fd      	str	r5, [r7, #12]
 8007538:	4640      	mov	r0, r8
 800753a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800753e:	f000 be47 	b.w	80081d0 <__malloc_unlock>
 8007542:	4770      	bx	lr
 8007544:	0a53      	lsrs	r3, r2, #9
 8007546:	2b04      	cmp	r3, #4
 8007548:	d847      	bhi.n	80075da <_free_r+0x13a>
 800754a:	0993      	lsrs	r3, r2, #6
 800754c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8007550:	0060      	lsls	r0, r4, #1
 8007552:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8007556:	493a      	ldr	r1, [pc, #232]	; (8007640 <_free_r+0x1a0>)
 8007558:	6883      	ldr	r3, [r0, #8]
 800755a:	4283      	cmp	r3, r0
 800755c:	d043      	beq.n	80075e6 <_free_r+0x146>
 800755e:	6859      	ldr	r1, [r3, #4]
 8007560:	f021 0103 	bic.w	r1, r1, #3
 8007564:	4291      	cmp	r1, r2
 8007566:	d902      	bls.n	800756e <_free_r+0xce>
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	4298      	cmp	r0, r3
 800756c:	d1f7      	bne.n	800755e <_free_r+0xbe>
 800756e:	68da      	ldr	r2, [r3, #12]
 8007570:	60ea      	str	r2, [r5, #12]
 8007572:	60ab      	str	r3, [r5, #8]
 8007574:	4640      	mov	r0, r8
 8007576:	6095      	str	r5, [r2, #8]
 8007578:	60dd      	str	r5, [r3, #12]
 800757a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800757e:	f000 be27 	b.w	80081d0 <__malloc_unlock>
 8007582:	07ff      	lsls	r7, r7, #31
 8007584:	4402      	add	r2, r0
 8007586:	d407      	bmi.n	8007598 <_free_r+0xf8>
 8007588:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800758c:	1aed      	subs	r5, r5, r3
 800758e:	441a      	add	r2, r3
 8007590:	68a8      	ldr	r0, [r5, #8]
 8007592:	68eb      	ldr	r3, [r5, #12]
 8007594:	60c3      	str	r3, [r0, #12]
 8007596:	6098      	str	r0, [r3, #8]
 8007598:	4b2b      	ldr	r3, [pc, #172]	; (8007648 <_free_r+0x1a8>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f042 0001 	orr.w	r0, r2, #1
 80075a0:	429a      	cmp	r2, r3
 80075a2:	6068      	str	r0, [r5, #4]
 80075a4:	608d      	str	r5, [r1, #8]
 80075a6:	d3c7      	bcc.n	8007538 <_free_r+0x98>
 80075a8:	4b28      	ldr	r3, [pc, #160]	; (800764c <_free_r+0x1ac>)
 80075aa:	4640      	mov	r0, r8
 80075ac:	6819      	ldr	r1, [r3, #0]
 80075ae:	f7ff ff29 	bl	8007404 <_malloc_trim_r>
 80075b2:	e7c1      	b.n	8007538 <_free_r+0x98>
 80075b4:	1819      	adds	r1, r3, r0
 80075b6:	6849      	ldr	r1, [r1, #4]
 80075b8:	07c9      	lsls	r1, r1, #31
 80075ba:	d409      	bmi.n	80075d0 <_free_r+0x130>
 80075bc:	68d9      	ldr	r1, [r3, #12]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	4402      	add	r2, r0
 80075c2:	f042 0001 	orr.w	r0, r2, #1
 80075c6:	60d9      	str	r1, [r3, #12]
 80075c8:	608b      	str	r3, [r1, #8]
 80075ca:	6068      	str	r0, [r5, #4]
 80075cc:	50aa      	str	r2, [r5, r2]
 80075ce:	e7b3      	b.n	8007538 <_free_r+0x98>
 80075d0:	f042 0301 	orr.w	r3, r2, #1
 80075d4:	606b      	str	r3, [r5, #4]
 80075d6:	50aa      	str	r2, [r5, r2]
 80075d8:	e7ae      	b.n	8007538 <_free_r+0x98>
 80075da:	2b14      	cmp	r3, #20
 80075dc:	d814      	bhi.n	8007608 <_free_r+0x168>
 80075de:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 80075e2:	0060      	lsls	r0, r4, #1
 80075e4:	e7b5      	b.n	8007552 <_free_r+0xb2>
 80075e6:	684a      	ldr	r2, [r1, #4]
 80075e8:	10a4      	asrs	r4, r4, #2
 80075ea:	2001      	movs	r0, #1
 80075ec:	40a0      	lsls	r0, r4
 80075ee:	4302      	orrs	r2, r0
 80075f0:	604a      	str	r2, [r1, #4]
 80075f2:	461a      	mov	r2, r3
 80075f4:	e7bc      	b.n	8007570 <_free_r+0xd0>
 80075f6:	f042 0301 	orr.w	r3, r2, #1
 80075fa:	614d      	str	r5, [r1, #20]
 80075fc:	610d      	str	r5, [r1, #16]
 80075fe:	60ec      	str	r4, [r5, #12]
 8007600:	60ac      	str	r4, [r5, #8]
 8007602:	606b      	str	r3, [r5, #4]
 8007604:	50aa      	str	r2, [r5, r2]
 8007606:	e797      	b.n	8007538 <_free_r+0x98>
 8007608:	2b54      	cmp	r3, #84	; 0x54
 800760a:	d804      	bhi.n	8007616 <_free_r+0x176>
 800760c:	0b13      	lsrs	r3, r2, #12
 800760e:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8007612:	0060      	lsls	r0, r4, #1
 8007614:	e79d      	b.n	8007552 <_free_r+0xb2>
 8007616:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800761a:	d804      	bhi.n	8007626 <_free_r+0x186>
 800761c:	0bd3      	lsrs	r3, r2, #15
 800761e:	f103 0477 	add.w	r4, r3, #119	; 0x77
 8007622:	0060      	lsls	r0, r4, #1
 8007624:	e795      	b.n	8007552 <_free_r+0xb2>
 8007626:	f240 5054 	movw	r0, #1364	; 0x554
 800762a:	4283      	cmp	r3, r0
 800762c:	d804      	bhi.n	8007638 <_free_r+0x198>
 800762e:	0c93      	lsrs	r3, r2, #18
 8007630:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8007634:	0060      	lsls	r0, r4, #1
 8007636:	e78c      	b.n	8007552 <_free_r+0xb2>
 8007638:	20fc      	movs	r0, #252	; 0xfc
 800763a:	247e      	movs	r4, #126	; 0x7e
 800763c:	e789      	b.n	8007552 <_free_r+0xb2>
 800763e:	bf00      	nop
 8007640:	20000518 	.word	0x20000518
 8007644:	20000520 	.word	0x20000520
 8007648:	20000920 	.word	0x20000920
 800764c:	20001354 	.word	0x20001354

08007650 <__sfvwrite_r>:
 8007650:	6893      	ldr	r3, [r2, #8]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d07a      	beq.n	800774c <__sfvwrite_r+0xfc>
 8007656:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 800765e:	f01e 0f08 	tst.w	lr, #8
 8007662:	b083      	sub	sp, #12
 8007664:	460c      	mov	r4, r1
 8007666:	4681      	mov	r9, r0
 8007668:	4616      	mov	r6, r2
 800766a:	d026      	beq.n	80076ba <__sfvwrite_r+0x6a>
 800766c:	690b      	ldr	r3, [r1, #16]
 800766e:	b323      	cbz	r3, 80076ba <__sfvwrite_r+0x6a>
 8007670:	f00e 0802 	and.w	r8, lr, #2
 8007674:	fa1f f088 	uxth.w	r0, r8
 8007678:	6835      	ldr	r5, [r6, #0]
 800767a:	b370      	cbz	r0, 80076da <__sfvwrite_r+0x8a>
 800767c:	f04f 0a00 	mov.w	sl, #0
 8007680:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8007964 <__sfvwrite_r+0x314>
 8007684:	46d0      	mov	r8, sl
 8007686:	45d8      	cmp	r8, fp
 8007688:	4643      	mov	r3, r8
 800768a:	4652      	mov	r2, sl
 800768c:	bf28      	it	cs
 800768e:	465b      	movcs	r3, fp
 8007690:	4648      	mov	r0, r9
 8007692:	f1b8 0f00 	cmp.w	r8, #0
 8007696:	d053      	beq.n	8007740 <__sfvwrite_r+0xf0>
 8007698:	69e1      	ldr	r1, [r4, #28]
 800769a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800769c:	47b8      	blx	r7
 800769e:	2800      	cmp	r0, #0
 80076a0:	dd73      	ble.n	800778a <__sfvwrite_r+0x13a>
 80076a2:	68b3      	ldr	r3, [r6, #8]
 80076a4:	1a1b      	subs	r3, r3, r0
 80076a6:	4482      	add	sl, r0
 80076a8:	ebc0 0808 	rsb	r8, r0, r8
 80076ac:	60b3      	str	r3, [r6, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e9      	bne.n	8007686 <__sfvwrite_r+0x36>
 80076b2:	2000      	movs	r0, #0
 80076b4:	b003      	add	sp, #12
 80076b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ba:	4648      	mov	r0, r9
 80076bc:	4621      	mov	r1, r4
 80076be:	f7fe fca9 	bl	8006014 <__swsetup_r>
 80076c2:	2800      	cmp	r0, #0
 80076c4:	f040 8145 	bne.w	8007952 <__sfvwrite_r+0x302>
 80076c8:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 80076cc:	6835      	ldr	r5, [r6, #0]
 80076ce:	f00e 0802 	and.w	r8, lr, #2
 80076d2:	fa1f f088 	uxth.w	r0, r8
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d1d0      	bne.n	800767c <__sfvwrite_r+0x2c>
 80076da:	f01e 0b01 	ands.w	fp, lr, #1
 80076de:	d15d      	bne.n	800779c <__sfvwrite_r+0x14c>
 80076e0:	46d8      	mov	r8, fp
 80076e2:	f1b8 0f00 	cmp.w	r8, #0
 80076e6:	d025      	beq.n	8007734 <__sfvwrite_r+0xe4>
 80076e8:	f41e 7f00 	tst.w	lr, #512	; 0x200
 80076ec:	68a7      	ldr	r7, [r4, #8]
 80076ee:	d02f      	beq.n	8007750 <__sfvwrite_r+0x100>
 80076f0:	45b8      	cmp	r8, r7
 80076f2:	46ba      	mov	sl, r7
 80076f4:	f0c0 80a9 	bcc.w	800784a <__sfvwrite_r+0x1fa>
 80076f8:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 80076fc:	f040 80b6 	bne.w	800786c <__sfvwrite_r+0x21c>
 8007700:	6820      	ldr	r0, [r4, #0]
 8007702:	4652      	mov	r2, sl
 8007704:	4659      	mov	r1, fp
 8007706:	f000 fcaf 	bl	8008068 <memmove>
 800770a:	68a0      	ldr	r0, [r4, #8]
 800770c:	6822      	ldr	r2, [r4, #0]
 800770e:	1bc0      	subs	r0, r0, r7
 8007710:	eb02 030a 	add.w	r3, r2, sl
 8007714:	60a0      	str	r0, [r4, #8]
 8007716:	6023      	str	r3, [r4, #0]
 8007718:	4640      	mov	r0, r8
 800771a:	68b3      	ldr	r3, [r6, #8]
 800771c:	1a1b      	subs	r3, r3, r0
 800771e:	4483      	add	fp, r0
 8007720:	ebc0 0808 	rsb	r8, r0, r8
 8007724:	60b3      	str	r3, [r6, #8]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d0c3      	beq.n	80076b2 <__sfvwrite_r+0x62>
 800772a:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 800772e:	f1b8 0f00 	cmp.w	r8, #0
 8007732:	d1d9      	bne.n	80076e8 <__sfvwrite_r+0x98>
 8007734:	f8d5 b000 	ldr.w	fp, [r5]
 8007738:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800773c:	3508      	adds	r5, #8
 800773e:	e7d0      	b.n	80076e2 <__sfvwrite_r+0x92>
 8007740:	f8d5 a000 	ldr.w	sl, [r5]
 8007744:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8007748:	3508      	adds	r5, #8
 800774a:	e79c      	b.n	8007686 <__sfvwrite_r+0x36>
 800774c:	2000      	movs	r0, #0
 800774e:	4770      	bx	lr
 8007750:	6820      	ldr	r0, [r4, #0]
 8007752:	6923      	ldr	r3, [r4, #16]
 8007754:	4298      	cmp	r0, r3
 8007756:	d803      	bhi.n	8007760 <__sfvwrite_r+0x110>
 8007758:	6962      	ldr	r2, [r4, #20]
 800775a:	4590      	cmp	r8, r2
 800775c:	f080 80b9 	bcs.w	80078d2 <__sfvwrite_r+0x282>
 8007760:	4547      	cmp	r7, r8
 8007762:	bf28      	it	cs
 8007764:	4647      	movcs	r7, r8
 8007766:	463a      	mov	r2, r7
 8007768:	4659      	mov	r1, fp
 800776a:	f000 fc7d 	bl	8008068 <memmove>
 800776e:	68a3      	ldr	r3, [r4, #8]
 8007770:	6822      	ldr	r2, [r4, #0]
 8007772:	1bdb      	subs	r3, r3, r7
 8007774:	443a      	add	r2, r7
 8007776:	60a3      	str	r3, [r4, #8]
 8007778:	6022      	str	r2, [r4, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d14a      	bne.n	8007814 <__sfvwrite_r+0x1c4>
 800777e:	4648      	mov	r0, r9
 8007780:	4621      	mov	r1, r4
 8007782:	f7ff fd3f 	bl	8007204 <_fflush_r>
 8007786:	2800      	cmp	r0, #0
 8007788:	d044      	beq.n	8007814 <__sfvwrite_r+0x1c4>
 800778a:	89a3      	ldrh	r3, [r4, #12]
 800778c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007790:	f04f 30ff 	mov.w	r0, #4294967295
 8007794:	81a3      	strh	r3, [r4, #12]
 8007796:	b003      	add	sp, #12
 8007798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800779c:	4680      	mov	r8, r0
 800779e:	9000      	str	r0, [sp, #0]
 80077a0:	4683      	mov	fp, r0
 80077a2:	4682      	mov	sl, r0
 80077a4:	f1ba 0f00 	cmp.w	sl, #0
 80077a8:	d02c      	beq.n	8007804 <__sfvwrite_r+0x1b4>
 80077aa:	9b00      	ldr	r3, [sp, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d050      	beq.n	8007852 <__sfvwrite_r+0x202>
 80077b0:	6820      	ldr	r0, [r4, #0]
 80077b2:	6921      	ldr	r1, [r4, #16]
 80077b4:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80077b8:	6962      	ldr	r2, [r4, #20]
 80077ba:	45d0      	cmp	r8, sl
 80077bc:	4643      	mov	r3, r8
 80077be:	bf28      	it	cs
 80077c0:	4653      	movcs	r3, sl
 80077c2:	4288      	cmp	r0, r1
 80077c4:	461f      	mov	r7, r3
 80077c6:	d904      	bls.n	80077d2 <__sfvwrite_r+0x182>
 80077c8:	eb0e 0c02 	add.w	ip, lr, r2
 80077cc:	4563      	cmp	r3, ip
 80077ce:	f300 8092 	bgt.w	80078f6 <__sfvwrite_r+0x2a6>
 80077d2:	4293      	cmp	r3, r2
 80077d4:	db20      	blt.n	8007818 <__sfvwrite_r+0x1c8>
 80077d6:	4613      	mov	r3, r2
 80077d8:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80077da:	69e1      	ldr	r1, [r4, #28]
 80077dc:	4648      	mov	r0, r9
 80077de:	465a      	mov	r2, fp
 80077e0:	47b8      	blx	r7
 80077e2:	1e07      	subs	r7, r0, #0
 80077e4:	ddd1      	ble.n	800778a <__sfvwrite_r+0x13a>
 80077e6:	ebb8 0807 	subs.w	r8, r8, r7
 80077ea:	d025      	beq.n	8007838 <__sfvwrite_r+0x1e8>
 80077ec:	68b3      	ldr	r3, [r6, #8]
 80077ee:	1bdb      	subs	r3, r3, r7
 80077f0:	44bb      	add	fp, r7
 80077f2:	ebc7 0a0a 	rsb	sl, r7, sl
 80077f6:	60b3      	str	r3, [r6, #8]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f43f af5a 	beq.w	80076b2 <__sfvwrite_r+0x62>
 80077fe:	f1ba 0f00 	cmp.w	sl, #0
 8007802:	d1d2      	bne.n	80077aa <__sfvwrite_r+0x15a>
 8007804:	2300      	movs	r3, #0
 8007806:	f8d5 b000 	ldr.w	fp, [r5]
 800780a:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	3508      	adds	r5, #8
 8007812:	e7c7      	b.n	80077a4 <__sfvwrite_r+0x154>
 8007814:	4638      	mov	r0, r7
 8007816:	e780      	b.n	800771a <__sfvwrite_r+0xca>
 8007818:	461a      	mov	r2, r3
 800781a:	4659      	mov	r1, fp
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	f000 fc23 	bl	8008068 <memmove>
 8007822:	68a2      	ldr	r2, [r4, #8]
 8007824:	6821      	ldr	r1, [r4, #0]
 8007826:	9b01      	ldr	r3, [sp, #4]
 8007828:	ebb8 0807 	subs.w	r8, r8, r7
 800782c:	eba2 0203 	sub.w	r2, r2, r3
 8007830:	440b      	add	r3, r1
 8007832:	60a2      	str	r2, [r4, #8]
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	d1d9      	bne.n	80077ec <__sfvwrite_r+0x19c>
 8007838:	4648      	mov	r0, r9
 800783a:	4621      	mov	r1, r4
 800783c:	f7ff fce2 	bl	8007204 <_fflush_r>
 8007840:	2800      	cmp	r0, #0
 8007842:	d1a2      	bne.n	800778a <__sfvwrite_r+0x13a>
 8007844:	f8cd 8000 	str.w	r8, [sp]
 8007848:	e7d0      	b.n	80077ec <__sfvwrite_r+0x19c>
 800784a:	6820      	ldr	r0, [r4, #0]
 800784c:	4647      	mov	r7, r8
 800784e:	46c2      	mov	sl, r8
 8007850:	e757      	b.n	8007702 <__sfvwrite_r+0xb2>
 8007852:	4658      	mov	r0, fp
 8007854:	210a      	movs	r1, #10
 8007856:	4652      	mov	r2, sl
 8007858:	f000 fbbc 	bl	8007fd4 <memchr>
 800785c:	2800      	cmp	r0, #0
 800785e:	d073      	beq.n	8007948 <__sfvwrite_r+0x2f8>
 8007860:	3001      	adds	r0, #1
 8007862:	2301      	movs	r3, #1
 8007864:	ebcb 0800 	rsb	r8, fp, r0
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	e7a1      	b.n	80077b0 <__sfvwrite_r+0x160>
 800786c:	6967      	ldr	r7, [r4, #20]
 800786e:	6921      	ldr	r1, [r4, #16]
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8007876:	1a5b      	subs	r3, r3, r1
 8007878:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800787c:	1c58      	adds	r0, r3, #1
 800787e:	107f      	asrs	r7, r7, #1
 8007880:	4440      	add	r0, r8
 8007882:	4287      	cmp	r7, r0
 8007884:	463a      	mov	r2, r7
 8007886:	bf3c      	itt	cc
 8007888:	4607      	movcc	r7, r0
 800788a:	463a      	movcc	r2, r7
 800788c:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	d046      	beq.n	8007922 <__sfvwrite_r+0x2d2>
 8007894:	4611      	mov	r1, r2
 8007896:	4648      	mov	r0, r9
 8007898:	f000 f90e 	bl	8007ab8 <_malloc_r>
 800789c:	9b00      	ldr	r3, [sp, #0]
 800789e:	4682      	mov	sl, r0
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d059      	beq.n	8007958 <__sfvwrite_r+0x308>
 80078a4:	461a      	mov	r2, r3
 80078a6:	6921      	ldr	r1, [r4, #16]
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	f7f8 fc75 	bl	8000198 <memcpy>
 80078ae:	89a2      	ldrh	r2, [r4, #12]
 80078b0:	9b00      	ldr	r3, [sp, #0]
 80078b2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80078b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078ba:	81a2      	strh	r2, [r4, #12]
 80078bc:	eb0a 0003 	add.w	r0, sl, r3
 80078c0:	1afb      	subs	r3, r7, r3
 80078c2:	f8c4 a010 	str.w	sl, [r4, #16]
 80078c6:	6167      	str	r7, [r4, #20]
 80078c8:	6020      	str	r0, [r4, #0]
 80078ca:	60a3      	str	r3, [r4, #8]
 80078cc:	4647      	mov	r7, r8
 80078ce:	46c2      	mov	sl, r8
 80078d0:	e717      	b.n	8007702 <__sfvwrite_r+0xb2>
 80078d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80078d6:	4543      	cmp	r3, r8
 80078d8:	bf28      	it	cs
 80078da:	4643      	movcs	r3, r8
 80078dc:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80078de:	fb93 f3f2 	sdiv	r3, r3, r2
 80078e2:	4648      	mov	r0, r9
 80078e4:	fb03 f302 	mul.w	r3, r3, r2
 80078e8:	69e1      	ldr	r1, [r4, #28]
 80078ea:	465a      	mov	r2, fp
 80078ec:	47b8      	blx	r7
 80078ee:	2800      	cmp	r0, #0
 80078f0:	f73f af13 	bgt.w	800771a <__sfvwrite_r+0xca>
 80078f4:	e749      	b.n	800778a <__sfvwrite_r+0x13a>
 80078f6:	4662      	mov	r2, ip
 80078f8:	4659      	mov	r1, fp
 80078fa:	f8cd c004 	str.w	ip, [sp, #4]
 80078fe:	f000 fbb3 	bl	8008068 <memmove>
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007908:	4463      	add	r3, ip
 800790a:	6023      	str	r3, [r4, #0]
 800790c:	4648      	mov	r0, r9
 800790e:	4621      	mov	r1, r4
 8007910:	f7ff fc78 	bl	8007204 <_fflush_r>
 8007914:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007918:	2800      	cmp	r0, #0
 800791a:	f47f af36 	bne.w	800778a <__sfvwrite_r+0x13a>
 800791e:	4667      	mov	r7, ip
 8007920:	e761      	b.n	80077e6 <__sfvwrite_r+0x196>
 8007922:	4648      	mov	r0, r9
 8007924:	f000 ff4a 	bl	80087bc <_realloc_r>
 8007928:	9b00      	ldr	r3, [sp, #0]
 800792a:	4682      	mov	sl, r0
 800792c:	2800      	cmp	r0, #0
 800792e:	d1c5      	bne.n	80078bc <__sfvwrite_r+0x26c>
 8007930:	4648      	mov	r0, r9
 8007932:	6921      	ldr	r1, [r4, #16]
 8007934:	f7ff fdb4 	bl	80074a0 <_free_r>
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	220c      	movs	r2, #12
 800793c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007940:	b29b      	uxth	r3, r3
 8007942:	f8c9 2000 	str.w	r2, [r9]
 8007946:	e721      	b.n	800778c <__sfvwrite_r+0x13c>
 8007948:	2301      	movs	r3, #1
 800794a:	f10a 0801 	add.w	r8, sl, #1
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	e72e      	b.n	80077b0 <__sfvwrite_r+0x160>
 8007952:	f04f 30ff 	mov.w	r0, #4294967295
 8007956:	e6ad      	b.n	80076b4 <__sfvwrite_r+0x64>
 8007958:	230c      	movs	r3, #12
 800795a:	f8c9 3000 	str.w	r3, [r9]
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	e714      	b.n	800778c <__sfvwrite_r+0x13c>
 8007962:	bf00      	nop
 8007964:	7ffffc00 	.word	0x7ffffc00

08007968 <_fwalk_reent>:
 8007968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800796c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8007970:	d01f      	beq.n	80079b2 <_fwalk_reent+0x4a>
 8007972:	4688      	mov	r8, r1
 8007974:	4606      	mov	r6, r0
 8007976:	f04f 0900 	mov.w	r9, #0
 800797a:	687d      	ldr	r5, [r7, #4]
 800797c:	68bc      	ldr	r4, [r7, #8]
 800797e:	3d01      	subs	r5, #1
 8007980:	d411      	bmi.n	80079a6 <_fwalk_reent+0x3e>
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	2b01      	cmp	r3, #1
 8007986:	f105 35ff 	add.w	r5, r5, #4294967295
 800798a:	d908      	bls.n	800799e <_fwalk_reent+0x36>
 800798c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8007990:	3301      	adds	r3, #1
 8007992:	4621      	mov	r1, r4
 8007994:	4630      	mov	r0, r6
 8007996:	d002      	beq.n	800799e <_fwalk_reent+0x36>
 8007998:	47c0      	blx	r8
 800799a:	ea49 0900 	orr.w	r9, r9, r0
 800799e:	1c6b      	adds	r3, r5, #1
 80079a0:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80079a4:	d1ed      	bne.n	8007982 <_fwalk_reent+0x1a>
 80079a6:	683f      	ldr	r7, [r7, #0]
 80079a8:	2f00      	cmp	r7, #0
 80079aa:	d1e6      	bne.n	800797a <_fwalk_reent+0x12>
 80079ac:	4648      	mov	r0, r9
 80079ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b2:	46b9      	mov	r9, r7
 80079b4:	4648      	mov	r0, r9
 80079b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ba:	bf00      	nop

080079bc <__locale_charset>:
 80079bc:	4800      	ldr	r0, [pc, #0]	; (80079c0 <__locale_charset+0x4>)
 80079be:	4770      	bx	lr
 80079c0:	200004f4 	.word	0x200004f4

080079c4 <__locale_mb_cur_max>:
 80079c4:	4b01      	ldr	r3, [pc, #4]	; (80079cc <__locale_mb_cur_max+0x8>)
 80079c6:	6818      	ldr	r0, [r3, #0]
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	20000514 	.word	0x20000514

080079d0 <_localeconv_r>:
 80079d0:	4800      	ldr	r0, [pc, #0]	; (80079d4 <_localeconv_r+0x4>)
 80079d2:	4770      	bx	lr
 80079d4:	200004bc 	.word	0x200004bc

080079d8 <__smakebuf_r>:
 80079d8:	898b      	ldrh	r3, [r1, #12]
 80079da:	b29a      	uxth	r2, r3
 80079dc:	f012 0f02 	tst.w	r2, #2
 80079e0:	d13c      	bne.n	8007a5c <__smakebuf_r+0x84>
 80079e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079e4:	460c      	mov	r4, r1
 80079e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ea:	2900      	cmp	r1, #0
 80079ec:	b091      	sub	sp, #68	; 0x44
 80079ee:	4605      	mov	r5, r0
 80079f0:	db19      	blt.n	8007a26 <__smakebuf_r+0x4e>
 80079f2:	aa01      	add	r2, sp, #4
 80079f4:	f001 fac6 	bl	8008f84 <_fstat_r>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	db12      	blt.n	8007a22 <__smakebuf_r+0x4a>
 80079fc:	9b02      	ldr	r3, [sp, #8]
 80079fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a06:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8007a0a:	fab7 f787 	clz	r7, r7
 8007a0e:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8007a12:	d02a      	beq.n	8007a6a <__smakebuf_r+0x92>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a1a:	81a3      	strh	r3, [r4, #12]
 8007a1c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8007a20:	e00b      	b.n	8007a3a <__smakebuf_r+0x62>
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007a2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a2e:	81a3      	strh	r3, [r4, #12]
 8007a30:	bf0c      	ite	eq
 8007a32:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8007a36:	2640      	movne	r6, #64	; 0x40
 8007a38:	2700      	movs	r7, #0
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	f000 f83b 	bl	8007ab8 <_malloc_r>
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	b340      	cbz	r0, 8007a98 <__smakebuf_r+0xc0>
 8007a46:	4a1a      	ldr	r2, [pc, #104]	; (8007ab0 <__smakebuf_r+0xd8>)
 8007a48:	63ea      	str	r2, [r5, #60]	; 0x3c
 8007a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4e:	81a3      	strh	r3, [r4, #12]
 8007a50:	6020      	str	r0, [r4, #0]
 8007a52:	6120      	str	r0, [r4, #16]
 8007a54:	6166      	str	r6, [r4, #20]
 8007a56:	b99f      	cbnz	r7, 8007a80 <__smakebuf_r+0xa8>
 8007a58:	b011      	add	sp, #68	; 0x44
 8007a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a5c:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8007a60:	2201      	movs	r2, #1
 8007a62:	600b      	str	r3, [r1, #0]
 8007a64:	610b      	str	r3, [r1, #16]
 8007a66:	614a      	str	r2, [r1, #20]
 8007a68:	4770      	bx	lr
 8007a6a:	4b12      	ldr	r3, [pc, #72]	; (8007ab4 <__smakebuf_r+0xdc>)
 8007a6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d1d0      	bne.n	8007a14 <__smakebuf_r+0x3c>
 8007a72:	89a3      	ldrh	r3, [r4, #12]
 8007a74:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8007a78:	4333      	orrs	r3, r6
 8007a7a:	81a3      	strh	r3, [r4, #12]
 8007a7c:	64e6      	str	r6, [r4, #76]	; 0x4c
 8007a7e:	e7dc      	b.n	8007a3a <__smakebuf_r+0x62>
 8007a80:	4628      	mov	r0, r5
 8007a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a86:	f001 fa91 	bl	8008fac <_isatty_r>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d0e4      	beq.n	8007a58 <__smakebuf_r+0x80>
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	f043 0301 	orr.w	r3, r3, #1
 8007a94:	81a3      	strh	r3, [r4, #12]
 8007a96:	e7df      	b.n	8007a58 <__smakebuf_r+0x80>
 8007a98:	059a      	lsls	r2, r3, #22
 8007a9a:	d4dd      	bmi.n	8007a58 <__smakebuf_r+0x80>
 8007a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aa0:	f043 0302 	orr.w	r3, r3, #2
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	81a3      	strh	r3, [r4, #12]
 8007aa8:	6022      	str	r2, [r4, #0]
 8007aaa:	6122      	str	r2, [r4, #16]
 8007aac:	6161      	str	r1, [r4, #20]
 8007aae:	e7d3      	b.n	8007a58 <__smakebuf_r+0x80>
 8007ab0:	08007231 	.word	0x08007231
 8007ab4:	08008d15 	.word	0x08008d15

08007ab8 <_malloc_r>:
 8007ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	f101 050b 	add.w	r5, r1, #11
 8007ac0:	2d16      	cmp	r5, #22
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	d927      	bls.n	8007b18 <_malloc_r+0x60>
 8007ac8:	f035 0507 	bics.w	r5, r5, #7
 8007acc:	f100 80b6 	bmi.w	8007c3c <_malloc_r+0x184>
 8007ad0:	42a9      	cmp	r1, r5
 8007ad2:	f200 80b3 	bhi.w	8007c3c <_malloc_r+0x184>
 8007ad6:	f000 fb79 	bl	80081cc <__malloc_lock>
 8007ada:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8007ade:	d222      	bcs.n	8007b26 <_malloc_r+0x6e>
 8007ae0:	4fc2      	ldr	r7, [pc, #776]	; (8007dec <_malloc_r+0x334>)
 8007ae2:	08e8      	lsrs	r0, r5, #3
 8007ae4:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8007ae8:	68dc      	ldr	r4, [r3, #12]
 8007aea:	429c      	cmp	r4, r3
 8007aec:	f000 81c9 	beq.w	8007e82 <_malloc_r+0x3ca>
 8007af0:	6863      	ldr	r3, [r4, #4]
 8007af2:	68e1      	ldr	r1, [r4, #12]
 8007af4:	68a5      	ldr	r5, [r4, #8]
 8007af6:	f023 0303 	bic.w	r3, r3, #3
 8007afa:	4423      	add	r3, r4
 8007afc:	4630      	mov	r0, r6
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	60e9      	str	r1, [r5, #12]
 8007b02:	f042 0201 	orr.w	r2, r2, #1
 8007b06:	608d      	str	r5, [r1, #8]
 8007b08:	605a      	str	r2, [r3, #4]
 8007b0a:	f000 fb61 	bl	80081d0 <__malloc_unlock>
 8007b0e:	3408      	adds	r4, #8
 8007b10:	4620      	mov	r0, r4
 8007b12:	b003      	add	sp, #12
 8007b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b18:	2910      	cmp	r1, #16
 8007b1a:	f200 808f 	bhi.w	8007c3c <_malloc_r+0x184>
 8007b1e:	f000 fb55 	bl	80081cc <__malloc_lock>
 8007b22:	2510      	movs	r5, #16
 8007b24:	e7dc      	b.n	8007ae0 <_malloc_r+0x28>
 8007b26:	0a68      	lsrs	r0, r5, #9
 8007b28:	f000 808f 	beq.w	8007c4a <_malloc_r+0x192>
 8007b2c:	2804      	cmp	r0, #4
 8007b2e:	f200 8154 	bhi.w	8007dda <_malloc_r+0x322>
 8007b32:	09a8      	lsrs	r0, r5, #6
 8007b34:	3038      	adds	r0, #56	; 0x38
 8007b36:	0041      	lsls	r1, r0, #1
 8007b38:	4fac      	ldr	r7, [pc, #688]	; (8007dec <_malloc_r+0x334>)
 8007b3a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8007b3e:	68cc      	ldr	r4, [r1, #12]
 8007b40:	42a1      	cmp	r1, r4
 8007b42:	d106      	bne.n	8007b52 <_malloc_r+0x9a>
 8007b44:	e00c      	b.n	8007b60 <_malloc_r+0xa8>
 8007b46:	2a00      	cmp	r2, #0
 8007b48:	f280 8082 	bge.w	8007c50 <_malloc_r+0x198>
 8007b4c:	68e4      	ldr	r4, [r4, #12]
 8007b4e:	42a1      	cmp	r1, r4
 8007b50:	d006      	beq.n	8007b60 <_malloc_r+0xa8>
 8007b52:	6863      	ldr	r3, [r4, #4]
 8007b54:	f023 0303 	bic.w	r3, r3, #3
 8007b58:	1b5a      	subs	r2, r3, r5
 8007b5a:	2a0f      	cmp	r2, #15
 8007b5c:	ddf3      	ble.n	8007b46 <_malloc_r+0x8e>
 8007b5e:	3801      	subs	r0, #1
 8007b60:	3001      	adds	r0, #1
 8007b62:	49a2      	ldr	r1, [pc, #648]	; (8007dec <_malloc_r+0x334>)
 8007b64:	693c      	ldr	r4, [r7, #16]
 8007b66:	f101 0e08 	add.w	lr, r1, #8
 8007b6a:	4574      	cmp	r4, lr
 8007b6c:	f000 817e 	beq.w	8007e6c <_malloc_r+0x3b4>
 8007b70:	6863      	ldr	r3, [r4, #4]
 8007b72:	f023 0303 	bic.w	r3, r3, #3
 8007b76:	1b5a      	subs	r2, r3, r5
 8007b78:	2a0f      	cmp	r2, #15
 8007b7a:	f300 8164 	bgt.w	8007e46 <_malloc_r+0x38e>
 8007b7e:	2a00      	cmp	r2, #0
 8007b80:	f8c1 e014 	str.w	lr, [r1, #20]
 8007b84:	f8c1 e010 	str.w	lr, [r1, #16]
 8007b88:	da73      	bge.n	8007c72 <_malloc_r+0x1ba>
 8007b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b8e:	f080 8139 	bcs.w	8007e04 <_malloc_r+0x34c>
 8007b92:	08db      	lsrs	r3, r3, #3
 8007b94:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8007b98:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8007b9c:	684a      	ldr	r2, [r1, #4]
 8007b9e:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8007ba2:	f8c4 9008 	str.w	r9, [r4, #8]
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	fa03 f30c 	lsl.w	r3, r3, ip
 8007bac:	4313      	orrs	r3, r2
 8007bae:	f8c4 800c 	str.w	r8, [r4, #12]
 8007bb2:	604b      	str	r3, [r1, #4]
 8007bb4:	f8c8 4008 	str.w	r4, [r8, #8]
 8007bb8:	f8c9 400c 	str.w	r4, [r9, #12]
 8007bbc:	1082      	asrs	r2, r0, #2
 8007bbe:	2401      	movs	r4, #1
 8007bc0:	4094      	lsls	r4, r2
 8007bc2:	429c      	cmp	r4, r3
 8007bc4:	d862      	bhi.n	8007c8c <_malloc_r+0x1d4>
 8007bc6:	4223      	tst	r3, r4
 8007bc8:	d106      	bne.n	8007bd8 <_malloc_r+0x120>
 8007bca:	f020 0003 	bic.w	r0, r0, #3
 8007bce:	0064      	lsls	r4, r4, #1
 8007bd0:	4223      	tst	r3, r4
 8007bd2:	f100 0004 	add.w	r0, r0, #4
 8007bd6:	d0fa      	beq.n	8007bce <_malloc_r+0x116>
 8007bd8:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8007bdc:	46c4      	mov	ip, r8
 8007bde:	4681      	mov	r9, r0
 8007be0:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8007be4:	459c      	cmp	ip, r3
 8007be6:	d107      	bne.n	8007bf8 <_malloc_r+0x140>
 8007be8:	e142      	b.n	8007e70 <_malloc_r+0x3b8>
 8007bea:	2900      	cmp	r1, #0
 8007bec:	f280 8152 	bge.w	8007e94 <_malloc_r+0x3dc>
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	459c      	cmp	ip, r3
 8007bf4:	f000 813c 	beq.w	8007e70 <_malloc_r+0x3b8>
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	f022 0203 	bic.w	r2, r2, #3
 8007bfe:	1b51      	subs	r1, r2, r5
 8007c00:	290f      	cmp	r1, #15
 8007c02:	ddf2      	ble.n	8007bea <_malloc_r+0x132>
 8007c04:	461c      	mov	r4, r3
 8007c06:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8007c0a:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8007c0e:	195a      	adds	r2, r3, r5
 8007c10:	f045 0901 	orr.w	r9, r5, #1
 8007c14:	f041 0501 	orr.w	r5, r1, #1
 8007c18:	f8c3 9004 	str.w	r9, [r3, #4]
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f8c8 c00c 	str.w	ip, [r8, #12]
 8007c22:	f8cc 8008 	str.w	r8, [ip, #8]
 8007c26:	617a      	str	r2, [r7, #20]
 8007c28:	613a      	str	r2, [r7, #16]
 8007c2a:	f8c2 e00c 	str.w	lr, [r2, #12]
 8007c2e:	f8c2 e008 	str.w	lr, [r2, #8]
 8007c32:	6055      	str	r5, [r2, #4]
 8007c34:	5051      	str	r1, [r2, r1]
 8007c36:	f000 facb 	bl	80081d0 <__malloc_unlock>
 8007c3a:	e769      	b.n	8007b10 <_malloc_r+0x58>
 8007c3c:	2400      	movs	r4, #0
 8007c3e:	230c      	movs	r3, #12
 8007c40:	4620      	mov	r0, r4
 8007c42:	6033      	str	r3, [r6, #0]
 8007c44:	b003      	add	sp, #12
 8007c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4a:	217e      	movs	r1, #126	; 0x7e
 8007c4c:	203f      	movs	r0, #63	; 0x3f
 8007c4e:	e773      	b.n	8007b38 <_malloc_r+0x80>
 8007c50:	4423      	add	r3, r4
 8007c52:	68e1      	ldr	r1, [r4, #12]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	68a5      	ldr	r5, [r4, #8]
 8007c58:	f042 0201 	orr.w	r2, r2, #1
 8007c5c:	60e9      	str	r1, [r5, #12]
 8007c5e:	4630      	mov	r0, r6
 8007c60:	608d      	str	r5, [r1, #8]
 8007c62:	605a      	str	r2, [r3, #4]
 8007c64:	f000 fab4 	bl	80081d0 <__malloc_unlock>
 8007c68:	3408      	adds	r4, #8
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	b003      	add	sp, #12
 8007c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c72:	4423      	add	r3, r4
 8007c74:	4630      	mov	r0, r6
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	f042 0201 	orr.w	r2, r2, #1
 8007c7c:	605a      	str	r2, [r3, #4]
 8007c7e:	f000 faa7 	bl	80081d0 <__malloc_unlock>
 8007c82:	3408      	adds	r4, #8
 8007c84:	4620      	mov	r0, r4
 8007c86:	b003      	add	sp, #12
 8007c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c8c:	68bc      	ldr	r4, [r7, #8]
 8007c8e:	6863      	ldr	r3, [r4, #4]
 8007c90:	f023 0803 	bic.w	r8, r3, #3
 8007c94:	4545      	cmp	r5, r8
 8007c96:	d804      	bhi.n	8007ca2 <_malloc_r+0x1ea>
 8007c98:	ebc5 0308 	rsb	r3, r5, r8
 8007c9c:	2b0f      	cmp	r3, #15
 8007c9e:	f300 808c 	bgt.w	8007dba <_malloc_r+0x302>
 8007ca2:	4b53      	ldr	r3, [pc, #332]	; (8007df0 <_malloc_r+0x338>)
 8007ca4:	f8df a158 	ldr.w	sl, [pc, #344]	; 8007e00 <_malloc_r+0x348>
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	f8da 3000 	ldr.w	r3, [sl]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	442a      	add	r2, r5
 8007cb2:	eb04 0b08 	add.w	fp, r4, r8
 8007cb6:	f000 8150 	beq.w	8007f5a <_malloc_r+0x4a2>
 8007cba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007cbe:	320f      	adds	r2, #15
 8007cc0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8007cc4:	f022 020f 	bic.w	r2, r2, #15
 8007cc8:	4611      	mov	r1, r2
 8007cca:	4630      	mov	r0, r6
 8007ccc:	9201      	str	r2, [sp, #4]
 8007cce:	f000 ff97 	bl	8008c00 <_sbrk_r>
 8007cd2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007cd6:	4681      	mov	r9, r0
 8007cd8:	9a01      	ldr	r2, [sp, #4]
 8007cda:	f000 80f5 	beq.w	8007ec8 <_malloc_r+0x410>
 8007cde:	4583      	cmp	fp, r0
 8007ce0:	f200 80ef 	bhi.w	8007ec2 <_malloc_r+0x40a>
 8007ce4:	4b43      	ldr	r3, [pc, #268]	; (8007df4 <_malloc_r+0x33c>)
 8007ce6:	6819      	ldr	r1, [r3, #0]
 8007ce8:	45cb      	cmp	fp, r9
 8007cea:	4411      	add	r1, r2
 8007cec:	6019      	str	r1, [r3, #0]
 8007cee:	f000 813d 	beq.w	8007f6c <_malloc_r+0x4b4>
 8007cf2:	f8da 0000 	ldr.w	r0, [sl]
 8007cf6:	f8df e108 	ldr.w	lr, [pc, #264]	; 8007e00 <_malloc_r+0x348>
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	bf1b      	ittet	ne
 8007cfe:	ebcb 0b09 	rsbne	fp, fp, r9
 8007d02:	4459      	addne	r1, fp
 8007d04:	f8ce 9000 	streq.w	r9, [lr]
 8007d08:	6019      	strne	r1, [r3, #0]
 8007d0a:	f019 0107 	ands.w	r1, r9, #7
 8007d0e:	f000 8107 	beq.w	8007f20 <_malloc_r+0x468>
 8007d12:	f1c1 0008 	rsb	r0, r1, #8
 8007d16:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8007d1a:	4481      	add	r9, r0
 8007d1c:	3108      	adds	r1, #8
 8007d1e:	444a      	add	r2, r9
 8007d20:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007d24:	ebc2 0a01 	rsb	sl, r2, r1
 8007d28:	4651      	mov	r1, sl
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	f000 ff67 	bl	8008c00 <_sbrk_r>
 8007d32:	1c43      	adds	r3, r0, #1
 8007d34:	9b01      	ldr	r3, [sp, #4]
 8007d36:	f000 8127 	beq.w	8007f88 <_malloc_r+0x4d0>
 8007d3a:	ebc9 0200 	rsb	r2, r9, r0
 8007d3e:	4452      	add	r2, sl
 8007d40:	f042 0201 	orr.w	r2, r2, #1
 8007d44:	6819      	ldr	r1, [r3, #0]
 8007d46:	f8c7 9008 	str.w	r9, [r7, #8]
 8007d4a:	4451      	add	r1, sl
 8007d4c:	42bc      	cmp	r4, r7
 8007d4e:	f8c9 2004 	str.w	r2, [r9, #4]
 8007d52:	6019      	str	r1, [r3, #0]
 8007d54:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8007df4 <_malloc_r+0x33c>
 8007d58:	d016      	beq.n	8007d88 <_malloc_r+0x2d0>
 8007d5a:	f1b8 0f0f 	cmp.w	r8, #15
 8007d5e:	f240 80e2 	bls.w	8007f26 <_malloc_r+0x46e>
 8007d62:	6862      	ldr	r2, [r4, #4]
 8007d64:	f1a8 030c 	sub.w	r3, r8, #12
 8007d68:	f023 0307 	bic.w	r3, r3, #7
 8007d6c:	18e0      	adds	r0, r4, r3
 8007d6e:	f002 0201 	and.w	r2, r2, #1
 8007d72:	f04f 0e05 	mov.w	lr, #5
 8007d76:	431a      	orrs	r2, r3
 8007d78:	2b0f      	cmp	r3, #15
 8007d7a:	6062      	str	r2, [r4, #4]
 8007d7c:	f8c0 e004 	str.w	lr, [r0, #4]
 8007d80:	f8c0 e008 	str.w	lr, [r0, #8]
 8007d84:	f200 8104 	bhi.w	8007f90 <_malloc_r+0x4d8>
 8007d88:	4b1b      	ldr	r3, [pc, #108]	; (8007df8 <_malloc_r+0x340>)
 8007d8a:	68bc      	ldr	r4, [r7, #8]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	4291      	cmp	r1, r2
 8007d90:	bf88      	it	hi
 8007d92:	6019      	strhi	r1, [r3, #0]
 8007d94:	4b19      	ldr	r3, [pc, #100]	; (8007dfc <_malloc_r+0x344>)
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	4291      	cmp	r1, r2
 8007d9a:	6862      	ldr	r2, [r4, #4]
 8007d9c:	bf88      	it	hi
 8007d9e:	6019      	strhi	r1, [r3, #0]
 8007da0:	f022 0203 	bic.w	r2, r2, #3
 8007da4:	4295      	cmp	r5, r2
 8007da6:	eba2 0305 	sub.w	r3, r2, r5
 8007daa:	d801      	bhi.n	8007db0 <_malloc_r+0x2f8>
 8007dac:	2b0f      	cmp	r3, #15
 8007dae:	dc04      	bgt.n	8007dba <_malloc_r+0x302>
 8007db0:	4630      	mov	r0, r6
 8007db2:	f000 fa0d 	bl	80081d0 <__malloc_unlock>
 8007db6:	2400      	movs	r4, #0
 8007db8:	e6aa      	b.n	8007b10 <_malloc_r+0x58>
 8007dba:	1962      	adds	r2, r4, r5
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	f045 0501 	orr.w	r5, r5, #1
 8007dc4:	6065      	str	r5, [r4, #4]
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	60ba      	str	r2, [r7, #8]
 8007dca:	6053      	str	r3, [r2, #4]
 8007dcc:	f000 fa00 	bl	80081d0 <__malloc_unlock>
 8007dd0:	3408      	adds	r4, #8
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	b003      	add	sp, #12
 8007dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dda:	2814      	cmp	r0, #20
 8007ddc:	d969      	bls.n	8007eb2 <_malloc_r+0x3fa>
 8007dde:	2854      	cmp	r0, #84	; 0x54
 8007de0:	f200 8097 	bhi.w	8007f12 <_malloc_r+0x45a>
 8007de4:	0b28      	lsrs	r0, r5, #12
 8007de6:	306e      	adds	r0, #110	; 0x6e
 8007de8:	0041      	lsls	r1, r0, #1
 8007dea:	e6a5      	b.n	8007b38 <_malloc_r+0x80>
 8007dec:	20000518 	.word	0x20000518
 8007df0:	20001354 	.word	0x20001354
 8007df4:	20001358 	.word	0x20001358
 8007df8:	20001350 	.word	0x20001350
 8007dfc:	2000134c 	.word	0x2000134c
 8007e00:	20000924 	.word	0x20000924
 8007e04:	0a5a      	lsrs	r2, r3, #9
 8007e06:	2a04      	cmp	r2, #4
 8007e08:	d956      	bls.n	8007eb8 <_malloc_r+0x400>
 8007e0a:	2a14      	cmp	r2, #20
 8007e0c:	f200 80a7 	bhi.w	8007f5e <_malloc_r+0x4a6>
 8007e10:	325b      	adds	r2, #91	; 0x5b
 8007e12:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8007e16:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 8007e1a:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8007fd0 <_malloc_r+0x518>
 8007e1e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007e22:	4561      	cmp	r1, ip
 8007e24:	f000 8085 	beq.w	8007f32 <_malloc_r+0x47a>
 8007e28:	684a      	ldr	r2, [r1, #4]
 8007e2a:	f022 0203 	bic.w	r2, r2, #3
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d202      	bcs.n	8007e38 <_malloc_r+0x380>
 8007e32:	6889      	ldr	r1, [r1, #8]
 8007e34:	458c      	cmp	ip, r1
 8007e36:	d1f7      	bne.n	8007e28 <_malloc_r+0x370>
 8007e38:	68ca      	ldr	r2, [r1, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	60e2      	str	r2, [r4, #12]
 8007e3e:	60a1      	str	r1, [r4, #8]
 8007e40:	6094      	str	r4, [r2, #8]
 8007e42:	60cc      	str	r4, [r1, #12]
 8007e44:	e6ba      	b.n	8007bbc <_malloc_r+0x104>
 8007e46:	1963      	adds	r3, r4, r5
 8007e48:	f042 0701 	orr.w	r7, r2, #1
 8007e4c:	f045 0501 	orr.w	r5, r5, #1
 8007e50:	6065      	str	r5, [r4, #4]
 8007e52:	4630      	mov	r0, r6
 8007e54:	614b      	str	r3, [r1, #20]
 8007e56:	610b      	str	r3, [r1, #16]
 8007e58:	f8c3 e00c 	str.w	lr, [r3, #12]
 8007e5c:	f8c3 e008 	str.w	lr, [r3, #8]
 8007e60:	605f      	str	r7, [r3, #4]
 8007e62:	509a      	str	r2, [r3, r2]
 8007e64:	3408      	adds	r4, #8
 8007e66:	f000 f9b3 	bl	80081d0 <__malloc_unlock>
 8007e6a:	e651      	b.n	8007b10 <_malloc_r+0x58>
 8007e6c:	684b      	ldr	r3, [r1, #4]
 8007e6e:	e6a5      	b.n	8007bbc <_malloc_r+0x104>
 8007e70:	f109 0901 	add.w	r9, r9, #1
 8007e74:	f019 0f03 	tst.w	r9, #3
 8007e78:	f10c 0c08 	add.w	ip, ip, #8
 8007e7c:	f47f aeb0 	bne.w	8007be0 <_malloc_r+0x128>
 8007e80:	e02b      	b.n	8007eda <_malloc_r+0x422>
 8007e82:	f104 0308 	add.w	r3, r4, #8
 8007e86:	6964      	ldr	r4, [r4, #20]
 8007e88:	42a3      	cmp	r3, r4
 8007e8a:	bf08      	it	eq
 8007e8c:	3002      	addeq	r0, #2
 8007e8e:	f43f ae68 	beq.w	8007b62 <_malloc_r+0xaa>
 8007e92:	e62d      	b.n	8007af0 <_malloc_r+0x38>
 8007e94:	441a      	add	r2, r3
 8007e96:	461c      	mov	r4, r3
 8007e98:	6851      	ldr	r1, [r2, #4]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8007ea0:	f041 0101 	orr.w	r1, r1, #1
 8007ea4:	6051      	str	r1, [r2, #4]
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	60eb      	str	r3, [r5, #12]
 8007eaa:	609d      	str	r5, [r3, #8]
 8007eac:	f000 f990 	bl	80081d0 <__malloc_unlock>
 8007eb0:	e62e      	b.n	8007b10 <_malloc_r+0x58>
 8007eb2:	305b      	adds	r0, #91	; 0x5b
 8007eb4:	0041      	lsls	r1, r0, #1
 8007eb6:	e63f      	b.n	8007b38 <_malloc_r+0x80>
 8007eb8:	099a      	lsrs	r2, r3, #6
 8007eba:	3238      	adds	r2, #56	; 0x38
 8007ebc:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8007ec0:	e7a9      	b.n	8007e16 <_malloc_r+0x35e>
 8007ec2:	42bc      	cmp	r4, r7
 8007ec4:	f43f af0e 	beq.w	8007ce4 <_malloc_r+0x22c>
 8007ec8:	68bc      	ldr	r4, [r7, #8]
 8007eca:	6862      	ldr	r2, [r4, #4]
 8007ecc:	f022 0203 	bic.w	r2, r2, #3
 8007ed0:	e768      	b.n	8007da4 <_malloc_r+0x2ec>
 8007ed2:	f8d8 8000 	ldr.w	r8, [r8]
 8007ed6:	4598      	cmp	r8, r3
 8007ed8:	d177      	bne.n	8007fca <_malloc_r+0x512>
 8007eda:	f010 0f03 	tst.w	r0, #3
 8007ede:	f1a8 0308 	sub.w	r3, r8, #8
 8007ee2:	f100 30ff 	add.w	r0, r0, #4294967295
 8007ee6:	d1f4      	bne.n	8007ed2 <_malloc_r+0x41a>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	ea23 0304 	bic.w	r3, r3, r4
 8007eee:	607b      	str	r3, [r7, #4]
 8007ef0:	0064      	lsls	r4, r4, #1
 8007ef2:	429c      	cmp	r4, r3
 8007ef4:	f63f aeca 	bhi.w	8007c8c <_malloc_r+0x1d4>
 8007ef8:	2c00      	cmp	r4, #0
 8007efa:	f43f aec7 	beq.w	8007c8c <_malloc_r+0x1d4>
 8007efe:	4223      	tst	r3, r4
 8007f00:	4648      	mov	r0, r9
 8007f02:	f47f ae69 	bne.w	8007bd8 <_malloc_r+0x120>
 8007f06:	0064      	lsls	r4, r4, #1
 8007f08:	4223      	tst	r3, r4
 8007f0a:	f100 0004 	add.w	r0, r0, #4
 8007f0e:	d0fa      	beq.n	8007f06 <_malloc_r+0x44e>
 8007f10:	e662      	b.n	8007bd8 <_malloc_r+0x120>
 8007f12:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8007f16:	d818      	bhi.n	8007f4a <_malloc_r+0x492>
 8007f18:	0be8      	lsrs	r0, r5, #15
 8007f1a:	3077      	adds	r0, #119	; 0x77
 8007f1c:	0041      	lsls	r1, r0, #1
 8007f1e:	e60b      	b.n	8007b38 <_malloc_r+0x80>
 8007f20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f24:	e6fb      	b.n	8007d1e <_malloc_r+0x266>
 8007f26:	2301      	movs	r3, #1
 8007f28:	f8c9 3004 	str.w	r3, [r9, #4]
 8007f2c:	464c      	mov	r4, r9
 8007f2e:	2200      	movs	r2, #0
 8007f30:	e738      	b.n	8007da4 <_malloc_r+0x2ec>
 8007f32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007f36:	1092      	asrs	r2, r2, #2
 8007f38:	f04f 0c01 	mov.w	ip, #1
 8007f3c:	fa0c f202 	lsl.w	r2, ip, r2
 8007f40:	4313      	orrs	r3, r2
 8007f42:	f8c8 3004 	str.w	r3, [r8, #4]
 8007f46:	460a      	mov	r2, r1
 8007f48:	e778      	b.n	8007e3c <_malloc_r+0x384>
 8007f4a:	f240 5354 	movw	r3, #1364	; 0x554
 8007f4e:	4298      	cmp	r0, r3
 8007f50:	d817      	bhi.n	8007f82 <_malloc_r+0x4ca>
 8007f52:	0ca8      	lsrs	r0, r5, #18
 8007f54:	307c      	adds	r0, #124	; 0x7c
 8007f56:	0041      	lsls	r1, r0, #1
 8007f58:	e5ee      	b.n	8007b38 <_malloc_r+0x80>
 8007f5a:	3210      	adds	r2, #16
 8007f5c:	e6b4      	b.n	8007cc8 <_malloc_r+0x210>
 8007f5e:	2a54      	cmp	r2, #84	; 0x54
 8007f60:	d81e      	bhi.n	8007fa0 <_malloc_r+0x4e8>
 8007f62:	0b1a      	lsrs	r2, r3, #12
 8007f64:	326e      	adds	r2, #110	; 0x6e
 8007f66:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8007f6a:	e754      	b.n	8007e16 <_malloc_r+0x35e>
 8007f6c:	f3cb 000b 	ubfx	r0, fp, #0, #12
 8007f70:	2800      	cmp	r0, #0
 8007f72:	f47f aebe 	bne.w	8007cf2 <_malloc_r+0x23a>
 8007f76:	4442      	add	r2, r8
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f042 0201 	orr.w	r2, r2, #1
 8007f7e:	605a      	str	r2, [r3, #4]
 8007f80:	e702      	b.n	8007d88 <_malloc_r+0x2d0>
 8007f82:	21fc      	movs	r1, #252	; 0xfc
 8007f84:	207e      	movs	r0, #126	; 0x7e
 8007f86:	e5d7      	b.n	8007b38 <_malloc_r+0x80>
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f04f 0a00 	mov.w	sl, #0
 8007f8e:	e6d9      	b.n	8007d44 <_malloc_r+0x28c>
 8007f90:	f104 0108 	add.w	r1, r4, #8
 8007f94:	4630      	mov	r0, r6
 8007f96:	f7ff fa83 	bl	80074a0 <_free_r>
 8007f9a:	f8da 1000 	ldr.w	r1, [sl]
 8007f9e:	e6f3      	b.n	8007d88 <_malloc_r+0x2d0>
 8007fa0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007fa4:	d804      	bhi.n	8007fb0 <_malloc_r+0x4f8>
 8007fa6:	0bda      	lsrs	r2, r3, #15
 8007fa8:	3277      	adds	r2, #119	; 0x77
 8007faa:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8007fae:	e732      	b.n	8007e16 <_malloc_r+0x35e>
 8007fb0:	f240 5154 	movw	r1, #1364	; 0x554
 8007fb4:	428a      	cmp	r2, r1
 8007fb6:	d804      	bhi.n	8007fc2 <_malloc_r+0x50a>
 8007fb8:	0c9a      	lsrs	r2, r3, #18
 8007fba:	327c      	adds	r2, #124	; 0x7c
 8007fbc:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8007fc0:	e729      	b.n	8007e16 <_malloc_r+0x35e>
 8007fc2:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8007fc6:	227e      	movs	r2, #126	; 0x7e
 8007fc8:	e725      	b.n	8007e16 <_malloc_r+0x35e>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	e790      	b.n	8007ef0 <_malloc_r+0x438>
 8007fce:	bf00      	nop
 8007fd0:	20000518 	.word	0x20000518

08007fd4 <memchr>:
 8007fd4:	0783      	lsls	r3, r0, #30
 8007fd6:	b470      	push	{r4, r5, r6}
 8007fd8:	b2c9      	uxtb	r1, r1
 8007fda:	d040      	beq.n	800805e <memchr+0x8a>
 8007fdc:	1e54      	subs	r4, r2, #1
 8007fde:	2a00      	cmp	r2, #0
 8007fe0:	d03f      	beq.n	8008062 <memchr+0x8e>
 8007fe2:	7803      	ldrb	r3, [r0, #0]
 8007fe4:	428b      	cmp	r3, r1
 8007fe6:	bf18      	it	ne
 8007fe8:	1c43      	addne	r3, r0, #1
 8007fea:	d106      	bne.n	8007ffa <memchr+0x26>
 8007fec:	e01d      	b.n	800802a <memchr+0x56>
 8007fee:	b1f4      	cbz	r4, 800802e <memchr+0x5a>
 8007ff0:	7802      	ldrb	r2, [r0, #0]
 8007ff2:	428a      	cmp	r2, r1
 8007ff4:	f104 34ff 	add.w	r4, r4, #4294967295
 8007ff8:	d017      	beq.n	800802a <memchr+0x56>
 8007ffa:	f013 0f03 	tst.w	r3, #3
 8007ffe:	4618      	mov	r0, r3
 8008000:	f103 0301 	add.w	r3, r3, #1
 8008004:	d1f3      	bne.n	8007fee <memchr+0x1a>
 8008006:	2c03      	cmp	r4, #3
 8008008:	d814      	bhi.n	8008034 <memchr+0x60>
 800800a:	b184      	cbz	r4, 800802e <memchr+0x5a>
 800800c:	7803      	ldrb	r3, [r0, #0]
 800800e:	428b      	cmp	r3, r1
 8008010:	d00b      	beq.n	800802a <memchr+0x56>
 8008012:	1905      	adds	r5, r0, r4
 8008014:	1c43      	adds	r3, r0, #1
 8008016:	e002      	b.n	800801e <memchr+0x4a>
 8008018:	7802      	ldrb	r2, [r0, #0]
 800801a:	428a      	cmp	r2, r1
 800801c:	d005      	beq.n	800802a <memchr+0x56>
 800801e:	42ab      	cmp	r3, r5
 8008020:	4618      	mov	r0, r3
 8008022:	f103 0301 	add.w	r3, r3, #1
 8008026:	d1f7      	bne.n	8008018 <memchr+0x44>
 8008028:	2000      	movs	r0, #0
 800802a:	bc70      	pop	{r4, r5, r6}
 800802c:	4770      	bx	lr
 800802e:	4620      	mov	r0, r4
 8008030:	bc70      	pop	{r4, r5, r6}
 8008032:	4770      	bx	lr
 8008034:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8008038:	4602      	mov	r2, r0
 800803a:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800803e:	4610      	mov	r0, r2
 8008040:	3204      	adds	r2, #4
 8008042:	6803      	ldr	r3, [r0, #0]
 8008044:	4073      	eors	r3, r6
 8008046:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800804a:	ea25 0303 	bic.w	r3, r5, r3
 800804e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8008052:	d1da      	bne.n	800800a <memchr+0x36>
 8008054:	3c04      	subs	r4, #4
 8008056:	2c03      	cmp	r4, #3
 8008058:	4610      	mov	r0, r2
 800805a:	d8f0      	bhi.n	800803e <memchr+0x6a>
 800805c:	e7d5      	b.n	800800a <memchr+0x36>
 800805e:	4614      	mov	r4, r2
 8008060:	e7d1      	b.n	8008006 <memchr+0x32>
 8008062:	4610      	mov	r0, r2
 8008064:	e7e1      	b.n	800802a <memchr+0x56>
 8008066:	bf00      	nop

08008068 <memmove>:
 8008068:	4288      	cmp	r0, r1
 800806a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800806c:	d90d      	bls.n	800808a <memmove+0x22>
 800806e:	188b      	adds	r3, r1, r2
 8008070:	4298      	cmp	r0, r3
 8008072:	d20a      	bcs.n	800808a <memmove+0x22>
 8008074:	1881      	adds	r1, r0, r2
 8008076:	2a00      	cmp	r2, #0
 8008078:	d054      	beq.n	8008124 <memmove+0xbc>
 800807a:	1a9a      	subs	r2, r3, r2
 800807c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008080:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008084:	4293      	cmp	r3, r2
 8008086:	d1f9      	bne.n	800807c <memmove+0x14>
 8008088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800808a:	2a0f      	cmp	r2, #15
 800808c:	d948      	bls.n	8008120 <memmove+0xb8>
 800808e:	ea40 0301 	orr.w	r3, r0, r1
 8008092:	079b      	lsls	r3, r3, #30
 8008094:	d147      	bne.n	8008126 <memmove+0xbe>
 8008096:	f100 0410 	add.w	r4, r0, #16
 800809a:	f101 0310 	add.w	r3, r1, #16
 800809e:	4615      	mov	r5, r2
 80080a0:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80080a4:	f844 6c10 	str.w	r6, [r4, #-16]
 80080a8:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80080ac:	f844 6c0c 	str.w	r6, [r4, #-12]
 80080b0:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80080b4:	f844 6c08 	str.w	r6, [r4, #-8]
 80080b8:	3d10      	subs	r5, #16
 80080ba:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80080be:	f844 6c04 	str.w	r6, [r4, #-4]
 80080c2:	2d0f      	cmp	r5, #15
 80080c4:	f103 0310 	add.w	r3, r3, #16
 80080c8:	f104 0410 	add.w	r4, r4, #16
 80080cc:	d8e8      	bhi.n	80080a0 <memmove+0x38>
 80080ce:	f1a2 0310 	sub.w	r3, r2, #16
 80080d2:	f023 030f 	bic.w	r3, r3, #15
 80080d6:	f002 0e0f 	and.w	lr, r2, #15
 80080da:	3310      	adds	r3, #16
 80080dc:	f1be 0f03 	cmp.w	lr, #3
 80080e0:	4419      	add	r1, r3
 80080e2:	4403      	add	r3, r0
 80080e4:	d921      	bls.n	800812a <memmove+0xc2>
 80080e6:	1f1e      	subs	r6, r3, #4
 80080e8:	460d      	mov	r5, r1
 80080ea:	4674      	mov	r4, lr
 80080ec:	3c04      	subs	r4, #4
 80080ee:	f855 7b04 	ldr.w	r7, [r5], #4
 80080f2:	f846 7f04 	str.w	r7, [r6, #4]!
 80080f6:	2c03      	cmp	r4, #3
 80080f8:	d8f8      	bhi.n	80080ec <memmove+0x84>
 80080fa:	f1ae 0404 	sub.w	r4, lr, #4
 80080fe:	f024 0403 	bic.w	r4, r4, #3
 8008102:	3404      	adds	r4, #4
 8008104:	4423      	add	r3, r4
 8008106:	4421      	add	r1, r4
 8008108:	f002 0203 	and.w	r2, r2, #3
 800810c:	b152      	cbz	r2, 8008124 <memmove+0xbc>
 800810e:	3b01      	subs	r3, #1
 8008110:	440a      	add	r2, r1
 8008112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008116:	f803 4f01 	strb.w	r4, [r3, #1]!
 800811a:	4291      	cmp	r1, r2
 800811c:	d1f9      	bne.n	8008112 <memmove+0xaa>
 800811e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008120:	4603      	mov	r3, r0
 8008122:	e7f3      	b.n	800810c <memmove+0xa4>
 8008124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008126:	4603      	mov	r3, r0
 8008128:	e7f1      	b.n	800810e <memmove+0xa6>
 800812a:	4672      	mov	r2, lr
 800812c:	e7ee      	b.n	800810c <memmove+0xa4>
 800812e:	bf00      	nop

08008130 <memset>:
 8008130:	b470      	push	{r4, r5, r6}
 8008132:	0784      	lsls	r4, r0, #30
 8008134:	d046      	beq.n	80081c4 <memset+0x94>
 8008136:	1e54      	subs	r4, r2, #1
 8008138:	2a00      	cmp	r2, #0
 800813a:	d041      	beq.n	80081c0 <memset+0x90>
 800813c:	b2cd      	uxtb	r5, r1
 800813e:	4603      	mov	r3, r0
 8008140:	e002      	b.n	8008148 <memset+0x18>
 8008142:	1e62      	subs	r2, r4, #1
 8008144:	b3e4      	cbz	r4, 80081c0 <memset+0x90>
 8008146:	4614      	mov	r4, r2
 8008148:	f803 5b01 	strb.w	r5, [r3], #1
 800814c:	079a      	lsls	r2, r3, #30
 800814e:	d1f8      	bne.n	8008142 <memset+0x12>
 8008150:	2c03      	cmp	r4, #3
 8008152:	d92e      	bls.n	80081b2 <memset+0x82>
 8008154:	b2cd      	uxtb	r5, r1
 8008156:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800815a:	2c0f      	cmp	r4, #15
 800815c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8008160:	d919      	bls.n	8008196 <memset+0x66>
 8008162:	f103 0210 	add.w	r2, r3, #16
 8008166:	4626      	mov	r6, r4
 8008168:	3e10      	subs	r6, #16
 800816a:	2e0f      	cmp	r6, #15
 800816c:	f842 5c10 	str.w	r5, [r2, #-16]
 8008170:	f842 5c0c 	str.w	r5, [r2, #-12]
 8008174:	f842 5c08 	str.w	r5, [r2, #-8]
 8008178:	f842 5c04 	str.w	r5, [r2, #-4]
 800817c:	f102 0210 	add.w	r2, r2, #16
 8008180:	d8f2      	bhi.n	8008168 <memset+0x38>
 8008182:	f1a4 0210 	sub.w	r2, r4, #16
 8008186:	f022 020f 	bic.w	r2, r2, #15
 800818a:	f004 040f 	and.w	r4, r4, #15
 800818e:	3210      	adds	r2, #16
 8008190:	2c03      	cmp	r4, #3
 8008192:	4413      	add	r3, r2
 8008194:	d90d      	bls.n	80081b2 <memset+0x82>
 8008196:	461e      	mov	r6, r3
 8008198:	4622      	mov	r2, r4
 800819a:	3a04      	subs	r2, #4
 800819c:	2a03      	cmp	r2, #3
 800819e:	f846 5b04 	str.w	r5, [r6], #4
 80081a2:	d8fa      	bhi.n	800819a <memset+0x6a>
 80081a4:	1f22      	subs	r2, r4, #4
 80081a6:	f022 0203 	bic.w	r2, r2, #3
 80081aa:	3204      	adds	r2, #4
 80081ac:	4413      	add	r3, r2
 80081ae:	f004 0403 	and.w	r4, r4, #3
 80081b2:	b12c      	cbz	r4, 80081c0 <memset+0x90>
 80081b4:	b2c9      	uxtb	r1, r1
 80081b6:	441c      	add	r4, r3
 80081b8:	f803 1b01 	strb.w	r1, [r3], #1
 80081bc:	42a3      	cmp	r3, r4
 80081be:	d1fb      	bne.n	80081b8 <memset+0x88>
 80081c0:	bc70      	pop	{r4, r5, r6}
 80081c2:	4770      	bx	lr
 80081c4:	4614      	mov	r4, r2
 80081c6:	4603      	mov	r3, r0
 80081c8:	e7c2      	b.n	8008150 <memset+0x20>
 80081ca:	bf00      	nop

080081cc <__malloc_lock>:
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop

080081d0 <__malloc_unlock>:
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop

080081d4 <_Balloc>:
 80081d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80081d6:	b570      	push	{r4, r5, r6, lr}
 80081d8:	4605      	mov	r5, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	b14b      	cbz	r3, 80081f2 <_Balloc+0x1e>
 80081de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80081e2:	b180      	cbz	r0, 8008206 <_Balloc+0x32>
 80081e4:	6802      	ldr	r2, [r0, #0]
 80081e6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80081ea:	2300      	movs	r3, #0
 80081ec:	6103      	str	r3, [r0, #16]
 80081ee:	60c3      	str	r3, [r0, #12]
 80081f0:	bd70      	pop	{r4, r5, r6, pc}
 80081f2:	2104      	movs	r1, #4
 80081f4:	2221      	movs	r2, #33	; 0x21
 80081f6:	f000 fe41 	bl	8008e7c <_calloc_r>
 80081fa:	64e8      	str	r0, [r5, #76]	; 0x4c
 80081fc:	4603      	mov	r3, r0
 80081fe:	2800      	cmp	r0, #0
 8008200:	d1ed      	bne.n	80081de <_Balloc+0xa>
 8008202:	2000      	movs	r0, #0
 8008204:	bd70      	pop	{r4, r5, r6, pc}
 8008206:	2101      	movs	r1, #1
 8008208:	fa01 f604 	lsl.w	r6, r1, r4
 800820c:	1d72      	adds	r2, r6, #5
 800820e:	4628      	mov	r0, r5
 8008210:	0092      	lsls	r2, r2, #2
 8008212:	f000 fe33 	bl	8008e7c <_calloc_r>
 8008216:	2800      	cmp	r0, #0
 8008218:	d0f3      	beq.n	8008202 <_Balloc+0x2e>
 800821a:	6044      	str	r4, [r0, #4]
 800821c:	6086      	str	r6, [r0, #8]
 800821e:	e7e4      	b.n	80081ea <_Balloc+0x16>

08008220 <_Bfree>:
 8008220:	b131      	cbz	r1, 8008230 <_Bfree+0x10>
 8008222:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008224:	684a      	ldr	r2, [r1, #4]
 8008226:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800822a:	6008      	str	r0, [r1, #0]
 800822c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop

08008234 <__multadd>:
 8008234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008236:	690c      	ldr	r4, [r1, #16]
 8008238:	b083      	sub	sp, #12
 800823a:	460d      	mov	r5, r1
 800823c:	4606      	mov	r6, r0
 800823e:	f101 0e14 	add.w	lr, r1, #20
 8008242:	2700      	movs	r7, #0
 8008244:	f8de 1000 	ldr.w	r1, [lr]
 8008248:	b288      	uxth	r0, r1
 800824a:	0c09      	lsrs	r1, r1, #16
 800824c:	fb02 3300 	mla	r3, r2, r0, r3
 8008250:	fb02 f101 	mul.w	r1, r2, r1
 8008254:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 8008258:	3701      	adds	r7, #1
 800825a:	b29b      	uxth	r3, r3
 800825c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8008260:	42bc      	cmp	r4, r7
 8008262:	f84e 3b04 	str.w	r3, [lr], #4
 8008266:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800826a:	dceb      	bgt.n	8008244 <__multadd+0x10>
 800826c:	b13b      	cbz	r3, 800827e <__multadd+0x4a>
 800826e:	68aa      	ldr	r2, [r5, #8]
 8008270:	4294      	cmp	r4, r2
 8008272:	da07      	bge.n	8008284 <__multadd+0x50>
 8008274:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8008278:	3401      	adds	r4, #1
 800827a:	6153      	str	r3, [r2, #20]
 800827c:	612c      	str	r4, [r5, #16]
 800827e:	4628      	mov	r0, r5
 8008280:	b003      	add	sp, #12
 8008282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008284:	6869      	ldr	r1, [r5, #4]
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	3101      	adds	r1, #1
 800828a:	4630      	mov	r0, r6
 800828c:	f7ff ffa2 	bl	80081d4 <_Balloc>
 8008290:	692a      	ldr	r2, [r5, #16]
 8008292:	3202      	adds	r2, #2
 8008294:	f105 010c 	add.w	r1, r5, #12
 8008298:	4607      	mov	r7, r0
 800829a:	0092      	lsls	r2, r2, #2
 800829c:	300c      	adds	r0, #12
 800829e:	f7f7 ff7b 	bl	8000198 <memcpy>
 80082a2:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80082a4:	6869      	ldr	r1, [r5, #4]
 80082a6:	9b01      	ldr	r3, [sp, #4]
 80082a8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80082ac:	6028      	str	r0, [r5, #0]
 80082ae:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80082b2:	463d      	mov	r5, r7
 80082b4:	e7de      	b.n	8008274 <__multadd+0x40>
 80082b6:	bf00      	nop

080082b8 <__hi0bits>:
 80082b8:	0c03      	lsrs	r3, r0, #16
 80082ba:	041b      	lsls	r3, r3, #16
 80082bc:	b9b3      	cbnz	r3, 80082ec <__hi0bits+0x34>
 80082be:	0400      	lsls	r0, r0, #16
 80082c0:	2310      	movs	r3, #16
 80082c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80082c6:	bf04      	itt	eq
 80082c8:	0200      	lsleq	r0, r0, #8
 80082ca:	3308      	addeq	r3, #8
 80082cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082d0:	bf04      	itt	eq
 80082d2:	0100      	lsleq	r0, r0, #4
 80082d4:	3304      	addeq	r3, #4
 80082d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082da:	bf04      	itt	eq
 80082dc:	0080      	lsleq	r0, r0, #2
 80082de:	3302      	addeq	r3, #2
 80082e0:	2800      	cmp	r0, #0
 80082e2:	db07      	blt.n	80082f4 <__hi0bits+0x3c>
 80082e4:	0042      	lsls	r2, r0, #1
 80082e6:	d403      	bmi.n	80082f0 <__hi0bits+0x38>
 80082e8:	2020      	movs	r0, #32
 80082ea:	4770      	bx	lr
 80082ec:	2300      	movs	r3, #0
 80082ee:	e7e8      	b.n	80082c2 <__hi0bits+0xa>
 80082f0:	1c58      	adds	r0, r3, #1
 80082f2:	4770      	bx	lr
 80082f4:	4618      	mov	r0, r3
 80082f6:	4770      	bx	lr

080082f8 <__lo0bits>:
 80082f8:	6803      	ldr	r3, [r0, #0]
 80082fa:	f013 0207 	ands.w	r2, r3, #7
 80082fe:	d007      	beq.n	8008310 <__lo0bits+0x18>
 8008300:	07d9      	lsls	r1, r3, #31
 8008302:	d420      	bmi.n	8008346 <__lo0bits+0x4e>
 8008304:	079a      	lsls	r2, r3, #30
 8008306:	d420      	bmi.n	800834a <__lo0bits+0x52>
 8008308:	089b      	lsrs	r3, r3, #2
 800830a:	6003      	str	r3, [r0, #0]
 800830c:	2002      	movs	r0, #2
 800830e:	4770      	bx	lr
 8008310:	b299      	uxth	r1, r3
 8008312:	b909      	cbnz	r1, 8008318 <__lo0bits+0x20>
 8008314:	0c1b      	lsrs	r3, r3, #16
 8008316:	2210      	movs	r2, #16
 8008318:	f013 0fff 	tst.w	r3, #255	; 0xff
 800831c:	bf04      	itt	eq
 800831e:	0a1b      	lsreq	r3, r3, #8
 8008320:	3208      	addeq	r2, #8
 8008322:	0719      	lsls	r1, r3, #28
 8008324:	bf04      	itt	eq
 8008326:	091b      	lsreq	r3, r3, #4
 8008328:	3204      	addeq	r2, #4
 800832a:	0799      	lsls	r1, r3, #30
 800832c:	bf04      	itt	eq
 800832e:	089b      	lsreq	r3, r3, #2
 8008330:	3202      	addeq	r2, #2
 8008332:	07d9      	lsls	r1, r3, #31
 8008334:	d404      	bmi.n	8008340 <__lo0bits+0x48>
 8008336:	085b      	lsrs	r3, r3, #1
 8008338:	d101      	bne.n	800833e <__lo0bits+0x46>
 800833a:	2020      	movs	r0, #32
 800833c:	4770      	bx	lr
 800833e:	3201      	adds	r2, #1
 8008340:	6003      	str	r3, [r0, #0]
 8008342:	4610      	mov	r0, r2
 8008344:	4770      	bx	lr
 8008346:	2000      	movs	r0, #0
 8008348:	4770      	bx	lr
 800834a:	085b      	lsrs	r3, r3, #1
 800834c:	6003      	str	r3, [r0, #0]
 800834e:	2001      	movs	r0, #1
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop

08008354 <__i2b>:
 8008354:	b510      	push	{r4, lr}
 8008356:	460c      	mov	r4, r1
 8008358:	2101      	movs	r1, #1
 800835a:	f7ff ff3b 	bl	80081d4 <_Balloc>
 800835e:	2201      	movs	r2, #1
 8008360:	6144      	str	r4, [r0, #20]
 8008362:	6102      	str	r2, [r0, #16]
 8008364:	bd10      	pop	{r4, pc}
 8008366:	bf00      	nop

08008368 <__multiply>:
 8008368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836c:	690f      	ldr	r7, [r1, #16]
 800836e:	6916      	ldr	r6, [r2, #16]
 8008370:	42b7      	cmp	r7, r6
 8008372:	b083      	sub	sp, #12
 8008374:	460d      	mov	r5, r1
 8008376:	4614      	mov	r4, r2
 8008378:	f2c0 808d 	blt.w	8008496 <__multiply+0x12e>
 800837c:	4633      	mov	r3, r6
 800837e:	463e      	mov	r6, r7
 8008380:	461f      	mov	r7, r3
 8008382:	68ab      	ldr	r3, [r5, #8]
 8008384:	6869      	ldr	r1, [r5, #4]
 8008386:	eb06 0807 	add.w	r8, r6, r7
 800838a:	4598      	cmp	r8, r3
 800838c:	bfc8      	it	gt
 800838e:	3101      	addgt	r1, #1
 8008390:	f7ff ff20 	bl	80081d4 <_Balloc>
 8008394:	f100 0c14 	add.w	ip, r0, #20
 8008398:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 800839c:	45cc      	cmp	ip, r9
 800839e:	9000      	str	r0, [sp, #0]
 80083a0:	d205      	bcs.n	80083ae <__multiply+0x46>
 80083a2:	4663      	mov	r3, ip
 80083a4:	2100      	movs	r1, #0
 80083a6:	f843 1b04 	str.w	r1, [r3], #4
 80083aa:	4599      	cmp	r9, r3
 80083ac:	d8fb      	bhi.n	80083a6 <__multiply+0x3e>
 80083ae:	f104 0214 	add.w	r2, r4, #20
 80083b2:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80083b6:	f105 0314 	add.w	r3, r5, #20
 80083ba:	4552      	cmp	r2, sl
 80083bc:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 80083c0:	d254      	bcs.n	800846c <__multiply+0x104>
 80083c2:	f8cd 9004 	str.w	r9, [sp, #4]
 80083c6:	4699      	mov	r9, r3
 80083c8:	f852 3b04 	ldr.w	r3, [r2], #4
 80083cc:	fa1f fb83 	uxth.w	fp, r3
 80083d0:	f1bb 0f00 	cmp.w	fp, #0
 80083d4:	d020      	beq.n	8008418 <__multiply+0xb0>
 80083d6:	2000      	movs	r0, #0
 80083d8:	464f      	mov	r7, r9
 80083da:	4666      	mov	r6, ip
 80083dc:	4605      	mov	r5, r0
 80083de:	e000      	b.n	80083e2 <__multiply+0x7a>
 80083e0:	461e      	mov	r6, r3
 80083e2:	f857 4b04 	ldr.w	r4, [r7], #4
 80083e6:	6830      	ldr	r0, [r6, #0]
 80083e8:	b2a1      	uxth	r1, r4
 80083ea:	b283      	uxth	r3, r0
 80083ec:	fb0b 3101 	mla	r1, fp, r1, r3
 80083f0:	0c24      	lsrs	r4, r4, #16
 80083f2:	0c00      	lsrs	r0, r0, #16
 80083f4:	194b      	adds	r3, r1, r5
 80083f6:	fb0b 0004 	mla	r0, fp, r4, r0
 80083fa:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 80083fe:	b299      	uxth	r1, r3
 8008400:	4633      	mov	r3, r6
 8008402:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008406:	45be      	cmp	lr, r7
 8008408:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800840c:	f843 1b04 	str.w	r1, [r3], #4
 8008410:	d8e6      	bhi.n	80083e0 <__multiply+0x78>
 8008412:	6075      	str	r5, [r6, #4]
 8008414:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8008418:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 800841c:	d020      	beq.n	8008460 <__multiply+0xf8>
 800841e:	f8dc 3000 	ldr.w	r3, [ip]
 8008422:	4667      	mov	r7, ip
 8008424:	4618      	mov	r0, r3
 8008426:	464d      	mov	r5, r9
 8008428:	2100      	movs	r1, #0
 800842a:	e000      	b.n	800842e <__multiply+0xc6>
 800842c:	4637      	mov	r7, r6
 800842e:	882c      	ldrh	r4, [r5, #0]
 8008430:	0c00      	lsrs	r0, r0, #16
 8008432:	fb0b 0004 	mla	r0, fp, r4, r0
 8008436:	4401      	add	r1, r0
 8008438:	b29c      	uxth	r4, r3
 800843a:	463e      	mov	r6, r7
 800843c:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8008440:	f846 3b04 	str.w	r3, [r6], #4
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f855 4b04 	ldr.w	r4, [r5], #4
 800844a:	b283      	uxth	r3, r0
 800844c:	0c24      	lsrs	r4, r4, #16
 800844e:	fb0b 3404 	mla	r4, fp, r4, r3
 8008452:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8008456:	45ae      	cmp	lr, r5
 8008458:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800845c:	d8e6      	bhi.n	800842c <__multiply+0xc4>
 800845e:	607b      	str	r3, [r7, #4]
 8008460:	4592      	cmp	sl, r2
 8008462:	f10c 0c04 	add.w	ip, ip, #4
 8008466:	d8af      	bhi.n	80083c8 <__multiply+0x60>
 8008468:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800846c:	f1b8 0f00 	cmp.w	r8, #0
 8008470:	dd0b      	ble.n	800848a <__multiply+0x122>
 8008472:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8008476:	f1a9 0904 	sub.w	r9, r9, #4
 800847a:	b11b      	cbz	r3, 8008484 <__multiply+0x11c>
 800847c:	e005      	b.n	800848a <__multiply+0x122>
 800847e:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8008482:	b913      	cbnz	r3, 800848a <__multiply+0x122>
 8008484:	f1b8 0801 	subs.w	r8, r8, #1
 8008488:	d1f9      	bne.n	800847e <__multiply+0x116>
 800848a:	9800      	ldr	r0, [sp, #0]
 800848c:	f8c0 8010 	str.w	r8, [r0, #16]
 8008490:	b003      	add	sp, #12
 8008492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008496:	4615      	mov	r5, r2
 8008498:	460c      	mov	r4, r1
 800849a:	e772      	b.n	8008382 <__multiply+0x1a>

0800849c <__pow5mult>:
 800849c:	f012 0303 	ands.w	r3, r2, #3
 80084a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a4:	4614      	mov	r4, r2
 80084a6:	4607      	mov	r7, r0
 80084a8:	460e      	mov	r6, r1
 80084aa:	d12d      	bne.n	8008508 <__pow5mult+0x6c>
 80084ac:	10a4      	asrs	r4, r4, #2
 80084ae:	d01c      	beq.n	80084ea <__pow5mult+0x4e>
 80084b0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80084b2:	b395      	cbz	r5, 800851a <__pow5mult+0x7e>
 80084b4:	07e3      	lsls	r3, r4, #31
 80084b6:	f04f 0800 	mov.w	r8, #0
 80084ba:	d406      	bmi.n	80084ca <__pow5mult+0x2e>
 80084bc:	1064      	asrs	r4, r4, #1
 80084be:	d014      	beq.n	80084ea <__pow5mult+0x4e>
 80084c0:	6828      	ldr	r0, [r5, #0]
 80084c2:	b1a8      	cbz	r0, 80084f0 <__pow5mult+0x54>
 80084c4:	4605      	mov	r5, r0
 80084c6:	07e3      	lsls	r3, r4, #31
 80084c8:	d5f8      	bpl.n	80084bc <__pow5mult+0x20>
 80084ca:	4638      	mov	r0, r7
 80084cc:	4631      	mov	r1, r6
 80084ce:	462a      	mov	r2, r5
 80084d0:	f7ff ff4a 	bl	8008368 <__multiply>
 80084d4:	b1b6      	cbz	r6, 8008504 <__pow5mult+0x68>
 80084d6:	6872      	ldr	r2, [r6, #4]
 80084d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084da:	1064      	asrs	r4, r4, #1
 80084dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084e0:	6031      	str	r1, [r6, #0]
 80084e2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80084e6:	4606      	mov	r6, r0
 80084e8:	d1ea      	bne.n	80084c0 <__pow5mult+0x24>
 80084ea:	4630      	mov	r0, r6
 80084ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f0:	4629      	mov	r1, r5
 80084f2:	462a      	mov	r2, r5
 80084f4:	4638      	mov	r0, r7
 80084f6:	f7ff ff37 	bl	8008368 <__multiply>
 80084fa:	6028      	str	r0, [r5, #0]
 80084fc:	f8c0 8000 	str.w	r8, [r0]
 8008500:	4605      	mov	r5, r0
 8008502:	e7e0      	b.n	80084c6 <__pow5mult+0x2a>
 8008504:	4606      	mov	r6, r0
 8008506:	e7d9      	b.n	80084bc <__pow5mult+0x20>
 8008508:	1e5a      	subs	r2, r3, #1
 800850a:	4d0b      	ldr	r5, [pc, #44]	; (8008538 <__pow5mult+0x9c>)
 800850c:	2300      	movs	r3, #0
 800850e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008512:	f7ff fe8f 	bl	8008234 <__multadd>
 8008516:	4606      	mov	r6, r0
 8008518:	e7c8      	b.n	80084ac <__pow5mult+0x10>
 800851a:	2101      	movs	r1, #1
 800851c:	4638      	mov	r0, r7
 800851e:	f7ff fe59 	bl	80081d4 <_Balloc>
 8008522:	f240 2171 	movw	r1, #625	; 0x271
 8008526:	2201      	movs	r2, #1
 8008528:	2300      	movs	r3, #0
 800852a:	6141      	str	r1, [r0, #20]
 800852c:	6102      	str	r2, [r0, #16]
 800852e:	4605      	mov	r5, r0
 8008530:	64b8      	str	r0, [r7, #72]	; 0x48
 8008532:	6003      	str	r3, [r0, #0]
 8008534:	e7be      	b.n	80084b4 <__pow5mult+0x18>
 8008536:	bf00      	nop
 8008538:	08009900 	.word	0x08009900

0800853c <__lshift>:
 800853c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008540:	690f      	ldr	r7, [r1, #16]
 8008542:	688b      	ldr	r3, [r1, #8]
 8008544:	ea4f 1962 	mov.w	r9, r2, asr #5
 8008548:	444f      	add	r7, r9
 800854a:	1c7d      	adds	r5, r7, #1
 800854c:	429d      	cmp	r5, r3
 800854e:	460e      	mov	r6, r1
 8008550:	4614      	mov	r4, r2
 8008552:	6849      	ldr	r1, [r1, #4]
 8008554:	4680      	mov	r8, r0
 8008556:	dd04      	ble.n	8008562 <__lshift+0x26>
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	429d      	cmp	r5, r3
 800855c:	f101 0101 	add.w	r1, r1, #1
 8008560:	dcfa      	bgt.n	8008558 <__lshift+0x1c>
 8008562:	4640      	mov	r0, r8
 8008564:	f7ff fe36 	bl	80081d4 <_Balloc>
 8008568:	f1b9 0f00 	cmp.w	r9, #0
 800856c:	f100 0114 	add.w	r1, r0, #20
 8008570:	dd09      	ble.n	8008586 <__lshift+0x4a>
 8008572:	2300      	movs	r3, #0
 8008574:	469e      	mov	lr, r3
 8008576:	460a      	mov	r2, r1
 8008578:	3301      	adds	r3, #1
 800857a:	454b      	cmp	r3, r9
 800857c:	f842 eb04 	str.w	lr, [r2], #4
 8008580:	d1fa      	bne.n	8008578 <__lshift+0x3c>
 8008582:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008586:	6932      	ldr	r2, [r6, #16]
 8008588:	f106 0314 	add.w	r3, r6, #20
 800858c:	f014 0c1f 	ands.w	ip, r4, #31
 8008590:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8008594:	d01f      	beq.n	80085d6 <__lshift+0x9a>
 8008596:	f1cc 0920 	rsb	r9, ip, #32
 800859a:	2200      	movs	r2, #0
 800859c:	681c      	ldr	r4, [r3, #0]
 800859e:	fa04 f40c 	lsl.w	r4, r4, ip
 80085a2:	4314      	orrs	r4, r2
 80085a4:	468a      	mov	sl, r1
 80085a6:	f841 4b04 	str.w	r4, [r1], #4
 80085aa:	f853 4b04 	ldr.w	r4, [r3], #4
 80085ae:	459e      	cmp	lr, r3
 80085b0:	fa24 f209 	lsr.w	r2, r4, r9
 80085b4:	d8f2      	bhi.n	800859c <__lshift+0x60>
 80085b6:	f8ca 2004 	str.w	r2, [sl, #4]
 80085ba:	b102      	cbz	r2, 80085be <__lshift+0x82>
 80085bc:	1cbd      	adds	r5, r7, #2
 80085be:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80085c2:	6872      	ldr	r2, [r6, #4]
 80085c4:	3d01      	subs	r5, #1
 80085c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085ca:	6105      	str	r5, [r0, #16]
 80085cc:	6031      	str	r1, [r6, #0]
 80085ce:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80085d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d6:	3904      	subs	r1, #4
 80085d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80085dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80085e0:	459e      	cmp	lr, r3
 80085e2:	d8f9      	bhi.n	80085d8 <__lshift+0x9c>
 80085e4:	e7eb      	b.n	80085be <__lshift+0x82>
 80085e6:	bf00      	nop

080085e8 <__mcmp>:
 80085e8:	6902      	ldr	r2, [r0, #16]
 80085ea:	690b      	ldr	r3, [r1, #16]
 80085ec:	1ad2      	subs	r2, r2, r3
 80085ee:	d113      	bne.n	8008618 <__mcmp+0x30>
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	3014      	adds	r0, #20
 80085f4:	3114      	adds	r1, #20
 80085f6:	4419      	add	r1, r3
 80085f8:	b410      	push	{r4}
 80085fa:	4403      	add	r3, r0
 80085fc:	e001      	b.n	8008602 <__mcmp+0x1a>
 80085fe:	4298      	cmp	r0, r3
 8008600:	d20c      	bcs.n	800861c <__mcmp+0x34>
 8008602:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8008606:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800860a:	4294      	cmp	r4, r2
 800860c:	d0f7      	beq.n	80085fe <__mcmp+0x16>
 800860e:	d309      	bcc.n	8008624 <__mcmp+0x3c>
 8008610:	2001      	movs	r0, #1
 8008612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	4610      	mov	r0, r2
 800861a:	4770      	bx	lr
 800861c:	2000      	movs	r0, #0
 800861e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	f85d 4b04 	ldr.w	r4, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop

08008630 <__mdiff>:
 8008630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008634:	460e      	mov	r6, r1
 8008636:	4605      	mov	r5, r0
 8008638:	4611      	mov	r1, r2
 800863a:	4630      	mov	r0, r6
 800863c:	4614      	mov	r4, r2
 800863e:	f7ff ffd3 	bl	80085e8 <__mcmp>
 8008642:	1e07      	subs	r7, r0, #0
 8008644:	d054      	beq.n	80086f0 <__mdiff+0xc0>
 8008646:	db4d      	blt.n	80086e4 <__mdiff+0xb4>
 8008648:	f04f 0800 	mov.w	r8, #0
 800864c:	6871      	ldr	r1, [r6, #4]
 800864e:	4628      	mov	r0, r5
 8008650:	f7ff fdc0 	bl	80081d4 <_Balloc>
 8008654:	6937      	ldr	r7, [r6, #16]
 8008656:	6923      	ldr	r3, [r4, #16]
 8008658:	f8c0 800c 	str.w	r8, [r0, #12]
 800865c:	3614      	adds	r6, #20
 800865e:	f104 0214 	add.w	r2, r4, #20
 8008662:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8008666:	f100 0514 	add.w	r5, r0, #20
 800866a:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 800866e:	2300      	movs	r3, #0
 8008670:	f856 8b04 	ldr.w	r8, [r6], #4
 8008674:	f852 4b04 	ldr.w	r4, [r2], #4
 8008678:	fa13 f388 	uxtah	r3, r3, r8
 800867c:	b2a1      	uxth	r1, r4
 800867e:	0c24      	lsrs	r4, r4, #16
 8008680:	1a59      	subs	r1, r3, r1
 8008682:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 8008686:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800868a:	b289      	uxth	r1, r1
 800868c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008690:	4594      	cmp	ip, r2
 8008692:	f845 1b04 	str.w	r1, [r5], #4
 8008696:	ea4f 4323 	mov.w	r3, r3, asr #16
 800869a:	4634      	mov	r4, r6
 800869c:	d8e8      	bhi.n	8008670 <__mdiff+0x40>
 800869e:	45b6      	cmp	lr, r6
 80086a0:	46ac      	mov	ip, r5
 80086a2:	d915      	bls.n	80086d0 <__mdiff+0xa0>
 80086a4:	f854 2b04 	ldr.w	r2, [r4], #4
 80086a8:	fa13 f182 	uxtah	r1, r3, r2
 80086ac:	0c13      	lsrs	r3, r2, #16
 80086ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80086b2:	b289      	uxth	r1, r1
 80086b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80086b8:	45a6      	cmp	lr, r4
 80086ba:	f845 1b04 	str.w	r1, [r5], #4
 80086be:	ea4f 4323 	mov.w	r3, r3, asr #16
 80086c2:	d8ef      	bhi.n	80086a4 <__mdiff+0x74>
 80086c4:	43f6      	mvns	r6, r6
 80086c6:	4476      	add	r6, lr
 80086c8:	f026 0503 	bic.w	r5, r6, #3
 80086cc:	3504      	adds	r5, #4
 80086ce:	4465      	add	r5, ip
 80086d0:	3d04      	subs	r5, #4
 80086d2:	b921      	cbnz	r1, 80086de <__mdiff+0xae>
 80086d4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80086d8:	3f01      	subs	r7, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0fa      	beq.n	80086d4 <__mdiff+0xa4>
 80086de:	6107      	str	r7, [r0, #16]
 80086e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086e4:	4633      	mov	r3, r6
 80086e6:	f04f 0801 	mov.w	r8, #1
 80086ea:	4626      	mov	r6, r4
 80086ec:	461c      	mov	r4, r3
 80086ee:	e7ad      	b.n	800864c <__mdiff+0x1c>
 80086f0:	4628      	mov	r0, r5
 80086f2:	4639      	mov	r1, r7
 80086f4:	f7ff fd6e 	bl	80081d4 <_Balloc>
 80086f8:	2301      	movs	r3, #1
 80086fa:	6147      	str	r7, [r0, #20]
 80086fc:	6103      	str	r3, [r0, #16]
 80086fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008702:	bf00      	nop

08008704 <__d2b>:
 8008704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	2101      	movs	r1, #1
 800870c:	461c      	mov	r4, r3
 800870e:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8008712:	4615      	mov	r5, r2
 8008714:	9e08      	ldr	r6, [sp, #32]
 8008716:	f7ff fd5d 	bl	80081d4 <_Balloc>
 800871a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800871e:	4680      	mov	r8, r0
 8008720:	b10f      	cbz	r7, 8008726 <__d2b+0x22>
 8008722:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008726:	9401      	str	r4, [sp, #4]
 8008728:	b31d      	cbz	r5, 8008772 <__d2b+0x6e>
 800872a:	a802      	add	r0, sp, #8
 800872c:	f840 5d08 	str.w	r5, [r0, #-8]!
 8008730:	f7ff fde2 	bl	80082f8 <__lo0bits>
 8008734:	2800      	cmp	r0, #0
 8008736:	d134      	bne.n	80087a2 <__d2b+0x9e>
 8008738:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800873c:	f8c8 2014 	str.w	r2, [r8, #20]
 8008740:	2b00      	cmp	r3, #0
 8008742:	bf14      	ite	ne
 8008744:	2402      	movne	r4, #2
 8008746:	2401      	moveq	r4, #1
 8008748:	f8c8 3018 	str.w	r3, [r8, #24]
 800874c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008750:	b9df      	cbnz	r7, 800878a <__d2b+0x86>
 8008752:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8008756:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800875a:	6030      	str	r0, [r6, #0]
 800875c:	6918      	ldr	r0, [r3, #16]
 800875e:	f7ff fdab 	bl	80082b8 <__hi0bits>
 8008762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008764:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8008768:	6018      	str	r0, [r3, #0]
 800876a:	4640      	mov	r0, r8
 800876c:	b002      	add	sp, #8
 800876e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008772:	a801      	add	r0, sp, #4
 8008774:	f7ff fdc0 	bl	80082f8 <__lo0bits>
 8008778:	2401      	movs	r4, #1
 800877a:	9b01      	ldr	r3, [sp, #4]
 800877c:	f8c8 3014 	str.w	r3, [r8, #20]
 8008780:	3020      	adds	r0, #32
 8008782:	f8c8 4010 	str.w	r4, [r8, #16]
 8008786:	2f00      	cmp	r7, #0
 8008788:	d0e3      	beq.n	8008752 <__d2b+0x4e>
 800878a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800878c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 8008790:	4407      	add	r7, r0
 8008792:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008796:	6037      	str	r7, [r6, #0]
 8008798:	6018      	str	r0, [r3, #0]
 800879a:	4640      	mov	r0, r8
 800879c:	b002      	add	sp, #8
 800879e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a2:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80087a6:	f1c0 0120 	rsb	r1, r0, #32
 80087aa:	fa03 f101 	lsl.w	r1, r3, r1
 80087ae:	430a      	orrs	r2, r1
 80087b0:	40c3      	lsrs	r3, r0
 80087b2:	9301      	str	r3, [sp, #4]
 80087b4:	f8c8 2014 	str.w	r2, [r8, #20]
 80087b8:	e7c2      	b.n	8008740 <__d2b+0x3c>
 80087ba:	bf00      	nop

080087bc <_realloc_r>:
 80087bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c0:	4617      	mov	r7, r2
 80087c2:	b083      	sub	sp, #12
 80087c4:	460e      	mov	r6, r1
 80087c6:	2900      	cmp	r1, #0
 80087c8:	f000 80e7 	beq.w	800899a <_realloc_r+0x1de>
 80087cc:	4681      	mov	r9, r0
 80087ce:	f107 050b 	add.w	r5, r7, #11
 80087d2:	f7ff fcfb 	bl	80081cc <__malloc_lock>
 80087d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80087da:	2d16      	cmp	r5, #22
 80087dc:	f023 0403 	bic.w	r4, r3, #3
 80087e0:	f1a6 0808 	sub.w	r8, r6, #8
 80087e4:	d84c      	bhi.n	8008880 <_realloc_r+0xc4>
 80087e6:	2210      	movs	r2, #16
 80087e8:	4615      	mov	r5, r2
 80087ea:	42af      	cmp	r7, r5
 80087ec:	d84d      	bhi.n	800888a <_realloc_r+0xce>
 80087ee:	4294      	cmp	r4, r2
 80087f0:	f280 8084 	bge.w	80088fc <_realloc_r+0x140>
 80087f4:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 8008ba4 <_realloc_r+0x3e8>
 80087f8:	f8db 0008 	ldr.w	r0, [fp, #8]
 80087fc:	eb08 0104 	add.w	r1, r8, r4
 8008800:	4288      	cmp	r0, r1
 8008802:	f000 80d6 	beq.w	80089b2 <_realloc_r+0x1f6>
 8008806:	6848      	ldr	r0, [r1, #4]
 8008808:	f020 0e01 	bic.w	lr, r0, #1
 800880c:	448e      	add	lr, r1
 800880e:	f8de e004 	ldr.w	lr, [lr, #4]
 8008812:	f01e 0f01 	tst.w	lr, #1
 8008816:	d13f      	bne.n	8008898 <_realloc_r+0xdc>
 8008818:	f020 0003 	bic.w	r0, r0, #3
 800881c:	4420      	add	r0, r4
 800881e:	4290      	cmp	r0, r2
 8008820:	f280 80c1 	bge.w	80089a6 <_realloc_r+0x1ea>
 8008824:	07db      	lsls	r3, r3, #31
 8008826:	f100 808f 	bmi.w	8008948 <_realloc_r+0x18c>
 800882a:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800882e:	ebc3 0a08 	rsb	sl, r3, r8
 8008832:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008836:	f023 0303 	bic.w	r3, r3, #3
 800883a:	eb00 0e03 	add.w	lr, r0, r3
 800883e:	4596      	cmp	lr, r2
 8008840:	db34      	blt.n	80088ac <_realloc_r+0xf0>
 8008842:	68cb      	ldr	r3, [r1, #12]
 8008844:	688a      	ldr	r2, [r1, #8]
 8008846:	4657      	mov	r7, sl
 8008848:	60d3      	str	r3, [r2, #12]
 800884a:	609a      	str	r2, [r3, #8]
 800884c:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8008850:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008854:	60cb      	str	r3, [r1, #12]
 8008856:	1f22      	subs	r2, r4, #4
 8008858:	2a24      	cmp	r2, #36	; 0x24
 800885a:	6099      	str	r1, [r3, #8]
 800885c:	f200 8136 	bhi.w	8008acc <_realloc_r+0x310>
 8008860:	2a13      	cmp	r2, #19
 8008862:	f240 80fd 	bls.w	8008a60 <_realloc_r+0x2a4>
 8008866:	6833      	ldr	r3, [r6, #0]
 8008868:	f8ca 3008 	str.w	r3, [sl, #8]
 800886c:	6873      	ldr	r3, [r6, #4]
 800886e:	f8ca 300c 	str.w	r3, [sl, #12]
 8008872:	2a1b      	cmp	r2, #27
 8008874:	f200 8140 	bhi.w	8008af8 <_realloc_r+0x33c>
 8008878:	3608      	adds	r6, #8
 800887a:	f10a 0310 	add.w	r3, sl, #16
 800887e:	e0f0      	b.n	8008a62 <_realloc_r+0x2a6>
 8008880:	f025 0507 	bic.w	r5, r5, #7
 8008884:	2d00      	cmp	r5, #0
 8008886:	462a      	mov	r2, r5
 8008888:	daaf      	bge.n	80087ea <_realloc_r+0x2e>
 800888a:	230c      	movs	r3, #12
 800888c:	2000      	movs	r0, #0
 800888e:	f8c9 3000 	str.w	r3, [r9]
 8008892:	b003      	add	sp, #12
 8008894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008898:	07d9      	lsls	r1, r3, #31
 800889a:	d455      	bmi.n	8008948 <_realloc_r+0x18c>
 800889c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80088a0:	ebc3 0a08 	rsb	sl, r3, r8
 80088a4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80088a8:	f023 0303 	bic.w	r3, r3, #3
 80088ac:	4423      	add	r3, r4
 80088ae:	4293      	cmp	r3, r2
 80088b0:	db4a      	blt.n	8008948 <_realloc_r+0x18c>
 80088b2:	4657      	mov	r7, sl
 80088b4:	f8da 100c 	ldr.w	r1, [sl, #12]
 80088b8:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80088bc:	1f22      	subs	r2, r4, #4
 80088be:	2a24      	cmp	r2, #36	; 0x24
 80088c0:	60c1      	str	r1, [r0, #12]
 80088c2:	6088      	str	r0, [r1, #8]
 80088c4:	f200 810e 	bhi.w	8008ae4 <_realloc_r+0x328>
 80088c8:	2a13      	cmp	r2, #19
 80088ca:	f240 8109 	bls.w	8008ae0 <_realloc_r+0x324>
 80088ce:	6831      	ldr	r1, [r6, #0]
 80088d0:	f8ca 1008 	str.w	r1, [sl, #8]
 80088d4:	6871      	ldr	r1, [r6, #4]
 80088d6:	f8ca 100c 	str.w	r1, [sl, #12]
 80088da:	2a1b      	cmp	r2, #27
 80088dc:	f200 8121 	bhi.w	8008b22 <_realloc_r+0x366>
 80088e0:	3608      	adds	r6, #8
 80088e2:	f10a 0210 	add.w	r2, sl, #16
 80088e6:	6831      	ldr	r1, [r6, #0]
 80088e8:	6011      	str	r1, [r2, #0]
 80088ea:	6871      	ldr	r1, [r6, #4]
 80088ec:	6051      	str	r1, [r2, #4]
 80088ee:	68b1      	ldr	r1, [r6, #8]
 80088f0:	6091      	str	r1, [r2, #8]
 80088f2:	461c      	mov	r4, r3
 80088f4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80088f8:	463e      	mov	r6, r7
 80088fa:	46d0      	mov	r8, sl
 80088fc:	1b62      	subs	r2, r4, r5
 80088fe:	2a0f      	cmp	r2, #15
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	d80e      	bhi.n	8008924 <_realloc_r+0x168>
 8008906:	4323      	orrs	r3, r4
 8008908:	4444      	add	r4, r8
 800890a:	f8c8 3004 	str.w	r3, [r8, #4]
 800890e:	6863      	ldr	r3, [r4, #4]
 8008910:	f043 0301 	orr.w	r3, r3, #1
 8008914:	6063      	str	r3, [r4, #4]
 8008916:	4648      	mov	r0, r9
 8008918:	f7ff fc5a 	bl	80081d0 <__malloc_unlock>
 800891c:	4630      	mov	r0, r6
 800891e:	b003      	add	sp, #12
 8008920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008924:	eb08 0105 	add.w	r1, r8, r5
 8008928:	431d      	orrs	r5, r3
 800892a:	f042 0301 	orr.w	r3, r2, #1
 800892e:	440a      	add	r2, r1
 8008930:	f8c8 5004 	str.w	r5, [r8, #4]
 8008934:	604b      	str	r3, [r1, #4]
 8008936:	6853      	ldr	r3, [r2, #4]
 8008938:	f043 0301 	orr.w	r3, r3, #1
 800893c:	3108      	adds	r1, #8
 800893e:	6053      	str	r3, [r2, #4]
 8008940:	4648      	mov	r0, r9
 8008942:	f7fe fdad 	bl	80074a0 <_free_r>
 8008946:	e7e6      	b.n	8008916 <_realloc_r+0x15a>
 8008948:	4639      	mov	r1, r7
 800894a:	4648      	mov	r0, r9
 800894c:	f7ff f8b4 	bl	8007ab8 <_malloc_r>
 8008950:	4607      	mov	r7, r0
 8008952:	b1d8      	cbz	r0, 800898c <_realloc_r+0x1d0>
 8008954:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008958:	f023 0201 	bic.w	r2, r3, #1
 800895c:	4442      	add	r2, r8
 800895e:	f1a0 0108 	sub.w	r1, r0, #8
 8008962:	4291      	cmp	r1, r2
 8008964:	f000 80ac 	beq.w	8008ac0 <_realloc_r+0x304>
 8008968:	1f22      	subs	r2, r4, #4
 800896a:	2a24      	cmp	r2, #36	; 0x24
 800896c:	f200 8099 	bhi.w	8008aa2 <_realloc_r+0x2e6>
 8008970:	2a13      	cmp	r2, #19
 8008972:	d86a      	bhi.n	8008a4a <_realloc_r+0x28e>
 8008974:	4603      	mov	r3, r0
 8008976:	4632      	mov	r2, r6
 8008978:	6811      	ldr	r1, [r2, #0]
 800897a:	6019      	str	r1, [r3, #0]
 800897c:	6851      	ldr	r1, [r2, #4]
 800897e:	6059      	str	r1, [r3, #4]
 8008980:	6892      	ldr	r2, [r2, #8]
 8008982:	609a      	str	r2, [r3, #8]
 8008984:	4631      	mov	r1, r6
 8008986:	4648      	mov	r0, r9
 8008988:	f7fe fd8a 	bl	80074a0 <_free_r>
 800898c:	4648      	mov	r0, r9
 800898e:	f7ff fc1f 	bl	80081d0 <__malloc_unlock>
 8008992:	4638      	mov	r0, r7
 8008994:	b003      	add	sp, #12
 8008996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899a:	4611      	mov	r1, r2
 800899c:	b003      	add	sp, #12
 800899e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a2:	f7ff b889 	b.w	8007ab8 <_malloc_r>
 80089a6:	68ca      	ldr	r2, [r1, #12]
 80089a8:	6889      	ldr	r1, [r1, #8]
 80089aa:	4604      	mov	r4, r0
 80089ac:	60ca      	str	r2, [r1, #12]
 80089ae:	6091      	str	r1, [r2, #8]
 80089b0:	e7a4      	b.n	80088fc <_realloc_r+0x140>
 80089b2:	6841      	ldr	r1, [r0, #4]
 80089b4:	f021 0103 	bic.w	r1, r1, #3
 80089b8:	4421      	add	r1, r4
 80089ba:	f105 0010 	add.w	r0, r5, #16
 80089be:	4281      	cmp	r1, r0
 80089c0:	da5b      	bge.n	8008a7a <_realloc_r+0x2be>
 80089c2:	07db      	lsls	r3, r3, #31
 80089c4:	d4c0      	bmi.n	8008948 <_realloc_r+0x18c>
 80089c6:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80089ca:	ebc3 0a08 	rsb	sl, r3, r8
 80089ce:	f8da 3004 	ldr.w	r3, [sl, #4]
 80089d2:	f023 0303 	bic.w	r3, r3, #3
 80089d6:	eb01 0c03 	add.w	ip, r1, r3
 80089da:	4560      	cmp	r0, ip
 80089dc:	f73f af66 	bgt.w	80088ac <_realloc_r+0xf0>
 80089e0:	4657      	mov	r7, sl
 80089e2:	f8da 300c 	ldr.w	r3, [sl, #12]
 80089e6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80089ea:	1f22      	subs	r2, r4, #4
 80089ec:	2a24      	cmp	r2, #36	; 0x24
 80089ee:	60cb      	str	r3, [r1, #12]
 80089f0:	6099      	str	r1, [r3, #8]
 80089f2:	f200 80b8 	bhi.w	8008b66 <_realloc_r+0x3aa>
 80089f6:	2a13      	cmp	r2, #19
 80089f8:	f240 80a9 	bls.w	8008b4e <_realloc_r+0x392>
 80089fc:	6833      	ldr	r3, [r6, #0]
 80089fe:	f8ca 3008 	str.w	r3, [sl, #8]
 8008a02:	6873      	ldr	r3, [r6, #4]
 8008a04:	f8ca 300c 	str.w	r3, [sl, #12]
 8008a08:	2a1b      	cmp	r2, #27
 8008a0a:	f200 80b5 	bhi.w	8008b78 <_realloc_r+0x3bc>
 8008a0e:	3608      	adds	r6, #8
 8008a10:	f10a 0310 	add.w	r3, sl, #16
 8008a14:	6832      	ldr	r2, [r6, #0]
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	6872      	ldr	r2, [r6, #4]
 8008a1a:	605a      	str	r2, [r3, #4]
 8008a1c:	68b2      	ldr	r2, [r6, #8]
 8008a1e:	609a      	str	r2, [r3, #8]
 8008a20:	eb0a 0205 	add.w	r2, sl, r5
 8008a24:	ebc5 030c 	rsb	r3, r5, ip
 8008a28:	f043 0301 	orr.w	r3, r3, #1
 8008a2c:	f8cb 2008 	str.w	r2, [fp, #8]
 8008a30:	6053      	str	r3, [r2, #4]
 8008a32:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	431d      	orrs	r5, r3
 8008a3c:	4648      	mov	r0, r9
 8008a3e:	f8ca 5004 	str.w	r5, [sl, #4]
 8008a42:	f7ff fbc5 	bl	80081d0 <__malloc_unlock>
 8008a46:	4638      	mov	r0, r7
 8008a48:	e769      	b.n	800891e <_realloc_r+0x162>
 8008a4a:	6833      	ldr	r3, [r6, #0]
 8008a4c:	6003      	str	r3, [r0, #0]
 8008a4e:	6873      	ldr	r3, [r6, #4]
 8008a50:	6043      	str	r3, [r0, #4]
 8008a52:	2a1b      	cmp	r2, #27
 8008a54:	d829      	bhi.n	8008aaa <_realloc_r+0x2ee>
 8008a56:	f100 0308 	add.w	r3, r0, #8
 8008a5a:	f106 0208 	add.w	r2, r6, #8
 8008a5e:	e78b      	b.n	8008978 <_realloc_r+0x1bc>
 8008a60:	463b      	mov	r3, r7
 8008a62:	6832      	ldr	r2, [r6, #0]
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	6872      	ldr	r2, [r6, #4]
 8008a68:	605a      	str	r2, [r3, #4]
 8008a6a:	68b2      	ldr	r2, [r6, #8]
 8008a6c:	609a      	str	r2, [r3, #8]
 8008a6e:	463e      	mov	r6, r7
 8008a70:	4674      	mov	r4, lr
 8008a72:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008a76:	46d0      	mov	r8, sl
 8008a78:	e740      	b.n	80088fc <_realloc_r+0x140>
 8008a7a:	eb08 0205 	add.w	r2, r8, r5
 8008a7e:	1b4b      	subs	r3, r1, r5
 8008a80:	f043 0301 	orr.w	r3, r3, #1
 8008a84:	f8cb 2008 	str.w	r2, [fp, #8]
 8008a88:	6053      	str	r3, [r2, #4]
 8008a8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	431d      	orrs	r5, r3
 8008a94:	4648      	mov	r0, r9
 8008a96:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a9a:	f7ff fb99 	bl	80081d0 <__malloc_unlock>
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	e73d      	b.n	800891e <_realloc_r+0x162>
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	f7ff fae0 	bl	8008068 <memmove>
 8008aa8:	e76c      	b.n	8008984 <_realloc_r+0x1c8>
 8008aaa:	68b3      	ldr	r3, [r6, #8]
 8008aac:	6083      	str	r3, [r0, #8]
 8008aae:	68f3      	ldr	r3, [r6, #12]
 8008ab0:	60c3      	str	r3, [r0, #12]
 8008ab2:	2a24      	cmp	r2, #36	; 0x24
 8008ab4:	d02c      	beq.n	8008b10 <_realloc_r+0x354>
 8008ab6:	f100 0310 	add.w	r3, r0, #16
 8008aba:	f106 0210 	add.w	r2, r6, #16
 8008abe:	e75b      	b.n	8008978 <_realloc_r+0x1bc>
 8008ac0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008ac4:	f022 0203 	bic.w	r2, r2, #3
 8008ac8:	4414      	add	r4, r2
 8008aca:	e717      	b.n	80088fc <_realloc_r+0x140>
 8008acc:	4631      	mov	r1, r6
 8008ace:	4638      	mov	r0, r7
 8008ad0:	4674      	mov	r4, lr
 8008ad2:	463e      	mov	r6, r7
 8008ad4:	f7ff fac8 	bl	8008068 <memmove>
 8008ad8:	46d0      	mov	r8, sl
 8008ada:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008ade:	e70d      	b.n	80088fc <_realloc_r+0x140>
 8008ae0:	463a      	mov	r2, r7
 8008ae2:	e700      	b.n	80088e6 <_realloc_r+0x12a>
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	461c      	mov	r4, r3
 8008aea:	463e      	mov	r6, r7
 8008aec:	f7ff fabc 	bl	8008068 <memmove>
 8008af0:	46d0      	mov	r8, sl
 8008af2:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008af6:	e701      	b.n	80088fc <_realloc_r+0x140>
 8008af8:	68b3      	ldr	r3, [r6, #8]
 8008afa:	f8ca 3010 	str.w	r3, [sl, #16]
 8008afe:	68f3      	ldr	r3, [r6, #12]
 8008b00:	f8ca 3014 	str.w	r3, [sl, #20]
 8008b04:	2a24      	cmp	r2, #36	; 0x24
 8008b06:	d018      	beq.n	8008b3a <_realloc_r+0x37e>
 8008b08:	3610      	adds	r6, #16
 8008b0a:	f10a 0318 	add.w	r3, sl, #24
 8008b0e:	e7a8      	b.n	8008a62 <_realloc_r+0x2a6>
 8008b10:	6933      	ldr	r3, [r6, #16]
 8008b12:	6103      	str	r3, [r0, #16]
 8008b14:	6973      	ldr	r3, [r6, #20]
 8008b16:	6143      	str	r3, [r0, #20]
 8008b18:	f106 0218 	add.w	r2, r6, #24
 8008b1c:	f100 0318 	add.w	r3, r0, #24
 8008b20:	e72a      	b.n	8008978 <_realloc_r+0x1bc>
 8008b22:	68b1      	ldr	r1, [r6, #8]
 8008b24:	f8ca 1010 	str.w	r1, [sl, #16]
 8008b28:	68f1      	ldr	r1, [r6, #12]
 8008b2a:	f8ca 1014 	str.w	r1, [sl, #20]
 8008b2e:	2a24      	cmp	r2, #36	; 0x24
 8008b30:	d00f      	beq.n	8008b52 <_realloc_r+0x396>
 8008b32:	3610      	adds	r6, #16
 8008b34:	f10a 0218 	add.w	r2, sl, #24
 8008b38:	e6d5      	b.n	80088e6 <_realloc_r+0x12a>
 8008b3a:	6933      	ldr	r3, [r6, #16]
 8008b3c:	f8ca 3018 	str.w	r3, [sl, #24]
 8008b40:	6973      	ldr	r3, [r6, #20]
 8008b42:	f8ca 301c 	str.w	r3, [sl, #28]
 8008b46:	3618      	adds	r6, #24
 8008b48:	f10a 0320 	add.w	r3, sl, #32
 8008b4c:	e789      	b.n	8008a62 <_realloc_r+0x2a6>
 8008b4e:	463b      	mov	r3, r7
 8008b50:	e760      	b.n	8008a14 <_realloc_r+0x258>
 8008b52:	6932      	ldr	r2, [r6, #16]
 8008b54:	f8ca 2018 	str.w	r2, [sl, #24]
 8008b58:	6972      	ldr	r2, [r6, #20]
 8008b5a:	f8ca 201c 	str.w	r2, [sl, #28]
 8008b5e:	3618      	adds	r6, #24
 8008b60:	f10a 0220 	add.w	r2, sl, #32
 8008b64:	e6bf      	b.n	80088e6 <_realloc_r+0x12a>
 8008b66:	4631      	mov	r1, r6
 8008b68:	4638      	mov	r0, r7
 8008b6a:	f8cd c004 	str.w	ip, [sp, #4]
 8008b6e:	f7ff fa7b 	bl	8008068 <memmove>
 8008b72:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008b76:	e753      	b.n	8008a20 <_realloc_r+0x264>
 8008b78:	68b3      	ldr	r3, [r6, #8]
 8008b7a:	f8ca 3010 	str.w	r3, [sl, #16]
 8008b7e:	68f3      	ldr	r3, [r6, #12]
 8008b80:	f8ca 3014 	str.w	r3, [sl, #20]
 8008b84:	2a24      	cmp	r2, #36	; 0x24
 8008b86:	d003      	beq.n	8008b90 <_realloc_r+0x3d4>
 8008b88:	3610      	adds	r6, #16
 8008b8a:	f10a 0318 	add.w	r3, sl, #24
 8008b8e:	e741      	b.n	8008a14 <_realloc_r+0x258>
 8008b90:	6933      	ldr	r3, [r6, #16]
 8008b92:	f8ca 3018 	str.w	r3, [sl, #24]
 8008b96:	6973      	ldr	r3, [r6, #20]
 8008b98:	f8ca 301c 	str.w	r3, [sl, #28]
 8008b9c:	3618      	adds	r6, #24
 8008b9e:	f10a 0320 	add.w	r3, sl, #32
 8008ba2:	e737      	b.n	8008a14 <_realloc_r+0x258>
 8008ba4:	20000518 	.word	0x20000518

08008ba8 <__fpclassifyd>:
 8008ba8:	b410      	push	{r4}
 8008baa:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8008bae:	d008      	beq.n	8008bc2 <__fpclassifyd+0x1a>
 8008bb0:	4b11      	ldr	r3, [pc, #68]	; (8008bf8 <__fpclassifyd+0x50>)
 8008bb2:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d808      	bhi.n	8008bcc <__fpclassifyd+0x24>
 8008bba:	2004      	movs	r0, #4
 8008bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	b918      	cbnz	r0, 8008bcc <__fpclassifyd+0x24>
 8008bc4:	2002      	movs	r0, #2
 8008bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
 8008bd0:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <__fpclassifyd+0x50>)
 8008bd2:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 8008bd6:	4299      	cmp	r1, r3
 8008bd8:	d9ef      	bls.n	8008bba <__fpclassifyd+0x12>
 8008bda:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008bde:	d201      	bcs.n	8008be4 <__fpclassifyd+0x3c>
 8008be0:	2003      	movs	r0, #3
 8008be2:	e7eb      	b.n	8008bbc <__fpclassifyd+0x14>
 8008be4:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <__fpclassifyd+0x54>)
 8008be6:	429c      	cmp	r4, r3
 8008be8:	d001      	beq.n	8008bee <__fpclassifyd+0x46>
 8008bea:	2000      	movs	r0, #0
 8008bec:	e7e6      	b.n	8008bbc <__fpclassifyd+0x14>
 8008bee:	fab0 f080 	clz	r0, r0
 8008bf2:	0940      	lsrs	r0, r0, #5
 8008bf4:	e7e2      	b.n	8008bbc <__fpclassifyd+0x14>
 8008bf6:	bf00      	nop
 8008bf8:	7fdfffff 	.word	0x7fdfffff
 8008bfc:	7ff00000 	.word	0x7ff00000

08008c00 <_sbrk_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4c07      	ldr	r4, [pc, #28]	; (8008c20 <_sbrk_r+0x20>)
 8008c04:	2300      	movs	r3, #0
 8008c06:	4605      	mov	r5, r0
 8008c08:	4608      	mov	r0, r1
 8008c0a:	6023      	str	r3, [r4, #0]
 8008c0c:	f7f8 fefa 	bl	8001a04 <_sbrk>
 8008c10:	1c43      	adds	r3, r0, #1
 8008c12:	d000      	beq.n	8008c16 <_sbrk_r+0x16>
 8008c14:	bd38      	pop	{r3, r4, r5, pc}
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d0fb      	beq.n	8008c14 <_sbrk_r+0x14>
 8008c1c:	602b      	str	r3, [r5, #0]
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	200015ac 	.word	0x200015ac

08008c24 <_raise_r>:
 8008c24:	291f      	cmp	r1, #31
 8008c26:	b538      	push	{r3, r4, r5, lr}
 8008c28:	d822      	bhi.n	8008c70 <_raise_r+0x4c>
 8008c2a:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8008c2e:	4605      	mov	r5, r0
 8008c30:	460c      	mov	r4, r1
 8008c32:	b19a      	cbz	r2, 8008c5c <_raise_r+0x38>
 8008c34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c38:	b183      	cbz	r3, 8008c5c <_raise_r+0x38>
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d00c      	beq.n	8008c58 <_raise_r+0x34>
 8008c3e:	1c59      	adds	r1, r3, #1
 8008c40:	d006      	beq.n	8008c50 <_raise_r+0x2c>
 8008c42:	2500      	movs	r5, #0
 8008c44:	4620      	mov	r0, r4
 8008c46:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8008c4a:	4798      	blx	r3
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	bd38      	pop	{r3, r4, r5, pc}
 8008c50:	2316      	movs	r3, #22
 8008c52:	6003      	str	r3, [r0, #0]
 8008c54:	2001      	movs	r0, #1
 8008c56:	bd38      	pop	{r3, r4, r5, pc}
 8008c58:	2000      	movs	r0, #0
 8008c5a:	bd38      	pop	{r3, r4, r5, pc}
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	f000 f829 	bl	8008cb4 <_getpid_r>
 8008c62:	4622      	mov	r2, r4
 8008c64:	4601      	mov	r1, r0
 8008c66:	4628      	mov	r0, r5
 8008c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c6c:	f000 b80e 	b.w	8008c8c <_kill_r>
 8008c70:	2316      	movs	r3, #22
 8008c72:	6003      	str	r3, [r0, #0]
 8008c74:	f04f 30ff 	mov.w	r0, #4294967295
 8008c78:	bd38      	pop	{r3, r4, r5, pc}
 8008c7a:	bf00      	nop

08008c7c <raise>:
 8008c7c:	4b02      	ldr	r3, [pc, #8]	; (8008c88 <raise+0xc>)
 8008c7e:	4601      	mov	r1, r0
 8008c80:	6818      	ldr	r0, [r3, #0]
 8008c82:	f7ff bfcf 	b.w	8008c24 <_raise_r>
 8008c86:	bf00      	nop
 8008c88:	200004b8 	.word	0x200004b8

08008c8c <_kill_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4c08      	ldr	r4, [pc, #32]	; (8008cb0 <_kill_r+0x24>)
 8008c90:	2300      	movs	r3, #0
 8008c92:	4605      	mov	r5, r0
 8008c94:	4608      	mov	r0, r1
 8008c96:	4611      	mov	r1, r2
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	f7f8 fe6d 	bl	8001978 <_kill>
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	d000      	beq.n	8008ca4 <_kill_r+0x18>
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d0fb      	beq.n	8008ca2 <_kill_r+0x16>
 8008caa:	602b      	str	r3, [r5, #0]
 8008cac:	bd38      	pop	{r3, r4, r5, pc}
 8008cae:	bf00      	nop
 8008cb0:	200015ac 	.word	0x200015ac

08008cb4 <_getpid_r>:
 8008cb4:	f7f8 be51 	b.w	800195a <_getpid>

08008cb8 <__sread>:
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	460c      	mov	r4, r1
 8008cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc0:	f000 f99a 	bl	8008ff8 <_read_r>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	db03      	blt.n	8008cd0 <__sread+0x18>
 8008cc8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008cca:	4403      	add	r3, r0
 8008ccc:	6523      	str	r3, [r4, #80]	; 0x50
 8008cce:	bd10      	pop	{r4, pc}
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cd6:	81a3      	strh	r3, [r4, #12]
 8008cd8:	bd10      	pop	{r4, pc}
 8008cda:	bf00      	nop

08008cdc <__swrite>:
 8008cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce0:	4616      	mov	r6, r2
 8008ce2:	898a      	ldrh	r2, [r1, #12]
 8008ce4:	461d      	mov	r5, r3
 8008ce6:	05d3      	lsls	r3, r2, #23
 8008ce8:	460c      	mov	r4, r1
 8008cea:	4607      	mov	r7, r0
 8008cec:	d506      	bpl.n	8008cfc <__swrite+0x20>
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	f000 f96b 	bl	8008fd0 <_lseek_r>
 8008cfa:	89a2      	ldrh	r2, [r4, #12]
 8008cfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d04:	81a2      	strh	r2, [r4, #12]
 8008d06:	4638      	mov	r0, r7
 8008d08:	4632      	mov	r2, r6
 8008d0a:	462b      	mov	r3, r5
 8008d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d10:	f000 b8a0 	b.w	8008e54 <_write_r>

08008d14 <__sseek>:
 8008d14:	b510      	push	{r4, lr}
 8008d16:	460c      	mov	r4, r1
 8008d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1c:	f000 f958 	bl	8008fd0 <_lseek_r>
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	1c42      	adds	r2, r0, #1
 8008d24:	bf0e      	itee	eq
 8008d26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d2e:	6520      	strne	r0, [r4, #80]	; 0x50
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	bd10      	pop	{r4, pc}

08008d34 <__sclose>:
 8008d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d38:	f000 b8d0 	b.w	8008edc <_close_r>

08008d3c <__swbuf_r>:
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	460d      	mov	r5, r1
 8008d40:	4614      	mov	r4, r2
 8008d42:	4606      	mov	r6, r0
 8008d44:	b110      	cbz	r0, 8008d4c <__swbuf_r+0x10>
 8008d46:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d048      	beq.n	8008dde <__swbuf_r+0xa2>
 8008d4c:	89a2      	ldrh	r2, [r4, #12]
 8008d4e:	69a3      	ldr	r3, [r4, #24]
 8008d50:	60a3      	str	r3, [r4, #8]
 8008d52:	b291      	uxth	r1, r2
 8008d54:	0708      	lsls	r0, r1, #28
 8008d56:	d538      	bpl.n	8008dca <__swbuf_r+0x8e>
 8008d58:	6923      	ldr	r3, [r4, #16]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d035      	beq.n	8008dca <__swbuf_r+0x8e>
 8008d5e:	0489      	lsls	r1, r1, #18
 8008d60:	b2ed      	uxtb	r5, r5
 8008d62:	d515      	bpl.n	8008d90 <__swbuf_r+0x54>
 8008d64:	6822      	ldr	r2, [r4, #0]
 8008d66:	6961      	ldr	r1, [r4, #20]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	428b      	cmp	r3, r1
 8008d6c:	da1c      	bge.n	8008da8 <__swbuf_r+0x6c>
 8008d6e:	3301      	adds	r3, #1
 8008d70:	68a1      	ldr	r1, [r4, #8]
 8008d72:	1c50      	adds	r0, r2, #1
 8008d74:	3901      	subs	r1, #1
 8008d76:	60a1      	str	r1, [r4, #8]
 8008d78:	6020      	str	r0, [r4, #0]
 8008d7a:	7015      	strb	r5, [r2, #0]
 8008d7c:	6962      	ldr	r2, [r4, #20]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d01a      	beq.n	8008db8 <__swbuf_r+0x7c>
 8008d82:	89a3      	ldrh	r3, [r4, #12]
 8008d84:	07db      	lsls	r3, r3, #31
 8008d86:	d501      	bpl.n	8008d8c <__swbuf_r+0x50>
 8008d88:	2d0a      	cmp	r5, #10
 8008d8a:	d015      	beq.n	8008db8 <__swbuf_r+0x7c>
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	bd70      	pop	{r4, r5, r6, pc}
 8008d90:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008d92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d96:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8008d9a:	81a2      	strh	r2, [r4, #12]
 8008d9c:	6822      	ldr	r2, [r4, #0]
 8008d9e:	6661      	str	r1, [r4, #100]	; 0x64
 8008da0:	6961      	ldr	r1, [r4, #20]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	428b      	cmp	r3, r1
 8008da6:	dbe2      	blt.n	8008d6e <__swbuf_r+0x32>
 8008da8:	4630      	mov	r0, r6
 8008daa:	4621      	mov	r1, r4
 8008dac:	f7fe fa2a 	bl	8007204 <_fflush_r>
 8008db0:	b940      	cbnz	r0, 8008dc4 <__swbuf_r+0x88>
 8008db2:	6822      	ldr	r2, [r4, #0]
 8008db4:	2301      	movs	r3, #1
 8008db6:	e7db      	b.n	8008d70 <__swbuf_r+0x34>
 8008db8:	4630      	mov	r0, r6
 8008dba:	4621      	mov	r1, r4
 8008dbc:	f7fe fa22 	bl	8007204 <_fflush_r>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d0e3      	beq.n	8008d8c <__swbuf_r+0x50>
 8008dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc8:	bd70      	pop	{r4, r5, r6, pc}
 8008dca:	4630      	mov	r0, r6
 8008dcc:	4621      	mov	r1, r4
 8008dce:	f7fd f921 	bl	8006014 <__swsetup_r>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d1f6      	bne.n	8008dc4 <__swbuf_r+0x88>
 8008dd6:	89a2      	ldrh	r2, [r4, #12]
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	b291      	uxth	r1, r2
 8008ddc:	e7bf      	b.n	8008d5e <__swbuf_r+0x22>
 8008dde:	f7fe faa5 	bl	800732c <__sinit>
 8008de2:	e7b3      	b.n	8008d4c <__swbuf_r+0x10>

08008de4 <_wcrtomb_r>:
 8008de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de8:	4605      	mov	r5, r0
 8008dea:	b086      	sub	sp, #24
 8008dec:	461e      	mov	r6, r3
 8008dee:	460c      	mov	r4, r1
 8008df0:	b1a1      	cbz	r1, 8008e1c <_wcrtomb_r+0x38>
 8008df2:	4b10      	ldr	r3, [pc, #64]	; (8008e34 <_wcrtomb_r+0x50>)
 8008df4:	4617      	mov	r7, r2
 8008df6:	f8d3 8000 	ldr.w	r8, [r3]
 8008dfa:	f7fe fddf 	bl	80079bc <__locale_charset>
 8008dfe:	9600      	str	r6, [sp, #0]
 8008e00:	4603      	mov	r3, r0
 8008e02:	4621      	mov	r1, r4
 8008e04:	463a      	mov	r2, r7
 8008e06:	4628      	mov	r0, r5
 8008e08:	47c0      	blx	r8
 8008e0a:	1c43      	adds	r3, r0, #1
 8008e0c:	d103      	bne.n	8008e16 <_wcrtomb_r+0x32>
 8008e0e:	2200      	movs	r2, #0
 8008e10:	238a      	movs	r3, #138	; 0x8a
 8008e12:	6032      	str	r2, [r6, #0]
 8008e14:	602b      	str	r3, [r5, #0]
 8008e16:	b006      	add	sp, #24
 8008e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e1c:	4b05      	ldr	r3, [pc, #20]	; (8008e34 <_wcrtomb_r+0x50>)
 8008e1e:	681f      	ldr	r7, [r3, #0]
 8008e20:	f7fe fdcc 	bl	80079bc <__locale_charset>
 8008e24:	9600      	str	r6, [sp, #0]
 8008e26:	4603      	mov	r3, r0
 8008e28:	4622      	mov	r2, r4
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	a903      	add	r1, sp, #12
 8008e2e:	47b8      	blx	r7
 8008e30:	e7eb      	b.n	8008e0a <_wcrtomb_r+0x26>
 8008e32:	bf00      	nop
 8008e34:	20000928 	.word	0x20000928

08008e38 <__ascii_wctomb>:
 8008e38:	b121      	cbz	r1, 8008e44 <__ascii_wctomb+0xc>
 8008e3a:	2aff      	cmp	r2, #255	; 0xff
 8008e3c:	d804      	bhi.n	8008e48 <__ascii_wctomb+0x10>
 8008e3e:	700a      	strb	r2, [r1, #0]
 8008e40:	2001      	movs	r0, #1
 8008e42:	4770      	bx	lr
 8008e44:	4608      	mov	r0, r1
 8008e46:	4770      	bx	lr
 8008e48:	238a      	movs	r3, #138	; 0x8a
 8008e4a:	6003      	str	r3, [r0, #0]
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop

08008e54 <_write_r>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	4c08      	ldr	r4, [pc, #32]	; (8008e78 <_write_r+0x24>)
 8008e58:	4606      	mov	r6, r0
 8008e5a:	2500      	movs	r5, #0
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	4611      	mov	r1, r2
 8008e60:	461a      	mov	r2, r3
 8008e62:	6025      	str	r5, [r4, #0]
 8008e64:	f7f8 fdaa 	bl	80019bc <_write>
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	d000      	beq.n	8008e6e <_write_r+0x1a>
 8008e6c:	bd70      	pop	{r4, r5, r6, pc}
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d0fb      	beq.n	8008e6c <_write_r+0x18>
 8008e74:	6033      	str	r3, [r6, #0]
 8008e76:	bd70      	pop	{r4, r5, r6, pc}
 8008e78:	200015ac 	.word	0x200015ac

08008e7c <_calloc_r>:
 8008e7c:	b510      	push	{r4, lr}
 8008e7e:	fb02 f101 	mul.w	r1, r2, r1
 8008e82:	f7fe fe19 	bl	8007ab8 <_malloc_r>
 8008e86:	4604      	mov	r4, r0
 8008e88:	b168      	cbz	r0, 8008ea6 <_calloc_r+0x2a>
 8008e8a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008e8e:	f022 0203 	bic.w	r2, r2, #3
 8008e92:	3a04      	subs	r2, #4
 8008e94:	2a24      	cmp	r2, #36	; 0x24
 8008e96:	d818      	bhi.n	8008eca <_calloc_r+0x4e>
 8008e98:	2a13      	cmp	r2, #19
 8008e9a:	d806      	bhi.n	8008eaa <_calloc_r+0x2e>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	605a      	str	r2, [r3, #4]
 8008ea4:	609a      	str	r2, [r3, #8]
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	bd10      	pop	{r4, pc}
 8008eaa:	2300      	movs	r3, #0
 8008eac:	2a1b      	cmp	r2, #27
 8008eae:	6003      	str	r3, [r0, #0]
 8008eb0:	6043      	str	r3, [r0, #4]
 8008eb2:	d90f      	bls.n	8008ed4 <_calloc_r+0x58>
 8008eb4:	2a24      	cmp	r2, #36	; 0x24
 8008eb6:	6083      	str	r3, [r0, #8]
 8008eb8:	60c3      	str	r3, [r0, #12]
 8008eba:	bf05      	ittet	eq
 8008ebc:	6103      	streq	r3, [r0, #16]
 8008ebe:	6143      	streq	r3, [r0, #20]
 8008ec0:	f100 0310 	addne.w	r3, r0, #16
 8008ec4:	f100 0318 	addeq.w	r3, r0, #24
 8008ec8:	e7e9      	b.n	8008e9e <_calloc_r+0x22>
 8008eca:	2100      	movs	r1, #0
 8008ecc:	f7ff f930 	bl	8008130 <memset>
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	bd10      	pop	{r4, pc}
 8008ed4:	f100 0308 	add.w	r3, r0, #8
 8008ed8:	e7e1      	b.n	8008e9e <_calloc_r+0x22>
 8008eda:	bf00      	nop

08008edc <_close_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4c07      	ldr	r4, [pc, #28]	; (8008efc <_close_r+0x20>)
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	4608      	mov	r0, r1
 8008ee6:	6023      	str	r3, [r4, #0]
 8008ee8:	f7f8 fd2f 	bl	800194a <_close>
 8008eec:	1c43      	adds	r3, r0, #1
 8008eee:	d000      	beq.n	8008ef2 <_close_r+0x16>
 8008ef0:	bd38      	pop	{r3, r4, r5, pc}
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d0fb      	beq.n	8008ef0 <_close_r+0x14>
 8008ef8:	602b      	str	r3, [r5, #0]
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	200015ac 	.word	0x200015ac

08008f00 <_fclose_r>:
 8008f00:	2900      	cmp	r1, #0
 8008f02:	d03d      	beq.n	8008f80 <_fclose_r+0x80>
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	4605      	mov	r5, r0
 8008f08:	460c      	mov	r4, r1
 8008f0a:	b108      	cbz	r0, 8008f10 <_fclose_r+0x10>
 8008f0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008f0e:	b37b      	cbz	r3, 8008f70 <_fclose_r+0x70>
 8008f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f14:	b90b      	cbnz	r3, 8008f1a <_fclose_r+0x1a>
 8008f16:	2000      	movs	r0, #0
 8008f18:	bd70      	pop	{r4, r5, r6, pc}
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	4621      	mov	r1, r4
 8008f1e:	f7fe f8c7 	bl	80070b0 <__sflush_r>
 8008f22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008f24:	4606      	mov	r6, r0
 8008f26:	b133      	cbz	r3, 8008f36 <_fclose_r+0x36>
 8008f28:	4628      	mov	r0, r5
 8008f2a:	69e1      	ldr	r1, [r4, #28]
 8008f2c:	4798      	blx	r3
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	bfb8      	it	lt
 8008f32:	f04f 36ff 	movlt.w	r6, #4294967295
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	061b      	lsls	r3, r3, #24
 8008f3a:	d41c      	bmi.n	8008f76 <_fclose_r+0x76>
 8008f3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008f3e:	b141      	cbz	r1, 8008f52 <_fclose_r+0x52>
 8008f40:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008f44:	4299      	cmp	r1, r3
 8008f46:	d002      	beq.n	8008f4e <_fclose_r+0x4e>
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f7fe faa9 	bl	80074a0 <_free_r>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6323      	str	r3, [r4, #48]	; 0x30
 8008f52:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008f54:	b121      	cbz	r1, 8008f60 <_fclose_r+0x60>
 8008f56:	4628      	mov	r0, r5
 8008f58:	f7fe faa2 	bl	80074a0 <_free_r>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	6463      	str	r3, [r4, #68]	; 0x44
 8008f60:	f7fe f9ea 	bl	8007338 <__sfp_lock_acquire>
 8008f64:	2300      	movs	r3, #0
 8008f66:	81a3      	strh	r3, [r4, #12]
 8008f68:	f7fe f9e8 	bl	800733c <__sfp_lock_release>
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	bd70      	pop	{r4, r5, r6, pc}
 8008f70:	f7fe f9dc 	bl	800732c <__sinit>
 8008f74:	e7cc      	b.n	8008f10 <_fclose_r+0x10>
 8008f76:	4628      	mov	r0, r5
 8008f78:	6921      	ldr	r1, [r4, #16]
 8008f7a:	f7fe fa91 	bl	80074a0 <_free_r>
 8008f7e:	e7dd      	b.n	8008f3c <_fclose_r+0x3c>
 8008f80:	2000      	movs	r0, #0
 8008f82:	4770      	bx	lr

08008f84 <_fstat_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4c08      	ldr	r4, [pc, #32]	; (8008fa8 <_fstat_r+0x24>)
 8008f88:	2300      	movs	r3, #0
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	4611      	mov	r1, r2
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	f7f8 fcdd 	bl	8001950 <_fstat>
 8008f96:	1c43      	adds	r3, r0, #1
 8008f98:	d000      	beq.n	8008f9c <_fstat_r+0x18>
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d0fb      	beq.n	8008f9a <_fstat_r+0x16>
 8008fa2:	602b      	str	r3, [r5, #0]
 8008fa4:	bd38      	pop	{r3, r4, r5, pc}
 8008fa6:	bf00      	nop
 8008fa8:	200015ac 	.word	0x200015ac

08008fac <_isatty_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4c07      	ldr	r4, [pc, #28]	; (8008fcc <_isatty_r+0x20>)
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	4605      	mov	r5, r0
 8008fb4:	4608      	mov	r0, r1
 8008fb6:	6023      	str	r3, [r4, #0]
 8008fb8:	f7f8 fcd2 	bl	8001960 <_isatty>
 8008fbc:	1c43      	adds	r3, r0, #1
 8008fbe:	d000      	beq.n	8008fc2 <_isatty_r+0x16>
 8008fc0:	bd38      	pop	{r3, r4, r5, pc}
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0fb      	beq.n	8008fc0 <_isatty_r+0x14>
 8008fc8:	602b      	str	r3, [r5, #0]
 8008fca:	bd38      	pop	{r3, r4, r5, pc}
 8008fcc:	200015ac 	.word	0x200015ac

08008fd0 <_lseek_r>:
 8008fd0:	b570      	push	{r4, r5, r6, lr}
 8008fd2:	4c08      	ldr	r4, [pc, #32]	; (8008ff4 <_lseek_r+0x24>)
 8008fd4:	4606      	mov	r6, r0
 8008fd6:	2500      	movs	r5, #0
 8008fd8:	4608      	mov	r0, r1
 8008fda:	4611      	mov	r1, r2
 8008fdc:	461a      	mov	r2, r3
 8008fde:	6025      	str	r5, [r4, #0]
 8008fe0:	f7f8 fcd2 	bl	8001988 <_lseek>
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	d000      	beq.n	8008fea <_lseek_r+0x1a>
 8008fe8:	bd70      	pop	{r4, r5, r6, pc}
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0fb      	beq.n	8008fe8 <_lseek_r+0x18>
 8008ff0:	6033      	str	r3, [r6, #0]
 8008ff2:	bd70      	pop	{r4, r5, r6, pc}
 8008ff4:	200015ac 	.word	0x200015ac

08008ff8 <_read_r>:
 8008ff8:	b570      	push	{r4, r5, r6, lr}
 8008ffa:	4c08      	ldr	r4, [pc, #32]	; (800901c <_read_r+0x24>)
 8008ffc:	4606      	mov	r6, r0
 8008ffe:	2500      	movs	r5, #0
 8009000:	4608      	mov	r0, r1
 8009002:	4611      	mov	r1, r2
 8009004:	461a      	mov	r2, r3
 8009006:	6025      	str	r5, [r4, #0]
 8009008:	f7f8 fcc0 	bl	800198c <_read>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	d000      	beq.n	8009012 <_read_r+0x1a>
 8009010:	bd70      	pop	{r4, r5, r6, pc}
 8009012:	6823      	ldr	r3, [r4, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d0fb      	beq.n	8009010 <_read_r+0x18>
 8009018:	6033      	str	r3, [r6, #0]
 800901a:	bd70      	pop	{r4, r5, r6, pc}
 800901c:	200015ac 	.word	0x200015ac
