
out/Verventa-Slave.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <memcpy>:
 8000188:	4684      	mov	ip, r0
 800018a:	ea41 0300 	orr.w	r3, r1, r0
 800018e:	f013 0303 	ands.w	r3, r3, #3
 8000192:	d16d      	bne.n	8000270 <memcpy+0xe8>
 8000194:	3a40      	subs	r2, #64	; 0x40
 8000196:	d341      	bcc.n	800021c <memcpy+0x94>
 8000198:	f851 3b04 	ldr.w	r3, [r1], #4
 800019c:	f840 3b04 	str.w	r3, [r0], #4
 80001a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001a4:	f840 3b04 	str.w	r3, [r0], #4
 80001a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001ac:	f840 3b04 	str.w	r3, [r0], #4
 80001b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001b4:	f840 3b04 	str.w	r3, [r0], #4
 80001b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001bc:	f840 3b04 	str.w	r3, [r0], #4
 80001c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001c4:	f840 3b04 	str.w	r3, [r0], #4
 80001c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001cc:	f840 3b04 	str.w	r3, [r0], #4
 80001d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001d4:	f840 3b04 	str.w	r3, [r0], #4
 80001d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001dc:	f840 3b04 	str.w	r3, [r0], #4
 80001e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001e4:	f840 3b04 	str.w	r3, [r0], #4
 80001e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001ec:	f840 3b04 	str.w	r3, [r0], #4
 80001f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f4:	f840 3b04 	str.w	r3, [r0], #4
 80001f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001fc:	f840 3b04 	str.w	r3, [r0], #4
 8000200:	f851 3b04 	ldr.w	r3, [r1], #4
 8000204:	f840 3b04 	str.w	r3, [r0], #4
 8000208:	f851 3b04 	ldr.w	r3, [r1], #4
 800020c:	f840 3b04 	str.w	r3, [r0], #4
 8000210:	f851 3b04 	ldr.w	r3, [r1], #4
 8000214:	f840 3b04 	str.w	r3, [r0], #4
 8000218:	3a40      	subs	r2, #64	; 0x40
 800021a:	d2bd      	bcs.n	8000198 <memcpy+0x10>
 800021c:	3230      	adds	r2, #48	; 0x30
 800021e:	d311      	bcc.n	8000244 <memcpy+0xbc>
 8000220:	f851 3b04 	ldr.w	r3, [r1], #4
 8000224:	f840 3b04 	str.w	r3, [r0], #4
 8000228:	f851 3b04 	ldr.w	r3, [r1], #4
 800022c:	f840 3b04 	str.w	r3, [r0], #4
 8000230:	f851 3b04 	ldr.w	r3, [r1], #4
 8000234:	f840 3b04 	str.w	r3, [r0], #4
 8000238:	f851 3b04 	ldr.w	r3, [r1], #4
 800023c:	f840 3b04 	str.w	r3, [r0], #4
 8000240:	3a10      	subs	r2, #16
 8000242:	d2ed      	bcs.n	8000220 <memcpy+0x98>
 8000244:	320c      	adds	r2, #12
 8000246:	d305      	bcc.n	8000254 <memcpy+0xcc>
 8000248:	f851 3b04 	ldr.w	r3, [r1], #4
 800024c:	f840 3b04 	str.w	r3, [r0], #4
 8000250:	3a04      	subs	r2, #4
 8000252:	d2f9      	bcs.n	8000248 <memcpy+0xc0>
 8000254:	3204      	adds	r2, #4
 8000256:	d008      	beq.n	800026a <memcpy+0xe2>
 8000258:	07d2      	lsls	r2, r2, #31
 800025a:	bf1c      	itt	ne
 800025c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000260:	f800 3b01 	strbne.w	r3, [r0], #1
 8000264:	d301      	bcc.n	800026a <memcpy+0xe2>
 8000266:	880b      	ldrh	r3, [r1, #0]
 8000268:	8003      	strh	r3, [r0, #0]
 800026a:	4660      	mov	r0, ip
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	2a08      	cmp	r2, #8
 8000272:	d313      	bcc.n	800029c <memcpy+0x114>
 8000274:	078b      	lsls	r3, r1, #30
 8000276:	d08d      	beq.n	8000194 <memcpy+0xc>
 8000278:	f010 0303 	ands.w	r3, r0, #3
 800027c:	d08a      	beq.n	8000194 <memcpy+0xc>
 800027e:	f1c3 0304 	rsb	r3, r3, #4
 8000282:	1ad2      	subs	r2, r2, r3
 8000284:	07db      	lsls	r3, r3, #31
 8000286:	bf1c      	itt	ne
 8000288:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800028c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000290:	d380      	bcc.n	8000194 <memcpy+0xc>
 8000292:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000296:	f820 3b02 	strh.w	r3, [r0], #2
 800029a:	e77b      	b.n	8000194 <memcpy+0xc>
 800029c:	3a04      	subs	r2, #4
 800029e:	d3d9      	bcc.n	8000254 <memcpy+0xcc>
 80002a0:	3a01      	subs	r2, #1
 80002a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a6:	f800 3b01 	strb.w	r3, [r0], #1
 80002aa:	d2f9      	bcs.n	80002a0 <memcpy+0x118>
 80002ac:	780b      	ldrb	r3, [r1, #0]
 80002ae:	7003      	strb	r3, [r0, #0]
 80002b0:	784b      	ldrb	r3, [r1, #1]
 80002b2:	7043      	strb	r3, [r0, #1]
 80002b4:	788b      	ldrb	r3, [r1, #2]
 80002b6:	7083      	strb	r3, [r0, #2]
 80002b8:	4660      	mov	r0, ip
 80002ba:	4770      	bx	lr

080002bc <__aeabi_drsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c0:	e002      	b.n	80002c8 <__adddf3>
 80002c2:	bf00      	nop

080002c4 <__aeabi_dsub>:
 80002c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c8 <__adddf3>:
 80002c8:	b530      	push	{r4, r5, lr}
 80002ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d2:	ea94 0f05 	teq	r4, r5
 80002d6:	bf08      	it	eq
 80002d8:	ea90 0f02 	teqeq	r0, r2
 80002dc:	bf1f      	itttt	ne
 80002de:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ee:	f000 80e2 	beq.w	80004b6 <__adddf3+0x1ee>
 80002f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fa:	bfb8      	it	lt
 80002fc:	426d      	neglt	r5, r5
 80002fe:	dd0c      	ble.n	800031a <__adddf3+0x52>
 8000300:	442c      	add	r4, r5
 8000302:	ea80 0202 	eor.w	r2, r0, r2
 8000306:	ea81 0303 	eor.w	r3, r1, r3
 800030a:	ea82 0000 	eor.w	r0, r2, r0
 800030e:	ea83 0101 	eor.w	r1, r3, r1
 8000312:	ea80 0202 	eor.w	r2, r0, r2
 8000316:	ea81 0303 	eor.w	r3, r1, r3
 800031a:	2d36      	cmp	r5, #54	; 0x36
 800031c:	bf88      	it	hi
 800031e:	bd30      	pophi	{r4, r5, pc}
 8000320:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000324:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000328:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800032c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x70>
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800033c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000340:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x84>
 8000346:	4252      	negs	r2, r2
 8000348:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034c:	ea94 0f05 	teq	r4, r5
 8000350:	f000 80a7 	beq.w	80004a2 <__adddf3+0x1da>
 8000354:	f1a4 0401 	sub.w	r4, r4, #1
 8000358:	f1d5 0e20 	rsbs	lr, r5, #32
 800035c:	db0d      	blt.n	800037a <__adddf3+0xb2>
 800035e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000362:	fa22 f205 	lsr.w	r2, r2, r5
 8000366:	1880      	adds	r0, r0, r2
 8000368:	f141 0100 	adc.w	r1, r1, #0
 800036c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000370:	1880      	adds	r0, r0, r2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	4159      	adcs	r1, r3
 8000378:	e00e      	b.n	8000398 <__adddf3+0xd0>
 800037a:	f1a5 0520 	sub.w	r5, r5, #32
 800037e:	f10e 0e20 	add.w	lr, lr, #32
 8000382:	2a01      	cmp	r2, #1
 8000384:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000388:	bf28      	it	cs
 800038a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	18c0      	adds	r0, r0, r3
 8000394:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	d507      	bpl.n	80003ae <__adddf3+0xe6>
 800039e:	f04f 0e00 	mov.w	lr, #0
 80003a2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003aa:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b2:	d31b      	bcc.n	80003ec <__adddf3+0x124>
 80003b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b8:	d30c      	bcc.n	80003d4 <__adddf3+0x10c>
 80003ba:	0849      	lsrs	r1, r1, #1
 80003bc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c4:	f104 0401 	add.w	r4, r4, #1
 80003c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d0:	f080 809a 	bcs.w	8000508 <__adddf3+0x240>
 80003d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d8:	bf08      	it	eq
 80003da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003de:	f150 0000 	adcs.w	r0, r0, #0
 80003e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e6:	ea41 0105 	orr.w	r1, r1, r5
 80003ea:	bd30      	pop	{r4, r5, pc}
 80003ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f0:	4140      	adcs	r0, r0
 80003f2:	eb41 0101 	adc.w	r1, r1, r1
 80003f6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fa:	f1a4 0401 	sub.w	r4, r4, #1
 80003fe:	d1e9      	bne.n	80003d4 <__adddf3+0x10c>
 8000400:	f091 0f00 	teq	r1, #0
 8000404:	bf04      	itt	eq
 8000406:	4601      	moveq	r1, r0
 8000408:	2000      	moveq	r0, #0
 800040a:	fab1 f381 	clz	r3, r1
 800040e:	bf08      	it	eq
 8000410:	3320      	addeq	r3, #32
 8000412:	f1a3 030b 	sub.w	r3, r3, #11
 8000416:	f1b3 0220 	subs.w	r2, r3, #32
 800041a:	da0c      	bge.n	8000436 <__adddf3+0x16e>
 800041c:	320c      	adds	r2, #12
 800041e:	dd08      	ble.n	8000432 <__adddf3+0x16a>
 8000420:	f102 0c14 	add.w	ip, r2, #20
 8000424:	f1c2 020c 	rsb	r2, r2, #12
 8000428:	fa01 f00c 	lsl.w	r0, r1, ip
 800042c:	fa21 f102 	lsr.w	r1, r1, r2
 8000430:	e00c      	b.n	800044c <__adddf3+0x184>
 8000432:	f102 0214 	add.w	r2, r2, #20
 8000436:	bfd8      	it	le
 8000438:	f1c2 0c20 	rsble	ip, r2, #32
 800043c:	fa01 f102 	lsl.w	r1, r1, r2
 8000440:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000444:	bfdc      	itt	le
 8000446:	ea41 010c 	orrle.w	r1, r1, ip
 800044a:	4090      	lslle	r0, r2
 800044c:	1ae4      	subs	r4, r4, r3
 800044e:	bfa2      	ittt	ge
 8000450:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000454:	4329      	orrge	r1, r5
 8000456:	bd30      	popge	{r4, r5, pc}
 8000458:	ea6f 0404 	mvn.w	r4, r4
 800045c:	3c1f      	subs	r4, #31
 800045e:	da1c      	bge.n	800049a <__adddf3+0x1d2>
 8000460:	340c      	adds	r4, #12
 8000462:	dc0e      	bgt.n	8000482 <__adddf3+0x1ba>
 8000464:	f104 0414 	add.w	r4, r4, #20
 8000468:	f1c4 0220 	rsb	r2, r4, #32
 800046c:	fa20 f004 	lsr.w	r0, r0, r4
 8000470:	fa01 f302 	lsl.w	r3, r1, r2
 8000474:	ea40 0003 	orr.w	r0, r0, r3
 8000478:	fa21 f304 	lsr.w	r3, r1, r4
 800047c:	ea45 0103 	orr.w	r1, r5, r3
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	f1c4 040c 	rsb	r4, r4, #12
 8000486:	f1c4 0220 	rsb	r2, r4, #32
 800048a:	fa20 f002 	lsr.w	r0, r0, r2
 800048e:	fa01 f304 	lsl.w	r3, r1, r4
 8000492:	ea40 0003 	orr.w	r0, r0, r3
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	fa21 f004 	lsr.w	r0, r1, r4
 800049e:	4629      	mov	r1, r5
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	f094 0f00 	teq	r4, #0
 80004a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004aa:	bf06      	itte	eq
 80004ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b0:	3401      	addeq	r4, #1
 80004b2:	3d01      	subne	r5, #1
 80004b4:	e74e      	b.n	8000354 <__adddf3+0x8c>
 80004b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ba:	bf18      	it	ne
 80004bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c0:	d029      	beq.n	8000516 <__adddf3+0x24e>
 80004c2:	ea94 0f05 	teq	r4, r5
 80004c6:	bf08      	it	eq
 80004c8:	ea90 0f02 	teqeq	r0, r2
 80004cc:	d005      	beq.n	80004da <__adddf3+0x212>
 80004ce:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d2:	bf04      	itt	eq
 80004d4:	4619      	moveq	r1, r3
 80004d6:	4610      	moveq	r0, r2
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea91 0f03 	teq	r1, r3
 80004de:	bf1e      	ittt	ne
 80004e0:	2100      	movne	r1, #0
 80004e2:	2000      	movne	r0, #0
 80004e4:	bd30      	popne	{r4, r5, pc}
 80004e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ea:	d105      	bne.n	80004f8 <__adddf3+0x230>
 80004ec:	0040      	lsls	r0, r0, #1
 80004ee:	4149      	adcs	r1, r1
 80004f0:	bf28      	it	cs
 80004f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f6:	bd30      	pop	{r4, r5, pc}
 80004f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004fc:	bf3c      	itt	cc
 80004fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000502:	bd30      	popcc	{r4, r5, pc}
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800050c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000510:	f04f 0000 	mov.w	r0, #0
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051a:	bf1a      	itte	ne
 800051c:	4619      	movne	r1, r3
 800051e:	4610      	movne	r0, r2
 8000520:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000524:	bf1c      	itt	ne
 8000526:	460b      	movne	r3, r1
 8000528:	4602      	movne	r2, r0
 800052a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052e:	bf06      	itte	eq
 8000530:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000534:	ea91 0f03 	teqeq	r1, r3
 8000538:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	bf00      	nop

08000540 <__aeabi_ui2d>:
 8000540:	f090 0f00 	teq	r0, #0
 8000544:	bf04      	itt	eq
 8000546:	2100      	moveq	r1, #0
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000550:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000554:	f04f 0500 	mov.w	r5, #0
 8000558:	f04f 0100 	mov.w	r1, #0
 800055c:	e750      	b.n	8000400 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_i2d>:
 8000560:	f090 0f00 	teq	r0, #0
 8000564:	bf04      	itt	eq
 8000566:	2100      	moveq	r1, #0
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000570:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000574:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000578:	bf48      	it	mi
 800057a:	4240      	negmi	r0, r0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e73e      	b.n	8000400 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_f2d>:
 8000584:	0042      	lsls	r2, r0, #1
 8000586:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058a:	ea4f 0131 	mov.w	r1, r1, rrx
 800058e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000592:	bf1f      	itttt	ne
 8000594:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000598:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800059c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a0:	4770      	bxne	lr
 80005a2:	f092 0f00 	teq	r2, #0
 80005a6:	bf14      	ite	ne
 80005a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e720      	b.n	8000400 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aedc 	beq.w	80003ae <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6c1      	b.n	80003ae <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b94b      	cbnz	r3, 8000bc6 <__aeabi_uldivmod+0x16>
 8000bb2:	b942      	cbnz	r2, 8000bc6 <__aeabi_uldivmod+0x16>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	d002      	beq.n	8000bc2 <__aeabi_uldivmod+0x12>
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	4608      	mov	r0, r1
 8000bc2:	f000 b83b 	b.w	8000c3c <__aeabi_idiv0>
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	46ec      	mov	ip, sp
 8000bca:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000bce:	f000 f81d 	bl	8000c0c <__gnu_uldivmod_helper>
 8000bd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd6:	b002      	add	sp, #8
 8000bd8:	bc0c      	pop	{r2, r3}
 8000bda:	4770      	bx	lr

08000bdc <__gnu_ldivmod_helper>:
 8000bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000be0:	9c06      	ldr	r4, [sp, #24]
 8000be2:	4615      	mov	r5, r2
 8000be4:	4606      	mov	r6, r0
 8000be6:	460f      	mov	r7, r1
 8000be8:	4698      	mov	r8, r3
 8000bea:	f000 f829 	bl	8000c40 <__divdi3>
 8000bee:	fb05 f301 	mul.w	r3, r5, r1
 8000bf2:	fb00 3808 	mla	r8, r0, r8, r3
 8000bf6:	fba5 2300 	umull	r2, r3, r5, r0
 8000bfa:	1ab2      	subs	r2, r6, r2
 8000bfc:	4443      	add	r3, r8
 8000bfe:	eb67 0303 	sbc.w	r3, r7, r3
 8000c02:	e9c4 2300 	strd	r2, r3, [r4]
 8000c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c0a:	bf00      	nop

08000c0c <__gnu_uldivmod_helper>:
 8000c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c10:	9c06      	ldr	r4, [sp, #24]
 8000c12:	4690      	mov	r8, r2
 8000c14:	4606      	mov	r6, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	461d      	mov	r5, r3
 8000c1a:	f000 f95f 	bl	8000edc <__udivdi3>
 8000c1e:	fb00 f505 	mul.w	r5, r0, r5
 8000c22:	fba0 2308 	umull	r2, r3, r0, r8
 8000c26:	fb08 5501 	mla	r5, r8, r1, r5
 8000c2a:	1ab2      	subs	r2, r6, r2
 8000c2c:	442b      	add	r3, r5
 8000c2e:	eb67 0303 	sbc.w	r3, r7, r3
 8000c32:	e9c4 2300 	strd	r2, r3, [r4]
 8000c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c3a:	bf00      	nop

08000c3c <__aeabi_idiv0>:
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__divdi3>:
 8000c40:	2900      	cmp	r1, #0
 8000c42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c46:	f2c0 80a6 	blt.w	8000d96 <__divdi3+0x156>
 8000c4a:	2600      	movs	r6, #0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f2c0 809c 	blt.w	8000d8a <__divdi3+0x14a>
 8000c52:	4688      	mov	r8, r1
 8000c54:	4694      	mov	ip, r2
 8000c56:	469e      	mov	lr, r3
 8000c58:	4615      	mov	r5, r2
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	460f      	mov	r7, r1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d13d      	bne.n	8000cde <__divdi3+0x9e>
 8000c62:	428a      	cmp	r2, r1
 8000c64:	d959      	bls.n	8000d1a <__divdi3+0xda>
 8000c66:	fab2 f382 	clz	r3, r2
 8000c6a:	b13b      	cbz	r3, 8000c7c <__divdi3+0x3c>
 8000c6c:	f1c3 0220 	rsb	r2, r3, #32
 8000c70:	409f      	lsls	r7, r3
 8000c72:	fa20 f202 	lsr.w	r2, r0, r2
 8000c76:	409d      	lsls	r5, r3
 8000c78:	4317      	orrs	r7, r2
 8000c7a:	409c      	lsls	r4, r3
 8000c7c:	0c29      	lsrs	r1, r5, #16
 8000c7e:	0c22      	lsrs	r2, r4, #16
 8000c80:	fbb7 fef1 	udiv	lr, r7, r1
 8000c84:	b2a8      	uxth	r0, r5
 8000c86:	fb01 771e 	mls	r7, r1, lr, r7
 8000c8a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8000c8e:	fb00 f30e 	mul.w	r3, r0, lr
 8000c92:	42bb      	cmp	r3, r7
 8000c94:	d90a      	bls.n	8000cac <__divdi3+0x6c>
 8000c96:	197f      	adds	r7, r7, r5
 8000c98:	f10e 32ff 	add.w	r2, lr, #4294967295
 8000c9c:	f080 8105 	bcs.w	8000eaa <__divdi3+0x26a>
 8000ca0:	42bb      	cmp	r3, r7
 8000ca2:	f240 8102 	bls.w	8000eaa <__divdi3+0x26a>
 8000ca6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000caa:	442f      	add	r7, r5
 8000cac:	1aff      	subs	r7, r7, r3
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb7 f3f1 	udiv	r3, r7, r1
 8000cb4:	fb01 7713 	mls	r7, r1, r3, r7
 8000cb8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000cbc:	fb00 f003 	mul.w	r0, r0, r3
 8000cc0:	42b8      	cmp	r0, r7
 8000cc2:	d908      	bls.n	8000cd6 <__divdi3+0x96>
 8000cc4:	197f      	adds	r7, r7, r5
 8000cc6:	f103 32ff 	add.w	r2, r3, #4294967295
 8000cca:	f080 80f0 	bcs.w	8000eae <__divdi3+0x26e>
 8000cce:	42b8      	cmp	r0, r7
 8000cd0:	f240 80ed 	bls.w	8000eae <__divdi3+0x26e>
 8000cd4:	3b02      	subs	r3, #2
 8000cd6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000cda:	2200      	movs	r2, #0
 8000cdc:	e003      	b.n	8000ce6 <__divdi3+0xa6>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d90f      	bls.n	8000d02 <__divdi3+0xc2>
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	1c34      	adds	r4, r6, #0
 8000ce8:	bf18      	it	ne
 8000cea:	2401      	movne	r4, #1
 8000cec:	4260      	negs	r0, r4
 8000cee:	f04f 0500 	mov.w	r5, #0
 8000cf2:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8000cf6:	4058      	eors	r0, r3
 8000cf8:	4051      	eors	r1, r2
 8000cfa:	1900      	adds	r0, r0, r4
 8000cfc:	4169      	adcs	r1, r5
 8000cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d02:	fab3 f283 	clz	r2, r3
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8086 	bne.w	8000e18 <__divdi3+0x1d8>
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d302      	bcc.n	8000d16 <__divdi3+0xd6>
 8000d10:	4584      	cmp	ip, r0
 8000d12:	f200 80db 	bhi.w	8000ecc <__divdi3+0x28c>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e7e5      	b.n	8000ce6 <__divdi3+0xa6>
 8000d1a:	b912      	cbnz	r2, 8000d22 <__divdi3+0xe2>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	fbb3 f5f2 	udiv	r5, r3, r2
 8000d22:	fab5 f085 	clz	r0, r5
 8000d26:	2800      	cmp	r0, #0
 8000d28:	d13b      	bne.n	8000da2 <__divdi3+0x162>
 8000d2a:	1b78      	subs	r0, r7, r5
 8000d2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	2201      	movs	r2, #1
 8000d36:	fbb0 f8fe 	udiv	r8, r0, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 0718 	mls	r7, lr, r8, r0
 8000d40:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8000d44:	fb0c f308 	mul.w	r3, ip, r8
 8000d48:	42bb      	cmp	r3, r7
 8000d4a:	d907      	bls.n	8000d5c <__divdi3+0x11c>
 8000d4c:	197f      	adds	r7, r7, r5
 8000d4e:	f108 31ff 	add.w	r1, r8, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__divdi3+0x11a>
 8000d54:	42bb      	cmp	r3, r7
 8000d56:	f200 80bd 	bhi.w	8000ed4 <__divdi3+0x294>
 8000d5a:	4688      	mov	r8, r1
 8000d5c:	1aff      	subs	r7, r7, r3
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb7 f3fe 	udiv	r3, r7, lr
 8000d64:	fb0e 7713 	mls	r7, lr, r3, r7
 8000d68:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000d6c:	fb0c fc03 	mul.w	ip, ip, r3
 8000d70:	45bc      	cmp	ip, r7
 8000d72:	d907      	bls.n	8000d84 <__divdi3+0x144>
 8000d74:	197f      	adds	r7, r7, r5
 8000d76:	f103 31ff 	add.w	r1, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__divdi3+0x142>
 8000d7c:	45bc      	cmp	ip, r7
 8000d7e:	f200 80a7 	bhi.w	8000ed0 <__divdi3+0x290>
 8000d82:	460b      	mov	r3, r1
 8000d84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d88:	e7ad      	b.n	8000ce6 <__divdi3+0xa6>
 8000d8a:	4252      	negs	r2, r2
 8000d8c:	ea6f 0606 	mvn.w	r6, r6
 8000d90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d94:	e75d      	b.n	8000c52 <__divdi3+0x12>
 8000d96:	4240      	negs	r0, r0
 8000d98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d9c:	f04f 36ff 	mov.w	r6, #4294967295
 8000da0:	e754      	b.n	8000c4c <__divdi3+0xc>
 8000da2:	f1c0 0220 	rsb	r2, r0, #32
 8000da6:	fa24 f102 	lsr.w	r1, r4, r2
 8000daa:	fa07 f300 	lsl.w	r3, r7, r0
 8000dae:	4085      	lsls	r5, r0
 8000db0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db4:	40d7      	lsrs	r7, r2
 8000db6:	4319      	orrs	r1, r3
 8000db8:	fbb7 f2fe 	udiv	r2, r7, lr
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	fb0e 7712 	mls	r7, lr, r2, r7
 8000dc2:	fa1f fc85 	uxth.w	ip, r5
 8000dc6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8000dca:	fb0c f702 	mul.w	r7, ip, r2
 8000dce:	429f      	cmp	r7, r3
 8000dd0:	fa04 f400 	lsl.w	r4, r4, r0
 8000dd4:	d907      	bls.n	8000de6 <__divdi3+0x1a6>
 8000dd6:	195b      	adds	r3, r3, r5
 8000dd8:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ddc:	d274      	bcs.n	8000ec8 <__divdi3+0x288>
 8000dde:	429f      	cmp	r7, r3
 8000de0:	d972      	bls.n	8000ec8 <__divdi3+0x288>
 8000de2:	3a02      	subs	r2, #2
 8000de4:	442b      	add	r3, r5
 8000de6:	1bdf      	subs	r7, r3, r7
 8000de8:	b289      	uxth	r1, r1
 8000dea:	fbb7 f8fe 	udiv	r8, r7, lr
 8000dee:	fb0e 7318 	mls	r3, lr, r8, r7
 8000df2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000df6:	fb0c f708 	mul.w	r7, ip, r8
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__divdi3+0x1d0>
 8000dfe:	195b      	adds	r3, r3, r5
 8000e00:	f108 31ff 	add.w	r1, r8, #4294967295
 8000e04:	d25c      	bcs.n	8000ec0 <__divdi3+0x280>
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d95a      	bls.n	8000ec0 <__divdi3+0x280>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	442b      	add	r3, r5
 8000e10:	1bd8      	subs	r0, r3, r7
 8000e12:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8000e16:	e78e      	b.n	8000d36 <__divdi3+0xf6>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa2c f103 	lsr.w	r1, ip, r3
 8000e20:	fa0e fe02 	lsl.w	lr, lr, r2
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	ea41 0e0e 	orr.w	lr, r1, lr
 8000e2c:	fa08 f002 	lsl.w	r0, r8, r2
 8000e30:	fa28 f103 	lsr.w	r1, r8, r3
 8000e34:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8000e38:	4338      	orrs	r0, r7
 8000e3a:	fbb1 f8f5 	udiv	r8, r1, r5
 8000e3e:	0c03      	lsrs	r3, r0, #16
 8000e40:	fb05 1118 	mls	r1, r5, r8, r1
 8000e44:	fa1f f78e 	uxth.w	r7, lr
 8000e48:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e4c:	fb07 f308 	mul.w	r3, r7, r8
 8000e50:	428b      	cmp	r3, r1
 8000e52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e56:	d909      	bls.n	8000e6c <__divdi3+0x22c>
 8000e58:	eb11 010e 	adds.w	r1, r1, lr
 8000e5c:	f108 39ff 	add.w	r9, r8, #4294967295
 8000e60:	d230      	bcs.n	8000ec4 <__divdi3+0x284>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d92e      	bls.n	8000ec4 <__divdi3+0x284>
 8000e66:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6a:	4471      	add	r1, lr
 8000e6c:	1ac9      	subs	r1, r1, r3
 8000e6e:	b280      	uxth	r0, r0
 8000e70:	fbb1 f3f5 	udiv	r3, r1, r5
 8000e74:	fb05 1113 	mls	r1, r5, r3, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb07 f703 	mul.w	r7, r7, r3
 8000e80:	428f      	cmp	r7, r1
 8000e82:	d908      	bls.n	8000e96 <__divdi3+0x256>
 8000e84:	eb11 010e 	adds.w	r1, r1, lr
 8000e88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e8c:	d216      	bcs.n	8000ebc <__divdi3+0x27c>
 8000e8e:	428f      	cmp	r7, r1
 8000e90:	d914      	bls.n	8000ebc <__divdi3+0x27c>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	4471      	add	r1, lr
 8000e96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e9a:	1bc9      	subs	r1, r1, r7
 8000e9c:	fba3 890c 	umull	r8, r9, r3, ip
 8000ea0:	4549      	cmp	r1, r9
 8000ea2:	d309      	bcc.n	8000eb8 <__divdi3+0x278>
 8000ea4:	d005      	beq.n	8000eb2 <__divdi3+0x272>
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	e71d      	b.n	8000ce6 <__divdi3+0xa6>
 8000eaa:	4696      	mov	lr, r2
 8000eac:	e6fe      	b.n	8000cac <__divdi3+0x6c>
 8000eae:	4613      	mov	r3, r2
 8000eb0:	e711      	b.n	8000cd6 <__divdi3+0x96>
 8000eb2:	4094      	lsls	r4, r2
 8000eb4:	4544      	cmp	r4, r8
 8000eb6:	d2f6      	bcs.n	8000ea6 <__divdi3+0x266>
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	e7f4      	b.n	8000ea6 <__divdi3+0x266>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	e7ea      	b.n	8000e96 <__divdi3+0x256>
 8000ec0:	4688      	mov	r8, r1
 8000ec2:	e7a5      	b.n	8000e10 <__divdi3+0x1d0>
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	e7d1      	b.n	8000e6c <__divdi3+0x22c>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	e78c      	b.n	8000de6 <__divdi3+0x1a6>
 8000ecc:	4613      	mov	r3, r2
 8000ece:	e70a      	b.n	8000ce6 <__divdi3+0xa6>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	e757      	b.n	8000d84 <__divdi3+0x144>
 8000ed4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed8:	442f      	add	r7, r5
 8000eda:	e73f      	b.n	8000d5c <__divdi3+0x11c>

08000edc <__udivdi3>:
 8000edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d144      	bne.n	8000f6e <__udivdi3+0x92>
 8000ee4:	428a      	cmp	r2, r1
 8000ee6:	4615      	mov	r5, r2
 8000ee8:	4604      	mov	r4, r0
 8000eea:	d94f      	bls.n	8000f8c <__udivdi3+0xb0>
 8000eec:	fab2 f782 	clz	r7, r2
 8000ef0:	460e      	mov	r6, r1
 8000ef2:	b14f      	cbz	r7, 8000f08 <__udivdi3+0x2c>
 8000ef4:	f1c7 0320 	rsb	r3, r7, #32
 8000ef8:	40b9      	lsls	r1, r7
 8000efa:	fa20 f603 	lsr.w	r6, r0, r3
 8000efe:	fa02 f507 	lsl.w	r5, r2, r7
 8000f02:	430e      	orrs	r6, r1
 8000f04:	fa00 f407 	lsl.w	r4, r0, r7
 8000f08:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0c:	0c23      	lsrs	r3, r4, #16
 8000f0e:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f12:	b2af      	uxth	r7, r5
 8000f14:	fb0e 6110 	mls	r1, lr, r0, r6
 8000f18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1c:	fb07 f100 	mul.w	r1, r7, r0
 8000f20:	4299      	cmp	r1, r3
 8000f22:	d909      	bls.n	8000f38 <__udivdi3+0x5c>
 8000f24:	195b      	adds	r3, r3, r5
 8000f26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f2a:	f080 80ec 	bcs.w	8001106 <__udivdi3+0x22a>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	f240 80e9 	bls.w	8001106 <__udivdi3+0x22a>
 8000f34:	3802      	subs	r0, #2
 8000f36:	442b      	add	r3, r5
 8000f38:	1a5a      	subs	r2, r3, r1
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb2 f3fe 	udiv	r3, r2, lr
 8000f40:	fb0e 2213 	mls	r2, lr, r3, r2
 8000f44:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8000f48:	fb07 f703 	mul.w	r7, r7, r3
 8000f4c:	4297      	cmp	r7, r2
 8000f4e:	d908      	bls.n	8000f62 <__udivdi3+0x86>
 8000f50:	1952      	adds	r2, r2, r5
 8000f52:	f103 31ff 	add.w	r1, r3, #4294967295
 8000f56:	f080 80d8 	bcs.w	800110a <__udivdi3+0x22e>
 8000f5a:	4297      	cmp	r7, r2
 8000f5c:	f240 80d5 	bls.w	800110a <__udivdi3+0x22e>
 8000f60:	3b02      	subs	r3, #2
 8000f62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d847      	bhi.n	8001002 <__udivdi3+0x126>
 8000f72:	fab3 f683 	clz	r6, r3
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d148      	bne.n	800100c <__udivdi3+0x130>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d302      	bcc.n	8000f84 <__udivdi3+0xa8>
 8000f7e:	4282      	cmp	r2, r0
 8000f80:	f200 80cd 	bhi.w	800111e <__udivdi3+0x242>
 8000f84:	2001      	movs	r0, #1
 8000f86:	4631      	mov	r1, r6
 8000f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f8c:	b912      	cbnz	r2, 8000f94 <__udivdi3+0xb8>
 8000f8e:	2501      	movs	r5, #1
 8000f90:	fbb5 f5f2 	udiv	r5, r5, r2
 8000f94:	fab5 f885 	clz	r8, r5
 8000f98:	f1b8 0f00 	cmp.w	r8, #0
 8000f9c:	d177      	bne.n	800108e <__udivdi3+0x1b2>
 8000f9e:	1b4a      	subs	r2, r1, r5
 8000fa0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fa4:	b2af      	uxth	r7, r5
 8000fa6:	2601      	movs	r6, #1
 8000fa8:	fbb2 f0fe 	udiv	r0, r2, lr
 8000fac:	0c23      	lsrs	r3, r4, #16
 8000fae:	fb0e 2110 	mls	r1, lr, r0, r2
 8000fb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fb6:	fb07 f300 	mul.w	r3, r7, r0
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	d907      	bls.n	8000fce <__udivdi3+0xf2>
 8000fbe:	1949      	adds	r1, r1, r5
 8000fc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fc4:	d202      	bcs.n	8000fcc <__udivdi3+0xf0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	f200 80ba 	bhi.w	8001140 <__udivdi3+0x264>
 8000fcc:	4610      	mov	r0, r2
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	b2a4      	uxth	r4, r4
 8000fd2:	fbb1 f3fe 	udiv	r3, r1, lr
 8000fd6:	fb0e 1113 	mls	r1, lr, r3, r1
 8000fda:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fde:	fb07 f703 	mul.w	r7, r7, r3
 8000fe2:	42a7      	cmp	r7, r4
 8000fe4:	d908      	bls.n	8000ff8 <__udivdi3+0x11c>
 8000fe6:	1964      	adds	r4, r4, r5
 8000fe8:	f103 32ff 	add.w	r2, r3, #4294967295
 8000fec:	f080 808f 	bcs.w	800110e <__udivdi3+0x232>
 8000ff0:	42a7      	cmp	r7, r4
 8000ff2:	f240 808c 	bls.w	800110e <__udivdi3+0x232>
 8000ff6:	3b02      	subs	r3, #2
 8000ff8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ffc:	4631      	mov	r1, r6
 8000ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001002:	2600      	movs	r6, #0
 8001004:	4630      	mov	r0, r6
 8001006:	4631      	mov	r1, r6
 8001008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800100c:	f1c6 0420 	rsb	r4, r6, #32
 8001010:	fa22 f504 	lsr.w	r5, r2, r4
 8001014:	40b3      	lsls	r3, r6
 8001016:	432b      	orrs	r3, r5
 8001018:	fa20 fc04 	lsr.w	ip, r0, r4
 800101c:	fa01 f706 	lsl.w	r7, r1, r6
 8001020:	fa21 f504 	lsr.w	r5, r1, r4
 8001024:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001028:	ea4c 0707 	orr.w	r7, ip, r7
 800102c:	fbb5 f8fe 	udiv	r8, r5, lr
 8001030:	0c39      	lsrs	r1, r7, #16
 8001032:	fb0e 5518 	mls	r5, lr, r8, r5
 8001036:	fa1f fc83 	uxth.w	ip, r3
 800103a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800103e:	fb0c f108 	mul.w	r1, ip, r8
 8001042:	42a9      	cmp	r1, r5
 8001044:	fa02 f206 	lsl.w	r2, r2, r6
 8001048:	d904      	bls.n	8001054 <__udivdi3+0x178>
 800104a:	18ed      	adds	r5, r5, r3
 800104c:	f108 34ff 	add.w	r4, r8, #4294967295
 8001050:	d367      	bcc.n	8001122 <__udivdi3+0x246>
 8001052:	46a0      	mov	r8, r4
 8001054:	1a6d      	subs	r5, r5, r1
 8001056:	b2bf      	uxth	r7, r7
 8001058:	fbb5 f4fe 	udiv	r4, r5, lr
 800105c:	fb0e 5514 	mls	r5, lr, r4, r5
 8001060:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8001064:	fb0c fc04 	mul.w	ip, ip, r4
 8001068:	458c      	cmp	ip, r1
 800106a:	d904      	bls.n	8001076 <__udivdi3+0x19a>
 800106c:	18c9      	adds	r1, r1, r3
 800106e:	f104 35ff 	add.w	r5, r4, #4294967295
 8001072:	d35c      	bcc.n	800112e <__udivdi3+0x252>
 8001074:	462c      	mov	r4, r5
 8001076:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800107a:	ebcc 0101 	rsb	r1, ip, r1
 800107e:	fba4 2302 	umull	r2, r3, r4, r2
 8001082:	4299      	cmp	r1, r3
 8001084:	d348      	bcc.n	8001118 <__udivdi3+0x23c>
 8001086:	d044      	beq.n	8001112 <__udivdi3+0x236>
 8001088:	4620      	mov	r0, r4
 800108a:	2600      	movs	r6, #0
 800108c:	e76c      	b.n	8000f68 <__udivdi3+0x8c>
 800108e:	f1c8 0420 	rsb	r4, r8, #32
 8001092:	fa01 f308 	lsl.w	r3, r1, r8
 8001096:	fa05 f508 	lsl.w	r5, r5, r8
 800109a:	fa20 f704 	lsr.w	r7, r0, r4
 800109e:	40e1      	lsrs	r1, r4
 80010a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010a4:	431f      	orrs	r7, r3
 80010a6:	fbb1 f6fe 	udiv	r6, r1, lr
 80010aa:	0c3a      	lsrs	r2, r7, #16
 80010ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80010b0:	fa1f fc85 	uxth.w	ip, r5
 80010b4:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 80010b8:	fb0c f206 	mul.w	r2, ip, r6
 80010bc:	429a      	cmp	r2, r3
 80010be:	fa00 f408 	lsl.w	r4, r0, r8
 80010c2:	d907      	bls.n	80010d4 <__udivdi3+0x1f8>
 80010c4:	195b      	adds	r3, r3, r5
 80010c6:	f106 31ff 	add.w	r1, r6, #4294967295
 80010ca:	d237      	bcs.n	800113c <__udivdi3+0x260>
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d935      	bls.n	800113c <__udivdi3+0x260>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	442b      	add	r3, r5
 80010d4:	1a9b      	subs	r3, r3, r2
 80010d6:	b2bf      	uxth	r7, r7
 80010d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80010dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80010e0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80010e4:	fb0c f100 	mul.w	r1, ip, r0
 80010e8:	4299      	cmp	r1, r3
 80010ea:	d907      	bls.n	80010fc <__udivdi3+0x220>
 80010ec:	195b      	adds	r3, r3, r5
 80010ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80010f2:	d221      	bcs.n	8001138 <__udivdi3+0x25c>
 80010f4:	4299      	cmp	r1, r3
 80010f6:	d91f      	bls.n	8001138 <__udivdi3+0x25c>
 80010f8:	3802      	subs	r0, #2
 80010fa:	442b      	add	r3, r5
 80010fc:	1a5a      	subs	r2, r3, r1
 80010fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001102:	4667      	mov	r7, ip
 8001104:	e750      	b.n	8000fa8 <__udivdi3+0xcc>
 8001106:	4610      	mov	r0, r2
 8001108:	e716      	b.n	8000f38 <__udivdi3+0x5c>
 800110a:	460b      	mov	r3, r1
 800110c:	e729      	b.n	8000f62 <__udivdi3+0x86>
 800110e:	4613      	mov	r3, r2
 8001110:	e772      	b.n	8000ff8 <__udivdi3+0x11c>
 8001112:	40b0      	lsls	r0, r6
 8001114:	4290      	cmp	r0, r2
 8001116:	d2b7      	bcs.n	8001088 <__udivdi3+0x1ac>
 8001118:	1e60      	subs	r0, r4, #1
 800111a:	2600      	movs	r6, #0
 800111c:	e724      	b.n	8000f68 <__udivdi3+0x8c>
 800111e:	4630      	mov	r0, r6
 8001120:	e722      	b.n	8000f68 <__udivdi3+0x8c>
 8001122:	42a9      	cmp	r1, r5
 8001124:	d995      	bls.n	8001052 <__udivdi3+0x176>
 8001126:	f1a8 0802 	sub.w	r8, r8, #2
 800112a:	441d      	add	r5, r3
 800112c:	e792      	b.n	8001054 <__udivdi3+0x178>
 800112e:	458c      	cmp	ip, r1
 8001130:	d9a0      	bls.n	8001074 <__udivdi3+0x198>
 8001132:	3c02      	subs	r4, #2
 8001134:	4419      	add	r1, r3
 8001136:	e79e      	b.n	8001076 <__udivdi3+0x19a>
 8001138:	4610      	mov	r0, r2
 800113a:	e7df      	b.n	80010fc <__udivdi3+0x220>
 800113c:	460e      	mov	r6, r1
 800113e:	e7c9      	b.n	80010d4 <__udivdi3+0x1f8>
 8001140:	3802      	subs	r0, #2
 8001142:	4429      	add	r1, r5
 8001144:	e743      	b.n	8000fce <__udivdi3+0xf2>
 8001146:	bf00      	nop

08001148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001148:	f8df d030 	ldr.w	sp, [pc, #48]	; 800117c <LoopFillZerobss+0x10>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800114c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800114e:	e003      	b.n	8001158 <LoopCopyDataInit>

08001150 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001152:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001154:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001156:	3104      	adds	r1, #4

08001158 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800115c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800115e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001160:	d3f6      	bcc.n	8001150 <CopyDataInit>
  ldr  r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001164:	e002      	b.n	800116c <LoopFillZerobss>

08001166 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001166:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001168:	f842 3b04 	str.w	r3, [r2], #4

0800116c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800116e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001170:	d3f9      	bcc.n	8001166 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001172:	f000 f811 	bl	8001198 <SystemInit>
/* Call static constructors */
   /* bl __libc_init_array */
/* Call the application's entry point.*/
  bl  main
 8001176:	f000 f8b9 	bl	80012ec <main>
  bx  lr    
 800117a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800117c:	2001ffff 	.word	0x2001ffff
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001180:	0800828c 	.word	0x0800828c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001188:	200008a4 	.word	0x200008a4
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800118c:	200008a4 	.word	0x200008a4
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001190:	20000a74 	.word	0x20000a74

08001194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC_IRQHandler>
	...

08001198 <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <SystemInit+0x34>)
 800119a:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800119c:	2100      	movs	r1, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800119e:	f042 0201 	orr.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011a4:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80011ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011b0:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80011b2:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <SystemInit+0x38>)
 80011b4:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011bc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80011be:	60d9      	str	r1, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <SystemInit+0x3c>)
 80011c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	24003010 	.word	0x24003010
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80011d8:	4770      	bx	lr

080011da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80011da:	e7fe      	b.n	80011da <HardFault_Handler>

080011dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80011dc:	e7fe      	b.n	80011dc <MemManage_Handler>

080011de <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80011de:	e7fe      	b.n	80011de <BusFault_Handler>

080011e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler>

080011e2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80011e2:	4770      	bx	lr

080011e4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80011e4:	4770      	bx	lr

080011e6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80011e6:	4770      	bx	lr

080011e8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80011e8:	b508      	push	{r3, lr}
	HAL_IncTick();
 80011ea:	f002 fb5b 	bl	80038a4 <HAL_IncTick>
	
	Timeout_Timer_0++;
 80011ee:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <SysTick_Handler+0x3c>)
 80011f0:	6813      	ldr	r3, [r2, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	6013      	str	r3, [r2, #0]
  
	//---------------------------
	// msec counter
	//---------------------------
	msec_counter++;
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <SysTick_Handler+0x40>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	3201      	adds	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]
	switch(msec_counter % 10){
 80011fe:	6819      	ldr	r1, [r3, #0]
 8001200:	230a      	movs	r3, #10
 8001202:	fbb1 f2f3 	udiv	r2, r1, r3
 8001206:	fb03 1312 	mls	r3, r3, r2, r1
 800120a:	b913      	cbnz	r3, 8001212 <SysTick_Handler+0x2a>
		case 0:
			gui_Exec = true;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <SysTick_Handler+0x44>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
	}

	//---------------------------
	// Touch-Timer
	//---------------------------
	touch_timer++;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <SysTick_Handler+0x48>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	3201      	adds	r2, #1
 8001218:	601a      	str	r2, [r3, #0]
	switch(touch_timer % 1){
 800121a:	681b      	ldr	r3, [r3, #0]
		case 0:
			Touch_Flagged = true;
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <SysTick_Handler+0x4c>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	bd08      	pop	{r3, pc}
 8001224:	200008a4 	.word	0x200008a4
 8001228:	200008ac 	.word	0x200008ac
 800122c:	200008b0 	.word	0x200008b0
 8001230:	200008a8 	.word	0x200008a8
 8001234:	200008b1 	.word	0x200008b1

08001238 <DMA1_Stream5_IRQHandler>:
  * @param  None
  * @retval None   
  */
void USARTx_DMA_RX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(UartHandle.hdmarx);
 8001238:	4b01      	ldr	r3, [pc, #4]	; (8001240 <DMA1_Stream5_IRQHandler+0x8>)
 800123a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800123c:	f001 bca4 	b.w	8002b88 <HAL_DMA_IRQHandler>
 8001240:	20000994 	.word	0x20000994

08001244 <DMA1_Stream6_IRQHandler>:
  * @param  None
  * @retval None   
  */
void USARTx_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 8001244:	4b01      	ldr	r3, [pc, #4]	; (800124c <DMA1_Stream6_IRQHandler+0x8>)
 8001246:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001248:	f001 bc9e 	b.w	8002b88 <HAL_DMA_IRQHandler>
 800124c:	20000994 	.word	0x20000994

08001250 <USART2_IRQHandler>:
  * @param  None
  * @retval None
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(&UartHandle);
 8001250:	4801      	ldr	r0, [pc, #4]	; (8001258 <USART2_IRQHandler+0x8>)
 8001252:	f001 b95a 	b.w	800250a <HAL_UART_IRQHandler>
 8001256:	bf00      	nop
 8001258:	20000994 	.word	0x20000994

0800125c <Error_Handler>:
/**
  * @brief	Handles general errors.
  * @param	None
  * @retval	None
  */
static void Error_Handler(void){
 800125c:	b508      	push	{r3, lr}
	
	while(1){
		/* Put error on LED3 */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800125e:	4804      	ldr	r0, [pc, #16]	; (8001270 <Error_Handler+0x14>)
 8001260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001264:	f002 fae6 	bl	8003834 <HAL_GPIO_TogglePin>
		printf("Peripheral config error\n");
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <Error_Handler+0x18>)
 800126a:	f002 fb77 	bl	800395c <puts>
	}
 800126e:	e7f6      	b.n	800125e <Error_Handler+0x2>
 8001270:	40020c00 	.word	0x40020c00
 8001274:	08007e20 	.word	0x08007e20

08001278 <Debug_ITMDebugEnable>:
void Debug_ITMDebugEnable(void){
	volatile unsigned int *ITM_TER      = (volatile unsigned int *)0xE0000E00;
	volatile unsigned int *SCB_DHCSR 		= (volatile unsigned int *)0xE000EDF0;
	volatile unsigned int *DBGMCU_CR 		= (volatile unsigned int *)0xE0042004;

	*DBGMCU_CR |= 0x27; // DBGMCU_CR
 8001278:	4a08      	ldr	r2, [pc, #32]	; (800129c <Debug_ITMDebugEnable+0x24>)
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001280:	6013      	str	r3, [r2, #0]

  if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <Debug_ITMDebugEnable+0x28>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	07da      	lsls	r2, r3, #31
 8001288:	d506      	bpl.n	8001298 <Debug_ITMDebugEnable+0x20>
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <Debug_ITMDebugEnable+0x2c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	07db      	lsls	r3, r3, #31
    Debug_ITMDebug = 1;
 8001290:	bf42      	ittt	mi
 8001292:	4b05      	ldrmi	r3, [pc, #20]	; (80012a8 <Debug_ITMDebugEnable+0x30>)
 8001294:	2201      	movmi	r2, #1
 8001296:	601a      	strmi	r2, [r3, #0]
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e0042004 	.word	0xe0042004
 80012a0:	e000edf0 	.word	0xe000edf0
 80012a4:	e0000e00 	.word	0xe0000e00
 80012a8:	200008b4 	.word	0x200008b4

080012ac <Debug_ITMDebugOutputChar>:

void Debug_ITMDebugOutputChar(char ch){
	static volatile unsigned int *ITM_STIM0 = (volatile unsigned int *)0xE0000000; // ITM Port 0
	static volatile unsigned int *SCB_DEMCR = (volatile unsigned int *)0xE000EDFC;

	if (Debug_ITMDebug && (*SCB_DEMCR & 0x01000000))
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <Debug_ITMDebugOutputChar+0x1c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	b14b      	cbz	r3, 80012c6 <Debug_ITMDebugOutputChar+0x1a>
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <Debug_ITMDebugOutputChar+0x20>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	01db      	lsls	r3, r3, #7
 80012b8:	d505      	bpl.n	80012c6 <Debug_ITMDebugOutputChar+0x1a>
	{
		while(*ITM_STIM0 == 0);
 80012ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	2a00      	cmp	r2, #0
 80012c2:	d0fa      	beq.n	80012ba <Debug_ITMDebugOutputChar+0xe>
  	*((volatile char *)ITM_STIM0) = ch;
 80012c4:	7018      	strb	r0, [r3, #0]
 80012c6:	4770      	bx	lr
 80012c8:	200008b4 	.word	0x200008b4
 80012cc:	e000edfc 	.word	0xe000edfc

080012d0 <Debug_ITMDebugOutputString>:
}

//****************************************************************************

void Debug_ITMDebugOutputString(char *Buffer){
	if (Debug_ITMDebug)
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <Debug_ITMDebugOutputString+0x18>)
 80012d2:	681b      	ldr	r3, [r3, #0]
	}
}

//****************************************************************************

void Debug_ITMDebugOutputString(char *Buffer){
 80012d4:	b510      	push	{r4, lr}
	if (Debug_ITMDebug)
 80012d6:	b133      	cbz	r3, 80012e6 <Debug_ITMDebugOutputString+0x16>
 80012d8:	1e44      	subs	r4, r0, #1
		while(*Buffer)
 80012da:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80012de:	b110      	cbz	r0, 80012e6 <Debug_ITMDebugOutputString+0x16>
			Debug_ITMDebugOutputChar(*Buffer++);
 80012e0:	f7ff ffe4 	bl	80012ac <Debug_ITMDebugOutputChar>
 80012e4:	e7f9      	b.n	80012da <Debug_ITMDebugOutputString+0xa>
 80012e6:	bd10      	pop	{r4, pc}
 80012e8:	200008b4 	.word	0x200008b4

080012ec <main>:
  * @param	None
  *	@note	Init the system.
  * 		return here after a call.
  *	@retval	None
  */
int main(void){
 80012ec:	b500      	push	{lr}
 80012ee:	b093      	sub	sp, #76	; 0x4c
	/* STM32f4xx HAL library initialization:
	 - Cofigure Flash prefetch, flash preread and Buffer caches
	 - Systick timer config
	 - Low level init
	 */
	HAL_Init();
 80012f0:	f002 fac2 	bl	8003878 <HAL_Init>
static void SystemClock_Config(void){
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012f4:	4a56      	ldr	r2, [pc, #344]	; (8001450 <main+0x164>)
 80012f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40

	/* The voltage scaling allows optimizing the power consumption when the
	   device is clocked below the maximum system frequency, to update the
	   voltage scaling value regarding system frequency refer to product
	   datasheet. */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fe:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001302:	2402      	movs	r4, #2

	/* The voltage scaling allows optimizing the power consumption when the
	   device is clocked below the maximum system frequency, to update the
	   voltage scaling value regarding system frequency refer to product
	   datasheet. */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001304:	6813      	ldr	r3, [r2, #0]
 8001306:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800130a:	6013      	str	r3, [r2, #0]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800130c:	2301      	movs	r3, #1
 800130e:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001310:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001312:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001316:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001318:	2304      	movs	r3, #4
 800131a:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 200;
 800131c:	22c8      	movs	r2, #200	; 0xc8
	RCC_OscInitStruct.PLL.PLLP = 4;
 800131e:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 9;
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8001320:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 4;
	RCC_OscInitStruct.PLL.PLLN = 200;
	RCC_OscInitStruct.PLL.PLLP = 4;
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001322:	2309      	movs	r3, #9
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001324:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 4;
	RCC_OscInitStruct.PLL.PLLN = 200;
 8001326:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = 4;
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001328:	9311      	str	r3, [sp, #68]	; 0x44
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 800132a:	f000 fa65 	bl	80017f8 <HAL_RCC_OscConfig>
 800132e:	b108      	cbz	r0, 8001334 <main+0x48>
		/* Initialization Error */
		Error_Handler();
 8001330:	f7ff ff94 	bl	800125c <Error_Handler>
	}
	/* Select PLL as system clock source and configure the HCLK, PCLK1
	   and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001334:	230f      	movs	r3, #15
 8001336:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001338:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	}
	/* Select PLL as system clock source and configure the HCLK, PCLK1
	   and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133c:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800133e:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 8001340:	a801      	add	r0, sp, #4
	   and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 8001346:	2105      	movs	r1, #5
		Error_Handler();
	}
	/* Select PLL as system clock source and configure the HCLK, PCLK1
	   and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001348:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800134a:	9305      	str	r3, [sp, #20]
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 800134c:	f000 fc56 	bl	8001bfc <HAL_RCC_ClockConfig>
 8001350:	2800      	cmp	r0, #0
 8001352:	d1ed      	bne.n	8001330 <main+0x44>
		/* Initialization Error */
		Error_Handler();
	}

	/* STM32F407x Revision Z devices: prefetch is supported */
	if(HAL_GetREVID() == 0x1001){
 8001354:	f002 fab4 	bl	80038c0 <HAL_GetREVID>
 8001358:	f241 0301 	movw	r3, #4097	; 0x1001
 800135c:	4298      	cmp	r0, r3
		/* Enable the Flash prefetch */
		__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135e:	bf01      	itttt	eq
 8001360:	4a3c      	ldreq	r2, [pc, #240]	; (8001454 <main+0x168>)
 8001362:	6813      	ldreq	r3, [r2, #0]
 8001364:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8001368:	6013      	streq	r3, [r2, #0]

	/* configure the system clock to 168 MHz */
	SystemClock_Config();

	/* Enable TRACE debug -----------------------------------------------*/
	Debug_ITMDebugEnable();
 800136a:	f7ff ff85 	bl	8001278 <Debug_ITMDebugEnable>
 	Debug_ITMDebugOutputString("SWV Enabled\n");
 800136e:	483a      	ldr	r0, [pc, #232]	; (8001458 <main+0x16c>)
 8001370:	f7ff ffae 	bl	80012d0 <Debug_ITMDebugOutputString>
	SRAM_Timing.BusTurnAroundDuration = 1;
	SRAM_Timing.CLKDivision = 1;
	SRAM_Timing.DataLatency = 1;
	SRAM_Timing.AccessMode = FSMC_ACCESS_MODE_A;

	hsram.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001374:	4839      	ldr	r0, [pc, #228]	; (800145c <main+0x170>)
  * @param None
  * @retval None
  */
static void sram_init(void){
	/*	Configure the FSCM bus ---------------------------*/
	SRAM_Timing.AddressSetupTime = 1;
 8001376:	493a      	ldr	r1, [pc, #232]	; (8001460 <main+0x174>)
	SRAM_Timing.AccessMode = FSMC_ACCESS_MODE_A;

	hsram.Init.NSBank = FSMC_NORSRAM_BANK1;
	hsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
	hsram.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
	hsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001378:	2210      	movs	r2, #16
 800137a:	6142      	str	r2, [r0, #20]
	hsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
	hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
	hsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
	hsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
	hsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800137c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	SRAM_Timing.AddressHoldTime = 1;
	SRAM_Timing.DataSetupTime = 1;
	SRAM_Timing.BusTurnAroundDuration = 1;
	SRAM_Timing.CLKDivision = 1;
	SRAM_Timing.DataLatency = 1;
	SRAM_Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001380:	2300      	movs	r3, #0
  * @param None
  * @retval None
  */
static void sram_init(void){
	/*	Configure the FSCM bus ---------------------------*/
	SRAM_Timing.AddressSetupTime = 1;
 8001382:	2401      	movs	r4, #1
	hsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
	hsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
	hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
	hsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
	hsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
	hsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001384:	6282      	str	r2, [r0, #40]	; 0x28
	hsram.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
	hsram.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
	hsram.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;

	/* Initialize the SRAM controller ----------------------------*/
	if(HAL_SRAM_Init(&hsram, &SRAM_Timing, &SRAM_Timing) != HAL_OK){
 8001386:	460a      	mov	r2, r1
  * @param None
  * @retval None
  */
static void sram_init(void){
	/*	Configure the FSCM bus ---------------------------*/
	SRAM_Timing.AddressSetupTime = 1;
 8001388:	600c      	str	r4, [r1, #0]
	SRAM_Timing.AddressHoldTime = 1;
 800138a:	604c      	str	r4, [r1, #4]
	SRAM_Timing.DataSetupTime = 1;
 800138c:	608c      	str	r4, [r1, #8]
	SRAM_Timing.BusTurnAroundDuration = 1;
 800138e:	60cc      	str	r4, [r1, #12]
	SRAM_Timing.CLKDivision = 1;
 8001390:	610c      	str	r4, [r1, #16]
	SRAM_Timing.DataLatency = 1;
 8001392:	614c      	str	r4, [r1, #20]
	SRAM_Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001394:	618b      	str	r3, [r1, #24]

	hsram.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001396:	6083      	str	r3, [r0, #8]
	hsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001398:	60c3      	str	r3, [r0, #12]
	hsram.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800139a:	6103      	str	r3, [r0, #16]
	hsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
	hsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800139c:	6183      	str	r3, [r0, #24]
	hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800139e:	61c3      	str	r3, [r0, #28]
	hsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80013a0:	6203      	str	r3, [r0, #32]
	hsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80013a2:	6243      	str	r3, [r0, #36]	; 0x24
	hsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
	hsram.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80013a4:	62c3      	str	r3, [r0, #44]	; 0x2c
	hsram.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80013a6:	6303      	str	r3, [r0, #48]	; 0x30
	hsram.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80013a8:	6343      	str	r3, [r0, #52]	; 0x34
	hsram.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80013aa:	6383      	str	r3, [r0, #56]	; 0x38

	/* Initialize the SRAM controller ----------------------------*/
	if(HAL_SRAM_Init(&hsram, &SRAM_Timing, &SRAM_Timing) != HAL_OK){
 80013ac:	f001 fae4 	bl	8002978 <HAL_SRAM_Init>
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d1bd      	bne.n	8001330 <main+0x44>
  * @param None
  * @retval None
  */
static void I2C_init(void){
	/*	Configure the I2C peripheral ---------------------------*/
  I2cHandle.Instance             = I2Cx;
 80013b4:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <main+0x178>)
 80013b6:	4a2c      	ldr	r2, [pc, #176]	; (8001468 <main+0x17c>)
 80013b8:	601a      	str	r2, [r3, #0]

  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 80013ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013be:	611a      	str	r2, [r3, #16]
  I2cHandle.Init.ClockSpeed      = 400000;
 80013c0:	4a2a      	ldr	r2, [pc, #168]	; (800146c <main+0x180>)
 80013c2:	605a      	str	r2, [r3, #4]
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_2;
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80013c4:	2240      	movs	r2, #64	; 0x40
	/*	Configure the I2C peripheral ---------------------------*/
  I2cHandle.Instance             = I2Cx;

  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
  I2cHandle.Init.ClockSpeed      = 400000;
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c6:	6158      	str	r0, [r3, #20]
  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 80013c8:	6098      	str	r0, [r3, #8]
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80013ca:	61da      	str	r2, [r3, #28]
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 80013cc:	6218      	str	r0, [r3, #32]
  I2cHandle.Init.OwnAddress1     = I2C_ADDRESS;
 80013ce:	22fe      	movs	r2, #254	; 0xfe
  I2cHandle.Init.OwnAddress2	 = I2C_ADDRESS;

  if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 80013d0:	4618      	mov	r0, r3
  I2cHandle.Init.ClockSpeed      = 400000;
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_2;
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  I2cHandle.Init.OwnAddress1     = I2C_ADDRESS;
 80013d2:	60da      	str	r2, [r3, #12]
  I2cHandle.Init.OwnAddress2	 = I2C_ADDRESS;
 80013d4:	619a      	str	r2, [r3, #24]

  if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 80013d6:	f000 fdf7 	bl	8001fc8 <HAL_I2C_Init>
 80013da:	2800      	cmp	r0, #0
 80013dc:	d1a8      	bne.n	8001330 <main+0x44>
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = None
      - BaudRate = 9600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;
 80013de:	4b24      	ldr	r3, [pc, #144]	; (8001470 <main+0x184>)
  
	UartHandle.Init.BaudRate     = 115200;
 80013e0:	4924      	ldr	r1, [pc, #144]	; (8001474 <main+0x188>)
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 80013e2:	6098      	str	r0, [r3, #8]
      - Parity = None
      - BaudRate = 9600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;
  
	UartHandle.Init.BaudRate     = 115200;
 80013e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e8:	e883 0006 	stmia.w	r3, {r1, r2}
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
 80013ec:	60d8      	str	r0, [r3, #12]
	UartHandle.Init.Parity       = UART_PARITY_NONE;
 80013ee:	6118      	str	r0, [r3, #16]
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80013f0:	6198      	str	r0, [r3, #24]
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80013f2:	220c      	movs	r2, #12
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	61d8      	str	r0, [r3, #28]
    
	if(HAL_UART_Init(&UartHandle) != HAL_OK)
 80013f6:	4618      	mov	r0, r3
	UartHandle.Init.BaudRate     = 115200;
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
	UartHandle.Init.Parity       = UART_PARITY_NONE;
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80013f8:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
    
	if(HAL_UART_Init(&UartHandle) != HAL_OK)
 80013fa:	f001 f809 	bl	8002410 <HAL_UART_Init>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d196      	bne.n	8001330 <main+0x44>
  */
static void init_leds(void){
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable AHB1per Clock
	__GPIOD_CLK_ENABLE();
 8001402:	4a13      	ldr	r2, [pc, #76]	; (8001450 <main+0x164>)
	//Config pins
	GPIO_InitStructure.Pin = GPIO_PIN_12 | GPIO_PIN_13;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001404:	481c      	ldr	r0, [pc, #112]	; (8001478 <main+0x18c>)
  */
static void init_leds(void){
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable AHB1per Clock
	__GPIOD_CLK_ENABLE();
 8001406:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	6313      	str	r3, [r2, #48]	; 0x30

	//Config pins
	GPIO_InitStructure.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 800140e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001412:	9306      	str	r3, [sp, #24]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001414:	a906      	add	r1, sp, #24
	__GPIOD_CLK_ENABLE();

	//Config pins
	GPIO_InitStructure.Pin = GPIO_PIN_12 | GPIO_PIN_13;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8001416:	2303      	movs	r3, #3
	// Enable AHB1per Clock
	__GPIOD_CLK_ENABLE();

	//Config pins
	GPIO_InitStructure.Pin = GPIO_PIN_12 | GPIO_PIN_13;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	9407      	str	r4, [sp, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800141a:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800141c:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800141e:	f002 f8bf 	bl	80035a0 <HAL_GPIO_Init>
		printf("Compiled HAL\n");
		
				
		test_Cplusplus();
		
		if(gui_Exec == true){
 8001422:	4c16      	ldr	r4, [pc, #88]	; (800147c <main+0x190>)
	init_leds();

	
	while(1){

		printf("Compiled HAL\n");
 8001424:	4816      	ldr	r0, [pc, #88]	; (8001480 <main+0x194>)
 8001426:	f002 fa99 	bl	800395c <puts>
		
				
		test_Cplusplus();
 800142a:	f002 fa4f 	bl	80038cc <test_Cplusplus>
		
		if(gui_Exec == true){
 800142e:	7823      	ldrb	r3, [r4, #0]
 8001430:	b133      	cbz	r3, 8001440 <main+0x154>
			
			printf("SystemCoreClock: %d\n", SystemCoreClock);
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <main+0x198>)
 8001434:	4814      	ldr	r0, [pc, #80]	; (8001488 <main+0x19c>)
 8001436:	6819      	ldr	r1, [r3, #0]
 8001438:	f002 fa4e 	bl	80038d8 <printf>
			
			/*Clear Flag*/
			gui_Exec = false;
 800143c:	2300      	movs	r3, #0
 800143e:	7023      	strb	r3, [r4, #0]
		}
		
		if(Touch_Flagged == true){
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <main+0x1a0>)
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	2a00      	cmp	r2, #0
 8001446:	d0ec      	beq.n	8001422 <main+0x136>
			
			Touch_Flagged = false;
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
 800144c:	e7e9      	b.n	8001422 <main+0x136>
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40023c00 	.word	0x40023c00
 8001458:	08007e38 	.word	0x08007e38
 800145c:	200009f0 	.word	0x200009f0
 8001460:	200009d4 	.word	0x200009d4
 8001464:	20000a34 	.word	0x20000a34
 8001468:	40005400 	.word	0x40005400
 800146c:	00061a80 	.word	0x00061a80
 8001470:	20000994 	.word	0x20000994
 8001474:	40004400 	.word	0x40004400
 8001478:	40020c00 	.word	0x40020c00
 800147c:	200008b0 	.word	0x200008b0
 8001480:	08007e45 	.word	0x08007e45
 8001484:	20000000 	.word	0x20000000
 8001488:	08007e52 	.word	0x08007e52
 800148c:	200008b1 	.word	0x200008b1

08001490 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART (GNU)
  * @param  None
  * @retval None
  */
int __io_putchar(int ch){
 8001490:	b510      	push	{r4, lr}
 8001492:	4604      	mov	r4, r0
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */

	Debug_ITMDebugOutputChar(ch); // SWV
 8001494:	b2c0      	uxtb	r0, r0
 8001496:	f7ff ff09 	bl	80012ac <Debug_ITMDebugOutputChar>

  return(ch);
}
 800149a:	4620      	mov	r0, r4
 800149c:	bd10      	pop	{r4, pc}

0800149e <__io_getchar>:
int __io_getchar(void){
  /* Place your implementation of fgetc here */
  /* e.g. read a character from the USART */

  return((int)-1);
}
 800149e:	f04f 30ff 	mov.w	r0, #4294967295
 80014a2:	4770      	bx	lr

080014a4 <assert_failed>:
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line){
 80014a4:	b508      	push	{r3, lr}
 80014a6:	4603      	mov	r3, r0
 80014a8:	460a      	mov	r2, r1
  printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 80014aa:	4802      	ldr	r0, [pc, #8]	; (80014b4 <assert_failed+0x10>)
 80014ac:	4619      	mov	r1, r3
 80014ae:	f002 fa13 	bl	80038d8 <printf>

  while(1); /* Infinite loop */
 80014b2:	e7fe      	b.n	80014b2 <assert_failed+0xe>
 80014b4:	08007e67 	.word	0x08007e67

080014b8 <HAL_UART_MspInit>:
  
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80014b8:	4b43      	ldr	r3, [pc, #268]	; (80015c8 <HAL_UART_MspInit+0x110>)
 80014ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014bc:	f042 0201 	orr.w	r2, r2, #1
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80014c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
  USARTx_RX_GPIO_CLK_ENABLE();
 80014c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80014c8:	4c40      	ldr	r4, [pc, #256]	; (80015cc <HAL_UART_MspInit+0x114>)
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
  USARTx_RX_GPIO_CLK_ENABLE();
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30
  /* Enable USART2 clock */
  USARTx_CLK_ENABLE(); 
 80014d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
  /* Enable DMA1 clock */
  DMAx_CLK_ENABLE();   
 80014d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80014da:	b089      	sub	sp, #36	; 0x24
  USARTx_TX_GPIO_CLK_ENABLE();
  USARTx_RX_GPIO_CLK_ENABLE();
  /* Enable USART2 clock */
  USARTx_CLK_ENABLE(); 
  /* Enable DMA1 clock */
  DMAx_CLK_ENABLE();   
 80014dc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80014e0:	2500      	movs	r5, #0
  USARTx_TX_GPIO_CLK_ENABLE();
  USARTx_RX_GPIO_CLK_ENABLE();
  /* Enable USART2 clock */
  USARTx_CLK_ENABLE(); 
  /* Enable DMA1 clock */
  DMAx_CLK_ENABLE();   
 80014e2:	631a      	str	r2, [r3, #48]	; 0x30
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80014e4:	4607      	mov	r7, r0
  DMAx_CLK_ENABLE();   
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80014e6:	2602      	movs	r6, #2
  /* Enable DMA1 clock */
  DMAx_CLK_ENABLE();   
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80014e8:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80014ea:	f04f 0807 	mov.w	r8, #7
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80014ee:	4620      	mov	r0, r4
 80014f0:	a903      	add	r1, sp, #12
  /* Enable DMA1 clock */
  DMAx_CLK_ENABLE();   
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80014f2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80014f4:	f8cd 801c 	str.w	r8, [sp, #28]
  DMAx_CLK_ENABLE();   
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80014f8:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80014fa:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80014fc:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80014fe:	f002 f84f 	bl	80035a0 <HAL_GPIO_Init>
    
  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
    
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001502:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
    
  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001504:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
    
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001506:	4620      	mov	r0, r4
    
  /*##-3- Configure the DMA streams ##########################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 8001508:	4c31      	ldr	r4, [pc, #196]	; (80015d0 <HAL_UART_MspInit+0x118>)
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
    
  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800150a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800150c:	f8cd 801c 	str.w	r8, [sp, #28]
    
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001510:	f002 f846 	bl	80035a0 <HAL_GPIO_Init>
    
  /*##-3- Configure the DMA streams ##########################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 8001514:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <HAL_UART_MspInit+0x11c>)
 8001516:	6023      	str	r3, [r4, #0]
  
  hdma_tx.Init.Channel             = USARTx_TX_DMA_CHANNEL;
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001518:	2240      	movs	r2, #64	; 0x40
    
  /*##-3- Configure the DMA streams ##########################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
  
  hdma_tx.Init.Channel             = USARTx_TX_DMA_CHANNEL;
 800151a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800151e:	f44f 6b80 	mov.w	fp, #1024	; 0x400
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_tx.Init.Mode                = DMA_NORMAL;
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001522:	f04f 0a03 	mov.w	sl, #3
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 8001526:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 800152a:	f44f 1800 	mov.w	r8, #2097152	; 0x200000
  
  HAL_DMA_Init(&hdma_tx);   
 800152e:	4620      	mov	r0, r4
    
  /*##-3- Configure the DMA streams ##########################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
  
  hdma_tx.Init.Channel             = USARTx_TX_DMA_CHANNEL;
 8001530:	6063      	str	r3, [r4, #4]
 8001532:	9301      	str	r3, [sp, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001534:	60a2      	str	r2, [r4, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001536:	60e5      	str	r5, [r4, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001538:	f8c4 b010 	str.w	fp, [r4, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153c:	6165      	str	r5, [r4, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800153e:	61a5      	str	r5, [r4, #24]
  hdma_tx.Init.Mode                = DMA_NORMAL;
 8001540:	61e5      	str	r5, [r4, #28]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8001542:	6225      	str	r5, [r4, #32]
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001544:	6265      	str	r5, [r4, #36]	; 0x24
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001546:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 800154a:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 800154e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  
  HAL_DMA_Init(&hdma_tx);   
 8001552:	f001 fa37 	bl	80029c4 <HAL_DMA_Init>
  
  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8001556:	633c      	str	r4, [r7, #48]	; 0x30
 8001558:	63a7      	str	r7, [r4, #56]	; 0x38
    
  /* Configure the DMA handler for Transmission process */
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 800155a:	4c1f      	ldr	r4, [pc, #124]	; (80015d8 <HAL_UART_MspInit+0x120>)
  
  hdma_rx.Init.Channel             = USARTx_RX_DMA_CHANNEL;
 800155c:	9b01      	ldr	r3, [sp, #4]
  
  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
    
  /* Configure the DMA handler for Transmission process */
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 800155e:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <HAL_UART_MspInit+0x124>)
  
  hdma_rx.Init.Channel             = USARTx_RX_DMA_CHANNEL;
 8001560:	6063      	str	r3, [r4, #4]
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4; 

  HAL_DMA_Init(&hdma_rx);
 8001562:	4620      	mov	r0, r4
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_rx.Init.Mode                = DMA_NORMAL;
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001568:	6223      	str	r3, [r4, #32]
  
  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
    
  /* Configure the DMA handler for Transmission process */
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 800156a:	6022      	str	r2, [r4, #0]
  
  hdma_rx.Init.Channel             = USARTx_RX_DMA_CHANNEL;
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800156c:	60a5      	str	r5, [r4, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800156e:	60e5      	str	r5, [r4, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001570:	f8c4 b010 	str.w	fp, [r4, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001574:	6165      	str	r5, [r4, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8001576:	61a5      	str	r5, [r4, #24]
  hdma_rx.Init.Mode                = DMA_NORMAL;
 8001578:	61e5      	str	r5, [r4, #28]
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800157a:	6265      	str	r5, [r4, #36]	; 0x24
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800157c:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 8001580:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4; 
 8001584:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30

  HAL_DMA_Init(&hdma_rx);
 8001588:	f001 fa1c 	bl	80029c4 <HAL_DMA_Init>
  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
    
  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 2, 1);
 800158c:	4631      	mov	r1, r6
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4; 

  HAL_DMA_Init(&hdma_rx);
    
  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
 800158e:	637c      	str	r4, [r7, #52]	; 0x34
    
  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 2, 1);
 8001590:	2201      	movs	r2, #1
 8001592:	2011      	movs	r0, #17
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4; 

  HAL_DMA_Init(&hdma_rx);
    
  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8001594:	63a7      	str	r7, [r4, #56]	; 0x38
    
  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 2, 1);
 8001596:	f000 fdff 	bl	8002198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800159a:	2011      	movs	r0, #17
 800159c:	f000 fe3e 	bl	800221c <HAL_NVIC_EnableIRQ>
    
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
  HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 2, 0);   
 80015a0:	4631      	mov	r1, r6
 80015a2:	462a      	mov	r2, r5
 80015a4:	2010      	movs	r0, #16
 80015a6:	f000 fdf7 	bl	8002198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
 80015aa:	2010      	movs	r0, #16
 80015ac:	f000 fe36 	bl	800221c <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for USART TC interrupt */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 0);
 80015b0:	4629      	mov	r1, r5
 80015b2:	462a      	mov	r2, r5
 80015b4:	2026      	movs	r0, #38	; 0x26
 80015b6:	f000 fdef 	bl	8002198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 80015ba:	2026      	movs	r0, #38	; 0x26
 80015bc:	f000 fe2e 	bl	800221c <HAL_NVIC_EnableIRQ>
}
 80015c0:	b009      	add	sp, #36	; 0x24
 80015c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020000 	.word	0x40020000
 80015d0:	200008b8 	.word	0x200008b8
 80015d4:	400260a0 	.word	0x400260a0
 80015d8:	20000908 	.word	0x20000908
 80015dc:	40026088 	.word	0x40026088

080015e0 <HAL_I2C_MspInit>:
  *           - DMA configuration for transmission request by peripheral 
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 80015e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
 80015e4:	4c26      	ldr	r4, [pc, #152]	; (8001680 <HAL_I2C_MspInit+0xa0>)
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80015e6:	4e27      	ldr	r6, [pc, #156]	; (8001684 <HAL_I2C_MspInit+0xa4>)
  
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
 80015e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	6323      	str	r3, [r4, #48]	; 0x30
  I2Cx_SDA_GPIO_CLK_ENABLE();
 80015f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	6323      	str	r3, [r4, #48]	; 0x30
  /* PORTC-Reset pin bus enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  *           - DMA configuration for transmission request by peripheral 
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 80015fa:	b087      	sub	sp, #28
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 80015fc:	f04f 0904 	mov.w	r9, #4
  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
  I2Cx_SDA_GPIO_CLK_ENABLE();
  /* PORTC-Reset pin bus enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6323      	str	r3, [r4, #48]	; 0x30

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001606:	2501      	movs	r5, #1


  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8001608:	2312      	movs	r3, #18
  __HAL_RCC_GPIOC_CLK_ENABLE();


  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 800160a:	f04f 0840 	mov.w	r8, #64	; 0x40
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800160e:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001610:	4630      	mov	r0, r6
 8001612:	eb0d 0109 	add.w	r1, sp, r9


  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8001616:	9302      	str	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();


  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 8001618:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800161c:	9704      	str	r7, [sp, #16]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800161e:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 8001620:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001624:	f001 ffbc 	bl	80035a0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001628:	462a      	mov	r2, r5
 800162a:	4630      	mov	r0, r6
 800162c:	4641      	mov	r1, r8
 800162e:	f002 f8e9 	bl	8003804 <HAL_GPIO_WritePin>

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 8001632:	f44f 7800 	mov.w	r8, #512	; 0x200
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001636:	4630      	mov	r0, r6
 8001638:	eb0d 0109 	add.w	r1, sp, r9
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 800163c:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
 8001640:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001644:	f001 ffac 	bl	80035a0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001648:	462a      	mov	r2, r5
 800164a:	4630      	mov	r0, r6
 800164c:	4641      	mov	r1, r8
 800164e:	f002 f8d9 	bl	8003804 <HAL_GPIO_WritePin>
  
  /* Init Reset Pin Touch */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001652:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001654:	4f0c      	ldr	r7, [pc, #48]	; (8001688 <HAL_I2C_MspInit+0xa8>)
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
  
  /* Init Reset Pin Touch */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
  
  /* Init Reset Pin Touch */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001658:	2608      	movs	r6, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165a:	4638      	mov	r0, r7
 800165c:	eb0d 0109 	add.w	r1, sp, r9
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
  
  /* Init Reset Pin Touch */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001660:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001662:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001664:	f001 ff9c 	bl	80035a0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001668:	4638      	mov	r0, r7
 800166a:	4631      	mov	r1, r6
 800166c:	462a      	mov	r2, r5
 800166e:	f002 f8c9 	bl	8003804 <HAL_GPIO_WritePin>
 
  /*##-3- Enable peripheral Clock ############################################*/
  /* Enable I2C1 clock */
  I2Cx_CLK_ENABLE();
 8001672:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001678:	6423      	str	r3, [r4, #64]	; 0x40
  
}
 800167a:	b007      	add	sp, #28
 800167c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	40020400 	.word	0x40020400
 8001688:	40020800 	.word	0x40020800

0800168c <HAL_SRAM_MspInit>:
	// TODO -> PUT RESET ON GPIO PIN SO WE CAN RESET DISPLAY
	// now reset is on NRST pin on the STM32F4 discovery
	GPIO_InitTypeDef GPIO_InitStructure;

	// Clock Enable FSMC
	__HAL_RCC_FSMC_CLK_ENABLE();
 800168c:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_SRAM_MspInit+0x84>)
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800168e:	4821      	ldr	r0, [pc, #132]	; (8001714 <HAL_SRAM_MspInit+0x88>)
	// TODO -> PUT RESET ON GPIO PIN SO WE CAN RESET DISPLAY
	// now reset is on NRST pin on the STM32F4 discovery
	GPIO_InitTypeDef GPIO_InitStructure;

	// Clock Enable FSMC
	__HAL_RCC_FSMC_CLK_ENABLE();
 8001690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001692:	f042 0201 	orr.w	r2, r2, #1
/**
  * @brief SRAM init
  * param  handle to sram
  * retval None
  */
void HAL_SRAM_MspInit(SRAM_HandleTypeDef * hsram){
 8001696:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO -> PUT RESET ON GPIO PIN SO WE CAN RESET DISPLAY
	// now reset is on NRST pin on the STM32F4 discovery
	GPIO_InitTypeDef GPIO_InitStructure;

	// Clock Enable FSMC
	__HAL_RCC_FSMC_CLK_ENABLE();
 8001698:	639a      	str	r2, [r3, #56]	; 0x38

	// Clock Enable Port-D and Port-E
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800169c:	f042 0208 	orr.w	r2, r2, #8
 80016a0:	631a      	str	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80016a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a4:	f042 0210 	orr.w	r2, r2, #16
 80016a8:	631a      	str	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
/**
  * @brief SRAM init
  * param  handle to sram
  * retval None
  */
void HAL_SRAM_MspInit(SRAM_HandleTypeDef * hsram){
 80016ac:	b087      	sub	sp, #28
	__HAL_RCC_FSMC_CLK_ENABLE();

	// Clock Enable Port-D and Port-E
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOE_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	f042 0202 	orr.w	r2, r2, #2
 80016b2:	631a      	str	r2, [r3, #48]	; 0x30
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80016b4:	2402      	movs	r4, #2
	// PD9=FSMC_D14->DB16
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15;
 80016b6:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80016ba:	2703      	movs	r7, #3
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80016bc:	2600      	movs	r6, #0
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 80016be:	250c      	movs	r5, #12
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80016c0:	a901      	add	r1, sp, #4
	// PD9=FSMC_D14->DB16
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15;
 80016c2:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80016c4:	9603      	str	r6, [sp, #12]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 80016c6:	9505      	str	r5, [sp, #20]
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80016c8:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80016ca:	9704      	str	r7, [sp, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80016cc:	f001 ff68 	bl	80035a0 <HAL_GPIO_Init>
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80016d0:	9603      	str	r6, [sp, #12]
	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin = GPIO_PIN_1;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80016d2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	// PE11=FSMC_D8->DB10
	// PE12=FSMC_D9->DB11
	// PE13=FSMC_D10->DB12
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80016d6:	f64f 7380 	movw	r3, #65408	; 0xff80
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80016da:	a901      	add	r1, sp, #4
	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin = GPIO_PIN_1;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80016dc:	f506 3601 	add.w	r6, r6, #132096	; 0x20400
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80016e0:	480d      	ldr	r0, [pc, #52]	; (8001718 <HAL_SRAM_MspInit+0x8c>)
	// PE11=FSMC_D8->DB10
	// PE12=FSMC_D9->DB11
	// PE13=FSMC_D10->DB12
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80016e2:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 80016e4:	9505      	str	r5, [sp, #20]
	// PE12=FSMC_D9->DB11
	// PE13=FSMC_D10->DB12
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80016e6:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);

	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin = GPIO_PIN_1;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2501      	movs	r5, #1
	// PE13=FSMC_D10->DB12
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80016ea:	9704      	str	r7, [sp, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80016ec:	f001 ff58 	bl	80035a0 <HAL_GPIO_Init>
	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin = GPIO_PIN_1;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80016f0:	4630      	mov	r0, r6
 80016f2:	a901      	add	r1, sp, #4
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);

	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin = GPIO_PIN_1;
 80016f4:	9401      	str	r4, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	9502      	str	r5, [sp, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80016f8:	9404      	str	r4, [sp, #16]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80016fa:	9503      	str	r5, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80016fc:	f001 ff50 	bl	80035a0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001700:	4630      	mov	r0, r6
 8001702:	4621      	mov	r1, r4
 8001704:	462a      	mov	r2, r5
 8001706:	f002 f87d 	bl	8003804 <HAL_GPIO_WritePin>
 
}
 800170a:	b007      	add	sp, #28
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40020c00 	.word	0x40020c00
 8001718:	40021000 	.word	0x40021000

0800171c <HAL_MspInit>:
  * @brief  Initializes the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 800171c:	4770      	bx	lr

0800171e <_close>:
    }
}

int _close(int file) {
    return -1;
}
 800171e:	f04f 30ff 	mov.w	r0, #4294967295
 8001722:	4770      	bx	lr

08001724 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
    st->st_mode = S_IFCHR;
 8001724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001728:	604b      	str	r3, [r1, #4]
    return 0;
}
 800172a:	2000      	movs	r0, #0
 800172c:	4770      	bx	lr
	...

08001730 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
    switch (file){
 8001730:	2802      	cmp	r0, #2
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
    default:
        //errno = ENOTTY;
        errno = EBADF;
 8001732:	bf81      	itttt	hi
 8001734:	4b03      	ldrhi	r3, [pc, #12]	; (8001744 <_isatty+0x14>)
 8001736:	2209      	movhi	r2, #9
        return 0;
 8001738:	2000      	movhi	r0, #0
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
    default:
        //errno = ENOTTY;
        errno = EBADF;
 800173a:	601a      	strhi	r2, [r3, #0]
int _isatty(int file) {
    switch (file){
    case STDOUT_FILENO:
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
 800173c:	bf98      	it	ls
 800173e:	2001      	movls	r0, #1
    default:
        //errno = ENOTTY;
        errno = EBADF;
        return 0;
    }
}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000a70 	.word	0x20000a70

08001748 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
    return 0;
}
 8001748:	2000      	movs	r0, #0
 800174a:	4770      	bx	lr

0800174c <_read>:
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */


int _read(int file, char *ptr, int len) {
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	460e      	mov	r6, r1
 8001750:	4614      	mov	r4, r2
    int n;
    int num = 0;
    switch (file) {
 8001752:	b940      	cbnz	r0, 8001766 <_read+0x1a>
 8001754:	460d      	mov	r5, r1
 8001756:	1bab      	subs	r3, r5, r6
    case STDIN_FILENO:
        for (n = 0; n < len; n++) {
 8001758:	42a3      	cmp	r3, r4
 800175a:	da0a      	bge.n	8001772 <_read+0x26>
            *ptr++ = __io_getchar();
 800175c:	f7ff fe9f 	bl	800149e <__io_getchar>
 8001760:	f805 0b01 	strb.w	r0, [r5], #1
 8001764:	e7f7      	b.n	8001756 <_read+0xa>
            num++;
        }
        break;
    default:
        errno = EBADF;
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <_read+0x2c>)
 8001768:	2209      	movs	r2, #9
 800176a:	601a      	str	r2, [r3, #0]
        return -1;
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	bd70      	pop	{r4, r5, r6, pc}
 8001772:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
    }
    return num;
}
 8001776:	bd70      	pop	{r4, r5, r6, pc}
 8001778:	20000a70 	.word	0x20000a70

0800177c <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
    int n;
    switch (file) {
 800177c:	3801      	subs	r0, #1
 800177e:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8001780:	b570      	push	{r4, r5, r6, lr}
 8001782:	460e      	mov	r6, r1
 8001784:	4614      	mov	r4, r2
    int n;
    switch (file) {
 8001786:	d80a      	bhi.n	800179e <_write+0x22>
 8001788:	460d      	mov	r5, r1
 800178a:	1bab      	subs	r3, r5, r6
    case STDOUT_FILENO: /*stdout*/
    case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++) {
 800178c:	42a3      	cmp	r3, r4
 800178e:	da04      	bge.n	800179a <_write+0x1e>
					__io_putchar(*ptr++);
 8001790:	f815 0b01 	ldrb.w	r0, [r5], #1
 8001794:	f7ff fe7c 	bl	8001490 <__io_putchar>
 8001798:	e7f7      	b.n	800178a <_write+0xe>
 800179a:	4620      	mov	r0, r4
 800179c:	bd70      	pop	{r4, r5, r6, pc}
        }
        break;
    default:
        errno = EBADF;
 800179e:	4b03      	ldr	r3, [pc, #12]	; (80017ac <_write+0x30>)
 80017a0:	2209      	movs	r2, #9
 80017a2:	601a      	str	r2, [r3, #0]
        return -1;
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
    }
    return len;
}
 80017a8:	bd70      	pop	{r4, r5, r6, pc}
 80017aa:	bf00      	nop
 80017ac:	20000a70 	.word	0x20000a70

080017b0 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 80017b0:	b508      	push	{r3, lr}

    extern char _ebss; // Defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0) {
 80017b2:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <_sbrk+0x38>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	b90a      	cbnz	r2, 80017bc <_sbrk+0xc>
        heap_end = &_ebss;
 80017b8:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <_sbrk+0x3c>)
 80017ba:	601a      	str	r2, [r3, #0]
    }
    prev_heap_end = heap_end;
 80017bc:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 80017be:	f3ef 8208 	mrs	r2, MSP

char * stack = (char*) __get_MSP();

     if (heap_end + incr >  stack)
 80017c2:	4418      	add	r0, r3
 80017c4:	4290      	cmp	r0, r2
 80017c6:	d90a      	bls.n	80017de <_sbrk+0x2e>
     {
         _write (STDERR_FILENO, "Heap and stack collision\n", 25);
 80017c8:	4909      	ldr	r1, [pc, #36]	; (80017f0 <_sbrk+0x40>)
 80017ca:	2219      	movs	r2, #25
 80017cc:	2002      	movs	r0, #2
 80017ce:	f7ff ffd5 	bl	800177c <_write>
         errno = ENOMEM;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <_sbrk+0x44>)
 80017d4:	220c      	movs	r2, #12
 80017d6:	601a      	str	r2, [r3, #0]
         return  (caddr_t) -1;
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	bd08      	pop	{r3, pc}
         //abort ();
     }

    heap_end += incr;
 80017de:	4a02      	ldr	r2, [pc, #8]	; (80017e8 <_sbrk+0x38>)
 80017e0:	6010      	str	r0, [r2, #0]
    return (caddr_t) prev_heap_end;
 80017e2:	4618      	mov	r0, r3

}
 80017e4:	bd08      	pop	{r3, pc}
 80017e6:	bf00      	nop
 80017e8:	20000958 	.word	0x20000958
 80017ec:	20000a74 	.word	0x20000a74
 80017f0:	08007e99 	.word	0x08007e99
 80017f4:	20000a70 	.word	0x20000a70

080017f8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80017fa:	6803      	ldr	r3, [r0, #0]
 80017fc:	2b0f      	cmp	r3, #15
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017fe:	4604      	mov	r4, r0
  uint32_t tickstart = 0;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001800:	d904      	bls.n	800180c <HAL_RCC_OscConfig+0x14>
 8001802:	48a2      	ldr	r0, [pc, #648]	; (8001a8c <HAL_RCC_OscConfig+0x294>)
 8001804:	f240 1115 	movw	r1, #277	; 0x115
 8001808:	f7ff fe4c 	bl	80014a4 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	07d8      	lsls	r0, r3, #31
 8001810:	d403      	bmi.n	800181a <HAL_RCC_OscConfig+0x22>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	0799      	lsls	r1, r3, #30
 8001816:	d456      	bmi.n	80018c6 <HAL_RCC_OscConfig+0xce>
 8001818:	e0b7      	b.n	800198a <HAL_RCC_OscConfig+0x192>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800181a:	6863      	ldr	r3, [r4, #4]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d906      	bls.n	800182e <HAL_RCC_OscConfig+0x36>
 8001820:	2b05      	cmp	r3, #5
 8001822:	d004      	beq.n	800182e <HAL_RCC_OscConfig+0x36>
 8001824:	4899      	ldr	r0, [pc, #612]	; (8001a8c <HAL_RCC_OscConfig+0x294>)
 8001826:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800182a:	f7ff fe3b 	bl	80014a4 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800182e:	4b98      	ldr	r3, [pc, #608]	; (8001a90 <HAL_RCC_OscConfig+0x298>)
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	f002 020c 	and.w	r2, r2, #12
 8001836:	2a04      	cmp	r2, #4
 8001838:	d007      	beq.n	800184a <HAL_RCC_OscConfig+0x52>
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	f002 020c 	and.w	r2, r2, #12
 8001840:	2a08      	cmp	r2, #8
 8001842:	d10b      	bne.n	800185c <HAL_RCC_OscConfig+0x64>
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	025a      	lsls	r2, r3, #9
 8001848:	d508      	bpl.n	800185c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184a:	4b91      	ldr	r3, [pc, #580]	; (8001a90 <HAL_RCC_OscConfig+0x298>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	039b      	lsls	r3, r3, #14
 8001850:	d5df      	bpl.n	8001812 <HAL_RCC_OscConfig+0x1a>
 8001852:	6863      	ldr	r3, [r4, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1dc      	bne.n	8001812 <HAL_RCC_OscConfig+0x1a>
      {
        return HAL_ERROR;
 8001858:	2001      	movs	r0, #1
 800185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800185c:	4d8d      	ldr	r5, [pc, #564]	; (8001a94 <HAL_RCC_OscConfig+0x29c>)
 800185e:	2300      	movs	r3, #0
 8001860:	702b      	strb	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001862:	f002 f827 	bl	80038b4 <HAL_GetTick>
 8001866:	4606      	mov	r6, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001868:	4b89      	ldr	r3, [pc, #548]	; (8001a90 <HAL_RCC_OscConfig+0x298>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	039f      	lsls	r7, r3, #14
 800186e:	d508      	bpl.n	8001882 <HAL_RCC_OscConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001870:	f002 f820 	bl	80038b4 <HAL_GetTick>
 8001874:	f241 3388 	movw	r3, #5000	; 0x1388
 8001878:	1b80      	subs	r0, r0, r6
 800187a:	4298      	cmp	r0, r3
 800187c:	d9f4      	bls.n	8001868 <HAL_RCC_OscConfig+0x70>
        {
          return HAL_TIMEOUT;
 800187e:	2003      	movs	r0, #3
 8001880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001882:	7923      	ldrb	r3, [r4, #4]
 8001884:	702b      	strb	r3, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001886:	6863      	ldr	r3, [r4, #4]
 8001888:	b173      	cbz	r3, 80018a8 <HAL_RCC_OscConfig+0xb0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188a:	f002 f813 	bl	80038b4 <HAL_GetTick>
 800188e:	4605      	mov	r5, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001890:	4b7f      	ldr	r3, [pc, #508]	; (8001a90 <HAL_RCC_OscConfig+0x298>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	0398      	lsls	r0, r3, #14
 8001896:	d4bc      	bmi.n	8001812 <HAL_RCC_OscConfig+0x1a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001898:	f002 f80c 	bl	80038b4 <HAL_GetTick>
 800189c:	f241 3388 	movw	r3, #5000	; 0x1388
 80018a0:	1b40      	subs	r0, r0, r5
 80018a2:	4298      	cmp	r0, r3
 80018a4:	d9f4      	bls.n	8001890 <HAL_RCC_OscConfig+0x98>
 80018a6:	e7ea      	b.n	800187e <HAL_RCC_OscConfig+0x86>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f002 f804 	bl	80038b4 <HAL_GetTick>
 80018ac:	4605      	mov	r5, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	4b78      	ldr	r3, [pc, #480]	; (8001a90 <HAL_RCC_OscConfig+0x298>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	0399      	lsls	r1, r3, #14
 80018b4:	d5ad      	bpl.n	8001812 <HAL_RCC_OscConfig+0x1a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b6:	f001 fffd 	bl	80038b4 <HAL_GetTick>
 80018ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80018be:	1b40      	subs	r0, r0, r5
 80018c0:	4298      	cmp	r0, r3
 80018c2:	d9f4      	bls.n	80018ae <HAL_RCC_OscConfig+0xb6>
 80018c4:	e7db      	b.n	800187e <HAL_RCC_OscConfig+0x86>
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80018c6:	68e3      	ldr	r3, [r4, #12]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d904      	bls.n	80018d6 <HAL_RCC_OscConfig+0xde>
 80018cc:	486f      	ldr	r0, [pc, #444]	; (8001a8c <HAL_RCC_OscConfig+0x294>)
 80018ce:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 80018d2:	f7ff fde7 	bl	80014a4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80018d6:	6923      	ldr	r3, [r4, #16]
 80018d8:	2b1f      	cmp	r3, #31
 80018da:	d904      	bls.n	80018e6 <HAL_RCC_OscConfig+0xee>
 80018dc:	486b      	ldr	r0, [pc, #428]	; (8001a8c <HAL_RCC_OscConfig+0x294>)
 80018de:	f240 115b 	movw	r1, #347	; 0x15b
 80018e2:	f7ff fddf 	bl	80014a4 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018e6:	4b6a      	ldr	r3, [pc, #424]	; (8001a90 <HAL_RCC_OscConfig+0x298>)
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	f012 0f0c 	tst.w	r2, #12
 80018ee:	d007      	beq.n	8001900 <HAL_RCC_OscConfig+0x108>
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	f002 020c 	and.w	r2, r2, #12
 80018f6:	2a08      	cmp	r2, #8
 80018f8:	d118      	bne.n	800192c <HAL_RCC_OscConfig+0x134>
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	025a      	lsls	r2, r3, #9
 80018fe:	d415      	bmi.n	800192c <HAL_RCC_OscConfig+0x134>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001900:	4a63      	ldr	r2, [pc, #396]	; (8001a90 <HAL_RCC_OscConfig+0x298>)
 8001902:	6813      	ldr	r3, [r2, #0]
 8001904:	079b      	lsls	r3, r3, #30
 8001906:	d502      	bpl.n	800190e <HAL_RCC_OscConfig+0x116>
 8001908:	68e3      	ldr	r3, [r4, #12]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d1a4      	bne.n	8001858 <HAL_RCC_OscConfig+0x60>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190e:	6811      	ldr	r1, [r2, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	23f8      	movs	r3, #248	; 0xf8
 8001912:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	6920      	ldr	r0, [r4, #16]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	4098      	lsls	r0, r3
 8001920:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8001924:	ea40 0301 	orr.w	r3, r0, r1
 8001928:	6013      	str	r3, [r2, #0]
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	e02e      	b.n	800198a <HAL_RCC_OscConfig+0x192>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800192c:	68e2      	ldr	r2, [r4, #12]
 800192e:	4b5a      	ldr	r3, [pc, #360]	; (8001a98 <HAL_RCC_OscConfig+0x2a0>)
 8001930:	b1ea      	cbz	r2, 800196e <HAL_RCC_OscConfig+0x176>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001936:	f001 ffbd 	bl	80038b4 <HAL_GetTick>
 800193a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193c:	4954      	ldr	r1, [pc, #336]	; (8001a90 <HAL_RCC_OscConfig+0x298>)
 800193e:	680b      	ldr	r3, [r1, #0]
 8001940:	079f      	lsls	r7, r3, #30
 8001942:	d405      	bmi.n	8001950 <HAL_RCC_OscConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001944:	f001 ffb6 	bl	80038b4 <HAL_GetTick>
 8001948:	1b40      	subs	r0, r0, r5
 800194a:	2864      	cmp	r0, #100	; 0x64
 800194c:	d9f6      	bls.n	800193c <HAL_RCC_OscConfig+0x144>
 800194e:	e796      	b.n	800187e <HAL_RCC_OscConfig+0x86>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	680a      	ldr	r2, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	23f8      	movs	r3, #248	; 0xf8
 8001954:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001958:	fab3 f383 	clz	r3, r3
 800195c:	6920      	ldr	r0, [r4, #16]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4098      	lsls	r0, r3
 8001962:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001966:	ea40 0302 	orr.w	r3, r0, r2
 800196a:	600b      	str	r3, [r1, #0]
 800196c:	e00d      	b.n	800198a <HAL_RCC_OscConfig+0x192>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f001 ffa0 	bl	80038b4 <HAL_GetTick>
 8001974:	4605      	mov	r5, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001976:	4b46      	ldr	r3, [pc, #280]	; (8001a90 <HAL_RCC_OscConfig+0x298>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	079e      	lsls	r6, r3, #30
 800197c:	d505      	bpl.n	800198a <HAL_RCC_OscConfig+0x192>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800197e:	f001 ff99 	bl	80038b4 <HAL_GetTick>
 8001982:	1b40      	subs	r0, r0, r5
 8001984:	2864      	cmp	r0, #100	; 0x64
 8001986:	d9f6      	bls.n	8001976 <HAL_RCC_OscConfig+0x17e>
 8001988:	e779      	b.n	800187e <HAL_RCC_OscConfig+0x86>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198a:	6823      	ldr	r3, [r4, #0]
 800198c:	071d      	lsls	r5, r3, #28
 800198e:	d403      	bmi.n	8001998 <HAL_RCC_OscConfig+0x1a0>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	0758      	lsls	r0, r3, #29
 8001994:	d428      	bmi.n	80019e8 <HAL_RCC_OscConfig+0x1f0>
 8001996:	e052      	b.n	8001a3e <HAL_RCC_OscConfig+0x246>
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001998:	6963      	ldr	r3, [r4, #20]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d904      	bls.n	80019a8 <HAL_RCC_OscConfig+0x1b0>
 800199e:	483b      	ldr	r0, [pc, #236]	; (8001a8c <HAL_RCC_OscConfig+0x294>)
 80019a0:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80019a4:	f7ff fd7e 	bl	80014a4 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019a8:	6962      	ldr	r2, [r4, #20]
 80019aa:	4b3c      	ldr	r3, [pc, #240]	; (8001a9c <HAL_RCC_OscConfig+0x2a4>)
 80019ac:	b172      	cbz	r2, 80019cc <HAL_RCC_OscConfig+0x1d4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b2:	f001 ff7f 	bl	80038b4 <HAL_GetTick>
 80019b6:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b8:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <HAL_RCC_OscConfig+0x298>)
 80019ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019bc:	0799      	lsls	r1, r3, #30
 80019be:	d4e7      	bmi.n	8001990 <HAL_RCC_OscConfig+0x198>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c0:	f001 ff78 	bl	80038b4 <HAL_GetTick>
 80019c4:	1b40      	subs	r0, r0, r5
 80019c6:	2864      	cmp	r0, #100	; 0x64
 80019c8:	d9f6      	bls.n	80019b8 <HAL_RCC_OscConfig+0x1c0>
 80019ca:	e758      	b.n	800187e <HAL_RCC_OscConfig+0x86>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019cc:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ce:	f001 ff71 	bl	80038b4 <HAL_GetTick>
 80019d2:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <HAL_RCC_OscConfig+0x298>)
 80019d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d8:	079a      	lsls	r2, r3, #30
 80019da:	d5d9      	bpl.n	8001990 <HAL_RCC_OscConfig+0x198>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019dc:	f001 ff6a 	bl	80038b4 <HAL_GetTick>
 80019e0:	1b40      	subs	r0, r0, r5
 80019e2:	2864      	cmp	r0, #100	; 0x64
 80019e4:	d9f6      	bls.n	80019d4 <HAL_RCC_OscConfig+0x1dc>
 80019e6:	e74a      	b.n	800187e <HAL_RCC_OscConfig+0x86>
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80019e8:	68a3      	ldr	r3, [r4, #8]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d830      	bhi.n	8001a50 <HAL_RCC_OscConfig+0x258>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4a28      	ldr	r2, [pc, #160]	; (8001a90 <HAL_RCC_OscConfig+0x298>)
 80019f0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f6:	6413      	str	r3, [r2, #64]	; 0x40
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80019f8:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
 80019fc:	6813      	ldr	r3, [r2, #0]
 80019fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a02:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a04:	f001 ff56 	bl	80038b4 <HAL_GetTick>
 8001a08:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a0a:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_RCC_OscConfig+0x2a8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	05db      	lsls	r3, r3, #23
 8001a10:	d526      	bpl.n	8001a60 <HAL_RCC_OscConfig+0x268>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8001a12:	4d24      	ldr	r5, [pc, #144]	; (8001aa4 <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	2300      	movs	r3, #0
 8001a16:	702b      	strb	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a18:	f001 ff4c 	bl	80038b4 <HAL_GetTick>
 8001a1c:	4606      	mov	r6, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <HAL_RCC_OscConfig+0x298>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a22:	079f      	lsls	r7, r3, #30
 8001a24:	d422      	bmi.n	8001a6c <HAL_RCC_OscConfig+0x274>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a26:	7a23      	ldrb	r3, [r4, #8]
 8001a28:	702b      	strb	r3, [r5, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) == RCC_LSE_ON)
 8001a2a:	68a3      	ldr	r3, [r4, #8]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d13b      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x2b0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f001 ff40 	bl	80038b4 <HAL_GetTick>
 8001a34:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_RCC_OscConfig+0x298>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3a:	079e      	lsls	r6, r3, #30
 8001a3c:	d51e      	bpl.n	8001a7c <HAL_RCC_OscConfig+0x284>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001a3e:	69a3      	ldr	r3, [r4, #24]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d940      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x2ce>
 8001a44:	4811      	ldr	r0, [pc, #68]	; (8001a8c <HAL_RCC_OscConfig+0x294>)
 8001a46:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001a4a:	f7ff fd2b 	bl	80014a4 <assert_failed>
 8001a4e:	e03a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x2ce>
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001a50:	2b05      	cmp	r3, #5
 8001a52:	d0cc      	beq.n	80019ee <HAL_RCC_OscConfig+0x1f6>
 8001a54:	480d      	ldr	r0, [pc, #52]	; (8001a8c <HAL_RCC_OscConfig+0x294>)
 8001a56:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8001a5a:	f7ff fd23 	bl	80014a4 <assert_failed>
 8001a5e:	e7c6      	b.n	80019ee <HAL_RCC_OscConfig+0x1f6>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a60:	f001 ff28 	bl	80038b4 <HAL_GetTick>
 8001a64:	1b40      	subs	r0, r0, r5
 8001a66:	2864      	cmp	r0, #100	; 0x64
 8001a68:	d9cf      	bls.n	8001a0a <HAL_RCC_OscConfig+0x212>
 8001a6a:	e708      	b.n	800187e <HAL_RCC_OscConfig+0x86>
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f001 ff22 	bl	80038b4 <HAL_GetTick>
 8001a70:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a74:	1b80      	subs	r0, r0, r6
 8001a76:	4298      	cmp	r0, r3
 8001a78:	d9d1      	bls.n	8001a1e <HAL_RCC_OscConfig+0x226>
 8001a7a:	e700      	b.n	800187e <HAL_RCC_OscConfig+0x86>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	f001 ff1a 	bl	80038b4 <HAL_GetTick>
 8001a80:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a84:	1b40      	subs	r0, r0, r5
 8001a86:	4298      	cmp	r0, r3
 8001a88:	d9d5      	bls.n	8001a36 <HAL_RCC_OscConfig+0x23e>
 8001a8a:	e6f8      	b.n	800187e <HAL_RCC_OscConfig+0x86>
 8001a8c:	08007ec3 	.word	0x08007ec3
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40023802 	.word	0x40023802
 8001a98:	42470000 	.word	0x42470000
 8001a9c:	42470e80 	.word	0x42470e80
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	40023870 	.word	0x40023870
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f001 ff04 	bl	80038b4 <HAL_GetTick>
 8001aac:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aae:	4b50      	ldr	r3, [pc, #320]	; (8001bf0 <HAL_RCC_OscConfig+0x3f8>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	0798      	lsls	r0, r3, #30
 8001ab4:	d5c3      	bpl.n	8001a3e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab6:	f001 fefd 	bl	80038b4 <HAL_GetTick>
 8001aba:	f241 3388 	movw	r3, #5000	; 0x1388
 8001abe:	1b40      	subs	r0, r0, r5
 8001ac0:	4298      	cmp	r0, r3
 8001ac2:	d9f4      	bls.n	8001aae <HAL_RCC_OscConfig+0x2b6>
 8001ac4:	e6db      	b.n	800187e <HAL_RCC_OscConfig+0x86>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac6:	69a2      	ldr	r2, [r4, #24]
 8001ac8:	b90a      	cbnz	r2, 8001ace <HAL_RCC_OscConfig+0x2d6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001aca:	2000      	movs	r0, #0
 8001acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ace:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <HAL_RCC_OscConfig+0x3f8>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	f43f aebe 	beq.w	8001858 <HAL_RCC_OscConfig+0x60>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001adc:	2a02      	cmp	r2, #2
 8001ade:	4d45      	ldr	r5, [pc, #276]	; (8001bf4 <HAL_RCC_OscConfig+0x3fc>)
 8001ae0:	d175      	bne.n	8001bce <HAL_RCC_OscConfig+0x3d6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001ae2:	69e3      	ldr	r3, [r4, #28]
 8001ae4:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8001ae8:	d004      	beq.n	8001af4 <HAL_RCC_OscConfig+0x2fc>
 8001aea:	4843      	ldr	r0, [pc, #268]	; (8001bf8 <HAL_RCC_OscConfig+0x400>)
 8001aec:	f240 2111 	movw	r1, #529	; 0x211
 8001af0:	f7ff fcd8 	bl	80014a4 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001af4:	6a23      	ldr	r3, [r4, #32]
 8001af6:	2b3f      	cmp	r3, #63	; 0x3f
 8001af8:	d904      	bls.n	8001b04 <HAL_RCC_OscConfig+0x30c>
 8001afa:	483f      	ldr	r0, [pc, #252]	; (8001bf8 <HAL_RCC_OscConfig+0x400>)
 8001afc:	f240 2112 	movw	r1, #530	; 0x212
 8001b00:	f7ff fcd0 	bl	80014a4 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001b04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b06:	3bc0      	subs	r3, #192	; 0xc0
 8001b08:	2bf0      	cmp	r3, #240	; 0xf0
 8001b0a:	d904      	bls.n	8001b16 <HAL_RCC_OscConfig+0x31e>
 8001b0c:	483a      	ldr	r0, [pc, #232]	; (8001bf8 <HAL_RCC_OscConfig+0x400>)
 8001b0e:	f240 2113 	movw	r1, #531	; 0x213
 8001b12:	f7ff fcc7 	bl	80014a4 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001b16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b18:	f023 0204 	bic.w	r2, r3, #4
 8001b1c:	2a02      	cmp	r2, #2
 8001b1e:	d008      	beq.n	8001b32 <HAL_RCC_OscConfig+0x33a>
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d006      	beq.n	8001b32 <HAL_RCC_OscConfig+0x33a>
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d004      	beq.n	8001b32 <HAL_RCC_OscConfig+0x33a>
 8001b28:	4833      	ldr	r0, [pc, #204]	; (8001bf8 <HAL_RCC_OscConfig+0x400>)
 8001b2a:	f44f 7105 	mov.w	r1, #532	; 0x214
 8001b2e:	f7ff fcb9 	bl	80014a4 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001b32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b34:	3b04      	subs	r3, #4
 8001b36:	2b0b      	cmp	r3, #11
 8001b38:	d904      	bls.n	8001b44 <HAL_RCC_OscConfig+0x34c>
 8001b3a:	482f      	ldr	r0, [pc, #188]	; (8001bf8 <HAL_RCC_OscConfig+0x400>)
 8001b3c:	f240 2115 	movw	r1, #533	; 0x215
 8001b40:	f7ff fcb0 	bl	80014a4 <assert_failed>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	602b      	str	r3, [r5, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f001 feb4 	bl	80038b4 <HAL_GetTick>
 8001b4c:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4e:	4e28      	ldr	r6, [pc, #160]	; (8001bf0 <HAL_RCC_OscConfig+0x3f8>)
 8001b50:	6833      	ldr	r3, [r6, #0]
 8001b52:	0199      	lsls	r1, r3, #6
 8001b54:	d505      	bpl.n	8001b62 <HAL_RCC_OscConfig+0x36a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b56:	f001 fead 	bl	80038b4 <HAL_GetTick>
 8001b5a:	1bc0      	subs	r0, r0, r7
 8001b5c:	2864      	cmp	r0, #100	; 0x64
 8001b5e:	d9f6      	bls.n	8001b4e <HAL_RCC_OscConfig+0x356>
 8001b60:	e68d      	b.n	800187e <HAL_RCC_OscConfig+0x86>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	f647 70c0 	movw	r0, #32704	; 0x7fc0
 8001b66:	fa90 f0a0 	rbit	r0, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	fab0 f080 	clz	r0, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8001b72:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	fab1 f181 	clz	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001b7e:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	fab2 f282 	clz	r2, r2
 8001b86:	6a27      	ldr	r7, [r4, #32]
 8001b88:	69e3      	ldr	r3, [r4, #28]
 8001b8a:	433b      	orrs	r3, r7
 8001b8c:	f043 5700 	orr.w	r7, r3, #536870912	; 0x20000000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b92:	b2c0      	uxtb	r0, r0
 8001b94:	4083      	lsls	r3, r0
 8001b96:	ea47 0003 	orr.w	r0, r7, r3
 8001b9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b9c:	085b      	lsrs	r3, r3, #1
 8001b9e:	b2c9      	uxtb	r1, r1
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	408b      	lsls	r3, r1
 8001ba4:	b2d1      	uxtb	r1, r2
 8001ba6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ba8:	4303      	orrs	r3, r0
 8001baa:	408a      	lsls	r2, r1
 8001bac:	4313      	orrs	r3, r2
 8001bae:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLM,
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f001 fe7e 	bl	80038b4 <HAL_GetTick>
 8001bb8:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_RCC_OscConfig+0x3f8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	019a      	lsls	r2, r3, #6
 8001bc0:	d483      	bmi.n	8001aca <HAL_RCC_OscConfig+0x2d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc2:	f001 fe77 	bl	80038b4 <HAL_GetTick>
 8001bc6:	1b00      	subs	r0, r0, r4
 8001bc8:	2864      	cmp	r0, #100	; 0x64
 8001bca:	d9f6      	bls.n	8001bba <HAL_RCC_OscConfig+0x3c2>
 8001bcc:	e657      	b.n	800187e <HAL_RCC_OscConfig+0x86>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	602b      	str	r3, [r5, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f001 fe6f 	bl	80038b4 <HAL_GetTick>
 8001bd6:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_OscConfig+0x3f8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	019b      	lsls	r3, r3, #6
 8001bde:	f57f af74 	bpl.w	8001aca <HAL_RCC_OscConfig+0x2d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be2:	f001 fe67 	bl	80038b4 <HAL_GetTick>
 8001be6:	1b00      	subs	r0, r0, r4
 8001be8:	2864      	cmp	r0, #100	; 0x64
 8001bea:	d9f5      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x3e0>
 8001bec:	e647      	b.n	800187e <HAL_RCC_OscConfig+0x86>
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	42470060 	.word	0x42470060
 8001bf8:	08007ec3 	.word	0x08007ec3

08001bfc <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;   
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001bfc:	6803      	ldr	r3, [r0, #0]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	2b0e      	cmp	r3, #14
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c02:	b570      	push	{r4, r5, r6, lr}
 8001c04:	4604      	mov	r4, r0
 8001c06:	460d      	mov	r5, r1
  uint32_t tickstart = 0;   
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001c08:	d904      	bls.n	8001c14 <HAL_RCC_ClockConfig+0x18>
 8001c0a:	48a5      	ldr	r0, [pc, #660]	; (8001ea0 <HAL_RCC_ClockConfig+0x2a4>)
 8001c0c:	f240 2173 	movw	r1, #627	; 0x273
 8001c10:	f7ff fc48 	bl	80014a4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001c14:	2d07      	cmp	r5, #7
 8001c16:	d904      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x26>
 8001c18:	48a1      	ldr	r0, [pc, #644]	; (8001ea0 <HAL_RCC_ClockConfig+0x2a4>)
 8001c1a:	f44f 711d 	mov.w	r1, #628	; 0x274
 8001c1e:	f7ff fc41 	bl	80014a4 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c22:	4ba0      	ldr	r3, [pc, #640]	; (8001ea4 <HAL_RCC_ClockConfig+0x2a8>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	f002 020f 	and.w	r2, r2, #15
 8001c2a:	4295      	cmp	r5, r2
 8001c2c:	f240 8081 	bls.w	8001d32 <HAL_RCC_ClockConfig+0x136>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c30:	b2ea      	uxtb	r2, r5
 8001c32:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	42ab      	cmp	r3, r5
 8001c3c:	d001      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c3e:	2001      	movs	r0, #1
 8001c40:	bd70      	pop	{r4, r5, r6, pc}
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	079e      	lsls	r6, r3, #30
 8001c46:	d51d      	bpl.n	8001c84 <HAL_RCC_ClockConfig+0x88>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001c48:	68a3      	ldr	r3, [r4, #8]
 8001c4a:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8001c4e:	d012      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x7a>
 8001c50:	f023 0220 	bic.w	r2, r3, #32
 8001c54:	2a90      	cmp	r2, #144	; 0x90
 8001c56:	d00e      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x7a>
 8001c58:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001c5c:	2aa0      	cmp	r2, #160	; 0xa0
 8001c5e:	d00a      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x7a>
 8001c60:	f023 0210 	bic.w	r2, r3, #16
 8001c64:	2ac0      	cmp	r2, #192	; 0xc0
 8001c66:	d006      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x7a>
 8001c68:	2bf0      	cmp	r3, #240	; 0xf0
 8001c6a:	d004      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x7a>
 8001c6c:	488c      	ldr	r0, [pc, #560]	; (8001ea0 <HAL_RCC_ClockConfig+0x2a4>)
 8001c6e:	f240 218a 	movw	r1, #650	; 0x28a
 8001c72:	f7ff fc17 	bl	80014a4 <assert_failed>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c76:	498c      	ldr	r1, [pc, #560]	; (8001ea8 <HAL_RCC_ClockConfig+0x2ac>)
 8001c78:	688b      	ldr	r3, [r1, #8]
 8001c7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7e:	68a3      	ldr	r3, [r4, #8]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	07dd      	lsls	r5, r3, #31
 8001c88:	d404      	bmi.n	8001c94 <HAL_RCC_ClockConfig+0x98>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	0758      	lsls	r0, r3, #29
 8001c8e:	f100 80ce 	bmi.w	8001e2e <HAL_RCC_ClockConfig+0x232>
 8001c92:	e0e4      	b.n	8001e5e <HAL_RCC_ClockConfig+0x262>
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001c94:	6863      	ldr	r3, [r4, #4]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d904      	bls.n	8001ca4 <HAL_RCC_ClockConfig+0xa8>
 8001c9a:	4881      	ldr	r0, [pc, #516]	; (8001ea0 <HAL_RCC_ClockConfig+0x2a4>)
 8001c9c:	f240 2191 	movw	r1, #657	; 0x291
 8001ca0:	f7ff fc00 	bl	80014a4 <assert_failed>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca4:	6862      	ldr	r2, [r4, #4]
 8001ca6:	4b80      	ldr	r3, [pc, #512]	; (8001ea8 <HAL_RCC_ClockConfig+0x2ac>)
 8001ca8:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cac:	d102      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xb8>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8001cb2:	e006      	b.n	8001cc2 <HAL_RCC_ClockConfig+0xc6>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb4:	2a02      	cmp	r2, #2
 8001cb6:	d102      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xc2>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb8:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8001cbc:	e001      	b.n	8001cc2 <HAL_RCC_ClockConfig+0xc6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbe:	f011 0f02 	tst.w	r1, #2
 8001cc2:	d0bc      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x42>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cc4:	6899      	ldr	r1, [r3, #8]
 8001cc6:	f021 0103 	bic.w	r1, r1, #3
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	609a      	str	r2, [r3, #8]
 
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cce:	f001 fdf1 	bl	80038b4 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd2:	6863      	ldr	r3, [r4, #4]
 8001cd4:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd6:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xfc>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001cda:	4b73      	ldr	r3, [pc, #460]	; (8001ea8 <HAL_RCC_ClockConfig+0x2ac>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d0d1      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce6:	f001 fde5 	bl	80038b4 <HAL_GetTick>
 8001cea:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cee:	1b40      	subs	r0, r0, r5
 8001cf0:	4298      	cmp	r0, r3
 8001cf2:	d9f2      	bls.n	8001cda <HAL_RCC_ClockConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001cf4:	2003      	movs	r0, #3
 8001cf6:	bd70      	pop	{r4, r5, r6, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d114      	bne.n	8001d26 <HAL_RCC_ClockConfig+0x12a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cfc:	4b6a      	ldr	r3, [pc, #424]	; (8001ea8 <HAL_RCC_ClockConfig+0x2ac>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d0c0      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d08:	f001 fdd4 	bl	80038b4 <HAL_GetTick>
 8001d0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d10:	1b40      	subs	r0, r0, r5
 8001d12:	4298      	cmp	r0, r3
 8001d14:	d9f2      	bls.n	8001cfc <HAL_RCC_ClockConfig+0x100>
 8001d16:	e7ed      	b.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d18:	f001 fdcc 	bl	80038b4 <HAL_GetTick>
 8001d1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d20:	1b40      	subs	r0, r0, r5
 8001d22:	4298      	cmp	r0, r3
 8001d24:	d8e6      	bhi.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001d26:	4b60      	ldr	r3, [pc, #384]	; (8001ea8 <HAL_RCC_ClockConfig+0x2ac>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f013 0f0c 	tst.w	r3, #12
 8001d2e:	d1f3      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x11c>
 8001d30:	e7ab      	b.n	8001c8a <HAL_RCC_ClockConfig+0x8e>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	0799      	lsls	r1, r3, #30
 8001d36:	d51d      	bpl.n	8001d74 <HAL_RCC_ClockConfig+0x178>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001d38:	68a3      	ldr	r3, [r4, #8]
 8001d3a:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8001d3e:	d012      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x16a>
 8001d40:	f023 0220 	bic.w	r2, r3, #32
 8001d44:	2a90      	cmp	r2, #144	; 0x90
 8001d46:	d00e      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x16a>
 8001d48:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001d4c:	2aa0      	cmp	r2, #160	; 0xa0
 8001d4e:	d00a      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x16a>
 8001d50:	f023 0210 	bic.w	r2, r3, #16
 8001d54:	2ac0      	cmp	r2, #192	; 0xc0
 8001d56:	d006      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x16a>
 8001d58:	2bf0      	cmp	r3, #240	; 0xf0
 8001d5a:	d004      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x16a>
 8001d5c:	4850      	ldr	r0, [pc, #320]	; (8001ea0 <HAL_RCC_ClockConfig+0x2a4>)
 8001d5e:	f240 21d9 	movw	r1, #729	; 0x2d9
 8001d62:	f7ff fb9f 	bl	80014a4 <assert_failed>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d66:	4950      	ldr	r1, [pc, #320]	; (8001ea8 <HAL_RCC_ClockConfig+0x2ac>)
 8001d68:	688b      	ldr	r3, [r1, #8]
 8001d6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d6e:	68a3      	ldr	r3, [r4, #8]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	07da      	lsls	r2, r3, #31
 8001d78:	d409      	bmi.n	8001d8e <HAL_RCC_ClockConfig+0x192>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ea4 <HAL_RCC_ClockConfig+0x2a8>)
 8001d7c:	b2ea      	uxtb	r2, r5
 8001d7e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	42ab      	cmp	r3, r5
 8001d88:	f47f af59 	bne.w	8001c3e <HAL_RCC_ClockConfig+0x42>
 8001d8c:	e77d      	b.n	8001c8a <HAL_RCC_ClockConfig+0x8e>
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001d8e:	6863      	ldr	r3, [r4, #4]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d904      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x1a2>
 8001d94:	4842      	ldr	r0, [pc, #264]	; (8001ea0 <HAL_RCC_ClockConfig+0x2a4>)
 8001d96:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8001d9a:	f7ff fb83 	bl	80014a4 <assert_failed>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9e:	6862      	ldr	r2, [r4, #4]
 8001da0:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <HAL_RCC_ClockConfig+0x2ac>)
 8001da2:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da4:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	d102      	bne.n	8001dae <HAL_RCC_ClockConfig+0x1b2>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da8:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8001dac:	e006      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1c0>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dae:	2a02      	cmp	r2, #2
 8001db0:	d102      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x1bc>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db2:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8001db6:	e001      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1c0>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	f011 0f02 	tst.w	r1, #2
 8001dbc:	f43f af3f 	beq.w	8001c3e <HAL_RCC_ClockConfig+0x42>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dc0:	6899      	ldr	r1, [r3, #8]
 8001dc2:	f021 0103 	bic.w	r1, r1, #3
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	609a      	str	r2, [r3, #8]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dca:	f001 fd73 	bl	80038b4 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dce:	6863      	ldr	r3, [r4, #4]
 8001dd0:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd2:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd4:	d10d      	bne.n	8001df2 <HAL_RCC_ClockConfig+0x1f6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001dd6:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <HAL_RCC_ClockConfig+0x2ac>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d0cb      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de2:	f001 fd67 	bl	80038b4 <HAL_GetTick>
 8001de6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dea:	1b80      	subs	r0, r0, r6
 8001dec:	4298      	cmp	r0, r3
 8001dee:	d9f2      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0x1da>
 8001df0:	e780      	b.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d115      	bne.n	8001e22 <HAL_RCC_ClockConfig+0x226>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001df6:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <HAL_RCC_ClockConfig+0x2ac>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d0bb      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e02:	f001 fd57 	bl	80038b4 <HAL_GetTick>
 8001e06:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e0a:	1b80      	subs	r0, r0, r6
 8001e0c:	4298      	cmp	r0, r3
 8001e0e:	d9f2      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x1fa>
 8001e10:	e770      	b.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e12:	f001 fd4f 	bl	80038b4 <HAL_GetTick>
 8001e16:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e1a:	1b80      	subs	r0, r0, r6
 8001e1c:	4298      	cmp	r0, r3
 8001e1e:	f63f af69 	bhi.w	8001cf4 <HAL_RCC_ClockConfig+0xf8>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001e22:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <HAL_RCC_ClockConfig+0x2ac>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f013 0f0c 	tst.w	r3, #12
 8001e2a:	d1f2      	bne.n	8001e12 <HAL_RCC_ClockConfig+0x216>
 8001e2c:	e7a5      	b.n	8001d7a <HAL_RCC_ClockConfig+0x17e>
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001e2e:	68e3      	ldr	r3, [r4, #12]
 8001e30:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8001e34:	d00c      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x254>
 8001e36:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001e3a:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8001e3e:	d007      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x254>
 8001e40:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001e44:	d004      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x254>
 8001e46:	4816      	ldr	r0, [pc, #88]	; (8001ea0 <HAL_RCC_ClockConfig+0x2a4>)
 8001e48:	f44f 714c 	mov.w	r1, #816	; 0x330
 8001e4c:	f7ff fb2a 	bl	80014a4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e50:	4915      	ldr	r1, [pc, #84]	; (8001ea8 <HAL_RCC_ClockConfig+0x2ac>)
 8001e52:	688b      	ldr	r3, [r1, #8]
 8001e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e58:	68e3      	ldr	r3, [r4, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	071b      	lsls	r3, r3, #28
 8001e62:	d518      	bpl.n	8001e96 <HAL_RCC_ClockConfig+0x29a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001e64:	6923      	ldr	r3, [r4, #16]
 8001e66:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8001e6a:	d00c      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x28a>
 8001e6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001e70:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8001e74:	d007      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x28a>
 8001e76:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001e7a:	d004      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x28a>
 8001e7c:	4808      	ldr	r0, [pc, #32]	; (8001ea0 <HAL_RCC_ClockConfig+0x2a4>)
 8001e7e:	f240 3137 	movw	r1, #823	; 0x337
 8001e82:	f7ff fb0f 	bl	80014a4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e86:	4a08      	ldr	r2, [pc, #32]	; (8001ea8 <HAL_RCC_ClockConfig+0x2ac>)
 8001e88:	6921      	ldr	r1, [r4, #16]
 8001e8a:	6893      	ldr	r3, [r2, #8]
 8001e8c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e90:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e94:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e96:	200f      	movs	r0, #15
 8001e98:	f001 fcdc 	bl	8003854 <HAL_InitTick>
  
  return HAL_OK;
 8001e9c:	2000      	movs	r0, #0
}
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ea0:	08007ec3 	.word	0x08007ec3
 8001ea4:	40023c00 	.word	0x40023c00
 8001ea8:	40023800 	.word	0x40023800

08001eac <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eac:	b530      	push	{r4, r5, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eae:	4c1d      	ldr	r4, [pc, #116]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x78>)
 8001eb0:	68a3      	ldr	r3, [r4, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d030      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x70>
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d130      	bne.n	8001f20 <HAL_RCC_GetSysClockFreq+0x74>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ebe:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ec0:	6863      	ldr	r3, [r4, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec2:	f002 053f 	and.w	r5, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ec6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001eca:	f647 71c0 	movw	r1, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001ece:	6863      	ldr	r3, [r4, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	fab1 f181 	clz	r1, r1
 8001ed8:	f647 70c0 	movw	r0, #32704	; 0x7fc0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001edc:	bf04      	itt	eq
 8001ede:	4a12      	ldreq	r2, [pc, #72]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001ee0:	fbb2 f2f5 	udiveq	r2, r2, r5
 8001ee4:	b2c9      	uxtb	r1, r1
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001ee6:	ea00 0003 	and.w	r0, r0, r3
 8001eea:	fa20 f001 	lsr.w	r0, r0, r1
 8001eee:	bf1c      	itt	ne
 8001ef0:	490e      	ldrne	r1, [pc, #56]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x80>)
 8001ef2:	fbb1 f2f5 	udivne	r2, r1, r5
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001ef6:	fb02 f300 	mul.w	r3, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x78>)
 8001efc:	6850      	ldr	r0, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f02:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	fab2 f282 	clz	r2, r2
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001f10:	40d0      	lsrs	r0, r2
 8001f12:	3001      	adds	r0, #1
 8001f14:	0040      	lsls	r0, r0, #1
      
      sysclockfreq = pllvco/pllp;
 8001f16:	fbb3 f0f0 	udiv	r0, r3, r0
 8001f1a:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f1c:	4803      	ldr	r0, [pc, #12]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x80>)
 8001f1e:	bd30      	pop	{r4, r5, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f20:	4801      	ldr	r0, [pc, #4]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x7c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f22:	bd30      	pop	{r4, r5, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	00f42400 	.word	0x00f42400
 8001f2c:	007a1200 	.word	0x007a1200

08001f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f30:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001f32:	f7ff ffbb 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_RCC_GetHCLKFreq+0x2c>)
 8001f38:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	23f0      	movs	r3, #240	; 0xf0
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4e:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <HAL_RCC_GetHCLKFreq+0x30>)
 8001f50:	5cd3      	ldrb	r3, [r2, r3]
 8001f52:	40d8      	lsrs	r0, r3
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <HAL_RCC_GetHCLKFreq+0x34>)
 8001f56:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8001f58:	bd08      	pop	{r3, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	08007eb3 	.word	0x08007eb3
 8001f64:	20000000 	.word	0x20000000

08001f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8001f68:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001f6a:	f7ff ffe1 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f70:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f76:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
 8001f88:	4a02      	ldr	r2, [pc, #8]	; (8001f94 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001f8a:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f8c:	40d8      	lsrs	r0, r3
 8001f8e:	bd08      	pop	{r3, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	08007eb3 	.word	0x08007eb3

08001f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f98:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001f9a:	f7ff ffc9 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fa0:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb8:	4a02      	ldr	r2, [pc, #8]	; (8001fc4 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001fba:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001fbc:	40d8      	lsrs	r0, r3
 8001fbe:	bd08      	pop	{r3, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	08007eb3 	.word	0x08007eb3

08001fc8 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fc8:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0;
  uint32_t pclk1 = 0;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001fca:	4604      	mov	r4, r0
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	f000 80bb 	beq.w	8002148 <HAL_I2C_Init+0x180>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001fd2:	6803      	ldr	r3, [r0, #0]
 8001fd4:	4a5d      	ldr	r2, [pc, #372]	; (800214c <HAL_I2C_Init+0x184>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00c      	beq.n	8001ff4 <HAL_I2C_Init+0x2c>
 8001fda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d008      	beq.n	8001ff4 <HAL_I2C_Init+0x2c>
 8001fe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d004      	beq.n	8001ff4 <HAL_I2C_Init+0x2c>
 8001fea:	4859      	ldr	r0, [pc, #356]	; (8002150 <HAL_I2C_Init+0x188>)
 8001fec:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001ff0:	f7ff fa58 	bl	80014a4 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8001ff4:	6863      	ldr	r3, [r4, #4]
 8001ff6:	4a57      	ldr	r2, [pc, #348]	; (8002154 <HAL_I2C_Init+0x18c>)
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d904      	bls.n	8002008 <HAL_I2C_Init+0x40>
 8001ffe:	4854      	ldr	r0, [pc, #336]	; (8002150 <HAL_I2C_Init+0x188>)
 8002000:	f240 112d 	movw	r1, #301	; 0x12d
 8002004:	f7ff fa4e 	bl	80014a4 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002008:	68a3      	ldr	r3, [r4, #8]
 800200a:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800200e:	d004      	beq.n	800201a <HAL_I2C_Init+0x52>
 8002010:	484f      	ldr	r0, [pc, #316]	; (8002150 <HAL_I2C_Init+0x188>)
 8002012:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8002016:	f7ff fa45 	bl	80014a4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800201a:	68e3      	ldr	r3, [r4, #12]
 800201c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002020:	f023 0303 	bic.w	r3, r3, #3
 8002024:	b123      	cbz	r3, 8002030 <HAL_I2C_Init+0x68>
 8002026:	484a      	ldr	r0, [pc, #296]	; (8002150 <HAL_I2C_Init+0x188>)
 8002028:	f240 112f 	movw	r1, #303	; 0x12f
 800202c:	f7ff fa3a 	bl	80014a4 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002030:	6923      	ldr	r3, [r4, #16]
 8002032:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800203a:	d004      	beq.n	8002046 <HAL_I2C_Init+0x7e>
 800203c:	4844      	ldr	r0, [pc, #272]	; (8002150 <HAL_I2C_Init+0x188>)
 800203e:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002042:	f7ff fa2f 	bl	80014a4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002046:	6963      	ldr	r3, [r4, #20]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d904      	bls.n	8002056 <HAL_I2C_Init+0x8e>
 800204c:	4840      	ldr	r0, [pc, #256]	; (8002150 <HAL_I2C_Init+0x188>)
 800204e:	f240 1131 	movw	r1, #305	; 0x131
 8002052:	f7ff fa27 	bl	80014a4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002056:	69a3      	ldr	r3, [r4, #24]
 8002058:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 800205c:	d004      	beq.n	8002068 <HAL_I2C_Init+0xa0>
 800205e:	483c      	ldr	r0, [pc, #240]	; (8002150 <HAL_I2C_Init+0x188>)
 8002060:	f44f 7199 	mov.w	r1, #306	; 0x132
 8002064:	f7ff fa1e 	bl	80014a4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002068:	69e3      	ldr	r3, [r4, #28]
 800206a:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800206e:	d004      	beq.n	800207a <HAL_I2C_Init+0xb2>
 8002070:	4837      	ldr	r0, [pc, #220]	; (8002150 <HAL_I2C_Init+0x188>)
 8002072:	f240 1133 	movw	r1, #307	; 0x133
 8002076:	f7ff fa15 	bl	80014a4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800207a:	6a23      	ldr	r3, [r4, #32]
 800207c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002080:	d004      	beq.n	800208c <HAL_I2C_Init+0xc4>
 8002082:	4833      	ldr	r0, [pc, #204]	; (8002150 <HAL_I2C_Init+0x188>)
 8002084:	f44f 719a 	mov.w	r1, #308	; 0x134
 8002088:	f7ff fa0c 	bl	80014a4 <assert_failed>

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800208c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002090:	b913      	cbnz	r3, 8002098 <HAL_I2C_Init+0xd0>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002092:	4620      	mov	r0, r4
 8002094:	f7ff faa4 	bl	80015e0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002098:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800209a:	4d2f      	ldr	r5, [pc, #188]	; (8002158 <HAL_I2C_Init+0x190>)
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800209c:	2302      	movs	r3, #2
 800209e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020a2:	6813      	ldr	r3, [r2, #0]
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020aa:	f7ff ff5d 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80020ae:	6863      	ldr	r3, [r4, #4]
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80020b0:	6822      	ldr	r2, [r4, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020b2:	492a      	ldr	r1, [pc, #168]	; (800215c <HAL_I2C_Init+0x194>)
 80020b4:	fbb0 f1f1 	udiv	r1, r0, r1
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80020b8:	42ab      	cmp	r3, r5
 80020ba:	462e      	mov	r6, r5
 80020bc:	bf88      	it	hi
 80020be:	f44f 7596 	movhi.w	r5, #300	; 0x12c
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80020c2:	6051      	str	r1, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80020c4:	bf82      	ittt	hi
 80020c6:	4369      	mulhi	r1, r5
 80020c8:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80020cc:	fbb1 f1f5 	udivhi	r1, r1, r5

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80020d0:	42b3      	cmp	r3, r6
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80020d2:	f101 0101 	add.w	r1, r1, #1
 80020d6:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80020d8:	d808      	bhi.n	80020ec <HAL_I2C_Init+0x124>
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80020e0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	bf98      	it	ls
 80020e8:	2004      	movls	r0, #4
 80020ea:	e016      	b.n	800211a <HAL_I2C_Init+0x152>
 80020ec:	68a1      	ldr	r1, [r4, #8]
 80020ee:	b949      	cbnz	r1, 8002104 <HAL_I2C_Init+0x13c>
 80020f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80020f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80020f8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80020fc:	b163      	cbz	r3, 8002118 <HAL_I2C_Init+0x150>
 80020fe:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8002102:	e00a      	b.n	800211a <HAL_I2C_Init+0x152>
 8002104:	2119      	movs	r1, #25
 8002106:	434b      	muls	r3, r1
 8002108:	fbb0 f0f3 	udiv	r0, r0, r3
 800210c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002110:	b113      	cbz	r3, 8002118 <HAL_I2C_Init+0x150>
 8002112:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8002116:	e000      	b.n	800211a <HAL_I2C_Init+0x152>
 8002118:	2001      	movs	r0, #1

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800211a:	6a21      	ldr	r1, [r4, #32]
 800211c:	69e3      	ldr	r3, [r4, #28]
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800211e:	61d0      	str	r0, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002120:	430b      	orrs	r3, r1
 8002122:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8002124:	68e1      	ldr	r1, [r4, #12]
 8002126:	6923      	ldr	r3, [r4, #16]
 8002128:	430b      	orrs	r3, r1
 800212a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800212c:	69a1      	ldr	r1, [r4, #24]
 800212e:	6963      	ldr	r3, [r4, #20]
 8002130:	430b      	orrs	r3, r1
 8002132:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002134:	6813      	ldr	r3, [r2, #0]
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800213c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800213e:	2301      	movs	r3, #1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002140:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 8002142:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8002146:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t pclk1 = 0;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8002148:	2001      	movs	r0, #1

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;

  return HAL_OK;
}
 800214a:	bd70      	pop	{r4, r5, r6, pc}
 800214c:	40005400 	.word	0x40005400
 8002150:	08007f12 	.word	0x08007f12
 8002154:	00061a7f 	.word	0x00061a7f
 8002158:	000186a0 	.word	0x000186a0
 800215c:	000f4240 	.word	0x000f4240

08002160 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002160:	1ec3      	subs	r3, r0, #3
 8002162:	2b04      	cmp	r3, #4
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b510      	push	{r4, lr}
 8002166:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002168:	d903      	bls.n	8002172 <HAL_NVIC_SetPriorityGrouping+0x12>
 800216a:	4809      	ldr	r0, [pc, #36]	; (8002190 <HAL_NVIC_SetPriorityGrouping+0x30>)
 800216c:	21a4      	movs	r1, #164	; 0xa4
 800216e:	f7ff f999 	bl	80014a4 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002172:	4a08      	ldr	r2, [pc, #32]	; (8002194 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8002174:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8002176:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800217a:	400b      	ands	r3, r1
 800217c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8002184:	f004 0407 	and.w	r4, r4, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8002188:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800218c:	60d3      	str	r3, [r2, #12]
 800218e:	bd10      	pop	{r4, pc}
 8002190:	08007f61 	.word	0x08007f61
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002198:	2a0f      	cmp	r2, #15
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219a:	b570      	push	{r4, r5, r6, lr}
 800219c:	4605      	mov	r5, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80021a2:	d903      	bls.n	80021ac <HAL_NVIC_SetPriority+0x14>
 80021a4:	481a      	ldr	r0, [pc, #104]	; (8002210 <HAL_NVIC_SetPriority+0x78>)
 80021a6:	21bc      	movs	r1, #188	; 0xbc
 80021a8:	f7ff f97c 	bl	80014a4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80021ac:	2c0f      	cmp	r4, #15
 80021ae:	d903      	bls.n	80021b8 <HAL_NVIC_SetPriority+0x20>
 80021b0:	4817      	ldr	r0, [pc, #92]	; (8002210 <HAL_NVIC_SetPriority+0x78>)
 80021b2:	21bd      	movs	r1, #189	; 0xbd
 80021b4:	f7ff f976 	bl	80014a4 <assert_failed>

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 80021b8:	4b16      	ldr	r3, [pc, #88]	; (8002214 <HAL_NVIC_SetPriority+0x7c>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 80021c0:	f1c3 0207 	rsb	r2, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80021c4:	1d19      	adds	r1, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 80021c6:	2a04      	cmp	r2, #4
 80021c8:	bf28      	it	cs
 80021ca:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80021cc:	2906      	cmp	r1, #6
 80021ce:	bf8c      	ite	hi
 80021d0:	3b03      	subhi	r3, #3
 80021d2:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 80021d4:	2101      	movs	r1, #1
 80021d6:	fa01 f003 	lsl.w	r0, r1, r3

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80021da:	4091      	lsls	r1, r2
 80021dc:	3901      	subs	r1, #1
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 80021de:	3801      	subs	r0, #1

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80021e0:	400c      	ands	r4, r1
 80021e2:	409c      	lsls	r4, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 80021e4:	4006      	ands	r6, r0
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 80021e6:	2d00      	cmp	r5, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 80021e8:	ea44 0406 	orr.w	r4, r4, r6
 80021ec:	ea4f 1404 	mov.w	r4, r4, lsl #4
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80021f0:	bfaf      	iteee	ge
 80021f2:	f105 4560 	addge.w	r5, r5, #3758096384	; 0xe0000000
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80021f6:	f005 050f 	andlt.w	r5, r5, #15
 80021fa:	4b07      	ldrlt	r3, [pc, #28]	; (8002218 <HAL_NVIC_SetPriority+0x80>)
 80021fc:	b2e4      	uxtblt	r4, r4
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80021fe:	bfa5      	ittet	ge
 8002200:	f505 4561 	addge.w	r5, r5, #57600	; 0xe100
 8002204:	b2e4      	uxtbge	r4, r4
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002206:	555c      	strblt	r4, [r3, r5]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002208:	f885 4300 	strbge.w	r4, [r5, #768]	; 0x300
 800220c:	bd70      	pop	{r4, r5, r6, pc}
 800220e:	bf00      	nop
 8002210:	08007f61 	.word	0x08007f61
 8002214:	e000ed00 	.word	0xe000ed00
 8002218:	e000ed14 	.word	0xe000ed14

0800221c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800221e:	1e04      	subs	r4, r0, #0
 8002220:	da03      	bge.n	800222a <HAL_NVIC_EnableIRQ+0xe>
 8002222:	4806      	ldr	r0, [pc, #24]	; (800223c <HAL_NVIC_EnableIRQ+0x20>)
 8002224:	21d0      	movs	r1, #208	; 0xd0
 8002226:	f7ff f93d 	bl	80014a4 <assert_failed>
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800222a:	0961      	lsrs	r1, r4, #5
 800222c:	2301      	movs	r3, #1
 800222e:	f004 041f 	and.w	r4, r4, #31
 8002232:	4a03      	ldr	r2, [pc, #12]	; (8002240 <HAL_NVIC_EnableIRQ+0x24>)
 8002234:	40a3      	lsls	r3, r4
 8002236:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800223a:	bd10      	pop	{r4, pc}
 800223c:	08007f61 	.word	0x08007f61
 8002240:	e000e100 	.word	0xe000e100

08002244 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8002244:	3801      	subs	r0, #1
 8002246:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800224a:	bf3f      	itttt	cc
 800224c:	4b06      	ldrcc	r3, [pc, #24]	; (8002268 <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800224e:	4a07      	ldrcc	r2, [pc, #28]	; (800226c <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002250:	6058      	strcc	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002252:	21f0      	movcc	r1, #240	; 0xf0
 8002254:	bf3f      	itttt	cc
 8002256:	f882 1023 	strbcc.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800225a:	2000      	movcc	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225c:	2207      	movcc	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800225e:	6098      	strcc	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002260:	bf34      	ite	cc
 8002262:	601a      	strcc	r2, [r3, #0]
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8002264:	2001      	movcs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002266:	4770      	bx	lr
 8002268:	e000e010 	.word	0xe000e010
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmpreg = 0x00;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 8002274:	6842      	ldr	r2, [r0, #4]
 8002276:	4b62      	ldr	r3, [pc, #392]	; (8002400 <UART_SetConfig+0x190>)
 8002278:	429a      	cmp	r2, r3
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800227a:	4604      	mov	r4, r0
  uint32_t tmpreg = 0x00;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 800227c:	d904      	bls.n	8002288 <UART_SetConfig+0x18>
 800227e:	4861      	ldr	r0, [pc, #388]	; (8002404 <UART_SetConfig+0x194>)
 8002280:	f240 712e 	movw	r1, #1838	; 0x72e
 8002284:	f7ff f90e 	bl	80014a4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002288:	68e3      	ldr	r3, [r4, #12]
 800228a:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800228e:	d004      	beq.n	800229a <UART_SetConfig+0x2a>
 8002290:	485c      	ldr	r0, [pc, #368]	; (8002404 <UART_SetConfig+0x194>)
 8002292:	f240 712f 	movw	r1, #1839	; 0x72f
 8002296:	f7ff f905 	bl	80014a4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800229a:	6923      	ldr	r3, [r4, #16]
 800229c:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80022a0:	d007      	beq.n	80022b2 <UART_SetConfig+0x42>
 80022a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80022a6:	d004      	beq.n	80022b2 <UART_SetConfig+0x42>
 80022a8:	4856      	ldr	r0, [pc, #344]	; (8002404 <UART_SetConfig+0x194>)
 80022aa:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 80022ae:	f7ff f8f9 	bl	80014a4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80022b2:	6962      	ldr	r2, [r4, #20]
 80022b4:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80022b8:	4013      	ands	r3, r2
 80022ba:	b903      	cbnz	r3, 80022be <UART_SetConfig+0x4e>
 80022bc:	b922      	cbnz	r2, 80022c8 <UART_SetConfig+0x58>
 80022be:	4851      	ldr	r0, [pc, #324]	; (8002404 <UART_SetConfig+0x194>)
 80022c0:	f240 7131 	movw	r1, #1841	; 0x731
 80022c4:	f7ff f8ee 	bl	80014a4 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80022c8:	6826      	ldr	r6, [r4, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ca:	6921      	ldr	r1, [r4, #16]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80022cc:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ce:	69e0      	ldr	r0, [r4, #28]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80022d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80022d4:	68e3      	ldr	r3, [r4, #12]
 80022d6:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022d8:	68a2      	ldr	r2, [r4, #8]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 80022da:	6133      	str	r3, [r6, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80022dc:	68f3      	ldr	r3, [r6, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022de:	4311      	orrs	r1, r2
 80022e0:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80022e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022e6:	430a      	orrs	r2, r1
 80022e8:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80022ea:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ee:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 80022f0:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80022f2:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80022f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80022f8:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022fa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80022fe:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 8002302:	6173      	str	r3, [r6, #20]
 8002304:	4b40      	ldr	r3, [pc, #256]	; (8002408 <UART_SetConfig+0x198>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002306:	d136      	bne.n	8002376 <UART_SetConfig+0x106>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002308:	429e      	cmp	r6, r3
 800230a:	d003      	beq.n	8002314 <UART_SetConfig+0xa4>
 800230c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002310:	429e      	cmp	r6, r3
 8002312:	d116      	bne.n	8002342 <UART_SetConfig+0xd2>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002314:	f7ff fe40 	bl	8001f98 <HAL_RCC_GetPCLK2Freq>
 8002318:	6867      	ldr	r7, [r4, #4]
 800231a:	2519      	movs	r5, #25
 800231c:	4368      	muls	r0, r5
 800231e:	007f      	lsls	r7, r7, #1
 8002320:	fbb0 f7f7 	udiv	r7, r0, r7
 8002324:	f7ff fe38 	bl	8001f98 <HAL_RCC_GetPCLK2Freq>
 8002328:	6862      	ldr	r2, [r4, #4]
 800232a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800232e:	4368      	muls	r0, r5
 8002330:	fbb7 f7f8 	udiv	r7, r7, r8
 8002334:	0052      	lsls	r2, r2, #1
 8002336:	013f      	lsls	r7, r7, #4
 8002338:	fbb0 f9f2 	udiv	r9, r0, r2
 800233c:	f7ff fe2c 	bl	8001f98 <HAL_RCC_GetPCLK2Freq>
 8002340:	e015      	b.n	800236e <UART_SetConfig+0xfe>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002342:	f7ff fe11 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8002346:	6867      	ldr	r7, [r4, #4]
 8002348:	2519      	movs	r5, #25
 800234a:	4368      	muls	r0, r5
 800234c:	007f      	lsls	r7, r7, #1
 800234e:	fbb0 f7f7 	udiv	r7, r0, r7
 8002352:	f7ff fe09 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8002356:	6862      	ldr	r2, [r4, #4]
 8002358:	f04f 0864 	mov.w	r8, #100	; 0x64
 800235c:	4368      	muls	r0, r5
 800235e:	fbb7 f7f8 	udiv	r7, r7, r8
 8002362:	0052      	lsls	r2, r2, #1
 8002364:	013f      	lsls	r7, r7, #4
 8002366:	fbb0 f9f2 	udiv	r9, r0, r2
 800236a:	f7ff fdfd 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 800236e:	4345      	muls	r5, r0
 8002370:	6860      	ldr	r0, [r4, #4]
 8002372:	0040      	lsls	r0, r0, #1
 8002374:	e034      	b.n	80023e0 <UART_SetConfig+0x170>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002376:	429e      	cmp	r6, r3
 8002378:	d002      	beq.n	8002380 <UART_SetConfig+0x110>
 800237a:	4b24      	ldr	r3, [pc, #144]	; (800240c <UART_SetConfig+0x19c>)
 800237c:	429e      	cmp	r6, r3
 800237e:	d116      	bne.n	80023ae <UART_SetConfig+0x13e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002380:	f7ff fe0a 	bl	8001f98 <HAL_RCC_GetPCLK2Freq>
 8002384:	6867      	ldr	r7, [r4, #4]
 8002386:	2519      	movs	r5, #25
 8002388:	4368      	muls	r0, r5
 800238a:	00bf      	lsls	r7, r7, #2
 800238c:	fbb0 f7f7 	udiv	r7, r0, r7
 8002390:	f7ff fe02 	bl	8001f98 <HAL_RCC_GetPCLK2Freq>
 8002394:	6862      	ldr	r2, [r4, #4]
 8002396:	f04f 0864 	mov.w	r8, #100	; 0x64
 800239a:	4368      	muls	r0, r5
 800239c:	fbb7 f7f8 	udiv	r7, r7, r8
 80023a0:	0092      	lsls	r2, r2, #2
 80023a2:	013f      	lsls	r7, r7, #4
 80023a4:	fbb0 f9f2 	udiv	r9, r0, r2
 80023a8:	f7ff fdf6 	bl	8001f98 <HAL_RCC_GetPCLK2Freq>
 80023ac:	e015      	b.n	80023da <UART_SetConfig+0x16a>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80023ae:	f7ff fddb 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 80023b2:	6867      	ldr	r7, [r4, #4]
 80023b4:	2519      	movs	r5, #25
 80023b6:	4368      	muls	r0, r5
 80023b8:	00bf      	lsls	r7, r7, #2
 80023ba:	fbb0 f7f7 	udiv	r7, r0, r7
 80023be:	f7ff fdd3 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 80023c2:	6862      	ldr	r2, [r4, #4]
 80023c4:	f04f 0864 	mov.w	r8, #100	; 0x64
 80023c8:	4368      	muls	r0, r5
 80023ca:	fbb7 f7f8 	udiv	r7, r7, r8
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	013f      	lsls	r7, r7, #4
 80023d2:	fbb0 f9f2 	udiv	r9, r0, r2
 80023d6:	f7ff fdc7 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 80023da:	4345      	muls	r5, r0
 80023dc:	6860      	ldr	r0, [r4, #4]
 80023de:	0080      	lsls	r0, r0, #2
 80023e0:	fbb5 f0f0 	udiv	r0, r5, r0
 80023e4:	fbb0 f0f8 	udiv	r0, r0, r8
 80023e8:	fb08 9210 	mls	r2, r8, r0, r9
 80023ec:	0112      	lsls	r2, r2, #4
 80023ee:	3232      	adds	r2, #50	; 0x32
 80023f0:	fbb2 f3f8 	udiv	r3, r2, r8
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	433b      	orrs	r3, r7
 80023fa:	60b3      	str	r3, [r6, #8]
 80023fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002400:	00a037a0 	.word	0x00a037a0
 8002404:	08007fb3 	.word	0x08007fb3
 8002408:	40011000 	.word	0x40011000
 800240c:	40011400 	.word	0x40011400

08002410 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002410:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002412:	4604      	mov	r4, r0
 8002414:	2800      	cmp	r0, #0
 8002416:	d06c      	beq.n	80024f2 <HAL_UART_Init+0xe2>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002418:	6981      	ldr	r1, [r0, #24]
 800241a:	6803      	ldr	r3, [r0, #0]
 800241c:	4a36      	ldr	r2, [pc, #216]	; (80024f8 <HAL_UART_Init+0xe8>)
 800241e:	b1c1      	cbz	r1, 8002452 <HAL_UART_Init+0x42>
  { 
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002420:	4293      	cmp	r3, r2
 8002422:	d00f      	beq.n	8002444 <HAL_UART_Init+0x34>
 8002424:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8002428:	4293      	cmp	r3, r2
 800242a:	d00b      	beq.n	8002444 <HAL_UART_Init+0x34>
 800242c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002430:	4293      	cmp	r3, r2
 8002432:	d007      	beq.n	8002444 <HAL_UART_Init+0x34>
 8002434:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 8002438:	4293      	cmp	r3, r2
 800243a:	d003      	beq.n	8002444 <HAL_UART_Init+0x34>
 800243c:	482f      	ldr	r0, [pc, #188]	; (80024fc <HAL_UART_Init+0xec>)
 800243e:	21fc      	movs	r1, #252	; 0xfc
 8002440:	f7ff f830 	bl	80014a4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002444:	69a3      	ldr	r3, [r4, #24]
 8002446:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800244a:	d01c      	beq.n	8002486 <HAL_UART_Init+0x76>
 800244c:	482b      	ldr	r0, [pc, #172]	; (80024fc <HAL_UART_Init+0xec>)
 800244e:	21fd      	movs	r1, #253	; 0xfd
 8002450:	e017      	b.n	8002482 <HAL_UART_Init+0x72>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002452:	4293      	cmp	r3, r2
 8002454:	d017      	beq.n	8002486 <HAL_UART_Init+0x76>
 8002456:	4a2a      	ldr	r2, [pc, #168]	; (8002500 <HAL_UART_Init+0xf0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d014      	beq.n	8002486 <HAL_UART_Init+0x76>
 800245c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002460:	4293      	cmp	r3, r2
 8002462:	d010      	beq.n	8002486 <HAL_UART_Init+0x76>
 8002464:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002468:	4293      	cmp	r3, r2
 800246a:	d00c      	beq.n	8002486 <HAL_UART_Init+0x76>
 800246c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002470:	4293      	cmp	r3, r2
 8002472:	d008      	beq.n	8002486 <HAL_UART_Init+0x76>
 8002474:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8002478:	4293      	cmp	r3, r2
 800247a:	d004      	beq.n	8002486 <HAL_UART_Init+0x76>
 800247c:	481f      	ldr	r0, [pc, #124]	; (80024fc <HAL_UART_Init+0xec>)
 800247e:	f240 1101 	movw	r1, #257	; 0x101
 8002482:	f7ff f80f 	bl	80014a4 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002486:	68a3      	ldr	r3, [r4, #8]
 8002488:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800248c:	d004      	beq.n	8002498 <HAL_UART_Init+0x88>
 800248e:	481b      	ldr	r0, [pc, #108]	; (80024fc <HAL_UART_Init+0xec>)
 8002490:	f240 1103 	movw	r1, #259	; 0x103
 8002494:	f7ff f806 	bl	80014a4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8002498:	69e3      	ldr	r3, [r4, #28]
 800249a:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800249e:	d004      	beq.n	80024aa <HAL_UART_Init+0x9a>
 80024a0:	4816      	ldr	r0, [pc, #88]	; (80024fc <HAL_UART_Init+0xec>)
 80024a2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80024a6:	f7fe fffd 	bl	80014a4 <assert_failed>
  
  if(huart->State == HAL_UART_STATE_RESET)
 80024aa:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80024ae:	b913      	cbnz	r3, 80024b6 <HAL_UART_Init+0xa6>
  {  
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80024b0:	4620      	mov	r0, r4
 80024b2:	f7ff f801 	bl	80014b8 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024b6:	6822      	ldr	r2, [r4, #0]
  {  
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->State = HAL_UART_STATE_BUSY;
 80024b8:	2302      	movs	r3, #2
 80024ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024be:	68d3      	ldr	r3, [r2, #12]
 80024c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024c4:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024c6:	4620      	mov	r0, r4
 80024c8:	f7ff fed2 	bl	8002270 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024d4:	611a      	str	r2, [r3, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024dc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024e4:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e6:	2000      	movs	r0, #0
  huart->State= HAL_UART_STATE_READY;
 80024e8:	2301      	movs	r3, #1
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ea:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80024ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 80024f0:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 80024f2:	2001      	movs	r0, #1
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 80024f4:	bd10      	pop	{r4, pc}
 80024f6:	bf00      	nop
 80024f8:	40011000 	.word	0x40011000
 80024fc:	08007fb3 	.word	0x08007fb3
 8002500:	40004400 	.word	0x40004400

08002504 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002504:	4770      	bx	lr

08002506 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002506:	4770      	bx	lr

08002508 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002508:	4770      	bx	lr

0800250a <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800250a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t tmp1 = 0, tmp2 = 0;

  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 800250c:	6803      	ldr	r3, [r0, #0]
 800250e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8002510:	68da      	ldr	r2, [r3, #12]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002512:	07c9      	lsls	r1, r1, #31
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002514:	4604      	mov	r4, r0
  uint32_t tmp1 = 0, tmp2 = 0;

  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002516:	d50a      	bpl.n	800252e <HAL_UART_IRQHandler+0x24>
 8002518:	05d0      	lsls	r0, r2, #23
 800251a:	d508      	bpl.n	800252e <HAL_UART_IRQHandler+0x24>
  { 
    __HAL_UART_CLEAR_PEFLAG(huart);
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	9200      	str	r2, [sp, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	9200      	str	r2, [sp, #0]
 8002524:	9a00      	ldr	r2, [sp, #0]
    
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002526:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	63e2      	str	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 800252e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002530:	695a      	ldr	r2, [r3, #20]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002532:	0789      	lsls	r1, r1, #30
 8002534:	d50a      	bpl.n	800254c <HAL_UART_IRQHandler+0x42>
 8002536:	07d0      	lsls	r0, r2, #31
 8002538:	d508      	bpl.n	800254c <HAL_UART_IRQHandler+0x42>
  { 
    __HAL_UART_CLEAR_FEFLAG(huart);
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	9201      	str	r2, [sp, #4]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	9201      	str	r2, [sp, #4]
 8002542:	9a01      	ldr	r2, [sp, #4]
    
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002544:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002546:	f042 0204 	orr.w	r2, r2, #4
 800254a:	63e2      	str	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 800254c:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800254e:	695a      	ldr	r2, [r3, #20]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002550:	0749      	lsls	r1, r1, #29
 8002552:	d50a      	bpl.n	800256a <HAL_UART_IRQHandler+0x60>
 8002554:	07d0      	lsls	r0, r2, #31
 8002556:	d508      	bpl.n	800256a <HAL_UART_IRQHandler+0x60>
  { 
    __HAL_UART_CLEAR_NEFLAG(huart);
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	9202      	str	r2, [sp, #8]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	9202      	str	r2, [sp, #8]
 8002560:	9a02      	ldr	r2, [sp, #8]
    
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002562:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002564:	f042 0202 	orr.w	r2, r2, #2
 8002568:	63e2      	str	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 800256a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800256c:	695a      	ldr	r2, [r3, #20]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 800256e:	0709      	lsls	r1, r1, #28
 8002570:	d50a      	bpl.n	8002588 <HAL_UART_IRQHandler+0x7e>
 8002572:	07d0      	lsls	r0, r2, #31
 8002574:	d508      	bpl.n	8002588 <HAL_UART_IRQHandler+0x7e>
  { 
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	9203      	str	r2, [sp, #12]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	9203      	str	r2, [sp, #12]
 800257e:	9a03      	ldr	r2, [sp, #12]
    
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002580:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002582:	f042 0208 	orr.w	r2, r2, #8
 8002586:	63e2      	str	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8002588:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 800258a:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 800258c:	0689      	lsls	r1, r1, #26
 800258e:	d542      	bpl.n	8002616 <HAL_UART_IRQHandler+0x10c>
 8002590:	0690      	lsls	r0, r2, #26
 8002592:	d540      	bpl.n	8002616 <HAL_UART_IRQHandler+0x10c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp1 = 0;
  
  tmp1 = huart->State; 
 8002594:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp1 == HAL_UART_STATE_BUSY_RX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 8002598:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800259c:	2a22      	cmp	r2, #34	; 0x22
 800259e:	d13a      	bne.n	8002616 <HAL_UART_IRQHandler+0x10c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025a0:	68a2      	ldr	r2, [r4, #8]
 80025a2:	6921      	ldr	r1, [r4, #16]
 80025a4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80025a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80025aa:	d10b      	bne.n	80025c4 <HAL_UART_IRQHandler+0xba>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025ac:	685b      	ldr	r3, [r3, #4]
  if((tmp1 == HAL_UART_STATE_BUSY_RX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 80025ae:	b921      	cbnz	r1, 80025ba <HAL_UART_IRQHandler+0xb0>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b4:	f822 3b02 	strh.w	r3, [r2], #2
 80025b8:	e002      	b.n	80025c0 <HAL_UART_IRQHandler+0xb6>
        huart->pRxBuffPtr += 2;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f822 3b01 	strh.w	r3, [r2], #1
        huart->pRxBuffPtr += 1;
 80025c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80025c2:	e00a      	b.n	80025da <HAL_UART_IRQHandler+0xd0>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80025c4:	b919      	cbnz	r1, 80025ce <HAL_UART_IRQHandler+0xc4>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025c6:	1c51      	adds	r1, r2, #1
 80025c8:	62a1      	str	r1, [r4, #40]	; 0x28
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	e004      	b.n	80025d8 <HAL_UART_IRQHandler+0xce>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	1c51      	adds	r1, r2, #1
 80025d2:	62a1      	str	r1, [r4, #40]	; 0x28
 80025d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025d8:	7013      	strb	r3, [r2, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 80025da:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29b      	uxth	r3, r3
 80025e0:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80025e2:	b9c3      	cbnz	r3, 8002616 <HAL_UART_IRQHandler+0x10c>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025e4:	6823      	ldr	r3, [r4, #0]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	f022 0220 	bic.w	r2, r2, #32
 80025ec:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80025ee:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80025f2:	2a32      	cmp	r2, #50	; 0x32
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025f4:	bf1f      	itttt	ne
 80025f6:	68da      	ldrne	r2, [r3, #12]
 80025f8:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 80025fc:	60da      	strne	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025fe:	695a      	ldrne	r2, [r3, #20]
 8002600:	bf1b      	ittet	ne
 8002602:	f022 0201 	bicne.w	r2, r2, #1
 8002606:	615a      	strne	r2, [r3, #20]
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 8002608:	2312      	moveq	r3, #18
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

        huart->State = HAL_UART_STATE_READY;
 800260a:	2301      	movne	r3, #1
 800260c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 8002610:	4620      	mov	r0, r4
 8002612:	f7ff ff78 	bl	8002506 <HAL_UART_RxCpltCallback>
  if((tmp1 != RESET) && (tmp2 != RESET))
  { 
    UART_Receive_IT(huart);
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 800261a:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 800261c:	0609      	lsls	r1, r1, #24
 800261e:	d528      	bpl.n	8002672 <HAL_UART_IRQHandler+0x168>
 8002620:	0610      	lsls	r0, r2, #24
 8002622:	d526      	bpl.n	8002672 <HAL_UART_IRQHandler+0x168>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp1 = 0;
  
  tmp1 = huart->State;
 8002624:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp1 == HAL_UART_STATE_BUSY_TX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 8002628:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800262c:	2a12      	cmp	r2, #18
 800262e:	d120      	bne.n	8002672 <HAL_UART_IRQHandler+0x168>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002630:	68a2      	ldr	r2, [r4, #8]
 8002632:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002636:	6a22      	ldr	r2, [r4, #32]
 8002638:	d10a      	bne.n	8002650 <HAL_UART_IRQHandler+0x146>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800263a:	8811      	ldrh	r1, [r2, #0]
 800263c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002640:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002642:	6921      	ldr	r1, [r4, #16]
 8002644:	b909      	cbnz	r1, 800264a <HAL_UART_IRQHandler+0x140>
      {
        huart->pTxBuffPtr += 2;
 8002646:	3202      	adds	r2, #2
 8002648:	e000      	b.n	800264c <HAL_UART_IRQHandler+0x142>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 800264a:	3201      	adds	r2, #1
 800264c:	6222      	str	r2, [r4, #32]
 800264e:	e003      	b.n	8002658 <HAL_UART_IRQHandler+0x14e>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002650:	1c51      	adds	r1, r2, #1
 8002652:	6221      	str	r1, [r4, #32]
 8002654:	7812      	ldrb	r2, [r2, #0]
 8002656:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0)
 8002658:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800265a:	3a01      	subs	r2, #1
 800265c:	b292      	uxth	r2, r2
 800265e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002660:	b93a      	cbnz	r2, 8002672 <HAL_UART_IRQHandler+0x168>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002668:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002670:	60da      	str	r2, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
  {
    UART_Transmit_IT(huart);
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8002672:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8002674:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002676:	0649      	lsls	r1, r1, #25
 8002678:	d519      	bpl.n	80026ae <HAL_UART_IRQHandler+0x1a4>
 800267a:	0652      	lsls	r2, r2, #25
 800267c:	d517      	bpl.n	80026ae <HAL_UART_IRQHandler+0x1a4>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002684:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002686:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800268a:	2a32      	cmp	r2, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Parity Error Interrupt */
    __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800268c:	bf1f      	itttt	ne
 800268e:	68da      	ldrne	r2, [r3, #12]
 8002690:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8002694:	60da      	strne	r2, [r3, #12]

    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002696:	695a      	ldrne	r2, [r3, #20]
 8002698:	bf1b      	ittet	ne
 800269a:	f022 0201 	bicne.w	r2, r2, #1
 800269e:	615a      	strne	r2, [r3, #20]
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 80026a0:	2322      	moveq	r3, #34	; 0x22
    __HAL_UART_DISABLE_IT(huart, UART_IT_PE);

    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

    huart->State = HAL_UART_STATE_READY;
 80026a2:	2301      	movne	r3, #1
 80026a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 80026a8:	4620      	mov	r0, r4
 80026aa:	f7ff ff2b 	bl	8002504 <HAL_UART_TxCpltCallback>
  if((tmp1 != RESET) && (tmp2 != RESET))
  {
    UART_EndTransmit_IT(huart);
  }

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026b0:	b12b      	cbz	r3, 80026be <HAL_UART_IRQHandler+0x1b4>
  {
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 80026b2:	2301      	movs	r3, #1
 80026b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 80026b8:	4620      	mov	r0, r4
 80026ba:	f7ff ff25 	bl	8002508 <HAL_UART_ErrorCallback>
  }  
}
 80026be:	b004      	add	sp, #16
 80026c0:	bd10      	pop	{r4, pc}
	...

080026c4 <FSMC_NORSRAM_Init>:
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
  uint32_t tmpr = 0;
    
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_BANK(Init->NSBank));
 80026c4:	680b      	ldr	r3, [r1, #0]
 80026c6:	f033 0306 	bics.w	r3, r3, #6
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80026ca:	b570      	push	{r4, r5, r6, lr}
 80026cc:	4605      	mov	r5, r0
 80026ce:	460c      	mov	r4, r1
  uint32_t tmpr = 0;
    
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_BANK(Init->NSBank));
 80026d0:	d003      	beq.n	80026da <FSMC_NORSRAM_Init+0x16>
 80026d2:	4847      	ldr	r0, [pc, #284]	; (80027f0 <FSMC_NORSRAM_Init+0x12c>)
 80026d4:	2197      	movs	r1, #151	; 0x97
 80026d6:	f7fe fee5 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_MUX(Init->DataAddressMux));
 80026da:	6863      	ldr	r3, [r4, #4]
 80026dc:	f033 0302 	bics.w	r3, r3, #2
 80026e0:	d003      	beq.n	80026ea <FSMC_NORSRAM_Init+0x26>
 80026e2:	4843      	ldr	r0, [pc, #268]	; (80027f0 <FSMC_NORSRAM_Init+0x12c>)
 80026e4:	2198      	movs	r1, #152	; 0x98
 80026e6:	f7fe fedd 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_MEMORY(Init->MemoryType));
 80026ea:	68a3      	ldr	r3, [r4, #8]
 80026ec:	f033 0204 	bics.w	r2, r3, #4
 80026f0:	d005      	beq.n	80026fe <FSMC_NORSRAM_Init+0x3a>
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d003      	beq.n	80026fe <FSMC_NORSRAM_Init+0x3a>
 80026f6:	483e      	ldr	r0, [pc, #248]	; (80027f0 <FSMC_NORSRAM_Init+0x12c>)
 80026f8:	2199      	movs	r1, #153	; 0x99
 80026fa:	f7fe fed3 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_NORSRAM_MEMORY_WIDTH(Init->MemoryDataWidth));
 80026fe:	68e3      	ldr	r3, [r4, #12]
 8002700:	f033 0210 	bics.w	r2, r3, #16
 8002704:	d005      	beq.n	8002712 <FSMC_NORSRAM_Init+0x4e>
 8002706:	2b20      	cmp	r3, #32
 8002708:	d003      	beq.n	8002712 <FSMC_NORSRAM_Init+0x4e>
 800270a:	4839      	ldr	r0, [pc, #228]	; (80027f0 <FSMC_NORSRAM_Init+0x12c>)
 800270c:	219a      	movs	r1, #154	; 0x9a
 800270e:	f7fe fec9 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_BURSTMODE(Init->BurstAccessMode));
 8002712:	6923      	ldr	r3, [r4, #16]
 8002714:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8002718:	d003      	beq.n	8002722 <FSMC_NORSRAM_Init+0x5e>
 800271a:	4835      	ldr	r0, [pc, #212]	; (80027f0 <FSMC_NORSRAM_Init+0x12c>)
 800271c:	219b      	movs	r1, #155	; 0x9b
 800271e:	f7fe fec1 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_WAIT_POLARITY(Init->WaitSignalPolarity));
 8002722:	6963      	ldr	r3, [r4, #20]
 8002724:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8002728:	d003      	beq.n	8002732 <FSMC_NORSRAM_Init+0x6e>
 800272a:	4831      	ldr	r0, [pc, #196]	; (80027f0 <FSMC_NORSRAM_Init+0x12c>)
 800272c:	219c      	movs	r1, #156	; 0x9c
 800272e:	f7fe feb9 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_WRAP_MODE(Init->WrapMode));
 8002732:	69a3      	ldr	r3, [r4, #24]
 8002734:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8002738:	d003      	beq.n	8002742 <FSMC_NORSRAM_Init+0x7e>
 800273a:	482d      	ldr	r0, [pc, #180]	; (80027f0 <FSMC_NORSRAM_Init+0x12c>)
 800273c:	219d      	movs	r1, #157	; 0x9d
 800273e:	f7fe feb1 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(Init->WaitSignalActive));
 8002742:	69e3      	ldr	r3, [r4, #28]
 8002744:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8002748:	d003      	beq.n	8002752 <FSMC_NORSRAM_Init+0x8e>
 800274a:	4829      	ldr	r0, [pc, #164]	; (80027f0 <FSMC_NORSRAM_Init+0x12c>)
 800274c:	219e      	movs	r1, #158	; 0x9e
 800274e:	f7fe fea9 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_WRITE_OPERATION(Init->WriteOperation));
 8002752:	6a23      	ldr	r3, [r4, #32]
 8002754:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8002758:	d003      	beq.n	8002762 <FSMC_NORSRAM_Init+0x9e>
 800275a:	4825      	ldr	r0, [pc, #148]	; (80027f0 <FSMC_NORSRAM_Init+0x12c>)
 800275c:	219f      	movs	r1, #159	; 0x9f
 800275e:	f7fe fea1 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_WAITE_SIGNAL(Init->WaitSignal));
 8002762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002764:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8002768:	d003      	beq.n	8002772 <FSMC_NORSRAM_Init+0xae>
 800276a:	4821      	ldr	r0, [pc, #132]	; (80027f0 <FSMC_NORSRAM_Init+0x12c>)
 800276c:	21a0      	movs	r1, #160	; 0xa0
 800276e:	f7fe fe99 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
 8002772:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002774:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8002778:	d003      	beq.n	8002782 <FSMC_NORSRAM_Init+0xbe>
 800277a:	481d      	ldr	r0, [pc, #116]	; (80027f0 <FSMC_NORSRAM_Init+0x12c>)
 800277c:	21a1      	movs	r1, #161	; 0xa1
 800277e:	f7fe fe91 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
 8002782:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002784:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8002788:	d003      	beq.n	8002792 <FSMC_NORSRAM_Init+0xce>
 800278a:	4819      	ldr	r0, [pc, #100]	; (80027f0 <FSMC_NORSRAM_Init+0x12c>)
 800278c:	21a2      	movs	r1, #162	; 0xa2
 800278e:	f7fe fe89 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
 8002792:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002794:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8002798:	d003      	beq.n	80027a2 <FSMC_NORSRAM_Init+0xde>
 800279a:	4815      	ldr	r0, [pc, #84]	; (80027f0 <FSMC_NORSRAM_Init+0x12c>)
 800279c:	21a3      	movs	r1, #163	; 0xa3
 800279e:	f7fe fe81 	bl	80014a4 <assert_failed>
 80027a2:	6820      	ldr	r0, [r4, #0]
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];

  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80027a4:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <FSMC_NORSRAM_Init+0x130>)
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80027a6:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
                     Init->MemoryType           |\
 80027aa:	68a6      	ldr	r6, [r4, #8]
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];

  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80027ac:	401a      	ands	r2, r3
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80027ae:	6863      	ldr	r3, [r4, #4]
 80027b0:	ea46 0103 	orr.w	r1, r6, r3
                     Init->MemoryType           |\
 80027b4:	68e3      	ldr	r3, [r4, #12]
 80027b6:	4319      	orrs	r1, r3
                     Init->MemoryDataWidth      |\
 80027b8:	6923      	ldr	r3, [r4, #16]
 80027ba:	4319      	orrs	r1, r3
                     Init->BurstAccessMode      |\
 80027bc:	6963      	ldr	r3, [r4, #20]
 80027be:	4319      	orrs	r1, r3
                     Init->WaitSignalPolarity   |\
 80027c0:	69a3      	ldr	r3, [r4, #24]
 80027c2:	4319      	orrs	r1, r3
                     Init->WrapMode             |\
 80027c4:	69e3      	ldr	r3, [r4, #28]
 80027c6:	4319      	orrs	r1, r3
                     Init->WaitSignalActive     |\
 80027c8:	6a23      	ldr	r3, [r4, #32]
 80027ca:	4319      	orrs	r1, r3
                     Init->WriteOperation       |\
 80027cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027ce:	4319      	orrs	r1, r3
                     Init->WaitSignal           |\
 80027d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027d2:	4319      	orrs	r1, r3
                     Init->ExtendedMode         |\
 80027d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027d6:	430b      	orrs	r3, r1
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80027d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80027da:	430b      	orrs	r3, r1
 80027dc:	4313      	orrs	r3, r2
                     Init->ExtendedMode         |\
                     Init->AsynchronousWait     |\
                     Init->WriteBurst
                     );
                    
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80027de:	2e08      	cmp	r6, #8
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80027e0:	bf08      	it	eq
 80027e2:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
  }
  
  Device->BTCR[Init->NSBank] = tmpr;                   
 80027e6:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
  
  return HAL_OK;
}
 80027ea:	2000      	movs	r0, #0
 80027ec:	bd70      	pop	{r4, r5, r6, pc}
 80027ee:	bf00      	nop
 80027f0:	08008003 	.word	0x08008003
 80027f4:	fff70080 	.word	0xfff70080

080027f8 <FSMC_NORSRAM_Timing_Init>:
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
  uint32_t tmpr = 0;
  
  /* Check the parameters */
  assert_param(IS_FSMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 80027f8:	680b      	ldr	r3, [r1, #0]
 80027fa:	2b0f      	cmp	r3, #15
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80027fc:	b570      	push	{r4, r5, r6, lr}
 80027fe:	4605      	mov	r5, r0
 8002800:	460c      	mov	r4, r1
 8002802:	4616      	mov	r6, r2
  uint32_t tmpr = 0;
  
  /* Check the parameters */
  assert_param(IS_FSMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 8002804:	d903      	bls.n	800280e <FSMC_NORSRAM_Timing_Init+0x16>
 8002806:	4828      	ldr	r0, [pc, #160]	; (80028a8 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8002808:	21f8      	movs	r1, #248	; 0xf8
 800280a:	f7fe fe4b 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_ADDRESS_HOLD_TIME(Timing->AddressHoldTime));
 800280e:	6863      	ldr	r3, [r4, #4]
 8002810:	3b01      	subs	r3, #1
 8002812:	2b0e      	cmp	r3, #14
 8002814:	d903      	bls.n	800281e <FSMC_NORSRAM_Timing_Init+0x26>
 8002816:	4824      	ldr	r0, [pc, #144]	; (80028a8 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8002818:	21f9      	movs	r1, #249	; 0xf9
 800281a:	f7fe fe43 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_DATASETUP_TIME(Timing->DataSetupTime));
 800281e:	68a3      	ldr	r3, [r4, #8]
 8002820:	3b01      	subs	r3, #1
 8002822:	2bfe      	cmp	r3, #254	; 0xfe
 8002824:	d903      	bls.n	800282e <FSMC_NORSRAM_Timing_Init+0x36>
 8002826:	4820      	ldr	r0, [pc, #128]	; (80028a8 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8002828:	21fa      	movs	r1, #250	; 0xfa
 800282a:	f7fe fe3b 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
 800282e:	68e3      	ldr	r3, [r4, #12]
 8002830:	2b0f      	cmp	r3, #15
 8002832:	d903      	bls.n	800283c <FSMC_NORSRAM_Timing_Init+0x44>
 8002834:	481c      	ldr	r0, [pc, #112]	; (80028a8 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8002836:	21fb      	movs	r1, #251	; 0xfb
 8002838:	f7fe fe34 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_CLK_DIV(Timing->CLKDivision));
 800283c:	6923      	ldr	r3, [r4, #16]
 800283e:	3b01      	subs	r3, #1
 8002840:	2b0f      	cmp	r3, #15
 8002842:	d903      	bls.n	800284c <FSMC_NORSRAM_Timing_Init+0x54>
 8002844:	4818      	ldr	r0, [pc, #96]	; (80028a8 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8002846:	21fc      	movs	r1, #252	; 0xfc
 8002848:	f7fe fe2c 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
 800284c:	6963      	ldr	r3, [r4, #20]
 800284e:	3b01      	subs	r3, #1
 8002850:	2b10      	cmp	r3, #16
 8002852:	d903      	bls.n	800285c <FSMC_NORSRAM_Timing_Init+0x64>
 8002854:	4814      	ldr	r0, [pc, #80]	; (80028a8 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8002856:	21fd      	movs	r1, #253	; 0xfd
 8002858:	f7fe fe24 	bl	80014a4 <assert_failed>
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
 800285c:	69a3      	ldr	r3, [r4, #24]
 800285e:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8002862:	d003      	beq.n	800286c <FSMC_NORSRAM_Timing_Init+0x74>
 8002864:	4810      	ldr	r0, [pc, #64]	; (80028a8 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8002866:	21fe      	movs	r1, #254	; 0xfe
 8002868:	f7fe fe1c 	bl	80014a4 <assert_failed>
 800286c:	eb05 0286 	add.w	r2, r5, r6, lsl #2
 8002870:	69a1      	ldr	r1, [r4, #24]
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1];
 8002872:	6853      	ldr	r3, [r2, #4]
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                    ((Timing->AddressHoldTime) << 4)          |\
                    ((Timing->DataSetupTime) << 8)            |\
 8002874:	68a5      	ldr	r5, [r4, #8]
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1];

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8002876:	f003 4640 	and.w	r6, r3, #3221225472	; 0xc0000000
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	430b      	orrs	r3, r1
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                    ((Timing->AddressHoldTime) << 4)          |\
 800287e:	6861      	ldr	r1, [r4, #4]
 8002880:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8002884:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
                    ((Timing->DataSetupTime) << 8)            |\
                    ((Timing->BusTurnAroundDuration) << 16)   |\
                    (((Timing->CLKDivision)-1) << 20)         |\
 8002888:	6923      	ldr	r3, [r4, #16]
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                    ((Timing->AddressHoldTime) << 4)          |\
                    ((Timing->DataSetupTime) << 8)            |\
                    ((Timing->BusTurnAroundDuration) << 16)   |\
 800288a:	68e5      	ldr	r5, [r4, #12]
                    (((Timing->CLKDivision)-1) << 20)         |\
 800288c:	3b01      	subs	r3, #1
 800288e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8002892:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
                    (((Timing->DataLatency)-2) << 24)         |\
 8002896:	6963      	ldr	r3, [r4, #20]
 8002898:	3b02      	subs	r3, #2
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
 800289a:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 800289e:	4333      	orrs	r3, r6
                    ((Timing->BusTurnAroundDuration) << 16)   |\
                    (((Timing->CLKDivision)-1) << 20)         |\
                    (((Timing->DataLatency)-2) << 24)         |\
                    (Timing->AccessMode));
  
  Device->BTCR[Bank + 1] = tmpr; 
 80028a0:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;   
}
 80028a2:	2000      	movs	r0, #0
 80028a4:	bd70      	pop	{r4, r5, r6, pc}
 80028a6:	bf00      	nop
 80028a8:	08008003 	.word	0x08008003

080028ac <FSMC_NORSRAM_Extended_Timing_Init>:
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
  uint32_t tmpr = 0;
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80028ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	4605      	mov	r5, r0
 80028b4:	460c      	mov	r4, r1
 80028b6:	4616      	mov	r6, r2
  uint32_t tmpr = 0;
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80028b8:	d156      	bne.n	8002968 <FSMC_NORSRAM_Extended_Timing_Init+0xbc>
  {
    /* Check the parameters */  
    assert_param(IS_FSMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 80028ba:	680b      	ldr	r3, [r1, #0]
 80028bc:	2b0f      	cmp	r3, #15
 80028be:	d904      	bls.n	80028ca <FSMC_NORSRAM_Extended_Timing_Init+0x1e>
 80028c0:	482c      	ldr	r0, [pc, #176]	; (8002974 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 80028c2:	f44f 7193 	mov.w	r1, #294	; 0x126
 80028c6:	f7fe fded 	bl	80014a4 <assert_failed>
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(Timing->AddressHoldTime));
 80028ca:	6863      	ldr	r3, [r4, #4]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	2b0e      	cmp	r3, #14
 80028d0:	d904      	bls.n	80028dc <FSMC_NORSRAM_Extended_Timing_Init+0x30>
 80028d2:	4828      	ldr	r0, [pc, #160]	; (8002974 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 80028d4:	f240 1127 	movw	r1, #295	; 0x127
 80028d8:	f7fe fde4 	bl	80014a4 <assert_failed>
    assert_param(IS_FSMC_DATASETUP_TIME(Timing->DataSetupTime));
 80028dc:	68a3      	ldr	r3, [r4, #8]
 80028de:	3b01      	subs	r3, #1
 80028e0:	2bfe      	cmp	r3, #254	; 0xfe
 80028e2:	d904      	bls.n	80028ee <FSMC_NORSRAM_Extended_Timing_Init+0x42>
 80028e4:	4823      	ldr	r0, [pc, #140]	; (8002974 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 80028e6:	f44f 7194 	mov.w	r1, #296	; 0x128
 80028ea:	f7fe fddb 	bl	80014a4 <assert_failed>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
 80028ee:	68e3      	ldr	r3, [r4, #12]
 80028f0:	2b0f      	cmp	r3, #15
 80028f2:	d904      	bls.n	80028fe <FSMC_NORSRAM_Extended_Timing_Init+0x52>
 80028f4:	481f      	ldr	r0, [pc, #124]	; (8002974 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 80028f6:	f240 1129 	movw	r1, #297	; 0x129
 80028fa:	f7fe fdd3 	bl	80014a4 <assert_failed>
    assert_param(IS_FSMC_CLK_DIV(Timing->CLKDivision));
 80028fe:	6923      	ldr	r3, [r4, #16]
 8002900:	3b01      	subs	r3, #1
 8002902:	2b0f      	cmp	r3, #15
 8002904:	d904      	bls.n	8002910 <FSMC_NORSRAM_Extended_Timing_Init+0x64>
 8002906:	481b      	ldr	r0, [pc, #108]	; (8002974 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 8002908:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800290c:	f7fe fdca 	bl	80014a4 <assert_failed>
    assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
 8002910:	6963      	ldr	r3, [r4, #20]
 8002912:	3b01      	subs	r3, #1
 8002914:	2b10      	cmp	r3, #16
 8002916:	d904      	bls.n	8002922 <FSMC_NORSRAM_Extended_Timing_Init+0x76>
 8002918:	4816      	ldr	r0, [pc, #88]	; (8002974 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 800291a:	f240 112b 	movw	r1, #299	; 0x12b
 800291e:	f7fe fdc1 	bl	80014a4 <assert_failed>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
 8002922:	69a3      	ldr	r3, [r4, #24]
 8002924:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8002928:	d004      	beq.n	8002934 <FSMC_NORSRAM_Extended_Timing_Init+0x88>
 800292a:	4812      	ldr	r0, [pc, #72]	; (8002974 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 800292c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002930:	f7fe fdb8 	bl	80014a4 <assert_failed>
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8002934:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8002938:	69a2      	ldr	r2, [r4, #24]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_CLKDIV | FSMC_BWTR1_DATLAT | \
                         FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                     ((Timing->AddressHoldTime) << 4)          |\
                     ((Timing->DataSetupTime) << 8)            |\
 800293a:	68a1      	ldr	r1, [r4, #8]
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800293c:	f003 4040 	and.w	r0, r3, #3221225472	; 0xc0000000
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	4313      	orrs	r3, r2
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_CLKDIV | FSMC_BWTR1_DATLAT | \
                         FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                     ((Timing->AddressHoldTime) << 4)          |\
 8002944:	6862      	ldr	r2, [r4, #4]
 8002946:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
 800294a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                     ((Timing->DataSetupTime) << 8)            |\
                     ((Timing->BusTurnAroundDuration) << 16)   |\
                     (((Timing->CLKDivision)-1) << 20)         |\
 800294e:	6923      	ldr	r3, [r4, #16]
                         FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                     ((Timing->AddressHoldTime) << 4)          |\
                     ((Timing->DataSetupTime) << 8)            |\
                     ((Timing->BusTurnAroundDuration) << 16)   |\
 8002950:	68e1      	ldr	r1, [r4, #12]
                     (((Timing->CLKDivision)-1) << 20)         |\
 8002952:	3b01      	subs	r3, #1
 8002954:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8002958:	ea41 5203 	orr.w	r2, r1, r3, lsl #20
                     (((Timing->DataLatency)-2) << 24)         |\
 800295c:	6963      	ldr	r3, [r4, #20]
 800295e:	3b02      	subs	r3, #2
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_CLKDIV | FSMC_BWTR1_DATLAT | \
                         FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
 8002960:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8002964:	4303      	orrs	r3, r0
 8002966:	e001      	b.n	800296c <FSMC_NORSRAM_Extended_Timing_Init+0xc0>
    
    Device->BWTR[Bank] = tmpr; 
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFF;
 8002968:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800296c:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
  }   
  
  return HAL_OK;  
}
 8002970:	2000      	movs	r0, #0
 8002972:	bd70      	pop	{r4, r5, r6, pc}
 8002974:	08008003 	.word	0x08008003

08002978 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8002978:	b570      	push	{r4, r5, r6, lr}
 800297a:	460e      	mov	r6, r1
 800297c:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800297e:	4604      	mov	r4, r0
 8002980:	b1f0      	cbz	r0, 80029c0 <HAL_SRAM_Init+0x48>
  {
     return HAL_ERROR;
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8002982:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002986:	b90b      	cbnz	r3, 800298c <HAL_SRAM_Init+0x14>
  {  
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002988:	f7fe fe80 	bl	800168c <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800298c:	f104 0108 	add.w	r1, r4, #8
 8002990:	6820      	ldr	r0, [r4, #0]
 8002992:	f7ff fe97 	bl	80026c4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8002996:	4631      	mov	r1, r6
 8002998:	68a2      	ldr	r2, [r4, #8]
 800299a:	6820      	ldr	r0, [r4, #0]
 800299c:	f7ff ff2c 	bl	80027f8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80029a0:	4629      	mov	r1, r5
 80029a2:	68a2      	ldr	r2, [r4, #8]
 80029a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029a6:	6860      	ldr	r0, [r4, #4]
 80029a8:	f7ff ff80 	bl	80028ac <FSMC_NORSRAM_Extended_Timing_Init>
 80029ac:	68a1      	ldr	r1, [r4, #8]
 80029ae:	6822      	ldr	r2, [r4, #0]
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80029b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 80029bc:	2000      	movs	r0, #0
 80029be:	bd70      	pop	{r4, r5, r6, pc}
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
  {
     return HAL_ERROR;
 80029c0:	2001      	movs	r0, #1
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
  
  return HAL_OK;
}
 80029c2:	bd70      	pop	{r4, r5, r6, pc}

080029c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80029c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029c6:	4604      	mov	r4, r0
 80029c8:	2800      	cmp	r0, #0
 80029ca:	f000 80d4 	beq.w	8002b76 <HAL_DMA_Init+0x1b2>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80029ce:	6803      	ldr	r3, [r0, #0]
 80029d0:	4a6a      	ldr	r2, [pc, #424]	; (8002b7c <HAL_DMA_Init+0x1b8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d031      	beq.n	8002a3a <HAL_DMA_Init+0x76>
 80029d6:	3218      	adds	r2, #24
 80029d8:	4293      	cmp	r3, r2
 80029da:	d02e      	beq.n	8002a3a <HAL_DMA_Init+0x76>
 80029dc:	3218      	adds	r2, #24
 80029de:	4293      	cmp	r3, r2
 80029e0:	d02b      	beq.n	8002a3a <HAL_DMA_Init+0x76>
 80029e2:	3218      	adds	r2, #24
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d028      	beq.n	8002a3a <HAL_DMA_Init+0x76>
 80029e8:	3218      	adds	r2, #24
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d025      	beq.n	8002a3a <HAL_DMA_Init+0x76>
 80029ee:	3218      	adds	r2, #24
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d022      	beq.n	8002a3a <HAL_DMA_Init+0x76>
 80029f4:	3218      	adds	r2, #24
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01f      	beq.n	8002a3a <HAL_DMA_Init+0x76>
 80029fa:	3218      	adds	r2, #24
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d01c      	beq.n	8002a3a <HAL_DMA_Init+0x76>
 8002a00:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d018      	beq.n	8002a3a <HAL_DMA_Init+0x76>
 8002a08:	3218      	adds	r2, #24
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d015      	beq.n	8002a3a <HAL_DMA_Init+0x76>
 8002a0e:	3218      	adds	r2, #24
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d012      	beq.n	8002a3a <HAL_DMA_Init+0x76>
 8002a14:	3218      	adds	r2, #24
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00f      	beq.n	8002a3a <HAL_DMA_Init+0x76>
 8002a1a:	3218      	adds	r2, #24
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00c      	beq.n	8002a3a <HAL_DMA_Init+0x76>
 8002a20:	3218      	adds	r2, #24
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d009      	beq.n	8002a3a <HAL_DMA_Init+0x76>
 8002a26:	3218      	adds	r2, #24
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d006      	beq.n	8002a3a <HAL_DMA_Init+0x76>
 8002a2c:	3218      	adds	r2, #24
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d003      	beq.n	8002a3a <HAL_DMA_Init+0x76>
 8002a32:	4853      	ldr	r0, [pc, #332]	; (8002b80 <HAL_DMA_Init+0x1bc>)
 8002a34:	21bf      	movs	r1, #191	; 0xbf
 8002a36:	f7fe fd35 	bl	80014a4 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8002a3a:	6863      	ldr	r3, [r4, #4]
 8002a3c:	f033 63c0 	bics.w	r3, r3, #100663296	; 0x6000000
 8002a40:	d006      	beq.n	8002a50 <HAL_DMA_Init+0x8c>
 8002a42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a46:	d003      	beq.n	8002a50 <HAL_DMA_Init+0x8c>
 8002a48:	484d      	ldr	r0, [pc, #308]	; (8002b80 <HAL_DMA_Init+0x1bc>)
 8002a4a:	21c0      	movs	r1, #192	; 0xc0
 8002a4c:	f7fe fd2a 	bl	80014a4 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002a50:	68a3      	ldr	r3, [r4, #8]
 8002a52:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8002a56:	d005      	beq.n	8002a64 <HAL_DMA_Init+0xa0>
 8002a58:	2b80      	cmp	r3, #128	; 0x80
 8002a5a:	d003      	beq.n	8002a64 <HAL_DMA_Init+0xa0>
 8002a5c:	4848      	ldr	r0, [pc, #288]	; (8002b80 <HAL_DMA_Init+0x1bc>)
 8002a5e:	21c1      	movs	r1, #193	; 0xc1
 8002a60:	f7fe fd20 	bl	80014a4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002a64:	68e3      	ldr	r3, [r4, #12]
 8002a66:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8002a6a:	d003      	beq.n	8002a74 <HAL_DMA_Init+0xb0>
 8002a6c:	4844      	ldr	r0, [pc, #272]	; (8002b80 <HAL_DMA_Init+0x1bc>)
 8002a6e:	21c2      	movs	r1, #194	; 0xc2
 8002a70:	f7fe fd18 	bl	80014a4 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002a74:	6923      	ldr	r3, [r4, #16]
 8002a76:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8002a7a:	d003      	beq.n	8002a84 <HAL_DMA_Init+0xc0>
 8002a7c:	4840      	ldr	r0, [pc, #256]	; (8002b80 <HAL_DMA_Init+0x1bc>)
 8002a7e:	21c3      	movs	r1, #195	; 0xc3
 8002a80:	f7fe fd10 	bl	80014a4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002a84:	6963      	ldr	r3, [r4, #20]
 8002a86:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8002a8a:	d006      	beq.n	8002a9a <HAL_DMA_Init+0xd6>
 8002a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a90:	d003      	beq.n	8002a9a <HAL_DMA_Init+0xd6>
 8002a92:	483b      	ldr	r0, [pc, #236]	; (8002b80 <HAL_DMA_Init+0x1bc>)
 8002a94:	21c4      	movs	r1, #196	; 0xc4
 8002a96:	f7fe fd05 	bl	80014a4 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002a9a:	69a3      	ldr	r3, [r4, #24]
 8002a9c:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8002aa0:	d006      	beq.n	8002ab0 <HAL_DMA_Init+0xec>
 8002aa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aa6:	d003      	beq.n	8002ab0 <HAL_DMA_Init+0xec>
 8002aa8:	4835      	ldr	r0, [pc, #212]	; (8002b80 <HAL_DMA_Init+0x1bc>)
 8002aaa:	21c5      	movs	r1, #197	; 0xc5
 8002aac:	f7fe fcfa 	bl	80014a4 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002ab0:	69e3      	ldr	r3, [r4, #28]
 8002ab2:	f033 0220 	bics.w	r2, r3, #32
 8002ab6:	d006      	beq.n	8002ac6 <HAL_DMA_Init+0x102>
 8002ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002abc:	d003      	beq.n	8002ac6 <HAL_DMA_Init+0x102>
 8002abe:	4830      	ldr	r0, [pc, #192]	; (8002b80 <HAL_DMA_Init+0x1bc>)
 8002ac0:	21c6      	movs	r1, #198	; 0xc6
 8002ac2:	f7fe fcef 	bl	80014a4 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002ac6:	6a23      	ldr	r3, [r4, #32]
 8002ac8:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8002acc:	d003      	beq.n	8002ad6 <HAL_DMA_Init+0x112>
 8002ace:	482c      	ldr	r0, [pc, #176]	; (8002b80 <HAL_DMA_Init+0x1bc>)
 8002ad0:	21c7      	movs	r1, #199	; 0xc7
 8002ad2:	f7fe fce7 	bl	80014a4 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ad8:	f033 0304 	bics.w	r3, r3, #4
 8002adc:	d003      	beq.n	8002ae6 <HAL_DMA_Init+0x122>
 8002ade:	4828      	ldr	r0, [pc, #160]	; (8002b80 <HAL_DMA_Init+0x1bc>)
 8002ae0:	21c8      	movs	r1, #200	; 0xc8
 8002ae2:	f7fe fcdf 	bl	80014a4 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ae8:	b1b3      	cbz	r3, 8002b18 <HAL_DMA_Init+0x154>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002aea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d903      	bls.n	8002af8 <HAL_DMA_Init+0x134>
 8002af0:	4823      	ldr	r0, [pc, #140]	; (8002b80 <HAL_DMA_Init+0x1bc>)
 8002af2:	21cd      	movs	r1, #205	; 0xcd
 8002af4:	f7fe fcd6 	bl	80014a4 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8002af8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002afa:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 8002afe:	d003      	beq.n	8002b08 <HAL_DMA_Init+0x144>
 8002b00:	481f      	ldr	r0, [pc, #124]	; (8002b80 <HAL_DMA_Init+0x1bc>)
 8002b02:	21ce      	movs	r1, #206	; 0xce
 8002b04:	f7fe fcce 	bl	80014a4 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8002b08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b0a:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8002b0e:	d003      	beq.n	8002b18 <HAL_DMA_Init+0x154>
 8002b10:	481b      	ldr	r0, [pc, #108]	; (8002b80 <HAL_DMA_Init+0x1bc>)
 8002b12:	21cf      	movs	r1, #207	; 0xcf
 8002b14:	f7fe fcc6 	bl	80014a4 <assert_failed>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b18:	6821      	ldr	r1, [r4, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b1a:	4a1a      	ldr	r2, [pc, #104]	; (8002b84 <HAL_DMA_Init+0x1c0>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b1c:	68a0      	ldr	r0, [r4, #8]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b24:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b26:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b28:	6863      	ldr	r3, [r4, #4]
 8002b2a:	4318      	orrs	r0, r3
 8002b2c:	68e3      	ldr	r3, [r4, #12]
 8002b2e:	4318      	orrs	r0, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b30:	6923      	ldr	r3, [r4, #16]
 8002b32:	4318      	orrs	r0, r3
 8002b34:	6963      	ldr	r3, [r4, #20]
 8002b36:	4318      	orrs	r0, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b38:	69a3      	ldr	r3, [r4, #24]
 8002b3a:	4318      	orrs	r0, r3
 8002b3c:	69e3      	ldr	r3, [r4, #28]
 8002b3e:	4318      	orrs	r0, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b40:	6a23      	ldr	r3, [r4, #32]
 8002b42:	4303      	orrs	r3, r0
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b44:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b48:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b4a:	bf01      	itttt	eq
 8002b4c:	6ae0      	ldreq	r0, [r4, #44]	; 0x2c
 8002b4e:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8002b50:	4328      	orreq	r0, r5
 8002b52:	4303      	orreq	r3, r0
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b54:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b56:	694b      	ldr	r3, [r1, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b58:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b5a:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b5e:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b62:	bf04      	itt	eq
 8002b64:	6aa2      	ldreq	r2, [r4, #40]	; 0x28
 8002b66:	4313      	orreq	r3, r2
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b68:	614b      	str	r3, [r1, #20]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6a:	2000      	movs	r0, #0

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b6c:	2301      	movs	r3, #1
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6e:	64e0      	str	r0, [r4, #76]	; 0x4c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8002b74:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tmp = 0;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8002b76:	2001      	movs	r0, #1

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8002b78:	bd38      	pop	{r3, r4, r5, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40026010 	.word	0x40026010
 8002b80:	08008052 	.word	0x08008052
 8002b84:	f010803f 	.word	0xf010803f

08002b88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b88:	b570      	push	{r4, r5, r6, lr}
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8002b8a:	6803      	ldr	r3, [r0, #0]
 8002b8c:	4da9      	ldr	r5, [pc, #676]	; (8002e34 <HAL_DMA_IRQHandler+0x2ac>)
 8002b8e:	42ab      	cmp	r3, r5
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b90:	4604      	mov	r4, r0
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8002b92:	d916      	bls.n	8002bc2 <HAL_DMA_IRQHandler+0x3a>
 8002b94:	4aa8      	ldr	r2, [pc, #672]	; (8002e38 <HAL_DMA_IRQHandler+0x2b0>)
 8002b96:	6851      	ldr	r1, [r2, #4]
 8002b98:	3270      	adds	r2, #112	; 0x70
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x2c>
 8002b9e:	3218      	adds	r2, #24
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d009      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x30>
 8002ba4:	3218      	adds	r2, #24
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	bf0c      	ite	eq
 8002baa:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8002bae:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8002bb2:	e003      	b.n	8002bbc <HAL_DMA_IRQHandler+0x34>
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	e001      	b.n	8002bbc <HAL_DMA_IRQHandler+0x34>
 8002bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bbc:	420a      	tst	r2, r1
 8002bbe:	d14c      	bne.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002bc0:	e0bd      	b.n	8002d3e <HAL_DMA_IRQHandler+0x1b6>
 8002bc2:	4a9e      	ldr	r2, [pc, #632]	; (8002e3c <HAL_DMA_IRQHandler+0x2b4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d917      	bls.n	8002bf8 <HAL_DMA_IRQHandler+0x70>
 8002bc8:	f8d2 1348 	ldr.w	r1, [r2, #840]	; 0x348
 8002bcc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00a      	beq.n	8002bea <HAL_DMA_IRQHandler+0x62>
 8002bd4:	3218      	adds	r2, #24
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d009      	beq.n	8002bee <HAL_DMA_IRQHandler+0x66>
 8002bda:	3218      	adds	r2, #24
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	bf0c      	ite	eq
 8002be0:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8002be4:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8002be8:	e003      	b.n	8002bf2 <HAL_DMA_IRQHandler+0x6a>
 8002bea:	2208      	movs	r2, #8
 8002bec:	e001      	b.n	8002bf2 <HAL_DMA_IRQHandler+0x6a>
 8002bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bf2:	420a      	tst	r2, r1
 8002bf4:	d131      	bne.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002bf6:	e0bb      	b.n	8002d70 <HAL_DMA_IRQHandler+0x1e8>
 8002bf8:	4a91      	ldr	r2, [pc, #580]	; (8002e40 <HAL_DMA_IRQHandler+0x2b8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	f1a2 0258 	sub.w	r2, r2, #88	; 0x58
 8002c00:	d915      	bls.n	8002c2e <HAL_DMA_IRQHandler+0xa6>
 8002c02:	6851      	ldr	r1, [r2, #4]
 8002c04:	3270      	adds	r2, #112	; 0x70
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00a      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x98>
 8002c0a:	3218      	adds	r2, #24
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d009      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x9c>
 8002c10:	3218      	adds	r2, #24
 8002c12:	4293      	cmp	r3, r2
 8002c14:	bf0c      	ite	eq
 8002c16:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8002c1a:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8002c1e:	e003      	b.n	8002c28 <HAL_DMA_IRQHandler+0xa0>
 8002c20:	2208      	movs	r2, #8
 8002c22:	e001      	b.n	8002c28 <HAL_DMA_IRQHandler+0xa0>
 8002c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c28:	420a      	tst	r2, r1
 8002c2a:	d116      	bne.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002c2c:	e0b9      	b.n	8002da2 <HAL_DMA_IRQHandler+0x21a>
 8002c2e:	6811      	ldr	r1, [r2, #0]
 8002c30:	4a84      	ldr	r2, [pc, #528]	; (8002e44 <HAL_DMA_IRQHandler+0x2bc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00a      	beq.n	8002c4c <HAL_DMA_IRQHandler+0xc4>
 8002c36:	3218      	adds	r2, #24
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d009      	beq.n	8002c50 <HAL_DMA_IRQHandler+0xc8>
 8002c3c:	3218      	adds	r2, #24
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	bf0c      	ite	eq
 8002c42:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8002c46:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8002c4a:	e003      	b.n	8002c54 <HAL_DMA_IRQHandler+0xcc>
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	e001      	b.n	8002c54 <HAL_DMA_IRQHandler+0xcc>
 8002c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c54:	420a      	tst	r2, r1
 8002c56:	f000 80ba 	beq.w	8002dce <HAL_DMA_IRQHandler+0x246>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	0752      	lsls	r2, r2, #29
 8002c5e:	d56b      	bpl.n	8002d38 <HAL_DMA_IRQHandler+0x1b0>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8002c60:	681a      	ldr	r2, [r3, #0]

      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002c62:	42ab      	cmp	r3, r5
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8002c64:	f022 0204 	bic.w	r2, r2, #4
 8002c68:	601a      	str	r2, [r3, #0]

      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002c6a:	d913      	bls.n	8002c94 <HAL_DMA_IRQHandler+0x10c>
 8002c6c:	4a76      	ldr	r2, [pc, #472]	; (8002e48 <HAL_DMA_IRQHandler+0x2c0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00a      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x100>
 8002c72:	3218      	adds	r2, #24
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d009      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x104>
 8002c78:	3218      	adds	r2, #24
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	bf14      	ite	ne
 8002c7e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002c82:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 8002c86:	e003      	b.n	8002c90 <HAL_DMA_IRQHandler+0x108>
 8002c88:	2308      	movs	r3, #8
 8002c8a:	e001      	b.n	8002c90 <HAL_DMA_IRQHandler+0x108>
 8002c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c90:	4a69      	ldr	r2, [pc, #420]	; (8002e38 <HAL_DMA_IRQHandler+0x2b0>)
 8002c92:	e02d      	b.n	8002cf0 <HAL_DMA_IRQHandler+0x168>
 8002c94:	4a69      	ldr	r2, [pc, #420]	; (8002e3c <HAL_DMA_IRQHandler+0x2b4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d914      	bls.n	8002cc4 <HAL_DMA_IRQHandler+0x13c>
 8002c9a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x130>
 8002ca2:	3218      	adds	r2, #24
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d009      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x134>
 8002ca8:	3218      	adds	r2, #24
 8002caa:	4293      	cmp	r3, r2
 8002cac:	bf14      	ite	ne
 8002cae:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002cb2:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 8002cb6:	e003      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x138>
 8002cb8:	2308      	movs	r3, #8
 8002cba:	e001      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x138>
 8002cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cc0:	4a5d      	ldr	r2, [pc, #372]	; (8002e38 <HAL_DMA_IRQHandler+0x2b0>)
 8002cc2:	e02a      	b.n	8002d1a <HAL_DMA_IRQHandler+0x192>
 8002cc4:	4a5e      	ldr	r2, [pc, #376]	; (8002e40 <HAL_DMA_IRQHandler+0x2b8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d914      	bls.n	8002cf4 <HAL_DMA_IRQHandler+0x16c>
 8002cca:	3218      	adds	r2, #24
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00a      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x15e>
 8002cd0:	3218      	adds	r2, #24
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d009      	beq.n	8002cea <HAL_DMA_IRQHandler+0x162>
 8002cd6:	3218      	adds	r2, #24
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	bf14      	ite	ne
 8002cdc:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002ce0:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 8002ce4:	e003      	b.n	8002cee <HAL_DMA_IRQHandler+0x166>
 8002ce6:	2308      	movs	r3, #8
 8002ce8:	e001      	b.n	8002cee <HAL_DMA_IRQHandler+0x166>
 8002cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cee:	4a57      	ldr	r2, [pc, #348]	; (8002e4c <HAL_DMA_IRQHandler+0x2c4>)
 8002cf0:	60d3      	str	r3, [r2, #12]
 8002cf2:	e013      	b.n	8002d1c <HAL_DMA_IRQHandler+0x194>
 8002cf4:	4a53      	ldr	r2, [pc, #332]	; (8002e44 <HAL_DMA_IRQHandler+0x2bc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00a      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x188>
 8002cfa:	3218      	adds	r2, #24
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d009      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x18c>
 8002d00:	3218      	adds	r2, #24
 8002d02:	4293      	cmp	r3, r2
 8002d04:	bf14      	ite	ne
 8002d06:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002d0a:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 8002d0e:	e003      	b.n	8002d18 <HAL_DMA_IRQHandler+0x190>
 8002d10:	2308      	movs	r3, #8
 8002d12:	e001      	b.n	8002d18 <HAL_DMA_IRQHandler+0x190>
 8002d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d18:	4a4c      	ldr	r2, [pc, #304]	; (8002e4c <HAL_DMA_IRQHandler+0x2c4>)
 8002d1a:	6093      	str	r3, [r2, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	64e3      	str	r3, [r4, #76]	; 0x4c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002d24:	2304      	movs	r3, #4
 8002d26:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      if(hdma->XferErrorCallback != NULL)
 8002d30:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002d32:	b10b      	cbz	r3, 8002d38 <HAL_DMA_IRQHandler+0x1b0>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002d34:	4620      	mov	r0, r4
 8002d36:	4798      	blx	r3
      }
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	42ab      	cmp	r3, r5
 8002d3c:	d915      	bls.n	8002d6a <HAL_DMA_IRQHandler+0x1e2>
 8002d3e:	4a3e      	ldr	r2, [pc, #248]	; (8002e38 <HAL_DMA_IRQHandler+0x2b0>)
 8002d40:	6851      	ldr	r1, [r2, #4]
 8002d42:	3270      	adds	r2, #112	; 0x70
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00a      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x1d6>
 8002d48:	3218      	adds	r2, #24
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d009      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x1da>
 8002d4e:	3218      	adds	r2, #24
 8002d50:	4293      	cmp	r3, r2
 8002d52:	bf0c      	ite	eq
 8002d54:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
 8002d58:	f44f 0280 	movne.w	r2, #4194304	; 0x400000
 8002d5c:	e002      	b.n	8002d64 <HAL_DMA_IRQHandler+0x1dc>
 8002d5e:	4a3c      	ldr	r2, [pc, #240]	; (8002e50 <HAL_DMA_IRQHandler+0x2c8>)
 8002d60:	e000      	b.n	8002d64 <HAL_DMA_IRQHandler+0x1dc>
 8002d62:	2240      	movs	r2, #64	; 0x40
 8002d64:	420a      	tst	r2, r1
 8002d66:	d148      	bne.n	8002dfa <HAL_DMA_IRQHandler+0x272>
 8002d68:	e3fe      	b.n	8003568 <HAL_DMA_IRQHandler+0x9e0>
 8002d6a:	4a34      	ldr	r2, [pc, #208]	; (8002e3c <HAL_DMA_IRQHandler+0x2b4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d915      	bls.n	8002d9c <HAL_DMA_IRQHandler+0x214>
 8002d70:	4a31      	ldr	r2, [pc, #196]	; (8002e38 <HAL_DMA_IRQHandler+0x2b0>)
 8002d72:	6811      	ldr	r1, [r2, #0]
 8002d74:	3210      	adds	r2, #16
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00a      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x208>
 8002d7a:	3218      	adds	r2, #24
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d009      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x20c>
 8002d80:	3218      	adds	r2, #24
 8002d82:	4293      	cmp	r3, r2
 8002d84:	bf0c      	ite	eq
 8002d86:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
 8002d8a:	f44f 0280 	movne.w	r2, #4194304	; 0x400000
 8002d8e:	e002      	b.n	8002d96 <HAL_DMA_IRQHandler+0x20e>
 8002d90:	4a2f      	ldr	r2, [pc, #188]	; (8002e50 <HAL_DMA_IRQHandler+0x2c8>)
 8002d92:	e000      	b.n	8002d96 <HAL_DMA_IRQHandler+0x20e>
 8002d94:	2240      	movs	r2, #64	; 0x40
 8002d96:	420a      	tst	r2, r1
 8002d98:	d12f      	bne.n	8002dfa <HAL_DMA_IRQHandler+0x272>
 8002d9a:	e3e3      	b.n	8003564 <HAL_DMA_IRQHandler+0x9dc>
 8002d9c:	4a28      	ldr	r2, [pc, #160]	; (8002e40 <HAL_DMA_IRQHandler+0x2b8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d915      	bls.n	8002dce <HAL_DMA_IRQHandler+0x246>
 8002da2:	4a2a      	ldr	r2, [pc, #168]	; (8002e4c <HAL_DMA_IRQHandler+0x2c4>)
 8002da4:	6851      	ldr	r1, [r2, #4]
 8002da6:	3270      	adds	r2, #112	; 0x70
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00a      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x23a>
 8002dac:	3218      	adds	r2, #24
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x23e>
 8002db2:	3218      	adds	r2, #24
 8002db4:	4293      	cmp	r3, r2
 8002db6:	bf0c      	ite	eq
 8002db8:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
 8002dbc:	f44f 0280 	movne.w	r2, #4194304	; 0x400000
 8002dc0:	e002      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x240>
 8002dc2:	4a23      	ldr	r2, [pc, #140]	; (8002e50 <HAL_DMA_IRQHandler+0x2c8>)
 8002dc4:	e000      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x240>
 8002dc6:	2240      	movs	r2, #64	; 0x40
 8002dc8:	420a      	tst	r2, r1
 8002dca:	d116      	bne.n	8002dfa <HAL_DMA_IRQHandler+0x272>
 8002dcc:	e3c8      	b.n	8003560 <HAL_DMA_IRQHandler+0x9d8>
 8002dce:	4a1f      	ldr	r2, [pc, #124]	; (8002e4c <HAL_DMA_IRQHandler+0x2c4>)
 8002dd0:	6811      	ldr	r1, [r2, #0]
 8002dd2:	3210      	adds	r2, #16
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00a      	beq.n	8002dee <HAL_DMA_IRQHandler+0x266>
 8002dd8:	3218      	adds	r2, #24
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d009      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x26a>
 8002dde:	3218      	adds	r2, #24
 8002de0:	4293      	cmp	r3, r2
 8002de2:	bf0c      	ite	eq
 8002de4:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
 8002de8:	f44f 0280 	movne.w	r2, #4194304	; 0x400000
 8002dec:	e002      	b.n	8002df4 <HAL_DMA_IRQHandler+0x26c>
 8002dee:	4a18      	ldr	r2, [pc, #96]	; (8002e50 <HAL_DMA_IRQHandler+0x2c8>)
 8002df0:	e000      	b.n	8002df4 <HAL_DMA_IRQHandler+0x26c>
 8002df2:	2240      	movs	r2, #64	; 0x40
 8002df4:	420a      	tst	r2, r1
 8002df6:	f000 80ca 	beq.w	8002f8e <HAL_DMA_IRQHandler+0x406>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	0616      	lsls	r6, r2, #24
 8002dfe:	d578      	bpl.n	8002ef2 <HAL_DMA_IRQHandler+0x36a>
    {
      /* Disable the FIFO Error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_FE);
 8002e00:	695a      	ldr	r2, [r3, #20]

      /* Clear the FIFO error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8002e02:	42ab      	cmp	r3, r5
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
    {
      /* Disable the FIFO Error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_FE);
 8002e04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e08:	615a      	str	r2, [r3, #20]

      /* Clear the FIFO error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8002e0a:	d923      	bls.n	8002e54 <HAL_DMA_IRQHandler+0x2cc>
 8002e0c:	4a0e      	ldr	r2, [pc, #56]	; (8002e48 <HAL_DMA_IRQHandler+0x2c0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00a      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x2a0>
 8002e12:	3218      	adds	r2, #24
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d009      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x2a4>
 8002e18:	3218      	adds	r2, #24
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	bf0c      	ite	eq
 8002e1e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8002e22:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8002e26:	e002      	b.n	8002e2e <HAL_DMA_IRQHandler+0x2a6>
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_DMA_IRQHandler+0x2c8>)
 8002e2a:	e000      	b.n	8002e2e <HAL_DMA_IRQHandler+0x2a6>
 8002e2c:	2340      	movs	r3, #64	; 0x40
 8002e2e:	4a02      	ldr	r2, [pc, #8]	; (8002e38 <HAL_DMA_IRQHandler+0x2b0>)
 8002e30:	e03c      	b.n	8002eac <HAL_DMA_IRQHandler+0x324>
 8002e32:	bf00      	nop
 8002e34:	40026458 	.word	0x40026458
 8002e38:	40026400 	.word	0x40026400
 8002e3c:	400260b8 	.word	0x400260b8
 8002e40:	40026058 	.word	0x40026058
 8002e44:	40026010 	.word	0x40026010
 8002e48:	40026470 	.word	0x40026470
 8002e4c:	40026000 	.word	0x40026000
 8002e50:	00800001 	.word	0x00800001
 8002e54:	4aab      	ldr	r2, [pc, #684]	; (8003104 <HAL_DMA_IRQHandler+0x57c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d913      	bls.n	8002e82 <HAL_DMA_IRQHandler+0x2fa>
 8002e5a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00a      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x2f0>
 8002e62:	3218      	adds	r2, #24
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d009      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x2f4>
 8002e68:	3218      	adds	r2, #24
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	bf0c      	ite	eq
 8002e6e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8002e72:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8002e76:	e002      	b.n	8002e7e <HAL_DMA_IRQHandler+0x2f6>
 8002e78:	4ba3      	ldr	r3, [pc, #652]	; (8003108 <HAL_DMA_IRQHandler+0x580>)
 8002e7a:	e000      	b.n	8002e7e <HAL_DMA_IRQHandler+0x2f6>
 8002e7c:	2340      	movs	r3, #64	; 0x40
 8002e7e:	4aa3      	ldr	r2, [pc, #652]	; (800310c <HAL_DMA_IRQHandler+0x584>)
 8002e80:	e028      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x34c>
 8002e82:	4aa3      	ldr	r2, [pc, #652]	; (8003110 <HAL_DMA_IRQHandler+0x588>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d913      	bls.n	8002eb0 <HAL_DMA_IRQHandler+0x328>
 8002e88:	3218      	adds	r2, #24
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x31c>
 8002e8e:	3218      	adds	r2, #24
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d009      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x320>
 8002e94:	3218      	adds	r2, #24
 8002e96:	4293      	cmp	r3, r2
 8002e98:	bf0c      	ite	eq
 8002e9a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8002e9e:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8002ea2:	e002      	b.n	8002eaa <HAL_DMA_IRQHandler+0x322>
 8002ea4:	4b98      	ldr	r3, [pc, #608]	; (8003108 <HAL_DMA_IRQHandler+0x580>)
 8002ea6:	e000      	b.n	8002eaa <HAL_DMA_IRQHandler+0x322>
 8002ea8:	2340      	movs	r3, #64	; 0x40
 8002eaa:	4a9a      	ldr	r2, [pc, #616]	; (8003114 <HAL_DMA_IRQHandler+0x58c>)
 8002eac:	60d3      	str	r3, [r2, #12]
 8002eae:	e012      	b.n	8002ed6 <HAL_DMA_IRQHandler+0x34e>
 8002eb0:	4a99      	ldr	r2, [pc, #612]	; (8003118 <HAL_DMA_IRQHandler+0x590>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00a      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x344>
 8002eb6:	3218      	adds	r2, #24
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d009      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x348>
 8002ebc:	3218      	adds	r2, #24
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	bf0c      	ite	eq
 8002ec2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8002ec6:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8002eca:	e002      	b.n	8002ed2 <HAL_DMA_IRQHandler+0x34a>
 8002ecc:	4b8e      	ldr	r3, [pc, #568]	; (8003108 <HAL_DMA_IRQHandler+0x580>)
 8002ece:	e000      	b.n	8002ed2 <HAL_DMA_IRQHandler+0x34a>
 8002ed0:	2340      	movs	r3, #64	; 0x40
 8002ed2:	4a90      	ldr	r2, [pc, #576]	; (8003114 <HAL_DMA_IRQHandler+0x58c>)
 8002ed4:	6093      	str	r3, [r2, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ed6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	64e3      	str	r3, [r4, #76]	; 0x4c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002ede:	2304      	movs	r3, #4
 8002ee0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      if(hdma->XferErrorCallback != NULL)
 8002eea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002eec:	b10b      	cbz	r3, 8002ef2 <HAL_DMA_IRQHandler+0x36a>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002eee:	4620      	mov	r0, r4
 8002ef0:	4798      	blx	r3
      }
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	42ab      	cmp	r3, r5
 8002ef6:	d916      	bls.n	8002f26 <HAL_DMA_IRQHandler+0x39e>
 8002ef8:	4a84      	ldr	r2, [pc, #528]	; (800310c <HAL_DMA_IRQHandler+0x584>)
 8002efa:	6851      	ldr	r1, [r2, #4]
 8002efc:	3270      	adds	r2, #112	; 0x70
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00a      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x390>
 8002f02:	3218      	adds	r2, #24
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d009      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x394>
 8002f08:	3218      	adds	r2, #24
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	bf0c      	ite	eq
 8002f0e:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 8002f12:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 8002f16:	e003      	b.n	8002f20 <HAL_DMA_IRQHandler+0x398>
 8002f18:	4a80      	ldr	r2, [pc, #512]	; (800311c <HAL_DMA_IRQHandler+0x594>)
 8002f1a:	e001      	b.n	8002f20 <HAL_DMA_IRQHandler+0x398>
 8002f1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f20:	420a      	tst	r2, r1
 8002f22:	d14c      	bne.n	8002fbe <HAL_DMA_IRQHandler+0x436>
 8002f24:	e326      	b.n	8003574 <HAL_DMA_IRQHandler+0x9ec>
 8002f26:	4a77      	ldr	r2, [pc, #476]	; (8003104 <HAL_DMA_IRQHandler+0x57c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d916      	bls.n	8002f5a <HAL_DMA_IRQHandler+0x3d2>
 8002f2c:	4a77      	ldr	r2, [pc, #476]	; (800310c <HAL_DMA_IRQHandler+0x584>)
 8002f2e:	6811      	ldr	r1, [r2, #0]
 8002f30:	3210      	adds	r2, #16
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00a      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x3c4>
 8002f36:	3218      	adds	r2, #24
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d009      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x3c8>
 8002f3c:	3218      	adds	r2, #24
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	bf0c      	ite	eq
 8002f42:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 8002f46:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 8002f4a:	e003      	b.n	8002f54 <HAL_DMA_IRQHandler+0x3cc>
 8002f4c:	4a73      	ldr	r2, [pc, #460]	; (800311c <HAL_DMA_IRQHandler+0x594>)
 8002f4e:	e001      	b.n	8002f54 <HAL_DMA_IRQHandler+0x3cc>
 8002f50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f54:	420a      	tst	r2, r1
 8002f56:	d132      	bne.n	8002fbe <HAL_DMA_IRQHandler+0x436>
 8002f58:	e30a      	b.n	8003570 <HAL_DMA_IRQHandler+0x9e8>
 8002f5a:	4a6d      	ldr	r2, [pc, #436]	; (8003110 <HAL_DMA_IRQHandler+0x588>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d917      	bls.n	8002f90 <HAL_DMA_IRQHandler+0x408>
 8002f60:	4a6c      	ldr	r2, [pc, #432]	; (8003114 <HAL_DMA_IRQHandler+0x58c>)
 8002f62:	6851      	ldr	r1, [r2, #4]
 8002f64:	3270      	adds	r2, #112	; 0x70
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00a      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x3f8>
 8002f6a:	3218      	adds	r2, #24
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d009      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x3fc>
 8002f70:	3218      	adds	r2, #24
 8002f72:	4293      	cmp	r3, r2
 8002f74:	bf0c      	ite	eq
 8002f76:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 8002f7a:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 8002f7e:	e003      	b.n	8002f88 <HAL_DMA_IRQHandler+0x400>
 8002f80:	4a66      	ldr	r2, [pc, #408]	; (800311c <HAL_DMA_IRQHandler+0x594>)
 8002f82:	e001      	b.n	8002f88 <HAL_DMA_IRQHandler+0x400>
 8002f84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f88:	420a      	tst	r2, r1
 8002f8a:	d118      	bne.n	8002fbe <HAL_DMA_IRQHandler+0x436>
 8002f8c:	e2ee      	b.n	800356c <HAL_DMA_IRQHandler+0x9e4>
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	4a60      	ldr	r2, [pc, #384]	; (8003114 <HAL_DMA_IRQHandler+0x58c>)
 8002f92:	6811      	ldr	r1, [r2, #0]
 8002f94:	3210      	adds	r2, #16
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00a      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x428>
 8002f9a:	3218      	adds	r2, #24
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d009      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x42c>
 8002fa0:	3218      	adds	r2, #24
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	bf0c      	ite	eq
 8002fa6:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 8002faa:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 8002fae:	e003      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x430>
 8002fb0:	4a5a      	ldr	r2, [pc, #360]	; (800311c <HAL_DMA_IRQHandler+0x594>)
 8002fb2:	e001      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x430>
 8002fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fb8:	420a      	tst	r2, r1
 8002fba:	f000 80cd 	beq.w	8003158 <HAL_DMA_IRQHandler+0x5d0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	0790      	lsls	r0, r2, #30
 8002fc2:	d56b      	bpl.n	800309c <HAL_DMA_IRQHandler+0x514>
    {
      /* Disable the direct mode Error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_DME);
 8002fc4:	681a      	ldr	r2, [r3, #0]

      /* Clear the direct mode error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002fc6:	42ab      	cmp	r3, r5
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
    {
      /* Disable the direct mode Error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_DME);
 8002fc8:	f022 0202 	bic.w	r2, r2, #2
 8002fcc:	601a      	str	r2, [r3, #0]

      /* Clear the direct mode error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002fce:	d913      	bls.n	8002ff8 <HAL_DMA_IRQHandler+0x470>
 8002fd0:	4a53      	ldr	r2, [pc, #332]	; (8003120 <HAL_DMA_IRQHandler+0x598>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00a      	beq.n	8002fec <HAL_DMA_IRQHandler+0x464>
 8002fd6:	3218      	adds	r2, #24
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d009      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x468>
 8002fdc:	3218      	adds	r2, #24
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	bf0c      	ite	eq
 8002fe2:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 8002fe6:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002fea:	e003      	b.n	8002ff4 <HAL_DMA_IRQHandler+0x46c>
 8002fec:	4b4b      	ldr	r3, [pc, #300]	; (800311c <HAL_DMA_IRQHandler+0x594>)
 8002fee:	e001      	b.n	8002ff4 <HAL_DMA_IRQHandler+0x46c>
 8002ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ff4:	4a45      	ldr	r2, [pc, #276]	; (800310c <HAL_DMA_IRQHandler+0x584>)
 8002ff6:	e02d      	b.n	8003054 <HAL_DMA_IRQHandler+0x4cc>
 8002ff8:	4a42      	ldr	r2, [pc, #264]	; (8003104 <HAL_DMA_IRQHandler+0x57c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d914      	bls.n	8003028 <HAL_DMA_IRQHandler+0x4a0>
 8002ffe:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003002:	4293      	cmp	r3, r2
 8003004:	d00a      	beq.n	800301c <HAL_DMA_IRQHandler+0x494>
 8003006:	3218      	adds	r2, #24
 8003008:	4293      	cmp	r3, r2
 800300a:	d009      	beq.n	8003020 <HAL_DMA_IRQHandler+0x498>
 800300c:	3218      	adds	r2, #24
 800300e:	4293      	cmp	r3, r2
 8003010:	bf0c      	ite	eq
 8003012:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 8003016:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800301a:	e003      	b.n	8003024 <HAL_DMA_IRQHandler+0x49c>
 800301c:	4b3f      	ldr	r3, [pc, #252]	; (800311c <HAL_DMA_IRQHandler+0x594>)
 800301e:	e001      	b.n	8003024 <HAL_DMA_IRQHandler+0x49c>
 8003020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003024:	4a39      	ldr	r2, [pc, #228]	; (800310c <HAL_DMA_IRQHandler+0x584>)
 8003026:	e02a      	b.n	800307e <HAL_DMA_IRQHandler+0x4f6>
 8003028:	4a39      	ldr	r2, [pc, #228]	; (8003110 <HAL_DMA_IRQHandler+0x588>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d914      	bls.n	8003058 <HAL_DMA_IRQHandler+0x4d0>
 800302e:	3218      	adds	r2, #24
 8003030:	4293      	cmp	r3, r2
 8003032:	d00a      	beq.n	800304a <HAL_DMA_IRQHandler+0x4c2>
 8003034:	3218      	adds	r2, #24
 8003036:	4293      	cmp	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_DMA_IRQHandler+0x4c6>
 800303a:	3218      	adds	r2, #24
 800303c:	4293      	cmp	r3, r2
 800303e:	bf0c      	ite	eq
 8003040:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 8003044:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8003048:	e003      	b.n	8003052 <HAL_DMA_IRQHandler+0x4ca>
 800304a:	4b34      	ldr	r3, [pc, #208]	; (800311c <HAL_DMA_IRQHandler+0x594>)
 800304c:	e001      	b.n	8003052 <HAL_DMA_IRQHandler+0x4ca>
 800304e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003052:	4a30      	ldr	r2, [pc, #192]	; (8003114 <HAL_DMA_IRQHandler+0x58c>)
 8003054:	60d3      	str	r3, [r2, #12]
 8003056:	e013      	b.n	8003080 <HAL_DMA_IRQHandler+0x4f8>
 8003058:	4a2f      	ldr	r2, [pc, #188]	; (8003118 <HAL_DMA_IRQHandler+0x590>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00a      	beq.n	8003074 <HAL_DMA_IRQHandler+0x4ec>
 800305e:	3218      	adds	r2, #24
 8003060:	4293      	cmp	r3, r2
 8003062:	d009      	beq.n	8003078 <HAL_DMA_IRQHandler+0x4f0>
 8003064:	3218      	adds	r2, #24
 8003066:	4293      	cmp	r3, r2
 8003068:	bf0c      	ite	eq
 800306a:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 800306e:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8003072:	e003      	b.n	800307c <HAL_DMA_IRQHandler+0x4f4>
 8003074:	4b29      	ldr	r3, [pc, #164]	; (800311c <HAL_DMA_IRQHandler+0x594>)
 8003076:	e001      	b.n	800307c <HAL_DMA_IRQHandler+0x4f4>
 8003078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800307c:	4a25      	ldr	r2, [pc, #148]	; (8003114 <HAL_DMA_IRQHandler+0x58c>)
 800307e:	6093      	str	r3, [r2, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003080:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003082:	f043 0304 	orr.w	r3, r3, #4
 8003086:	64e3      	str	r3, [r4, #76]	; 0x4c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003088:	2304      	movs	r3, #4
 800308a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800308e:	2300      	movs	r3, #0
 8003090:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      if(hdma->XferErrorCallback != NULL)
 8003094:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003096:	b10b      	cbz	r3, 800309c <HAL_DMA_IRQHandler+0x514>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003098:	4620      	mov	r0, r4
 800309a:	4798      	blx	r3
      }
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	42ab      	cmp	r3, r5
 80030a0:	d916      	bls.n	80030d0 <HAL_DMA_IRQHandler+0x548>
 80030a2:	4a1a      	ldr	r2, [pc, #104]	; (800310c <HAL_DMA_IRQHandler+0x584>)
 80030a4:	6851      	ldr	r1, [r2, #4]
 80030a6:	3270      	adds	r2, #112	; 0x70
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00a      	beq.n	80030c2 <HAL_DMA_IRQHandler+0x53a>
 80030ac:	3218      	adds	r2, #24
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d009      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x53e>
 80030b2:	3218      	adds	r2, #24
 80030b4:	4293      	cmp	r3, r2
 80030b6:	bf0c      	ite	eq
 80030b8:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 80030bc:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 80030c0:	e003      	b.n	80030ca <HAL_DMA_IRQHandler+0x542>
 80030c2:	2210      	movs	r2, #16
 80030c4:	e001      	b.n	80030ca <HAL_DMA_IRQHandler+0x542>
 80030c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030ca:	420a      	tst	r2, r1
 80030cc:	d15c      	bne.n	8003188 <HAL_DMA_IRQHandler+0x600>
 80030ce:	e257      	b.n	8003580 <HAL_DMA_IRQHandler+0x9f8>
 80030d0:	4a0c      	ldr	r2, [pc, #48]	; (8003104 <HAL_DMA_IRQHandler+0x57c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d926      	bls.n	8003124 <HAL_DMA_IRQHandler+0x59c>
 80030d6:	4a0d      	ldr	r2, [pc, #52]	; (800310c <HAL_DMA_IRQHandler+0x584>)
 80030d8:	6811      	ldr	r1, [r2, #0]
 80030da:	3210      	adds	r2, #16
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00a      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x56e>
 80030e0:	3218      	adds	r2, #24
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d009      	beq.n	80030fa <HAL_DMA_IRQHandler+0x572>
 80030e6:	3218      	adds	r2, #24
 80030e8:	4293      	cmp	r3, r2
 80030ea:	bf0c      	ite	eq
 80030ec:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 80030f0:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 80030f4:	e003      	b.n	80030fe <HAL_DMA_IRQHandler+0x576>
 80030f6:	2210      	movs	r2, #16
 80030f8:	e001      	b.n	80030fe <HAL_DMA_IRQHandler+0x576>
 80030fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030fe:	420a      	tst	r2, r1
 8003100:	d142      	bne.n	8003188 <HAL_DMA_IRQHandler+0x600>
 8003102:	e23b      	b.n	800357c <HAL_DMA_IRQHandler+0x9f4>
 8003104:	400260b8 	.word	0x400260b8
 8003108:	00800001 	.word	0x00800001
 800310c:	40026400 	.word	0x40026400
 8003110:	40026058 	.word	0x40026058
 8003114:	40026000 	.word	0x40026000
 8003118:	40026010 	.word	0x40026010
 800311c:	00800004 	.word	0x00800004
 8003120:	40026470 	.word	0x40026470
 8003124:	4aab      	ldr	r2, [pc, #684]	; (80033d4 <HAL_DMA_IRQHandler+0x84c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d917      	bls.n	800315a <HAL_DMA_IRQHandler+0x5d2>
 800312a:	4aab      	ldr	r2, [pc, #684]	; (80033d8 <HAL_DMA_IRQHandler+0x850>)
 800312c:	6851      	ldr	r1, [r2, #4]
 800312e:	3270      	adds	r2, #112	; 0x70
 8003130:	4293      	cmp	r3, r2
 8003132:	d00a      	beq.n	800314a <HAL_DMA_IRQHandler+0x5c2>
 8003134:	3218      	adds	r2, #24
 8003136:	4293      	cmp	r3, r2
 8003138:	d009      	beq.n	800314e <HAL_DMA_IRQHandler+0x5c6>
 800313a:	3218      	adds	r2, #24
 800313c:	4293      	cmp	r3, r2
 800313e:	bf0c      	ite	eq
 8003140:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8003144:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8003148:	e003      	b.n	8003152 <HAL_DMA_IRQHandler+0x5ca>
 800314a:	2210      	movs	r2, #16
 800314c:	e001      	b.n	8003152 <HAL_DMA_IRQHandler+0x5ca>
 800314e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003152:	420a      	tst	r2, r1
 8003154:	d118      	bne.n	8003188 <HAL_DMA_IRQHandler+0x600>
 8003156:	e20f      	b.n	8003578 <HAL_DMA_IRQHandler+0x9f0>
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	4a9f      	ldr	r2, [pc, #636]	; (80033d8 <HAL_DMA_IRQHandler+0x850>)
 800315c:	6811      	ldr	r1, [r2, #0]
 800315e:	3210      	adds	r2, #16
 8003160:	4293      	cmp	r3, r2
 8003162:	d00a      	beq.n	800317a <HAL_DMA_IRQHandler+0x5f2>
 8003164:	3218      	adds	r2, #24
 8003166:	4293      	cmp	r3, r2
 8003168:	d009      	beq.n	800317e <HAL_DMA_IRQHandler+0x5f6>
 800316a:	3218      	adds	r2, #24
 800316c:	4293      	cmp	r3, r2
 800316e:	bf0c      	ite	eq
 8003170:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8003174:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8003178:	e003      	b.n	8003182 <HAL_DMA_IRQHandler+0x5fa>
 800317a:	2210      	movs	r2, #16
 800317c:	e001      	b.n	8003182 <HAL_DMA_IRQHandler+0x5fa>
 800317e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003182:	420a      	tst	r2, r1
 8003184:	f000 809d 	beq.w	80032c2 <HAL_DMA_IRQHandler+0x73a>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	0711      	lsls	r1, r2, #28
 800318c:	f140 8088 	bpl.w	80032a0 <HAL_DMA_IRQHandler+0x718>
    { 
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	0352      	lsls	r2, r2, #13
 8003194:	d562      	bpl.n	800325c <HAL_DMA_IRQHandler+0x6d4>
      {
        /* Clear the half transfer complete flag */
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003196:	42ab      	cmp	r3, r5
 8003198:	d913      	bls.n	80031c2 <HAL_DMA_IRQHandler+0x63a>
 800319a:	4a90      	ldr	r2, [pc, #576]	; (80033dc <HAL_DMA_IRQHandler+0x854>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00a      	beq.n	80031b6 <HAL_DMA_IRQHandler+0x62e>
 80031a0:	3218      	adds	r2, #24
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d009      	beq.n	80031ba <HAL_DMA_IRQHandler+0x632>
 80031a6:	3218      	adds	r2, #24
 80031a8:	4293      	cmp	r3, r2
 80031aa:	bf0c      	ite	eq
 80031ac:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80031b0:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80031b4:	e003      	b.n	80031be <HAL_DMA_IRQHandler+0x636>
 80031b6:	2310      	movs	r3, #16
 80031b8:	e001      	b.n	80031be <HAL_DMA_IRQHandler+0x636>
 80031ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031be:	4a88      	ldr	r2, [pc, #544]	; (80033e0 <HAL_DMA_IRQHandler+0x858>)
 80031c0:	e02d      	b.n	800321e <HAL_DMA_IRQHandler+0x696>
 80031c2:	4a88      	ldr	r2, [pc, #544]	; (80033e4 <HAL_DMA_IRQHandler+0x85c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d914      	bls.n	80031f2 <HAL_DMA_IRQHandler+0x66a>
 80031c8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00a      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x65e>
 80031d0:	3218      	adds	r2, #24
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_DMA_IRQHandler+0x662>
 80031d6:	3218      	adds	r2, #24
 80031d8:	4293      	cmp	r3, r2
 80031da:	bf0c      	ite	eq
 80031dc:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80031e0:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80031e4:	e003      	b.n	80031ee <HAL_DMA_IRQHandler+0x666>
 80031e6:	2310      	movs	r3, #16
 80031e8:	e001      	b.n	80031ee <HAL_DMA_IRQHandler+0x666>
 80031ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ee:	4a7c      	ldr	r2, [pc, #496]	; (80033e0 <HAL_DMA_IRQHandler+0x858>)
 80031f0:	e02a      	b.n	8003248 <HAL_DMA_IRQHandler+0x6c0>
 80031f2:	4a78      	ldr	r2, [pc, #480]	; (80033d4 <HAL_DMA_IRQHandler+0x84c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d914      	bls.n	8003222 <HAL_DMA_IRQHandler+0x69a>
 80031f8:	3218      	adds	r2, #24
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00a      	beq.n	8003214 <HAL_DMA_IRQHandler+0x68c>
 80031fe:	3218      	adds	r2, #24
 8003200:	4293      	cmp	r3, r2
 8003202:	d009      	beq.n	8003218 <HAL_DMA_IRQHandler+0x690>
 8003204:	3218      	adds	r2, #24
 8003206:	4293      	cmp	r3, r2
 8003208:	bf0c      	ite	eq
 800320a:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800320e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8003212:	e003      	b.n	800321c <HAL_DMA_IRQHandler+0x694>
 8003214:	2310      	movs	r3, #16
 8003216:	e001      	b.n	800321c <HAL_DMA_IRQHandler+0x694>
 8003218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800321c:	4a6e      	ldr	r2, [pc, #440]	; (80033d8 <HAL_DMA_IRQHandler+0x850>)
 800321e:	60d3      	str	r3, [r2, #12]
 8003220:	e013      	b.n	800324a <HAL_DMA_IRQHandler+0x6c2>
 8003222:	4a71      	ldr	r2, [pc, #452]	; (80033e8 <HAL_DMA_IRQHandler+0x860>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00a      	beq.n	800323e <HAL_DMA_IRQHandler+0x6b6>
 8003228:	3218      	adds	r2, #24
 800322a:	4293      	cmp	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_DMA_IRQHandler+0x6ba>
 800322e:	3218      	adds	r2, #24
 8003230:	4293      	cmp	r3, r2
 8003232:	bf0c      	ite	eq
 8003234:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8003238:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800323c:	e003      	b.n	8003246 <HAL_DMA_IRQHandler+0x6be>
 800323e:	2310      	movs	r3, #16
 8003240:	e001      	b.n	8003246 <HAL_DMA_IRQHandler+0x6be>
 8003242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003246:	4a64      	ldr	r2, [pc, #400]	; (80033d8 <HAL_DMA_IRQHandler+0x850>)
 8003248:	6093      	str	r3, [r2, #8]

        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	0316      	lsls	r6, r2, #12
 8003250:	d51f      	bpl.n	8003292 <HAL_DMA_IRQHandler+0x70a>
        {
          /* Change DMA peripheral state */
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
        }
        /* Current memory buffer used is Memory 1 */
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	0318      	lsls	r0, r3, #12
 8003256:	d51f      	bpl.n	8003298 <HAL_DMA_IRQHandler+0x710>
        {
          /* Change DMA peripheral state */
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM1;
 8003258:	2341      	movs	r3, #65	; 0x41
 800325a:	e01b      	b.n	8003294 <HAL_DMA_IRQHandler+0x70c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	05d1      	lsls	r1, r2, #23
 8003260:	d403      	bmi.n	800326a <HAL_DMA_IRQHandler+0x6e2>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	f022 0208 	bic.w	r2, r2, #8
 8003268:	601a      	str	r2, [r3, #0]
        }
        /* Clear the half transfer complete flag */
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800326a:	42ab      	cmp	r3, r5
 800326c:	f240 80eb 	bls.w	8003446 <HAL_DMA_IRQHandler+0x8be>
 8003270:	4a5a      	ldr	r2, [pc, #360]	; (80033dc <HAL_DMA_IRQHandler+0x854>)
 8003272:	4293      	cmp	r3, r2
 8003274:	f000 80e2 	beq.w	800343c <HAL_DMA_IRQHandler+0x8b4>
 8003278:	3218      	adds	r2, #24
 800327a:	4293      	cmp	r3, r2
 800327c:	f000 80e0 	beq.w	8003440 <HAL_DMA_IRQHandler+0x8b8>
 8003280:	3218      	adds	r2, #24
 8003282:	4293      	cmp	r3, r2
 8003284:	bf0c      	ite	eq
 8003286:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800328a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800328e:	4a54      	ldr	r2, [pc, #336]	; (80033e0 <HAL_DMA_IRQHandler+0x858>)
 8003290:	60d3      	str	r3, [r2, #12]

        /* Change DMA peripheral state */
        hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
 8003292:	2331      	movs	r3, #49	; 0x31
 8003294:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      }

      if(hdma->XferHalfCpltCallback != NULL)
 8003298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800329a:	b10b      	cbz	r3, 80032a0 <HAL_DMA_IRQHandler+0x718>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800329c:	4620      	mov	r0, r4
 800329e:	4798      	blx	r3
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	42ab      	cmp	r3, r5
 80032a4:	d901      	bls.n	80032aa <HAL_DMA_IRQHandler+0x722>
 80032a6:	4a4e      	ldr	r2, [pc, #312]	; (80033e0 <HAL_DMA_IRQHandler+0x858>)
 80032a8:	e008      	b.n	80032bc <HAL_DMA_IRQHandler+0x734>
 80032aa:	4a4e      	ldr	r2, [pc, #312]	; (80033e4 <HAL_DMA_IRQHandler+0x85c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d901      	bls.n	80032b4 <HAL_DMA_IRQHandler+0x72c>
 80032b0:	4a4b      	ldr	r2, [pc, #300]	; (80033e0 <HAL_DMA_IRQHandler+0x858>)
 80032b2:	e008      	b.n	80032c6 <HAL_DMA_IRQHandler+0x73e>
 80032b4:	4a47      	ldr	r2, [pc, #284]	; (80033d4 <HAL_DMA_IRQHandler+0x84c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d904      	bls.n	80032c4 <HAL_DMA_IRQHandler+0x73c>
 80032ba:	4a47      	ldr	r2, [pc, #284]	; (80033d8 <HAL_DMA_IRQHandler+0x850>)
 80032bc:	6851      	ldr	r1, [r2, #4]
 80032be:	3270      	adds	r2, #112	; 0x70
 80032c0:	e003      	b.n	80032ca <HAL_DMA_IRQHandler+0x742>
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	4a44      	ldr	r2, [pc, #272]	; (80033d8 <HAL_DMA_IRQHandler+0x850>)
 80032c6:	6811      	ldr	r1, [r2, #0]
 80032c8:	3210      	adds	r2, #16
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00a      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x75c>
 80032ce:	3218      	adds	r2, #24
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d009      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x760>
 80032d4:	3218      	adds	r2, #24
 80032d6:	4293      	cmp	r3, r2
 80032d8:	bf0c      	ite	eq
 80032da:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 80032de:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 80032e2:	e003      	b.n	80032ec <HAL_DMA_IRQHandler+0x764>
 80032e4:	2220      	movs	r2, #32
 80032e6:	e001      	b.n	80032ec <HAL_DMA_IRQHandler+0x764>
 80032e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032ec:	420a      	tst	r2, r1
 80032ee:	bf14      	ite	ne
 80032f0:	2201      	movne	r2, #1
 80032f2:	2200      	moveq	r2, #0
 80032f4:	2a00      	cmp	r2, #0
 80032f6:	f000 8145 	beq.w	8003584 <HAL_DMA_IRQHandler+0x9fc>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	06d2      	lsls	r2, r2, #27
 80032fe:	f140 8141 	bpl.w	8003584 <HAL_DMA_IRQHandler+0x9fc>
    {
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	0356      	lsls	r6, r2, #13
 8003306:	d571      	bpl.n	80033ec <HAL_DMA_IRQHandler+0x864>
      {
        /* Clear the transfer complete flag */
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003308:	42ab      	cmp	r3, r5
 800330a:	d913      	bls.n	8003334 <HAL_DMA_IRQHandler+0x7ac>
 800330c:	4a33      	ldr	r2, [pc, #204]	; (80033dc <HAL_DMA_IRQHandler+0x854>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00a      	beq.n	8003328 <HAL_DMA_IRQHandler+0x7a0>
 8003312:	3218      	adds	r2, #24
 8003314:	4293      	cmp	r3, r2
 8003316:	d009      	beq.n	800332c <HAL_DMA_IRQHandler+0x7a4>
 8003318:	3218      	adds	r2, #24
 800331a:	4293      	cmp	r3, r2
 800331c:	bf0c      	ite	eq
 800331e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8003322:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8003326:	e003      	b.n	8003330 <HAL_DMA_IRQHandler+0x7a8>
 8003328:	2320      	movs	r3, #32
 800332a:	e001      	b.n	8003330 <HAL_DMA_IRQHandler+0x7a8>
 800332c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003330:	4a2b      	ldr	r2, [pc, #172]	; (80033e0 <HAL_DMA_IRQHandler+0x858>)
 8003332:	e02d      	b.n	8003390 <HAL_DMA_IRQHandler+0x808>
 8003334:	4a2b      	ldr	r2, [pc, #172]	; (80033e4 <HAL_DMA_IRQHandler+0x85c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d914      	bls.n	8003364 <HAL_DMA_IRQHandler+0x7dc>
 800333a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800333e:	4293      	cmp	r3, r2
 8003340:	d00a      	beq.n	8003358 <HAL_DMA_IRQHandler+0x7d0>
 8003342:	3218      	adds	r2, #24
 8003344:	4293      	cmp	r3, r2
 8003346:	d009      	beq.n	800335c <HAL_DMA_IRQHandler+0x7d4>
 8003348:	3218      	adds	r2, #24
 800334a:	4293      	cmp	r3, r2
 800334c:	bf0c      	ite	eq
 800334e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8003352:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8003356:	e003      	b.n	8003360 <HAL_DMA_IRQHandler+0x7d8>
 8003358:	2320      	movs	r3, #32
 800335a:	e001      	b.n	8003360 <HAL_DMA_IRQHandler+0x7d8>
 800335c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003360:	4a1f      	ldr	r2, [pc, #124]	; (80033e0 <HAL_DMA_IRQHandler+0x858>)
 8003362:	e02a      	b.n	80033ba <HAL_DMA_IRQHandler+0x832>
 8003364:	4a1b      	ldr	r2, [pc, #108]	; (80033d4 <HAL_DMA_IRQHandler+0x84c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d914      	bls.n	8003394 <HAL_DMA_IRQHandler+0x80c>
 800336a:	3218      	adds	r2, #24
 800336c:	4293      	cmp	r3, r2
 800336e:	d00a      	beq.n	8003386 <HAL_DMA_IRQHandler+0x7fe>
 8003370:	3218      	adds	r2, #24
 8003372:	4293      	cmp	r3, r2
 8003374:	d009      	beq.n	800338a <HAL_DMA_IRQHandler+0x802>
 8003376:	3218      	adds	r2, #24
 8003378:	4293      	cmp	r3, r2
 800337a:	bf0c      	ite	eq
 800337c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8003380:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8003384:	e003      	b.n	800338e <HAL_DMA_IRQHandler+0x806>
 8003386:	2320      	movs	r3, #32
 8003388:	e001      	b.n	800338e <HAL_DMA_IRQHandler+0x806>
 800338a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800338e:	4a12      	ldr	r2, [pc, #72]	; (80033d8 <HAL_DMA_IRQHandler+0x850>)
 8003390:	60d3      	str	r3, [r2, #12]
 8003392:	e013      	b.n	80033bc <HAL_DMA_IRQHandler+0x834>
 8003394:	4a14      	ldr	r2, [pc, #80]	; (80033e8 <HAL_DMA_IRQHandler+0x860>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00a      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x828>
 800339a:	3218      	adds	r2, #24
 800339c:	4293      	cmp	r3, r2
 800339e:	d009      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x82c>
 80033a0:	3218      	adds	r2, #24
 80033a2:	4293      	cmp	r3, r2
 80033a4:	bf0c      	ite	eq
 80033a6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80033aa:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 80033ae:	e003      	b.n	80033b8 <HAL_DMA_IRQHandler+0x830>
 80033b0:	2320      	movs	r3, #32
 80033b2:	e001      	b.n	80033b8 <HAL_DMA_IRQHandler+0x830>
 80033b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033b8:	4a07      	ldr	r2, [pc, #28]	; (80033d8 <HAL_DMA_IRQHandler+0x850>)
 80033ba:	6093      	str	r3, [r2, #8]

        /* Current memory buffer used is Memory 1 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	0310      	lsls	r0, r2, #12
 80033c2:	d401      	bmi.n	80033c8 <HAL_DMA_IRQHandler+0x840>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033c6:	e032      	b.n	800342e <HAL_DMA_IRQHandler+0x8a6>
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
          }
        }
        /* Current memory buffer used is Memory 0 */
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0) 
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	0319      	lsls	r1, r3, #12
 80033cc:	f140 80da 	bpl.w	8003584 <HAL_DMA_IRQHandler+0x9fc>
 80033d0:	e02c      	b.n	800342c <HAL_DMA_IRQHandler+0x8a4>
 80033d2:	bf00      	nop
 80033d4:	40026058 	.word	0x40026058
 80033d8:	40026000 	.word	0x40026000
 80033dc:	40026470 	.word	0x40026470
 80033e0:	40026400 	.word	0x40026400
 80033e4:	400260b8 	.word	0x400260b8
 80033e8:	40026010 	.word	0x40026010
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	05d2      	lsls	r2, r2, #23
 80033f0:	d403      	bmi.n	80033fa <HAL_DMA_IRQHandler+0x872>
        {
          /* Disable the transfer complete interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	f022 0210 	bic.w	r2, r2, #16
 80033f8:	601a      	str	r2, [r3, #0]
        }
        /* Clear the transfer complete flag */
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80033fa:	42ab      	cmp	r3, r5
 80033fc:	d96c      	bls.n	80034d8 <HAL_DMA_IRQHandler+0x950>
 80033fe:	4a62      	ldr	r2, [pc, #392]	; (8003588 <HAL_DMA_IRQHandler+0xa00>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d064      	beq.n	80034ce <HAL_DMA_IRQHandler+0x946>
 8003404:	3218      	adds	r2, #24
 8003406:	4293      	cmp	r3, r2
 8003408:	d063      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x94a>
 800340a:	3218      	adds	r2, #24
 800340c:	4293      	cmp	r3, r2
 800340e:	bf0c      	ite	eq
 8003410:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8003414:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8003418:	4a5c      	ldr	r2, [pc, #368]	; (800358c <HAL_DMA_IRQHandler+0xa04>)
 800341a:	60d3      	str	r3, [r2, #12]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
 800341c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800341e:	64e3      	str	r3, [r4, #76]	; 0x4c

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY_MEM0;
 8003420:	2311      	movs	r3, #17
 8003422:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);      
 8003426:	2300      	movs	r3, #0
 8003428:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        if(hdma->XferCpltCallback != NULL)
 800342c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80a8 	beq.w	8003584 <HAL_DMA_IRQHandler+0x9fc>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003434:	4620      	mov	r0, r4
        }
      }
    }
  }
}
 8003436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        __HAL_UNLOCK(hdma);      

        if(hdma->XferCpltCallback != NULL)
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800343a:	4718      	bx	r3
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
        }
        /* Clear the half transfer complete flag */
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800343c:	2310      	movs	r3, #16
 800343e:	e726      	b.n	800328e <HAL_DMA_IRQHandler+0x706>
 8003440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003444:	e723      	b.n	800328e <HAL_DMA_IRQHandler+0x706>
 8003446:	4a52      	ldr	r2, [pc, #328]	; (8003590 <HAL_DMA_IRQHandler+0xa08>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d914      	bls.n	8003476 <HAL_DMA_IRQHandler+0x8ee>
 800344c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003450:	4293      	cmp	r3, r2
 8003452:	d00a      	beq.n	800346a <HAL_DMA_IRQHandler+0x8e2>
 8003454:	3218      	adds	r2, #24
 8003456:	4293      	cmp	r3, r2
 8003458:	d009      	beq.n	800346e <HAL_DMA_IRQHandler+0x8e6>
 800345a:	3218      	adds	r2, #24
 800345c:	4293      	cmp	r3, r2
 800345e:	bf0c      	ite	eq
 8003460:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8003464:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8003468:	e003      	b.n	8003472 <HAL_DMA_IRQHandler+0x8ea>
 800346a:	2310      	movs	r3, #16
 800346c:	e001      	b.n	8003472 <HAL_DMA_IRQHandler+0x8ea>
 800346e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003472:	4a46      	ldr	r2, [pc, #280]	; (800358c <HAL_DMA_IRQHandler+0xa04>)
 8003474:	e029      	b.n	80034ca <HAL_DMA_IRQHandler+0x942>
 8003476:	4a47      	ldr	r2, [pc, #284]	; (8003594 <HAL_DMA_IRQHandler+0xa0c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d913      	bls.n	80034a4 <HAL_DMA_IRQHandler+0x91c>
 800347c:	3218      	adds	r2, #24
 800347e:	4293      	cmp	r3, r2
 8003480:	d00a      	beq.n	8003498 <HAL_DMA_IRQHandler+0x910>
 8003482:	3218      	adds	r2, #24
 8003484:	4293      	cmp	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_DMA_IRQHandler+0x914>
 8003488:	3218      	adds	r2, #24
 800348a:	4293      	cmp	r3, r2
 800348c:	bf0c      	ite	eq
 800348e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8003492:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8003496:	e003      	b.n	80034a0 <HAL_DMA_IRQHandler+0x918>
 8003498:	2310      	movs	r3, #16
 800349a:	e001      	b.n	80034a0 <HAL_DMA_IRQHandler+0x918>
 800349c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a0:	4a3d      	ldr	r2, [pc, #244]	; (8003598 <HAL_DMA_IRQHandler+0xa10>)
 80034a2:	e6f5      	b.n	8003290 <HAL_DMA_IRQHandler+0x708>
 80034a4:	4a3d      	ldr	r2, [pc, #244]	; (800359c <HAL_DMA_IRQHandler+0xa14>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00a      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x938>
 80034aa:	3218      	adds	r2, #24
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d009      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x93c>
 80034b0:	3218      	adds	r2, #24
 80034b2:	4293      	cmp	r3, r2
 80034b4:	bf0c      	ite	eq
 80034b6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80034ba:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80034be:	e003      	b.n	80034c8 <HAL_DMA_IRQHandler+0x940>
 80034c0:	2310      	movs	r3, #16
 80034c2:	e001      	b.n	80034c8 <HAL_DMA_IRQHandler+0x940>
 80034c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c8:	4a33      	ldr	r2, [pc, #204]	; (8003598 <HAL_DMA_IRQHandler+0xa10>)
 80034ca:	6093      	str	r3, [r2, #8]
 80034cc:	e6e1      	b.n	8003292 <HAL_DMA_IRQHandler+0x70a>
        {
          /* Disable the transfer complete interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
        }
        /* Clear the transfer complete flag */
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80034ce:	2320      	movs	r3, #32
 80034d0:	e7a2      	b.n	8003418 <HAL_DMA_IRQHandler+0x890>
 80034d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034d6:	e79f      	b.n	8003418 <HAL_DMA_IRQHandler+0x890>
 80034d8:	4a2d      	ldr	r2, [pc, #180]	; (8003590 <HAL_DMA_IRQHandler+0xa08>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d914      	bls.n	8003508 <HAL_DMA_IRQHandler+0x980>
 80034de:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00a      	beq.n	80034fc <HAL_DMA_IRQHandler+0x974>
 80034e6:	3218      	adds	r2, #24
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d009      	beq.n	8003500 <HAL_DMA_IRQHandler+0x978>
 80034ec:	3218      	adds	r2, #24
 80034ee:	4293      	cmp	r3, r2
 80034f0:	bf0c      	ite	eq
 80034f2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80034f6:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 80034fa:	e003      	b.n	8003504 <HAL_DMA_IRQHandler+0x97c>
 80034fc:	2320      	movs	r3, #32
 80034fe:	e001      	b.n	8003504 <HAL_DMA_IRQHandler+0x97c>
 8003500:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003504:	4a21      	ldr	r2, [pc, #132]	; (800358c <HAL_DMA_IRQHandler+0xa04>)
 8003506:	e029      	b.n	800355c <HAL_DMA_IRQHandler+0x9d4>
 8003508:	4a22      	ldr	r2, [pc, #136]	; (8003594 <HAL_DMA_IRQHandler+0xa0c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d913      	bls.n	8003536 <HAL_DMA_IRQHandler+0x9ae>
 800350e:	3218      	adds	r2, #24
 8003510:	4293      	cmp	r3, r2
 8003512:	d00a      	beq.n	800352a <HAL_DMA_IRQHandler+0x9a2>
 8003514:	3218      	adds	r2, #24
 8003516:	4293      	cmp	r3, r2
 8003518:	d009      	beq.n	800352e <HAL_DMA_IRQHandler+0x9a6>
 800351a:	3218      	adds	r2, #24
 800351c:	4293      	cmp	r3, r2
 800351e:	bf0c      	ite	eq
 8003520:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8003524:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8003528:	e003      	b.n	8003532 <HAL_DMA_IRQHandler+0x9aa>
 800352a:	2320      	movs	r3, #32
 800352c:	e001      	b.n	8003532 <HAL_DMA_IRQHandler+0x9aa>
 800352e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003532:	4a19      	ldr	r2, [pc, #100]	; (8003598 <HAL_DMA_IRQHandler+0xa10>)
 8003534:	e771      	b.n	800341a <HAL_DMA_IRQHandler+0x892>
 8003536:	4a19      	ldr	r2, [pc, #100]	; (800359c <HAL_DMA_IRQHandler+0xa14>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00a      	beq.n	8003552 <HAL_DMA_IRQHandler+0x9ca>
 800353c:	3218      	adds	r2, #24
 800353e:	4293      	cmp	r3, r2
 8003540:	d009      	beq.n	8003556 <HAL_DMA_IRQHandler+0x9ce>
 8003542:	3218      	adds	r2, #24
 8003544:	4293      	cmp	r3, r2
 8003546:	bf0c      	ite	eq
 8003548:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800354c:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8003550:	e003      	b.n	800355a <HAL_DMA_IRQHandler+0x9d2>
 8003552:	2320      	movs	r3, #32
 8003554:	e001      	b.n	800355a <HAL_DMA_IRQHandler+0x9d2>
 8003556:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800355a:	4a0f      	ldr	r2, [pc, #60]	; (8003598 <HAL_DMA_IRQHandler+0xa10>)
 800355c:	6093      	str	r3, [r2, #8]
 800355e:	e75d      	b.n	800341c <HAL_DMA_IRQHandler+0x894>
        hdma->XferErrorCallback(hdma);
      }
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	e4fd      	b.n	8002f60 <HAL_DMA_IRQHandler+0x3d8>
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	e4e1      	b.n	8002f2c <HAL_DMA_IRQHandler+0x3a4>
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	e4c5      	b.n	8002ef8 <HAL_DMA_IRQHandler+0x370>
        hdma->XferErrorCallback(hdma);
      }
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	e5dc      	b.n	800312a <HAL_DMA_IRQHandler+0x5a2>
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	e5b0      	b.n	80030d6 <HAL_DMA_IRQHandler+0x54e>
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	e594      	b.n	80030a2 <HAL_DMA_IRQHandler+0x51a>
        hdma->XferHalfCpltCallback(hdma);
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	e69e      	b.n	80032ba <HAL_DMA_IRQHandler+0x732>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	e697      	b.n	80032b0 <HAL_DMA_IRQHandler+0x728>
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	e690      	b.n	80032a6 <HAL_DMA_IRQHandler+0x71e>
 8003584:	bd70      	pop	{r4, r5, r6, pc}
 8003586:	bf00      	nop
 8003588:	40026470 	.word	0x40026470
 800358c:	40026400 	.word	0x40026400
 8003590:	400260b8 	.word	0x400260b8
 8003594:	40026058 	.word	0x40026058
 8003598:	40026000 	.word	0x40026000
 800359c:	40026010 	.word	0x40026010

080035a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80035a4:	4b91      	ldr	r3, [pc, #580]	; (80037ec <HAL_GPIO_Init+0x24c>)
 80035a6:	4298      	cmp	r0, r3
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a8:	4604      	mov	r4, r0
 80035aa:	460d      	mov	r5, r1
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80035ac:	d023      	beq.n	80035f6 <HAL_GPIO_Init+0x56>
 80035ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035b2:	4298      	cmp	r0, r3
 80035b4:	d01f      	beq.n	80035f6 <HAL_GPIO_Init+0x56>
 80035b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035ba:	4298      	cmp	r0, r3
 80035bc:	d01b      	beq.n	80035f6 <HAL_GPIO_Init+0x56>
 80035be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035c2:	4298      	cmp	r0, r3
 80035c4:	d017      	beq.n	80035f6 <HAL_GPIO_Init+0x56>
 80035c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035ca:	4298      	cmp	r0, r3
 80035cc:	d013      	beq.n	80035f6 <HAL_GPIO_Init+0x56>
 80035ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035d2:	4298      	cmp	r0, r3
 80035d4:	d00f      	beq.n	80035f6 <HAL_GPIO_Init+0x56>
 80035d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035da:	4298      	cmp	r0, r3
 80035dc:	d00b      	beq.n	80035f6 <HAL_GPIO_Init+0x56>
 80035de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035e2:	4298      	cmp	r0, r3
 80035e4:	d007      	beq.n	80035f6 <HAL_GPIO_Init+0x56>
 80035e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035ea:	4298      	cmp	r0, r3
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x56>
 80035ee:	4880      	ldr	r0, [pc, #512]	; (80037f0 <HAL_GPIO_Init+0x250>)
 80035f0:	21c5      	movs	r1, #197	; 0xc5
 80035f2:	f7fd ff57 	bl	80014a4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80035f6:	882b      	ldrh	r3, [r5, #0]
 80035f8:	b91b      	cbnz	r3, 8003602 <HAL_GPIO_Init+0x62>
 80035fa:	487d      	ldr	r0, [pc, #500]	; (80037f0 <HAL_GPIO_Init+0x250>)
 80035fc:	21c6      	movs	r1, #198	; 0xc6
 80035fe:	f7fd ff51 	bl	80014a4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003602:	686b      	ldr	r3, [r5, #4]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d917      	bls.n	8003638 <HAL_GPIO_Init+0x98>
 8003608:	f1a3 0211 	sub.w	r2, r3, #17
 800360c:	2a01      	cmp	r2, #1
 800360e:	d913      	bls.n	8003638 <HAL_GPIO_Init+0x98>
 8003610:	4978      	ldr	r1, [pc, #480]	; (80037f4 <HAL_GPIO_Init+0x254>)
 8003612:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003616:	428a      	cmp	r2, r1
 8003618:	d00e      	beq.n	8003638 <HAL_GPIO_Init+0x98>
 800361a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800361e:	428b      	cmp	r3, r1
 8003620:	d00a      	beq.n	8003638 <HAL_GPIO_Init+0x98>
 8003622:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8003626:	428a      	cmp	r2, r1
 8003628:	d006      	beq.n	8003638 <HAL_GPIO_Init+0x98>
 800362a:	4a73      	ldr	r2, [pc, #460]	; (80037f8 <HAL_GPIO_Init+0x258>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d003      	beq.n	8003638 <HAL_GPIO_Init+0x98>
 8003630:	486f      	ldr	r0, [pc, #444]	; (80037f0 <HAL_GPIO_Init+0x250>)
 8003632:	21c7      	movs	r1, #199	; 0xc7
 8003634:	f7fd ff36 	bl	80014a4 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003638:	68ab      	ldr	r3, [r5, #8]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d903      	bls.n	8003646 <HAL_GPIO_Init+0xa6>
 800363e:	486c      	ldr	r0, [pc, #432]	; (80037f0 <HAL_GPIO_Init+0x250>)
 8003640:	21c8      	movs	r1, #200	; 0xc8
 8003642:	f7fd ff2f 	bl	80014a4 <assert_failed>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003646:	2600      	movs	r6, #0

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003648:	2301      	movs	r3, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800364a:	682f      	ldr	r7, [r5, #0]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800364c:	40b3      	lsls	r3, r6
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800364e:	401f      	ands	r7, r3

    if(iocurrent == ioposition)
 8003650:	429f      	cmp	r7, r3
 8003652:	f040 80c5 	bne.w	80037e0 <HAL_GPIO_Init+0x240>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003656:	686b      	ldr	r3, [r5, #4]
 8003658:	f023 0310 	bic.w	r3, r3, #16
 800365c:	2b02      	cmp	r3, #2
 800365e:	d117      	bne.n	8003690 <HAL_GPIO_Init+0xf0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003660:	692b      	ldr	r3, [r5, #16]
 8003662:	2b0d      	cmp	r3, #13
 8003664:	d905      	bls.n	8003672 <HAL_GPIO_Init+0xd2>
 8003666:	2b0f      	cmp	r3, #15
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0xd2>
 800366a:	4861      	ldr	r0, [pc, #388]	; (80037f0 <HAL_GPIO_Init+0x250>)
 800366c:	21d9      	movs	r1, #217	; 0xd9
 800366e:	f7fd ff19 	bl	80014a4 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003672:	08f2      	lsrs	r2, r6, #3
 8003674:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003678:	f006 0107 	and.w	r1, r6, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800367c:	6a10      	ldr	r0, [r2, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800367e:	0089      	lsls	r1, r1, #2
 8003680:	230f      	movs	r3, #15
 8003682:	408b      	lsls	r3, r1
 8003684:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003688:	692b      	ldr	r3, [r5, #16]
 800368a:	408b      	lsls	r3, r1
 800368c:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3] = temp;
 800368e:	6213      	str	r3, [r2, #32]
 8003690:	ea4f 0946 	mov.w	r9, r6, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003694:	f04f 0803 	mov.w	r8, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003698:	6822      	ldr	r2, [r4, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800369a:	686b      	ldr	r3, [r5, #4]
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800369c:	fa08 f809 	lsl.w	r8, r8, r9
 80036a0:	ea6f 0808 	mvn.w	r8, r8
 80036a4:	ea08 0102 	and.w	r1, r8, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036a8:	f003 0203 	and.w	r2, r3, #3
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036ac:	f023 0310 	bic.w	r3, r3, #16
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036b0:	fa02 f209 	lsl.w	r2, r2, r9
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036b4:	3b01      	subs	r3, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036b6:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036b8:	2b01      	cmp	r3, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 80036ba:	6022      	str	r2, [r4, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036bc:	d817      	bhi.n	80036ee <HAL_GPIO_Init+0x14e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80036be:	68eb      	ldr	r3, [r5, #12]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d903      	bls.n	80036cc <HAL_GPIO_Init+0x12c>
 80036c4:	484a      	ldr	r0, [pc, #296]	; (80037f0 <HAL_GPIO_Init+0x250>)
 80036c6:	21ec      	movs	r1, #236	; 0xec
 80036c8:	f7fd feec 	bl	80014a4 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036cc:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036ce:	ea08 0203 	and.w	r2, r8, r3
        temp |= (GPIO_Init->Speed << (position * 2));
 80036d2:	68eb      	ldr	r3, [r5, #12]
 80036d4:	fa03 f309 	lsl.w	r3, r3, r9
 80036d8:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 80036da:	60a3      	str	r3, [r4, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036dc:	6863      	ldr	r3, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036de:	ea23 0207 	bic.w	r2, r3, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80036e2:	686b      	ldr	r3, [r5, #4]
 80036e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80036e8:	40b3      	lsls	r3, r6
 80036ea:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 80036ec:	6063      	str	r3, [r4, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036ee:	68e3      	ldr	r3, [r4, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036f0:	6869      	ldr	r1, [r5, #4]
        GPIOx->OTYPER = temp;
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80036f2:	ea08 0803 	and.w	r8, r8, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80036f6:	68ab      	ldr	r3, [r5, #8]
 80036f8:	fa03 f309 	lsl.w	r3, r3, r9
 80036fc:	ea48 0303 	orr.w	r3, r8, r3
      GPIOx->PUPDR = temp;
 8003700:	60e3      	str	r3, [r4, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003702:	00cb      	lsls	r3, r1, #3
 8003704:	d56c      	bpl.n	80037e0 <HAL_GPIO_Init+0x240>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003706:	4a3d      	ldr	r2, [pc, #244]	; (80037fc <HAL_GPIO_Init+0x25c>)
 8003708:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800370a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800370e:	6453      	str	r3, [r2, #68]	; 0x44
 8003710:	f026 0203 	bic.w	r2, r6, #3
 8003714:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003718:	f502 329c 	add.w	r2, r2, #79872	; 0x13800

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800371c:	f006 0e03 	and.w	lr, r6, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 8003720:	6890      	ldr	r0, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003722:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003726:	230f      	movs	r3, #15
 8003728:	fa03 f30e 	lsl.w	r3, r3, lr
 800372c:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003730:	4b2e      	ldr	r3, [pc, #184]	; (80037ec <HAL_GPIO_Init+0x24c>)
 8003732:	429c      	cmp	r4, r3
 8003734:	d022      	beq.n	800377c <HAL_GPIO_Init+0x1dc>
 8003736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800373a:	429c      	cmp	r4, r3
 800373c:	d020      	beq.n	8003780 <HAL_GPIO_Init+0x1e0>
 800373e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003742:	429c      	cmp	r4, r3
 8003744:	d01e      	beq.n	8003784 <HAL_GPIO_Init+0x1e4>
 8003746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800374a:	429c      	cmp	r4, r3
 800374c:	d01c      	beq.n	8003788 <HAL_GPIO_Init+0x1e8>
 800374e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003752:	429c      	cmp	r4, r3
 8003754:	d01a      	beq.n	800378c <HAL_GPIO_Init+0x1ec>
 8003756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800375a:	429c      	cmp	r4, r3
 800375c:	d018      	beq.n	8003790 <HAL_GPIO_Init+0x1f0>
 800375e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003762:	429c      	cmp	r4, r3
 8003764:	d016      	beq.n	8003794 <HAL_GPIO_Init+0x1f4>
 8003766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800376a:	429c      	cmp	r4, r3
 800376c:	d014      	beq.n	8003798 <HAL_GPIO_Init+0x1f8>
 800376e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003772:	429c      	cmp	r4, r3
 8003774:	bf0c      	ite	eq
 8003776:	2308      	moveq	r3, #8
 8003778:	2309      	movne	r3, #9
 800377a:	e00e      	b.n	800379a <HAL_GPIO_Init+0x1fa>
 800377c:	2300      	movs	r3, #0
 800377e:	e00c      	b.n	800379a <HAL_GPIO_Init+0x1fa>
 8003780:	2301      	movs	r3, #1
 8003782:	e00a      	b.n	800379a <HAL_GPIO_Init+0x1fa>
 8003784:	2302      	movs	r3, #2
 8003786:	e008      	b.n	800379a <HAL_GPIO_Init+0x1fa>
 8003788:	2303      	movs	r3, #3
 800378a:	e006      	b.n	800379a <HAL_GPIO_Init+0x1fa>
 800378c:	2304      	movs	r3, #4
 800378e:	e004      	b.n	800379a <HAL_GPIO_Init+0x1fa>
 8003790:	2305      	movs	r3, #5
 8003792:	e002      	b.n	800379a <HAL_GPIO_Init+0x1fa>
 8003794:	2306      	movs	r3, #6
 8003796:	e000      	b.n	800379a <HAL_GPIO_Init+0x1fa>
 8003798:	2307      	movs	r3, #7
 800379a:	fa03 f30e 	lsl.w	r3, r3, lr
 800379e:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037a0:	4817      	ldr	r0, [pc, #92]	; (8003800 <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
 80037a2:	6093      	str	r3, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037a4:	6803      	ldr	r3, [r0, #0]
        temp &= ~((uint32_t)iocurrent);
 80037a6:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037a8:	f411 3f80 	tst.w	r1, #65536	; 0x10000
        {
          temp |= iocurrent;
 80037ac:	bf14      	ite	ne
 80037ae:	433b      	orrne	r3, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80037b0:	4013      	andeq	r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80037b2:	6003      	str	r3, [r0, #0]

        temp = EXTI->EMR;
 80037b4:	6843      	ldr	r3, [r0, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037b6:	0388      	lsls	r0, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80037b8:	4811      	ldr	r0, [pc, #68]	; (8003800 <HAL_GPIO_Init+0x260>)

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80037ba:	bf4c      	ite	mi
 80037bc:	433b      	orrmi	r3, r7
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80037be:	4013      	andpl	r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80037c0:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037c2:	6883      	ldr	r3, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
        {
          temp |= iocurrent;
 80037c8:	bf14      	ite	ne
 80037ca:	433b      	orrne	r3, r7
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80037cc:	4013      	andeq	r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80037ce:	6083      	str	r3, [r0, #8]

        temp = EXTI->FTSR;
 80037d0:	68c3      	ldr	r3, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037d2:	0289      	lsls	r1, r1, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80037d4:	bf54      	ite	pl
 80037d6:	ea02 0703 	andpl.w	r7, r2, r3
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80037da:	431f      	orrmi	r7, r3
        }
        EXTI->FTSR = temp;
 80037dc:	4b08      	ldr	r3, [pc, #32]	; (8003800 <HAL_GPIO_Init+0x260>)
 80037de:	60df      	str	r7, [r3, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80037e0:	3601      	adds	r6, #1
 80037e2:	2e10      	cmp	r6, #16
 80037e4:	f47f af30 	bne.w	8003648 <HAL_GPIO_Init+0xa8>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80037e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037ec:	40020000 	.word	0x40020000
 80037f0:	080080a1 	.word	0x080080a1
 80037f4:	10110000 	.word	0x10110000
 80037f8:	10220000 	.word	0x10220000
 80037fc:	40023800 	.word	0x40023800
 8003800:	40013c00 	.word	0x40013c00

08003804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	4605      	mov	r5, r0
 8003808:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800380a:	460c      	mov	r4, r1
 800380c:	b921      	cbnz	r1, 8003818 <HAL_GPIO_WritePin+0x14>
 800380e:	4808      	ldr	r0, [pc, #32]	; (8003830 <HAL_GPIO_WritePin+0x2c>)
 8003810:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8003814:	f7fd fe46 	bl	80014a4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003818:	2e01      	cmp	r6, #1
 800381a:	d905      	bls.n	8003828 <HAL_GPIO_WritePin+0x24>
 800381c:	4804      	ldr	r0, [pc, #16]	; (8003830 <HAL_GPIO_WritePin+0x2c>)
 800381e:	f240 11ad 	movw	r1, #429	; 0x1ad
 8003822:	f7fd fe3f 	bl	80014a4 <assert_failed>
 8003826:	e001      	b.n	800382c <HAL_GPIO_WritePin+0x28>

  if(PinState != GPIO_PIN_RESET)
 8003828:	b906      	cbnz	r6, 800382c <HAL_GPIO_WritePin+0x28>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800382a:	0424      	lsls	r4, r4, #16
 800382c:	61ac      	str	r4, [r5, #24]
 800382e:	bd70      	pop	{r4, r5, r6, pc}
 8003830:	080080a1 	.word	0x080080a1

08003834 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003834:	b538      	push	{r3, r4, r5, lr}
 8003836:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003838:	460d      	mov	r5, r1
 800383a:	b921      	cbnz	r1, 8003846 <HAL_GPIO_TogglePin+0x12>
 800383c:	4804      	ldr	r0, [pc, #16]	; (8003850 <HAL_GPIO_TogglePin+0x1c>)
 800383e:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003842:	f7fd fe2f 	bl	80014a4 <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 8003846:	6961      	ldr	r1, [r4, #20]
 8003848:	4069      	eors	r1, r5
 800384a:	6161      	str	r1, [r4, #20]
 800384c:	bd38      	pop	{r3, r4, r5, pc}
 800384e:	bf00      	nop
 8003850:	080080a1 	.word	0x080080a1

08003854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003854:	b510      	push	{r4, lr}
 8003856:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003858:	f7fe fb6a 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 800385c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003860:	fbb0 f0f3 	udiv	r0, r0, r3
 8003864:	f7fe fcee 	bl	8002244 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8003868:	f04f 30ff 	mov.w	r0, #4294967295
 800386c:	4621      	mov	r1, r4
 800386e:	2200      	movs	r2, #0
 8003870:	f7fe fc92 	bl	8002198 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8003874:	2000      	movs	r0, #0
 8003876:	bd10      	pop	{r4, pc}

08003878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003878:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800387a:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <HAL_Init+0x28>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003882:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800388a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800388c:	2003      	movs	r0, #3
 800388e:	f7fe fc67 	bl	8002160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003892:	200f      	movs	r0, #15
 8003894:	f7ff ffde 	bl	8003854 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003898:	f7fd ff40 	bl	800171c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800389c:	2000      	movs	r0, #0
 800389e:	bd08      	pop	{r3, pc}
 80038a0:	40023c00 	.word	0x40023c00

080038a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80038a4:	4a02      	ldr	r2, [pc, #8]	; (80038b0 <HAL_IncTick+0xc>)
 80038a6:	6813      	ldr	r3, [r2, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	2000095c 	.word	0x2000095c

080038b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80038b4:	4b01      	ldr	r3, [pc, #4]	; (80038bc <HAL_GetTick+0x8>)
 80038b6:	6818      	ldr	r0, [r3, #0]
}
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	2000095c 	.word	0x2000095c

080038c0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80038c0:	4b01      	ldr	r3, [pc, #4]	; (80038c8 <HAL_GetREVID+0x8>)
 80038c2:	6818      	ldr	r0, [r3, #0]
}
 80038c4:	0c00      	lsrs	r0, r0, #16
 80038c6:	4770      	bx	lr
 80038c8:	e0042000 	.word	0xe0042000

080038cc <test_Cplusplus>:
#include <cstdio>
#include "main.h"

int test_Cplusplus(void){
	std::printf("C++ comes\n");
 80038cc:	4801      	ldr	r0, [pc, #4]	; (80038d4 <test_Cplusplus+0x8>)
 80038ce:	f000 b845 	b.w	800395c <puts>
 80038d2:	bf00      	nop
 80038d4:	080080f1 	.word	0x080080f1

080038d8 <printf>:
 80038d8:	b40f      	push	{r0, r1, r2, r3}
 80038da:	b500      	push	{lr}
 80038dc:	4907      	ldr	r1, [pc, #28]	; (80038fc <printf+0x24>)
 80038de:	b083      	sub	sp, #12
 80038e0:	ab04      	add	r3, sp, #16
 80038e2:	6808      	ldr	r0, [r1, #0]
 80038e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80038e8:	6881      	ldr	r1, [r0, #8]
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	f000 f86c 	bl	80039c8 <_vfprintf_r>
 80038f0:	b003      	add	sp, #12
 80038f2:	f85d eb04 	ldr.w	lr, [sp], #4
 80038f6:	b004      	add	sp, #16
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000430 	.word	0x20000430

08003900 <_puts_r>:
 8003900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003902:	4604      	mov	r4, r0
 8003904:	b089      	sub	sp, #36	; 0x24
 8003906:	4608      	mov	r0, r1
 8003908:	460d      	mov	r5, r1
 800390a:	f000 f82f 	bl	800396c <strlen>
 800390e:	68a3      	ldr	r3, [r4, #8]
 8003910:	4f11      	ldr	r7, [pc, #68]	; (8003958 <_puts_r+0x58>)
 8003912:	899a      	ldrh	r2, [r3, #12]
 8003914:	9504      	str	r5, [sp, #16]
 8003916:	2102      	movs	r1, #2
 8003918:	f100 0e01 	add.w	lr, r0, #1
 800391c:	2601      	movs	r6, #1
 800391e:	ad04      	add	r5, sp, #16
 8003920:	9102      	str	r1, [sp, #8]
 8003922:	0491      	lsls	r1, r2, #18
 8003924:	9005      	str	r0, [sp, #20]
 8003926:	f8cd e00c 	str.w	lr, [sp, #12]
 800392a:	9706      	str	r7, [sp, #24]
 800392c:	9607      	str	r6, [sp, #28]
 800392e:	9501      	str	r5, [sp, #4]
 8003930:	d406      	bmi.n	8003940 <_puts_r+0x40>
 8003932:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003938:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800393c:	819a      	strh	r2, [r3, #12]
 800393e:	6659      	str	r1, [r3, #100]	; 0x64
 8003940:	4620      	mov	r0, r4
 8003942:	4619      	mov	r1, r3
 8003944:	aa01      	add	r2, sp, #4
 8003946:	f002 fd21 	bl	800638c <__sfvwrite_r>
 800394a:	2800      	cmp	r0, #0
 800394c:	bf14      	ite	ne
 800394e:	f04f 30ff 	movne.w	r0, #4294967295
 8003952:	200a      	moveq	r0, #10
 8003954:	b009      	add	sp, #36	; 0x24
 8003956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003958:	080080fc 	.word	0x080080fc

0800395c <puts>:
 800395c:	4b02      	ldr	r3, [pc, #8]	; (8003968 <puts+0xc>)
 800395e:	4601      	mov	r1, r0
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	f7ff bfcd 	b.w	8003900 <_puts_r>
 8003966:	bf00      	nop
 8003968:	20000430 	.word	0x20000430

0800396c <strlen>:
 800396c:	f020 0103 	bic.w	r1, r0, #3
 8003970:	f010 0003 	ands.w	r0, r0, #3
 8003974:	f1c0 0000 	rsb	r0, r0, #0
 8003978:	f851 3b04 	ldr.w	r3, [r1], #4
 800397c:	f100 0c04 	add.w	ip, r0, #4
 8003980:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8003984:	f06f 0200 	mvn.w	r2, #0
 8003988:	bf1c      	itt	ne
 800398a:	fa22 f20c 	lsrne.w	r2, r2, ip
 800398e:	4313      	orrne	r3, r2
 8003990:	f04f 0c01 	mov.w	ip, #1
 8003994:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8003998:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800399c:	eba3 020c 	sub.w	r2, r3, ip
 80039a0:	ea22 0203 	bic.w	r2, r2, r3
 80039a4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80039a8:	bf04      	itt	eq
 80039aa:	f851 3b04 	ldreq.w	r3, [r1], #4
 80039ae:	3004      	addeq	r0, #4
 80039b0:	d0f4      	beq.n	800399c <strlen+0x30>
 80039b2:	f1c2 0100 	rsb	r1, r2, #0
 80039b6:	ea02 0201 	and.w	r2, r2, r1
 80039ba:	fab2 f282 	clz	r2, r2
 80039be:	f1c2 021f 	rsb	r2, r2, #31
 80039c2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80039c6:	4770      	bx	lr

080039c8 <_vfprintf_r>:
 80039c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039cc:	b0bf      	sub	sp, #252	; 0xfc
 80039ce:	461c      	mov	r4, r3
 80039d0:	4689      	mov	r9, r1
 80039d2:	9208      	str	r2, [sp, #32]
 80039d4:	4607      	mov	r7, r0
 80039d6:	f002 fe99 	bl	800670c <_localeconv_r>
 80039da:	6803      	ldr	r3, [r0, #0]
 80039dc:	9315      	str	r3, [sp, #84]	; 0x54
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff ffc4 	bl	800396c <strlen>
 80039e4:	940c      	str	r4, [sp, #48]	; 0x30
 80039e6:	9016      	str	r0, [sp, #88]	; 0x58
 80039e8:	b11f      	cbz	r7, 80039f2 <_vfprintf_r+0x2a>
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80f3 	beq.w	8003bd8 <_vfprintf_r+0x210>
 80039f2:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 80039f6:	b293      	uxth	r3, r2
 80039f8:	049d      	lsls	r5, r3, #18
 80039fa:	d40a      	bmi.n	8003a12 <_vfprintf_r+0x4a>
 80039fc:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 8003a00:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8003a04:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8003a08:	f8a9 300c 	strh.w	r3, [r9, #12]
 8003a0c:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	0718      	lsls	r0, r3, #28
 8003a14:	f140 80aa 	bpl.w	8003b6c <_vfprintf_r+0x1a4>
 8003a18:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8003a1c:	2a00      	cmp	r2, #0
 8003a1e:	f000 80a5 	beq.w	8003b6c <_vfprintf_r+0x1a4>
 8003a22:	f003 031a 	and.w	r3, r3, #26
 8003a26:	2b0a      	cmp	r3, #10
 8003a28:	f000 80ac 	beq.w	8003b84 <_vfprintf_r+0x1bc>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	461a      	mov	r2, r3
 8003a30:	9311      	str	r3, [sp, #68]	; 0x44
 8003a32:	9323      	str	r3, [sp, #140]	; 0x8c
 8003a34:	9322      	str	r3, [sp, #136]	; 0x88
 8003a36:	9314      	str	r3, [sp, #80]	; 0x50
 8003a38:	9317      	str	r3, [sp, #92]	; 0x5c
 8003a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a3c:	ab2e      	add	r3, sp, #184	; 0xb8
 8003a3e:	469c      	mov	ip, r3
 8003a40:	9321      	str	r3, [sp, #132]	; 0x84
 8003a42:	9212      	str	r2, [sp, #72]	; 0x48
 8003a44:	9213      	str	r2, [sp, #76]	; 0x4c
 8003a46:	4664      	mov	r4, ip
 8003a48:	46b8      	mov	r8, r7
 8003a4a:	9d08      	ldr	r5, [sp, #32]
 8003a4c:	782b      	ldrb	r3, [r5, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80c6 	beq.w	8003be0 <_vfprintf_r+0x218>
 8003a54:	2b25      	cmp	r3, #37	; 0x25
 8003a56:	d102      	bne.n	8003a5e <_vfprintf_r+0x96>
 8003a58:	e0c2      	b.n	8003be0 <_vfprintf_r+0x218>
 8003a5a:	2b25      	cmp	r3, #37	; 0x25
 8003a5c:	d003      	beq.n	8003a66 <_vfprintf_r+0x9e>
 8003a5e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f9      	bne.n	8003a5a <_vfprintf_r+0x92>
 8003a66:	9b08      	ldr	r3, [sp, #32]
 8003a68:	1aee      	subs	r6, r5, r3
 8003a6a:	b17e      	cbz	r6, 8003a8c <_vfprintf_r+0xc4>
 8003a6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a6e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003a70:	9908      	ldr	r1, [sp, #32]
 8003a72:	6021      	str	r1, [r4, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	4432      	add	r2, r6
 8003a78:	2b07      	cmp	r3, #7
 8003a7a:	6066      	str	r6, [r4, #4]
 8003a7c:	9223      	str	r2, [sp, #140]	; 0x8c
 8003a7e:	9322      	str	r3, [sp, #136]	; 0x88
 8003a80:	f300 8093 	bgt.w	8003baa <_vfprintf_r+0x1e2>
 8003a84:	3408      	adds	r4, #8
 8003a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a88:	4433      	add	r3, r6
 8003a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a8c:	782b      	ldrb	r3, [r5, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8093 	beq.w	8003bba <_vfprintf_r+0x1f2>
 8003a94:	2300      	movs	r3, #0
 8003a96:	1c69      	adds	r1, r5, #1
 8003a98:	f04f 3aff 	mov.w	sl, #4294967295
 8003a9c:	786d      	ldrb	r5, [r5, #1]
 8003a9e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	930a      	str	r3, [sp, #40]	; 0x28
 8003aa6:	9306      	str	r3, [sp, #24]
 8003aa8:	4656      	mov	r6, sl
 8003aaa:	1c4b      	adds	r3, r1, #1
 8003aac:	f1a5 0120 	sub.w	r1, r5, #32
 8003ab0:	2958      	cmp	r1, #88	; 0x58
 8003ab2:	f200 83c1 	bhi.w	8004238 <_vfprintf_r+0x870>
 8003ab6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003aba:	0256      	.short	0x0256
 8003abc:	03bf03bf 	.word	0x03bf03bf
 8003ac0:	03bf02f6 	.word	0x03bf02f6
 8003ac4:	03bf03bf 	.word	0x03bf03bf
 8003ac8:	03bf03bf 	.word	0x03bf03bf
 8003acc:	02fd03bf 	.word	0x02fd03bf
 8003ad0:	03bf02c6 	.word	0x03bf02c6
 8003ad4:	034701f2 	.word	0x034701f2
 8003ad8:	02ca03bf 	.word	0x02ca03bf
 8003adc:	02d102d1 	.word	0x02d102d1
 8003ae0:	02d102d1 	.word	0x02d102d1
 8003ae4:	02d102d1 	.word	0x02d102d1
 8003ae8:	02d102d1 	.word	0x02d102d1
 8003aec:	03bf02d1 	.word	0x03bf02d1
 8003af0:	03bf03bf 	.word	0x03bf03bf
 8003af4:	03bf03bf 	.word	0x03bf03bf
 8003af8:	03bf03bf 	.word	0x03bf03bf
 8003afc:	03bf03bf 	.word	0x03bf03bf
 8003b00:	026b03bf 	.word	0x026b03bf
 8003b04:	03bf028d 	.word	0x03bf028d
 8003b08:	03bf028d 	.word	0x03bf028d
 8003b0c:	03bf03bf 	.word	0x03bf03bf
 8003b10:	02bf03bf 	.word	0x02bf03bf
 8003b14:	03bf03bf 	.word	0x03bf03bf
 8003b18:	03bf0362 	.word	0x03bf0362
 8003b1c:	03bf03bf 	.word	0x03bf03bf
 8003b20:	03bf03bf 	.word	0x03bf03bf
 8003b24:	03bf03a9 	.word	0x03bf03a9
 8003b28:	037f03bf 	.word	0x037f03bf
 8003b2c:	03bf03bf 	.word	0x03bf03bf
 8003b30:	03bf03bf 	.word	0x03bf03bf
 8003b34:	03bf03bf 	.word	0x03bf03bf
 8003b38:	03bf03bf 	.word	0x03bf03bf
 8003b3c:	03bf03bf 	.word	0x03bf03bf
 8003b40:	030b0394 	.word	0x030b0394
 8003b44:	028d028d 	.word	0x028d028d
 8003b48:	0324028d 	.word	0x0324028d
 8003b4c:	03bf030b 	.word	0x03bf030b
 8003b50:	032b03bf 	.word	0x032b03bf
 8003b54:	033503bf 	.word	0x033503bf
 8003b58:	02e001f9 	.word	0x02e001f9
 8003b5c:	03bf025d 	.word	0x03bf025d
 8003b60:	03bf020b 	.word	0x03bf020b
 8003b64:	03bf0095 	.word	0x03bf0095
 8003b68:	023003bf 	.word	0x023003bf
 8003b6c:	4638      	mov	r0, r7
 8003b6e:	4649      	mov	r1, r9
 8003b70:	f001 f95a 	bl	8004e28 <__swsetup_r>
 8003b74:	b9a0      	cbnz	r0, 8003ba0 <_vfprintf_r+0x1d8>
 8003b76:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003b7a:	f003 031a 	and.w	r3, r3, #26
 8003b7e:	2b0a      	cmp	r3, #10
 8003b80:	f47f af54 	bne.w	8003a2c <_vfprintf_r+0x64>
 8003b84:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f6ff af4f 	blt.w	8003a2c <_vfprintf_r+0x64>
 8003b8e:	4638      	mov	r0, r7
 8003b90:	4649      	mov	r1, r9
 8003b92:	9a08      	ldr	r2, [sp, #32]
 8003b94:	4623      	mov	r3, r4
 8003b96:	f001 f90b 	bl	8004db0 <__sbprintf>
 8003b9a:	b03f      	add	sp, #252	; 0xfc
 8003b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba4:	b03f      	add	sp, #252	; 0xfc
 8003ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003baa:	4640      	mov	r0, r8
 8003bac:	4649      	mov	r1, r9
 8003bae:	aa21      	add	r2, sp, #132	; 0x84
 8003bb0:	f003 ff54 	bl	8007a5c <__sprint_r>
 8003bb4:	b940      	cbnz	r0, 8003bc8 <_vfprintf_r+0x200>
 8003bb6:	ac2e      	add	r4, sp, #184	; 0xb8
 8003bb8:	e765      	b.n	8003a86 <_vfprintf_r+0xbe>
 8003bba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003bbc:	b123      	cbz	r3, 8003bc8 <_vfprintf_r+0x200>
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	aa21      	add	r2, sp, #132	; 0x84
 8003bc4:	f003 ff4a 	bl	8007a5c <__sprint_r>
 8003bc8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003bcc:	065a      	lsls	r2, r3, #25
 8003bce:	d4e7      	bmi.n	8003ba0 <_vfprintf_r+0x1d8>
 8003bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bd2:	b03f      	add	sp, #252	; 0xfc
 8003bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bd8:	4638      	mov	r0, r7
 8003bda:	f002 faa7 	bl	800612c <__sinit>
 8003bde:	e708      	b.n	80039f2 <_vfprintf_r+0x2a>
 8003be0:	9d08      	ldr	r5, [sp, #32]
 8003be2:	e753      	b.n	8003a8c <_vfprintf_r+0xc4>
 8003be4:	9308      	str	r3, [sp, #32]
 8003be6:	9b06      	ldr	r3, [sp, #24]
 8003be8:	46b2      	mov	sl, r6
 8003bea:	069e      	lsls	r6, r3, #26
 8003bec:	f140 8318 	bpl.w	8004220 <_vfprintf_r+0x858>
 8003bf0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003bf2:	3707      	adds	r7, #7
 8003bf4:	f027 0307 	bic.w	r3, r7, #7
 8003bf8:	f103 0208 	add.w	r2, r3, #8
 8003bfc:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003c00:	920c      	str	r2, [sp, #48]	; 0x30
 8003c02:	2301      	movs	r3, #1
 8003c04:	f04f 0c00 	mov.w	ip, #0
 8003c08:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8003c0c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8003c10:	f1ba 0f00 	cmp.w	sl, #0
 8003c14:	db03      	blt.n	8003c1e <_vfprintf_r+0x256>
 8003c16:	9a06      	ldr	r2, [sp, #24]
 8003c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c1c:	9206      	str	r2, [sp, #24]
 8003c1e:	ea56 0207 	orrs.w	r2, r6, r7
 8003c22:	f040 8319 	bne.w	8004258 <_vfprintf_r+0x890>
 8003c26:	f1ba 0f00 	cmp.w	sl, #0
 8003c2a:	f000 8416 	beq.w	800445a <_vfprintf_r+0xa92>
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	f000 831a 	beq.w	8004268 <_vfprintf_r+0x8a0>
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	f000 844c 	beq.w	80044d2 <_vfprintf_r+0xb0a>
 8003c3a:	a92e      	add	r1, sp, #184	; 0xb8
 8003c3c:	08f2      	lsrs	r2, r6, #3
 8003c3e:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8003c42:	08f8      	lsrs	r0, r7, #3
 8003c44:	f006 0307 	and.w	r3, r6, #7
 8003c48:	4607      	mov	r7, r0
 8003c4a:	4616      	mov	r6, r2
 8003c4c:	3330      	adds	r3, #48	; 0x30
 8003c4e:	ea56 0207 	orrs.w	r2, r6, r7
 8003c52:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8003c56:	d1f1      	bne.n	8003c3c <_vfprintf_r+0x274>
 8003c58:	9a06      	ldr	r2, [sp, #24]
 8003c5a:	910e      	str	r1, [sp, #56]	; 0x38
 8003c5c:	07d0      	lsls	r0, r2, #31
 8003c5e:	f100 850d 	bmi.w	800467c <_vfprintf_r+0xcb4>
 8003c62:	ab2e      	add	r3, sp, #184	; 0xb8
 8003c64:	1a5b      	subs	r3, r3, r1
 8003c66:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c6a:	4592      	cmp	sl, r2
 8003c6c:	4653      	mov	r3, sl
 8003c6e:	bfb8      	it	lt
 8003c70:	4613      	movlt	r3, r2
 8003c72:	9307      	str	r3, [sp, #28]
 8003c74:	2300      	movs	r3, #0
 8003c76:	9310      	str	r3, [sp, #64]	; 0x40
 8003c78:	f1bc 0f00 	cmp.w	ip, #0
 8003c7c:	d002      	beq.n	8003c84 <_vfprintf_r+0x2bc>
 8003c7e:	9b07      	ldr	r3, [sp, #28]
 8003c80:	3301      	adds	r3, #1
 8003c82:	9307      	str	r3, [sp, #28]
 8003c84:	9b06      	ldr	r3, [sp, #24]
 8003c86:	f013 0302 	ands.w	r3, r3, #2
 8003c8a:	930d      	str	r3, [sp, #52]	; 0x34
 8003c8c:	d002      	beq.n	8003c94 <_vfprintf_r+0x2cc>
 8003c8e:	9b07      	ldr	r3, [sp, #28]
 8003c90:	3302      	adds	r3, #2
 8003c92:	9307      	str	r3, [sp, #28]
 8003c94:	9b06      	ldr	r3, [sp, #24]
 8003c96:	f013 0684 	ands.w	r6, r3, #132	; 0x84
 8003c9a:	f040 82da 	bne.w	8004252 <_vfprintf_r+0x88a>
 8003c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ca0:	9a07      	ldr	r2, [sp, #28]
 8003ca2:	ebc2 0a03 	rsb	sl, r2, r3
 8003ca6:	f1ba 0f00 	cmp.w	sl, #0
 8003caa:	f340 82d2 	ble.w	8004252 <_vfprintf_r+0x88a>
 8003cae:	f1ba 0f10 	cmp.w	sl, #16
 8003cb2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003cb4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003cb6:	4fb3      	ldr	r7, [pc, #716]	; (8003f84 <_vfprintf_r+0x5bc>)
 8003cb8:	bfc8      	it	gt
 8003cba:	f04f 0b10 	movgt.w	fp, #16
 8003cbe:	dc07      	bgt.n	8003cd0 <_vfprintf_r+0x308>
 8003cc0:	e01e      	b.n	8003d00 <_vfprintf_r+0x338>
 8003cc2:	f1aa 0a10 	sub.w	sl, sl, #16
 8003cc6:	f1ba 0f10 	cmp.w	sl, #16
 8003cca:	f104 0408 	add.w	r4, r4, #8
 8003cce:	dd17      	ble.n	8003d00 <_vfprintf_r+0x338>
 8003cd0:	3201      	adds	r2, #1
 8003cd2:	3110      	adds	r1, #16
 8003cd4:	2a07      	cmp	r2, #7
 8003cd6:	9123      	str	r1, [sp, #140]	; 0x8c
 8003cd8:	9222      	str	r2, [sp, #136]	; 0x88
 8003cda:	e884 0880 	stmia.w	r4, {r7, fp}
 8003cde:	ddf0      	ble.n	8003cc2 <_vfprintf_r+0x2fa>
 8003ce0:	4640      	mov	r0, r8
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	aa21      	add	r2, sp, #132	; 0x84
 8003ce6:	f003 feb9 	bl	8007a5c <__sprint_r>
 8003cea:	2800      	cmp	r0, #0
 8003cec:	f47f af6c 	bne.w	8003bc8 <_vfprintf_r+0x200>
 8003cf0:	f1aa 0a10 	sub.w	sl, sl, #16
 8003cf4:	f1ba 0f10 	cmp.w	sl, #16
 8003cf8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003cfa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003cfc:	ac2e      	add	r4, sp, #184	; 0xb8
 8003cfe:	dce7      	bgt.n	8003cd0 <_vfprintf_r+0x308>
 8003d00:	3201      	adds	r2, #1
 8003d02:	eb0a 0b01 	add.w	fp, sl, r1
 8003d06:	2a07      	cmp	r2, #7
 8003d08:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003d0c:	9222      	str	r2, [sp, #136]	; 0x88
 8003d0e:	e884 0480 	stmia.w	r4, {r7, sl}
 8003d12:	f300 8443 	bgt.w	800459c <_vfprintf_r+0xbd4>
 8003d16:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8003d1a:	3408      	adds	r4, #8
 8003d1c:	f1bc 0f00 	cmp.w	ip, #0
 8003d20:	d00f      	beq.n	8003d42 <_vfprintf_r+0x37a>
 8003d22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d24:	3301      	adds	r3, #1
 8003d26:	f10b 0b01 	add.w	fp, fp, #1
 8003d2a:	f10d 0167 	add.w	r1, sp, #103	; 0x67
 8003d2e:	2201      	movs	r2, #1
 8003d30:	2b07      	cmp	r3, #7
 8003d32:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003d36:	9322      	str	r3, [sp, #136]	; 0x88
 8003d38:	e884 0006 	stmia.w	r4, {r1, r2}
 8003d3c:	f300 83b7 	bgt.w	80044ae <_vfprintf_r+0xae6>
 8003d40:	3408      	adds	r4, #8
 8003d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d44:	b173      	cbz	r3, 8003d64 <_vfprintf_r+0x39c>
 8003d46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d48:	3301      	adds	r3, #1
 8003d4a:	f10b 0b02 	add.w	fp, fp, #2
 8003d4e:	a91a      	add	r1, sp, #104	; 0x68
 8003d50:	2202      	movs	r2, #2
 8003d52:	2b07      	cmp	r3, #7
 8003d54:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003d58:	9322      	str	r3, [sp, #136]	; 0x88
 8003d5a:	e884 0006 	stmia.w	r4, {r1, r2}
 8003d5e:	f300 839a 	bgt.w	8004496 <_vfprintf_r+0xace>
 8003d62:	3408      	adds	r4, #8
 8003d64:	2e80      	cmp	r6, #128	; 0x80
 8003d66:	f000 82ea 	beq.w	800433e <_vfprintf_r+0x976>
 8003d6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d6e:	ebc2 0a03 	rsb	sl, r2, r3
 8003d72:	f1ba 0f00 	cmp.w	sl, #0
 8003d76:	dd32      	ble.n	8003dde <_vfprintf_r+0x416>
 8003d78:	f1ba 0f10 	cmp.w	sl, #16
 8003d7c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003d7e:	4f82      	ldr	r7, [pc, #520]	; (8003f88 <_vfprintf_r+0x5c0>)
 8003d80:	dd22      	ble.n	8003dc8 <_vfprintf_r+0x400>
 8003d82:	2610      	movs	r6, #16
 8003d84:	465b      	mov	r3, fp
 8003d86:	e006      	b.n	8003d96 <_vfprintf_r+0x3ce>
 8003d88:	f1aa 0a10 	sub.w	sl, sl, #16
 8003d8c:	f1ba 0f10 	cmp.w	sl, #16
 8003d90:	f104 0408 	add.w	r4, r4, #8
 8003d94:	dd17      	ble.n	8003dc6 <_vfprintf_r+0x3fe>
 8003d96:	3201      	adds	r2, #1
 8003d98:	3310      	adds	r3, #16
 8003d9a:	2a07      	cmp	r2, #7
 8003d9c:	9323      	str	r3, [sp, #140]	; 0x8c
 8003d9e:	9222      	str	r2, [sp, #136]	; 0x88
 8003da0:	6027      	str	r7, [r4, #0]
 8003da2:	6066      	str	r6, [r4, #4]
 8003da4:	ddf0      	ble.n	8003d88 <_vfprintf_r+0x3c0>
 8003da6:	4640      	mov	r0, r8
 8003da8:	4649      	mov	r1, r9
 8003daa:	aa21      	add	r2, sp, #132	; 0x84
 8003dac:	f003 fe56 	bl	8007a5c <__sprint_r>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	f47f af09 	bne.w	8003bc8 <_vfprintf_r+0x200>
 8003db6:	f1aa 0a10 	sub.w	sl, sl, #16
 8003dba:	f1ba 0f10 	cmp.w	sl, #16
 8003dbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003dc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003dc2:	ac2e      	add	r4, sp, #184	; 0xb8
 8003dc4:	dce7      	bgt.n	8003d96 <_vfprintf_r+0x3ce>
 8003dc6:	469b      	mov	fp, r3
 8003dc8:	3201      	adds	r2, #1
 8003dca:	44d3      	add	fp, sl
 8003dcc:	2a07      	cmp	r2, #7
 8003dce:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003dd2:	9222      	str	r2, [sp, #136]	; 0x88
 8003dd4:	e884 0480 	stmia.w	r4, {r7, sl}
 8003dd8:	f300 8351 	bgt.w	800447e <_vfprintf_r+0xab6>
 8003ddc:	3408      	adds	r4, #8
 8003dde:	9b06      	ldr	r3, [sp, #24]
 8003de0:	05db      	lsls	r3, r3, #23
 8003de2:	f100 8255 	bmi.w	8004290 <_vfprintf_r+0x8c8>
 8003de6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003de8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003dea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003dec:	6022      	str	r2, [r4, #0]
 8003dee:	3301      	adds	r3, #1
 8003df0:	448b      	add	fp, r1
 8003df2:	2b07      	cmp	r3, #7
 8003df4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003df8:	6061      	str	r1, [r4, #4]
 8003dfa:	9322      	str	r3, [sp, #136]	; 0x88
 8003dfc:	f300 8317 	bgt.w	800442e <_vfprintf_r+0xa66>
 8003e00:	3408      	adds	r4, #8
 8003e02:	9b06      	ldr	r3, [sp, #24]
 8003e04:	0759      	lsls	r1, r3, #29
 8003e06:	d53a      	bpl.n	8003e7e <_vfprintf_r+0x4b6>
 8003e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e0a:	9a07      	ldr	r2, [sp, #28]
 8003e0c:	1a9d      	subs	r5, r3, r2
 8003e0e:	2d00      	cmp	r5, #0
 8003e10:	dd35      	ble.n	8003e7e <_vfprintf_r+0x4b6>
 8003e12:	2d10      	cmp	r5, #16
 8003e14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e16:	4f5b      	ldr	r7, [pc, #364]	; (8003f84 <_vfprintf_r+0x5bc>)
 8003e18:	dd1e      	ble.n	8003e58 <_vfprintf_r+0x490>
 8003e1a:	2610      	movs	r6, #16
 8003e1c:	465a      	mov	r2, fp
 8003e1e:	e004      	b.n	8003e2a <_vfprintf_r+0x462>
 8003e20:	3d10      	subs	r5, #16
 8003e22:	2d10      	cmp	r5, #16
 8003e24:	f104 0408 	add.w	r4, r4, #8
 8003e28:	dd15      	ble.n	8003e56 <_vfprintf_r+0x48e>
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	3210      	adds	r2, #16
 8003e2e:	2b07      	cmp	r3, #7
 8003e30:	9223      	str	r2, [sp, #140]	; 0x8c
 8003e32:	9322      	str	r3, [sp, #136]	; 0x88
 8003e34:	6027      	str	r7, [r4, #0]
 8003e36:	6066      	str	r6, [r4, #4]
 8003e38:	ddf2      	ble.n	8003e20 <_vfprintf_r+0x458>
 8003e3a:	4640      	mov	r0, r8
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	aa21      	add	r2, sp, #132	; 0x84
 8003e40:	f003 fe0c 	bl	8007a5c <__sprint_r>
 8003e44:	2800      	cmp	r0, #0
 8003e46:	f47f aebf 	bne.w	8003bc8 <_vfprintf_r+0x200>
 8003e4a:	3d10      	subs	r5, #16
 8003e4c:	2d10      	cmp	r5, #16
 8003e4e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003e50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e52:	ac2e      	add	r4, sp, #184	; 0xb8
 8003e54:	dce9      	bgt.n	8003e2a <_vfprintf_r+0x462>
 8003e56:	4693      	mov	fp, r2
 8003e58:	3301      	adds	r3, #1
 8003e5a:	44ab      	add	fp, r5
 8003e5c:	2b07      	cmp	r3, #7
 8003e5e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003e62:	9322      	str	r3, [sp, #136]	; 0x88
 8003e64:	6027      	str	r7, [r4, #0]
 8003e66:	6065      	str	r5, [r4, #4]
 8003e68:	dd09      	ble.n	8003e7e <_vfprintf_r+0x4b6>
 8003e6a:	4640      	mov	r0, r8
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	aa21      	add	r2, sp, #132	; 0x84
 8003e70:	f003 fdf4 	bl	8007a5c <__sprint_r>
 8003e74:	2800      	cmp	r0, #0
 8003e76:	f47f aea7 	bne.w	8003bc8 <_vfprintf_r+0x200>
 8003e7a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8003e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e80:	9a07      	ldr	r2, [sp, #28]
 8003e82:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003e84:	428a      	cmp	r2, r1
 8003e86:	bfac      	ite	ge
 8003e88:	189b      	addge	r3, r3, r2
 8003e8a:	185b      	addlt	r3, r3, r1
 8003e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e8e:	f1bb 0f00 	cmp.w	fp, #0
 8003e92:	f040 82d8 	bne.w	8004446 <_vfprintf_r+0xa7e>
 8003e96:	2300      	movs	r3, #0
 8003e98:	9322      	str	r3, [sp, #136]	; 0x88
 8003e9a:	ac2e      	add	r4, sp, #184	; 0xb8
 8003e9c:	e5d5      	b.n	8003a4a <_vfprintf_r+0x82>
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	9806      	ldr	r0, [sp, #24]
 8003ea2:	781d      	ldrb	r5, [r3, #0]
 8003ea4:	f040 0004 	orr.w	r0, r0, #4
 8003ea8:	9006      	str	r0, [sp, #24]
 8003eaa:	e5fe      	b.n	8003aaa <_vfprintf_r+0xe2>
 8003eac:	9308      	str	r3, [sp, #32]
 8003eae:	9b06      	ldr	r3, [sp, #24]
 8003eb0:	f013 0320 	ands.w	r3, r3, #32
 8003eb4:	46b2      	mov	sl, r6
 8003eb6:	f000 816d 	beq.w	8004194 <_vfprintf_r+0x7cc>
 8003eba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003ebc:	3707      	adds	r7, #7
 8003ebe:	f027 0307 	bic.w	r3, r7, #7
 8003ec2:	f103 0208 	add.w	r2, r3, #8
 8003ec6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003eca:	920c      	str	r2, [sp, #48]	; 0x30
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e699      	b.n	8003c04 <_vfprintf_r+0x23c>
 8003ed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ed2:	9308      	str	r3, [sp, #32]
 8003ed4:	6813      	ldr	r3, [r2, #0]
 8003ed6:	930e      	str	r3, [sp, #56]	; 0x38
 8003ed8:	f04f 0b00 	mov.w	fp, #0
 8003edc:	f88d b067 	strb.w	fp, [sp, #103]	; 0x67
 8003ee0:	1d17      	adds	r7, r2, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 864f 	beq.w	8004b86 <_vfprintf_r+0x11be>
 8003ee8:	2e00      	cmp	r6, #0
 8003eea:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003eec:	f2c0 8601 	blt.w	8004af2 <_vfprintf_r+0x112a>
 8003ef0:	4659      	mov	r1, fp
 8003ef2:	4632      	mov	r2, r6
 8003ef4:	f002 ff0c 	bl	8006d10 <memchr>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	f000 8680 	beq.w	8004bfe <_vfprintf_r+0x1236>
 8003efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f00:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8003f04:	1ac3      	subs	r3, r0, r3
 8003f06:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f08:	970c      	str	r7, [sp, #48]	; 0x30
 8003f0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003f0e:	9307      	str	r3, [sp, #28]
 8003f10:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8003f14:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8003f18:	e6ae      	b.n	8003c78 <_vfprintf_r+0x2b0>
 8003f1a:	9308      	str	r3, [sp, #32]
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <_vfprintf_r+0x5c4>)
 8003f1e:	9314      	str	r3, [sp, #80]	; 0x50
 8003f20:	9b06      	ldr	r3, [sp, #24]
 8003f22:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003f26:	0699      	lsls	r1, r3, #26
 8003f28:	46b2      	mov	sl, r6
 8003f2a:	f140 814f 	bpl.w	80041cc <_vfprintf_r+0x804>
 8003f2e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003f30:	3707      	adds	r7, #7
 8003f32:	f027 0307 	bic.w	r3, r7, #7
 8003f36:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003f3a:	f103 0208 	add.w	r2, r3, #8
 8003f3e:	920c      	str	r2, [sp, #48]	; 0x30
 8003f40:	9b06      	ldr	r3, [sp, #24]
 8003f42:	07db      	lsls	r3, r3, #31
 8003f44:	f140 82de 	bpl.w	8004504 <_vfprintf_r+0xb3c>
 8003f48:	ea56 0307 	orrs.w	r3, r6, r7
 8003f4c:	f000 82da 	beq.w	8004504 <_vfprintf_r+0xb3c>
 8003f50:	9a06      	ldr	r2, [sp, #24]
 8003f52:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 8003f56:	2330      	movs	r3, #48	; 0x30
 8003f58:	f042 0202 	orr.w	r2, r2, #2
 8003f5c:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8003f60:	9206      	str	r2, [sp, #24]
 8003f62:	2302      	movs	r3, #2
 8003f64:	e64e      	b.n	8003c04 <_vfprintf_r+0x23c>
 8003f66:	781d      	ldrb	r5, [r3, #0]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	2a00      	cmp	r2, #0
 8003f6c:	f47f ad9d 	bne.w	8003aaa <_vfprintf_r+0xe2>
 8003f70:	2220      	movs	r2, #32
 8003f72:	e59a      	b.n	8003aaa <_vfprintf_r+0xe2>
 8003f74:	9906      	ldr	r1, [sp, #24]
 8003f76:	f041 0120 	orr.w	r1, r1, #32
 8003f7a:	9106      	str	r1, [sp, #24]
 8003f7c:	781d      	ldrb	r5, [r3, #0]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	e593      	b.n	8003aaa <_vfprintf_r+0xe2>
 8003f82:	bf00      	nop
 8003f84:	08008154 	.word	0x08008154
 8003f88:	08008100 	.word	0x08008100
 8003f8c:	08008134 	.word	0x08008134
 8003f90:	9308      	str	r3, [sp, #32]
 8003f92:	9b06      	ldr	r3, [sp, #24]
 8003f94:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003f98:	f043 0310 	orr.w	r3, r3, #16
 8003f9c:	9306      	str	r3, [sp, #24]
 8003f9e:	9b06      	ldr	r3, [sp, #24]
 8003fa0:	0699      	lsls	r1, r3, #26
 8003fa2:	46b2      	mov	sl, r6
 8003fa4:	f140 809c 	bpl.w	80040e0 <_vfprintf_r+0x718>
 8003fa8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003faa:	3707      	adds	r7, #7
 8003fac:	f027 0707 	bic.w	r7, r7, #7
 8003fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fb4:	f107 0108 	add.w	r1, r7, #8
 8003fb8:	910c      	str	r1, [sp, #48]	; 0x30
 8003fba:	4616      	mov	r6, r2
 8003fbc:	461f      	mov	r7, r3
 8003fbe:	2a00      	cmp	r2, #0
 8003fc0:	f173 0300 	sbcs.w	r3, r3, #0
 8003fc4:	f2c0 8415 	blt.w	80047f2 <_vfprintf_r+0xe2a>
 8003fc8:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8003fcc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e61d      	b.n	8003c10 <_vfprintf_r+0x248>
 8003fd4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003fd6:	9308      	str	r3, [sp, #32]
 8003fd8:	3707      	adds	r7, #7
 8003fda:	f027 0307 	bic.w	r3, r7, #7
 8003fde:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003fe2:	f103 0208 	add.w	r2, r3, #8
 8003fe6:	920c      	str	r2, [sp, #48]	; 0x30
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	9212      	str	r2, [sp, #72]	; 0x48
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	9313      	str	r3, [sp, #76]	; 0x4c
 8003ff0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003ff2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003ff4:	f003 fc76 	bl	80078e4 <__fpclassifyd>
 8003ff8:	2801      	cmp	r0, #1
 8003ffa:	46b3      	mov	fp, r6
 8003ffc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003ffe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004000:	f040 8406 	bne.w	8004810 <_vfprintf_r+0xe48>
 8004004:	2200      	movs	r2, #0
 8004006:	2300      	movs	r3, #0
 8004008:	f7fc fd82 	bl	8000b10 <__aeabi_dcmplt>
 800400c:	2800      	cmp	r0, #0
 800400e:	f040 85ee 	bne.w	8004bee <_vfprintf_r+0x1226>
 8004012:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8004016:	9e06      	ldr	r6, [sp, #24]
 8004018:	4a99      	ldr	r2, [pc, #612]	; (8004280 <_vfprintf_r+0x8b8>)
 800401a:	4b9a      	ldr	r3, [pc, #616]	; (8004284 <_vfprintf_r+0x8bc>)
 800401c:	2103      	movs	r1, #3
 800401e:	2000      	movs	r0, #0
 8004020:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8004024:	2d47      	cmp	r5, #71	; 0x47
 8004026:	bfd8      	it	le
 8004028:	461a      	movle	r2, r3
 800402a:	9107      	str	r1, [sp, #28]
 800402c:	900f      	str	r0, [sp, #60]	; 0x3c
 800402e:	9606      	str	r6, [sp, #24]
 8004030:	920e      	str	r2, [sp, #56]	; 0x38
 8004032:	910b      	str	r1, [sp, #44]	; 0x2c
 8004034:	9010      	str	r0, [sp, #64]	; 0x40
 8004036:	e61f      	b.n	8003c78 <_vfprintf_r+0x2b0>
 8004038:	9906      	ldr	r1, [sp, #24]
 800403a:	f041 0108 	orr.w	r1, r1, #8
 800403e:	9106      	str	r1, [sp, #24]
 8004040:	781d      	ldrb	r5, [r3, #0]
 8004042:	4619      	mov	r1, r3
 8004044:	e531      	b.n	8003aaa <_vfprintf_r+0xe2>
 8004046:	781d      	ldrb	r5, [r3, #0]
 8004048:	4619      	mov	r1, r3
 800404a:	222b      	movs	r2, #43	; 0x2b
 800404c:	e52d      	b.n	8003aaa <_vfprintf_r+0xe2>
 800404e:	9906      	ldr	r1, [sp, #24]
 8004050:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004054:	9106      	str	r1, [sp, #24]
 8004056:	781d      	ldrb	r5, [r3, #0]
 8004058:	4619      	mov	r1, r3
 800405a:	e526      	b.n	8003aaa <_vfprintf_r+0xe2>
 800405c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8004060:	2100      	movs	r1, #0
 8004062:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004066:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800406a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800406e:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8004072:	2809      	cmp	r0, #9
 8004074:	d9f5      	bls.n	8004062 <_vfprintf_r+0x69a>
 8004076:	910a      	str	r1, [sp, #40]	; 0x28
 8004078:	e518      	b.n	8003aac <_vfprintf_r+0xe4>
 800407a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800407c:	9308      	str	r3, [sp, #32]
 800407e:	2330      	movs	r3, #48	; 0x30
 8004080:	9a06      	ldr	r2, [sp, #24]
 8004082:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8004086:	460b      	mov	r3, r1
 8004088:	3304      	adds	r3, #4
 800408a:	2578      	movs	r5, #120	; 0x78
 800408c:	f042 0202 	orr.w	r2, r2, #2
 8004090:	930c      	str	r3, [sp, #48]	; 0x30
 8004092:	4b7d      	ldr	r3, [pc, #500]	; (8004288 <_vfprintf_r+0x8c0>)
 8004094:	9314      	str	r3, [sp, #80]	; 0x50
 8004096:	46b2      	mov	sl, r6
 8004098:	9206      	str	r2, [sp, #24]
 800409a:	680e      	ldr	r6, [r1, #0]
 800409c:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 80040a0:	2700      	movs	r7, #0
 80040a2:	2302      	movs	r3, #2
 80040a4:	e5ae      	b.n	8003c04 <_vfprintf_r+0x23c>
 80040a6:	9906      	ldr	r1, [sp, #24]
 80040a8:	f041 0101 	orr.w	r1, r1, #1
 80040ac:	9106      	str	r1, [sp, #24]
 80040ae:	781d      	ldrb	r5, [r3, #0]
 80040b0:	4619      	mov	r1, r3
 80040b2:	e4fa      	b.n	8003aaa <_vfprintf_r+0xe2>
 80040b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040b6:	6829      	ldr	r1, [r5, #0]
 80040b8:	910a      	str	r1, [sp, #40]	; 0x28
 80040ba:	4608      	mov	r0, r1
 80040bc:	2800      	cmp	r0, #0
 80040be:	4629      	mov	r1, r5
 80040c0:	f101 0104 	add.w	r1, r1, #4
 80040c4:	f2c0 84e3 	blt.w	8004a8e <_vfprintf_r+0x10c6>
 80040c8:	910c      	str	r1, [sp, #48]	; 0x30
 80040ca:	781d      	ldrb	r5, [r3, #0]
 80040cc:	4619      	mov	r1, r3
 80040ce:	e4ec      	b.n	8003aaa <_vfprintf_r+0xe2>
 80040d0:	9308      	str	r3, [sp, #32]
 80040d2:	9b06      	ldr	r3, [sp, #24]
 80040d4:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80040d8:	0699      	lsls	r1, r3, #26
 80040da:	46b2      	mov	sl, r6
 80040dc:	f53f af64 	bmi.w	8003fa8 <_vfprintf_r+0x5e0>
 80040e0:	9b06      	ldr	r3, [sp, #24]
 80040e2:	06da      	lsls	r2, r3, #27
 80040e4:	f100 8292 	bmi.w	800460c <_vfprintf_r+0xc44>
 80040e8:	9b06      	ldr	r3, [sp, #24]
 80040ea:	065b      	lsls	r3, r3, #25
 80040ec:	f140 828e 	bpl.w	800460c <_vfprintf_r+0xc44>
 80040f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80040f2:	f9b1 6000 	ldrsh.w	r6, [r1]
 80040f6:	3104      	adds	r1, #4
 80040f8:	17f7      	asrs	r7, r6, #31
 80040fa:	4632      	mov	r2, r6
 80040fc:	463b      	mov	r3, r7
 80040fe:	910c      	str	r1, [sp, #48]	; 0x30
 8004100:	e75d      	b.n	8003fbe <_vfprintf_r+0x5f6>
 8004102:	9906      	ldr	r1, [sp, #24]
 8004104:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004108:	9106      	str	r1, [sp, #24]
 800410a:	781d      	ldrb	r5, [r3, #0]
 800410c:	4619      	mov	r1, r3
 800410e:	e4cc      	b.n	8003aaa <_vfprintf_r+0xe2>
 8004110:	781d      	ldrb	r5, [r3, #0]
 8004112:	9906      	ldr	r1, [sp, #24]
 8004114:	2d6c      	cmp	r5, #108	; 0x6c
 8004116:	f000 84b3 	beq.w	8004a80 <_vfprintf_r+0x10b8>
 800411a:	f041 0110 	orr.w	r1, r1, #16
 800411e:	9106      	str	r1, [sp, #24]
 8004120:	4619      	mov	r1, r3
 8004122:	e4c2      	b.n	8003aaa <_vfprintf_r+0xe2>
 8004124:	9308      	str	r3, [sp, #32]
 8004126:	9b06      	ldr	r3, [sp, #24]
 8004128:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800412c:	069a      	lsls	r2, r3, #26
 800412e:	f140 8400 	bpl.w	8004932 <_vfprintf_r+0xf6a>
 8004132:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004134:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004136:	6813      	ldr	r3, [r2, #0]
 8004138:	17cf      	asrs	r7, r1, #31
 800413a:	4608      	mov	r0, r1
 800413c:	3204      	adds	r2, #4
 800413e:	4639      	mov	r1, r7
 8004140:	920c      	str	r2, [sp, #48]	; 0x30
 8004142:	e9c3 0100 	strd	r0, r1, [r3]
 8004146:	e480      	b.n	8003a4a <_vfprintf_r+0x82>
 8004148:	781d      	ldrb	r5, [r3, #0]
 800414a:	2d2a      	cmp	r5, #42	; 0x2a
 800414c:	f103 0101 	add.w	r1, r3, #1
 8004150:	f000 860e 	beq.w	8004d70 <_vfprintf_r+0x13a8>
 8004154:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8004158:	2809      	cmp	r0, #9
 800415a:	460b      	mov	r3, r1
 800415c:	f04f 0600 	mov.w	r6, #0
 8004160:	f63f aca4 	bhi.w	8003aac <_vfprintf_r+0xe4>
 8004164:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004168:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800416c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8004170:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8004174:	2809      	cmp	r0, #9
 8004176:	d9f5      	bls.n	8004164 <_vfprintf_r+0x79c>
 8004178:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 800417c:	e496      	b.n	8003aac <_vfprintf_r+0xe4>
 800417e:	9308      	str	r3, [sp, #32]
 8004180:	9b06      	ldr	r3, [sp, #24]
 8004182:	f043 0310 	orr.w	r3, r3, #16
 8004186:	9306      	str	r3, [sp, #24]
 8004188:	9b06      	ldr	r3, [sp, #24]
 800418a:	f013 0320 	ands.w	r3, r3, #32
 800418e:	46b2      	mov	sl, r6
 8004190:	f47f ae93 	bne.w	8003eba <_vfprintf_r+0x4f2>
 8004194:	9a06      	ldr	r2, [sp, #24]
 8004196:	f012 0210 	ands.w	r2, r2, #16
 800419a:	f040 8240 	bne.w	800461e <_vfprintf_r+0xc56>
 800419e:	9b06      	ldr	r3, [sp, #24]
 80041a0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80041a4:	f000 823b 	beq.w	800461e <_vfprintf_r+0xc56>
 80041a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041aa:	4613      	mov	r3, r2
 80041ac:	460a      	mov	r2, r1
 80041ae:	3204      	adds	r2, #4
 80041b0:	880e      	ldrh	r6, [r1, #0]
 80041b2:	920c      	str	r2, [sp, #48]	; 0x30
 80041b4:	2700      	movs	r7, #0
 80041b6:	e525      	b.n	8003c04 <_vfprintf_r+0x23c>
 80041b8:	9308      	str	r3, [sp, #32]
 80041ba:	4b34      	ldr	r3, [pc, #208]	; (800428c <_vfprintf_r+0x8c4>)
 80041bc:	9314      	str	r3, [sp, #80]	; 0x50
 80041be:	9b06      	ldr	r3, [sp, #24]
 80041c0:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80041c4:	0699      	lsls	r1, r3, #26
 80041c6:	46b2      	mov	sl, r6
 80041c8:	f53f aeb1 	bmi.w	8003f2e <_vfprintf_r+0x566>
 80041cc:	9b06      	ldr	r3, [sp, #24]
 80041ce:	06da      	lsls	r2, r3, #27
 80041d0:	f140 83c6 	bpl.w	8004960 <_vfprintf_r+0xf98>
 80041d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041d6:	4613      	mov	r3, r2
 80041d8:	3304      	adds	r3, #4
 80041da:	6816      	ldr	r6, [r2, #0]
 80041dc:	930c      	str	r3, [sp, #48]	; 0x30
 80041de:	2700      	movs	r7, #0
 80041e0:	e6ae      	b.n	8003f40 <_vfprintf_r+0x578>
 80041e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041e4:	9308      	str	r3, [sp, #32]
 80041e6:	680a      	ldr	r2, [r1, #0]
 80041e8:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 80041ec:	2300      	movs	r3, #0
 80041ee:	2201      	movs	r2, #1
 80041f0:	3104      	adds	r1, #4
 80041f2:	469c      	mov	ip, r3
 80041f4:	9207      	str	r2, [sp, #28]
 80041f6:	910c      	str	r1, [sp, #48]	; 0x30
 80041f8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80041fc:	ab24      	add	r3, sp, #144	; 0x90
 80041fe:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004202:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8004206:	920b      	str	r2, [sp, #44]	; 0x2c
 8004208:	930e      	str	r3, [sp, #56]	; 0x38
 800420a:	e53b      	b.n	8003c84 <_vfprintf_r+0x2bc>
 800420c:	9308      	str	r3, [sp, #32]
 800420e:	9b06      	ldr	r3, [sp, #24]
 8004210:	f043 0310 	orr.w	r3, r3, #16
 8004214:	9306      	str	r3, [sp, #24]
 8004216:	9b06      	ldr	r3, [sp, #24]
 8004218:	46b2      	mov	sl, r6
 800421a:	069e      	lsls	r6, r3, #26
 800421c:	f53f ace8 	bmi.w	8003bf0 <_vfprintf_r+0x228>
 8004220:	9b06      	ldr	r3, [sp, #24]
 8004222:	06d8      	lsls	r0, r3, #27
 8004224:	f140 8377 	bpl.w	8004916 <_vfprintf_r+0xf4e>
 8004228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800422a:	4613      	mov	r3, r2
 800422c:	3204      	adds	r2, #4
 800422e:	681e      	ldr	r6, [r3, #0]
 8004230:	920c      	str	r2, [sp, #48]	; 0x30
 8004232:	2301      	movs	r3, #1
 8004234:	2700      	movs	r7, #0
 8004236:	e4e5      	b.n	8003c04 <_vfprintf_r+0x23c>
 8004238:	9308      	str	r3, [sp, #32]
 800423a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800423e:	2d00      	cmp	r5, #0
 8004240:	f43f acbb 	beq.w	8003bba <_vfprintf_r+0x1f2>
 8004244:	2300      	movs	r3, #0
 8004246:	2201      	movs	r2, #1
 8004248:	469c      	mov	ip, r3
 800424a:	9207      	str	r2, [sp, #28]
 800424c:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
 8004250:	e7d2      	b.n	80041f8 <_vfprintf_r+0x830>
 8004252:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004256:	e561      	b.n	8003d1c <_vfprintf_r+0x354>
 8004258:	2b01      	cmp	r3, #1
 800425a:	f47f aceb 	bne.w	8003c34 <_vfprintf_r+0x26c>
 800425e:	2f00      	cmp	r7, #0
 8004260:	bf08      	it	eq
 8004262:	2e0a      	cmpeq	r6, #10
 8004264:	f080 81ef 	bcs.w	8004646 <_vfprintf_r+0xc7e>
 8004268:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 800426c:	3630      	adds	r6, #48	; 0x30
 800426e:	f80b 6d41 	strb.w	r6, [fp, #-65]!
 8004272:	ab2e      	add	r3, sp, #184	; 0xb8
 8004274:	ebcb 0303 	rsb	r3, fp, r3
 8004278:	930b      	str	r3, [sp, #44]	; 0x2c
 800427a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800427e:	e4f3      	b.n	8003c68 <_vfprintf_r+0x2a0>
 8004280:	08008114 	.word	0x08008114
 8004284:	08008110 	.word	0x08008110
 8004288:	08008134 	.word	0x08008134
 800428c:	08008120 	.word	0x08008120
 8004290:	2d65      	cmp	r5, #101	; 0x65
 8004292:	f340 808a 	ble.w	80043aa <_vfprintf_r+0x9e2>
 8004296:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004298:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800429a:	2200      	movs	r2, #0
 800429c:	2300      	movs	r3, #0
 800429e:	f7fc fc2d 	bl	8000afc <__aeabi_dcmpeq>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	f000 8131 	beq.w	800450a <_vfprintf_r+0xb42>
 80042a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042aa:	4aba      	ldr	r2, [pc, #744]	; (8004594 <_vfprintf_r+0xbcc>)
 80042ac:	6022      	str	r2, [r4, #0]
 80042ae:	3301      	adds	r3, #1
 80042b0:	f10b 0b01 	add.w	fp, fp, #1
 80042b4:	2201      	movs	r2, #1
 80042b6:	2b07      	cmp	r3, #7
 80042b8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80042bc:	9322      	str	r3, [sp, #136]	; 0x88
 80042be:	6062      	str	r2, [r4, #4]
 80042c0:	f300 8367 	bgt.w	8004992 <_vfprintf_r+0xfca>
 80042c4:	3408      	adds	r4, #8
 80042c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80042c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80042ca:	4293      	cmp	r3, r2
 80042cc:	db03      	blt.n	80042d6 <_vfprintf_r+0x90e>
 80042ce:	9b06      	ldr	r3, [sp, #24]
 80042d0:	07df      	lsls	r7, r3, #31
 80042d2:	f57f ad96 	bpl.w	8003e02 <_vfprintf_r+0x43a>
 80042d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80042da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80042dc:	6022      	str	r2, [r4, #0]
 80042de:	3301      	adds	r3, #1
 80042e0:	448b      	add	fp, r1
 80042e2:	2b07      	cmp	r3, #7
 80042e4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80042e8:	6061      	str	r1, [r4, #4]
 80042ea:	9322      	str	r3, [sp, #136]	; 0x88
 80042ec:	f300 83d6 	bgt.w	8004a9c <_vfprintf_r+0x10d4>
 80042f0:	3408      	adds	r4, #8
 80042f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042f4:	1e5d      	subs	r5, r3, #1
 80042f6:	2d00      	cmp	r5, #0
 80042f8:	f77f ad83 	ble.w	8003e02 <_vfprintf_r+0x43a>
 80042fc:	2d10      	cmp	r5, #16
 80042fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004300:	4fa5      	ldr	r7, [pc, #660]	; (8004598 <_vfprintf_r+0xbd0>)
 8004302:	f340 8195 	ble.w	8004630 <_vfprintf_r+0xc68>
 8004306:	2610      	movs	r6, #16
 8004308:	465a      	mov	r2, fp
 800430a:	e004      	b.n	8004316 <_vfprintf_r+0x94e>
 800430c:	3408      	adds	r4, #8
 800430e:	3d10      	subs	r5, #16
 8004310:	2d10      	cmp	r5, #16
 8004312:	f340 818c 	ble.w	800462e <_vfprintf_r+0xc66>
 8004316:	3301      	adds	r3, #1
 8004318:	3210      	adds	r2, #16
 800431a:	2b07      	cmp	r3, #7
 800431c:	9223      	str	r2, [sp, #140]	; 0x8c
 800431e:	9322      	str	r3, [sp, #136]	; 0x88
 8004320:	6027      	str	r7, [r4, #0]
 8004322:	6066      	str	r6, [r4, #4]
 8004324:	ddf2      	ble.n	800430c <_vfprintf_r+0x944>
 8004326:	4640      	mov	r0, r8
 8004328:	4649      	mov	r1, r9
 800432a:	aa21      	add	r2, sp, #132	; 0x84
 800432c:	f003 fb96 	bl	8007a5c <__sprint_r>
 8004330:	2800      	cmp	r0, #0
 8004332:	f47f ac49 	bne.w	8003bc8 <_vfprintf_r+0x200>
 8004336:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8004338:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800433a:	ac2e      	add	r4, sp, #184	; 0xb8
 800433c:	e7e7      	b.n	800430e <_vfprintf_r+0x946>
 800433e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004340:	9a07      	ldr	r2, [sp, #28]
 8004342:	1a9e      	subs	r6, r3, r2
 8004344:	2e00      	cmp	r6, #0
 8004346:	f77f ad10 	ble.w	8003d6a <_vfprintf_r+0x3a2>
 800434a:	2e10      	cmp	r6, #16
 800434c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800434e:	4f92      	ldr	r7, [pc, #584]	; (8004598 <_vfprintf_r+0xbd0>)
 8004350:	dd1f      	ble.n	8004392 <_vfprintf_r+0x9ca>
 8004352:	f04f 0a10 	mov.w	sl, #16
 8004356:	465b      	mov	r3, fp
 8004358:	e004      	b.n	8004364 <_vfprintf_r+0x99c>
 800435a:	3e10      	subs	r6, #16
 800435c:	2e10      	cmp	r6, #16
 800435e:	f104 0408 	add.w	r4, r4, #8
 8004362:	dd15      	ble.n	8004390 <_vfprintf_r+0x9c8>
 8004364:	3201      	adds	r2, #1
 8004366:	3310      	adds	r3, #16
 8004368:	2a07      	cmp	r2, #7
 800436a:	9323      	str	r3, [sp, #140]	; 0x8c
 800436c:	9222      	str	r2, [sp, #136]	; 0x88
 800436e:	e884 0480 	stmia.w	r4, {r7, sl}
 8004372:	ddf2      	ble.n	800435a <_vfprintf_r+0x992>
 8004374:	4640      	mov	r0, r8
 8004376:	4649      	mov	r1, r9
 8004378:	aa21      	add	r2, sp, #132	; 0x84
 800437a:	f003 fb6f 	bl	8007a5c <__sprint_r>
 800437e:	2800      	cmp	r0, #0
 8004380:	f47f ac22 	bne.w	8003bc8 <_vfprintf_r+0x200>
 8004384:	3e10      	subs	r6, #16
 8004386:	2e10      	cmp	r6, #16
 8004388:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800438a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800438c:	ac2e      	add	r4, sp, #184	; 0xb8
 800438e:	dce9      	bgt.n	8004364 <_vfprintf_r+0x99c>
 8004390:	469b      	mov	fp, r3
 8004392:	3201      	adds	r2, #1
 8004394:	44b3      	add	fp, r6
 8004396:	2a07      	cmp	r2, #7
 8004398:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800439c:	9222      	str	r2, [sp, #136]	; 0x88
 800439e:	6027      	str	r7, [r4, #0]
 80043a0:	6066      	str	r6, [r4, #4]
 80043a2:	f300 8219 	bgt.w	80047d8 <_vfprintf_r+0xe10>
 80043a6:	3408      	adds	r4, #8
 80043a8:	e4df      	b.n	8003d6a <_vfprintf_r+0x3a2>
 80043aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043ac:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	f340 81d4 	ble.w	800475c <_vfprintf_r+0xd94>
 80043b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043b6:	6023      	str	r3, [r4, #0]
 80043b8:	3501      	adds	r5, #1
 80043ba:	f10b 0601 	add.w	r6, fp, #1
 80043be:	2301      	movs	r3, #1
 80043c0:	2d07      	cmp	r5, #7
 80043c2:	9623      	str	r6, [sp, #140]	; 0x8c
 80043c4:	9522      	str	r5, [sp, #136]	; 0x88
 80043c6:	6063      	str	r3, [r4, #4]
 80043c8:	f300 81e4 	bgt.w	8004794 <_vfprintf_r+0xdcc>
 80043cc:	3408      	adds	r4, #8
 80043ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80043d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80043d2:	6023      	str	r3, [r4, #0]
 80043d4:	3501      	adds	r5, #1
 80043d6:	4416      	add	r6, r2
 80043d8:	2d07      	cmp	r5, #7
 80043da:	9623      	str	r6, [sp, #140]	; 0x8c
 80043dc:	9522      	str	r5, [sp, #136]	; 0x88
 80043de:	6062      	str	r2, [r4, #4]
 80043e0:	f300 81e4 	bgt.w	80047ac <_vfprintf_r+0xde4>
 80043e4:	3408      	adds	r4, #8
 80043e6:	2300      	movs	r3, #0
 80043e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80043ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80043ec:	2200      	movs	r2, #0
 80043ee:	f7fc fb85 	bl	8000afc <__aeabi_dcmpeq>
 80043f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043f4:	2800      	cmp	r0, #0
 80043f6:	f040 80e0 	bne.w	80045ba <_vfprintf_r+0xbf2>
 80043fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043fc:	3b01      	subs	r3, #1
 80043fe:	3501      	adds	r5, #1
 8004400:	3201      	adds	r2, #1
 8004402:	441e      	add	r6, r3
 8004404:	2d07      	cmp	r5, #7
 8004406:	9522      	str	r5, [sp, #136]	; 0x88
 8004408:	9623      	str	r6, [sp, #140]	; 0x8c
 800440a:	6022      	str	r2, [r4, #0]
 800440c:	6063      	str	r3, [r4, #4]
 800440e:	f300 81b5 	bgt.w	800477c <_vfprintf_r+0xdb4>
 8004412:	3408      	adds	r4, #8
 8004414:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004416:	6062      	str	r2, [r4, #4]
 8004418:	3501      	adds	r5, #1
 800441a:	eb06 0b02 	add.w	fp, r6, r2
 800441e:	ab1d      	add	r3, sp, #116	; 0x74
 8004420:	2d07      	cmp	r5, #7
 8004422:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004426:	9522      	str	r5, [sp, #136]	; 0x88
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	f77f ace9 	ble.w	8003e00 <_vfprintf_r+0x438>
 800442e:	4640      	mov	r0, r8
 8004430:	4649      	mov	r1, r9
 8004432:	aa21      	add	r2, sp, #132	; 0x84
 8004434:	f003 fb12 	bl	8007a5c <__sprint_r>
 8004438:	2800      	cmp	r0, #0
 800443a:	f47f abc5 	bne.w	8003bc8 <_vfprintf_r+0x200>
 800443e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004442:	ac2e      	add	r4, sp, #184	; 0xb8
 8004444:	e4dd      	b.n	8003e02 <_vfprintf_r+0x43a>
 8004446:	4640      	mov	r0, r8
 8004448:	4649      	mov	r1, r9
 800444a:	aa21      	add	r2, sp, #132	; 0x84
 800444c:	f003 fb06 	bl	8007a5c <__sprint_r>
 8004450:	2800      	cmp	r0, #0
 8004452:	f43f ad20 	beq.w	8003e96 <_vfprintf_r+0x4ce>
 8004456:	f7ff bbb7 	b.w	8003bc8 <_vfprintf_r+0x200>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d133      	bne.n	80044c6 <_vfprintf_r+0xafe>
 800445e:	9b06      	ldr	r3, [sp, #24]
 8004460:	07da      	lsls	r2, r3, #31
 8004462:	d530      	bpl.n	80044c6 <_vfprintf_r+0xafe>
 8004464:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 8004468:	2330      	movs	r3, #48	; 0x30
 800446a:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 800446e:	ab2e      	add	r3, sp, #184	; 0xb8
 8004470:	ebcb 0303 	rsb	r3, fp, r3
 8004474:	930b      	str	r3, [sp, #44]	; 0x2c
 8004476:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800447a:	f7ff bbf5 	b.w	8003c68 <_vfprintf_r+0x2a0>
 800447e:	4640      	mov	r0, r8
 8004480:	4649      	mov	r1, r9
 8004482:	aa21      	add	r2, sp, #132	; 0x84
 8004484:	f003 faea 	bl	8007a5c <__sprint_r>
 8004488:	2800      	cmp	r0, #0
 800448a:	f47f ab9d 	bne.w	8003bc8 <_vfprintf_r+0x200>
 800448e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004492:	ac2e      	add	r4, sp, #184	; 0xb8
 8004494:	e4a3      	b.n	8003dde <_vfprintf_r+0x416>
 8004496:	4640      	mov	r0, r8
 8004498:	4649      	mov	r1, r9
 800449a:	aa21      	add	r2, sp, #132	; 0x84
 800449c:	f003 fade 	bl	8007a5c <__sprint_r>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	f47f ab91 	bne.w	8003bc8 <_vfprintf_r+0x200>
 80044a6:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80044aa:	ac2e      	add	r4, sp, #184	; 0xb8
 80044ac:	e45a      	b.n	8003d64 <_vfprintf_r+0x39c>
 80044ae:	4640      	mov	r0, r8
 80044b0:	4649      	mov	r1, r9
 80044b2:	aa21      	add	r2, sp, #132	; 0x84
 80044b4:	f003 fad2 	bl	8007a5c <__sprint_r>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	f47f ab85 	bne.w	8003bc8 <_vfprintf_r+0x200>
 80044be:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80044c2:	ac2e      	add	r4, sp, #184	; 0xb8
 80044c4:	e43d      	b.n	8003d42 <_vfprintf_r+0x37a>
 80044c6:	ab2e      	add	r3, sp, #184	; 0xb8
 80044c8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80044cc:	930e      	str	r3, [sp, #56]	; 0x38
 80044ce:	f7ff bbcb 	b.w	8003c68 <_vfprintf_r+0x2a0>
 80044d2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80044d4:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
 80044d8:	0933      	lsrs	r3, r6, #4
 80044da:	f006 010f 	and.w	r1, r6, #15
 80044de:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80044e2:	093a      	lsrs	r2, r7, #4
 80044e4:	461e      	mov	r6, r3
 80044e6:	4617      	mov	r7, r2
 80044e8:	5c43      	ldrb	r3, [r0, r1]
 80044ea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80044ee:	ea56 0307 	orrs.w	r3, r6, r7
 80044f2:	d1f1      	bne.n	80044d8 <_vfprintf_r+0xb10>
 80044f4:	465a      	mov	r2, fp
 80044f6:	ab2e      	add	r3, sp, #184	; 0xb8
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80044fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004500:	f7ff bbb2 	b.w	8003c68 <_vfprintf_r+0x2a0>
 8004504:	2302      	movs	r3, #2
 8004506:	f7ff bb7d 	b.w	8003c04 <_vfprintf_r+0x23c>
 800450a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800450c:	2d00      	cmp	r5, #0
 800450e:	f340 824c 	ble.w	80049aa <_vfprintf_r+0xfe2>
 8004512:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004514:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004516:	428a      	cmp	r2, r1
 8004518:	4613      	mov	r3, r2
 800451a:	bfa8      	it	ge
 800451c:	460b      	movge	r3, r1
 800451e:	461d      	mov	r5, r3
 8004520:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004522:	2d00      	cmp	r5, #0
 8004524:	eb01 0a02 	add.w	sl, r1, r2
 8004528:	dd0b      	ble.n	8004542 <_vfprintf_r+0xb7a>
 800452a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800452c:	6021      	str	r1, [r4, #0]
 800452e:	3301      	adds	r3, #1
 8004530:	44ab      	add	fp, r5
 8004532:	2b07      	cmp	r3, #7
 8004534:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004538:	6065      	str	r5, [r4, #4]
 800453a:	9322      	str	r3, [sp, #136]	; 0x88
 800453c:	f300 8300 	bgt.w	8004b40 <_vfprintf_r+0x1178>
 8004540:	3408      	adds	r4, #8
 8004542:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004544:	2d00      	cmp	r5, #0
 8004546:	bfa8      	it	ge
 8004548:	1b5b      	subge	r3, r3, r5
 800454a:	2b00      	cmp	r3, #0
 800454c:	461d      	mov	r5, r3
 800454e:	f340 80af 	ble.w	80046b0 <_vfprintf_r+0xce8>
 8004552:	2d10      	cmp	r5, #16
 8004554:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004556:	4f10      	ldr	r7, [pc, #64]	; (8004598 <_vfprintf_r+0xbd0>)
 8004558:	f340 820f 	ble.w	800497a <_vfprintf_r+0xfb2>
 800455c:	2610      	movs	r6, #16
 800455e:	465a      	mov	r2, fp
 8004560:	e004      	b.n	800456c <_vfprintf_r+0xba4>
 8004562:	3408      	adds	r4, #8
 8004564:	3d10      	subs	r5, #16
 8004566:	2d10      	cmp	r5, #16
 8004568:	f340 8206 	ble.w	8004978 <_vfprintf_r+0xfb0>
 800456c:	3301      	adds	r3, #1
 800456e:	3210      	adds	r2, #16
 8004570:	2b07      	cmp	r3, #7
 8004572:	9223      	str	r2, [sp, #140]	; 0x8c
 8004574:	9322      	str	r3, [sp, #136]	; 0x88
 8004576:	6027      	str	r7, [r4, #0]
 8004578:	6066      	str	r6, [r4, #4]
 800457a:	ddf2      	ble.n	8004562 <_vfprintf_r+0xb9a>
 800457c:	4640      	mov	r0, r8
 800457e:	4649      	mov	r1, r9
 8004580:	aa21      	add	r2, sp, #132	; 0x84
 8004582:	f003 fa6b 	bl	8007a5c <__sprint_r>
 8004586:	2800      	cmp	r0, #0
 8004588:	f47f ab1e 	bne.w	8003bc8 <_vfprintf_r+0x200>
 800458c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800458e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004590:	ac2e      	add	r4, sp, #184	; 0xb8
 8004592:	e7e7      	b.n	8004564 <_vfprintf_r+0xb9c>
 8004594:	08008150 	.word	0x08008150
 8004598:	08008100 	.word	0x08008100
 800459c:	4640      	mov	r0, r8
 800459e:	4649      	mov	r1, r9
 80045a0:	aa21      	add	r2, sp, #132	; 0x84
 80045a2:	f003 fa5b 	bl	8007a5c <__sprint_r>
 80045a6:	2800      	cmp	r0, #0
 80045a8:	f47f ab0e 	bne.w	8003bc8 <_vfprintf_r+0x200>
 80045ac:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 80045b0:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80045b4:	ac2e      	add	r4, sp, #184	; 0xb8
 80045b6:	f7ff bbb1 	b.w	8003d1c <_vfprintf_r+0x354>
 80045ba:	f103 3aff 	add.w	sl, r3, #4294967295
 80045be:	f1ba 0f00 	cmp.w	sl, #0
 80045c2:	f77f af27 	ble.w	8004414 <_vfprintf_r+0xa4c>
 80045c6:	f1ba 0f10 	cmp.w	sl, #16
 80045ca:	4f90      	ldr	r7, [pc, #576]	; (800480c <_vfprintf_r+0xe44>)
 80045cc:	bfc8      	it	gt
 80045ce:	f04f 0b10 	movgt.w	fp, #16
 80045d2:	dc07      	bgt.n	80045e4 <_vfprintf_r+0xc1c>
 80045d4:	e0f6      	b.n	80047c4 <_vfprintf_r+0xdfc>
 80045d6:	3408      	adds	r4, #8
 80045d8:	f1aa 0a10 	sub.w	sl, sl, #16
 80045dc:	f1ba 0f10 	cmp.w	sl, #16
 80045e0:	f340 80f0 	ble.w	80047c4 <_vfprintf_r+0xdfc>
 80045e4:	3501      	adds	r5, #1
 80045e6:	3610      	adds	r6, #16
 80045e8:	2d07      	cmp	r5, #7
 80045ea:	9623      	str	r6, [sp, #140]	; 0x8c
 80045ec:	9522      	str	r5, [sp, #136]	; 0x88
 80045ee:	e884 0880 	stmia.w	r4, {r7, fp}
 80045f2:	ddf0      	ble.n	80045d6 <_vfprintf_r+0xc0e>
 80045f4:	4640      	mov	r0, r8
 80045f6:	4649      	mov	r1, r9
 80045f8:	aa21      	add	r2, sp, #132	; 0x84
 80045fa:	f003 fa2f 	bl	8007a5c <__sprint_r>
 80045fe:	2800      	cmp	r0, #0
 8004600:	f47f aae2 	bne.w	8003bc8 <_vfprintf_r+0x200>
 8004604:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8004606:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8004608:	ac2e      	add	r4, sp, #184	; 0xb8
 800460a:	e7e5      	b.n	80045d8 <_vfprintf_r+0xc10>
 800460c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800460e:	6816      	ldr	r6, [r2, #0]
 8004610:	4613      	mov	r3, r2
 8004612:	3304      	adds	r3, #4
 8004614:	17f7      	asrs	r7, r6, #31
 8004616:	930c      	str	r3, [sp, #48]	; 0x30
 8004618:	4632      	mov	r2, r6
 800461a:	463b      	mov	r3, r7
 800461c:	e4cf      	b.n	8003fbe <_vfprintf_r+0x5f6>
 800461e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004620:	460a      	mov	r2, r1
 8004622:	3204      	adds	r2, #4
 8004624:	680e      	ldr	r6, [r1, #0]
 8004626:	920c      	str	r2, [sp, #48]	; 0x30
 8004628:	2700      	movs	r7, #0
 800462a:	f7ff baeb 	b.w	8003c04 <_vfprintf_r+0x23c>
 800462e:	4693      	mov	fp, r2
 8004630:	3301      	adds	r3, #1
 8004632:	44ab      	add	fp, r5
 8004634:	2b07      	cmp	r3, #7
 8004636:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800463a:	9322      	str	r3, [sp, #136]	; 0x88
 800463c:	6027      	str	r7, [r4, #0]
 800463e:	6065      	str	r5, [r4, #4]
 8004640:	f77f abde 	ble.w	8003e00 <_vfprintf_r+0x438>
 8004644:	e6f3      	b.n	800442e <_vfprintf_r+0xa66>
 8004646:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
 800464a:	f8cd c01c 	str.w	ip, [sp, #28]
 800464e:	4630      	mov	r0, r6
 8004650:	4639      	mov	r1, r7
 8004652:	220a      	movs	r2, #10
 8004654:	2300      	movs	r3, #0
 8004656:	f7fc faab 	bl	8000bb0 <__aeabi_uldivmod>
 800465a:	3230      	adds	r2, #48	; 0x30
 800465c:	4630      	mov	r0, r6
 800465e:	4639      	mov	r1, r7
 8004660:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8004664:	2300      	movs	r3, #0
 8004666:	220a      	movs	r2, #10
 8004668:	f7fc faa2 	bl	8000bb0 <__aeabi_uldivmod>
 800466c:	4606      	mov	r6, r0
 800466e:	460f      	mov	r7, r1
 8004670:	ea56 0307 	orrs.w	r3, r6, r7
 8004674:	d1eb      	bne.n	800464e <_vfprintf_r+0xc86>
 8004676:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800467a:	e73b      	b.n	80044f4 <_vfprintf_r+0xb2c>
 800467c:	2b30      	cmp	r3, #48	; 0x30
 800467e:	f000 8219 	beq.w	8004ab4 <_vfprintf_r+0x10ec>
 8004682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004684:	3b01      	subs	r3, #1
 8004686:	461a      	mov	r2, r3
 8004688:	a82e      	add	r0, sp, #184	; 0xb8
 800468a:	930e      	str	r3, [sp, #56]	; 0x38
 800468c:	1a82      	subs	r2, r0, r2
 800468e:	2330      	movs	r3, #48	; 0x30
 8004690:	920b      	str	r2, [sp, #44]	; 0x2c
 8004692:	f801 3c01 	strb.w	r3, [r1, #-1]
 8004696:	f7ff bae7 	b.w	8003c68 <_vfprintf_r+0x2a0>
 800469a:	4640      	mov	r0, r8
 800469c:	4649      	mov	r1, r9
 800469e:	aa21      	add	r2, sp, #132	; 0x84
 80046a0:	f003 f9dc 	bl	8007a5c <__sprint_r>
 80046a4:	2800      	cmp	r0, #0
 80046a6:	f47f aa8f 	bne.w	8003bc8 <_vfprintf_r+0x200>
 80046aa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80046ae:	ac2e      	add	r4, sp, #184	; 0xb8
 80046b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046b2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80046b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046b6:	440a      	add	r2, r1
 80046b8:	4616      	mov	r6, r2
 80046ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80046bc:	4293      	cmp	r3, r2
 80046be:	db3e      	blt.n	800473e <_vfprintf_r+0xd76>
 80046c0:	9a06      	ldr	r2, [sp, #24]
 80046c2:	07d5      	lsls	r5, r2, #31
 80046c4:	d43b      	bmi.n	800473e <_vfprintf_r+0xd76>
 80046c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80046c8:	ebc6 050a 	rsb	r5, r6, sl
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	429d      	cmp	r5, r3
 80046d0:	bfa8      	it	ge
 80046d2:	461d      	movge	r5, r3
 80046d4:	2d00      	cmp	r5, #0
 80046d6:	462f      	mov	r7, r5
 80046d8:	dd0b      	ble.n	80046f2 <_vfprintf_r+0xd2a>
 80046da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80046dc:	6026      	str	r6, [r4, #0]
 80046de:	3201      	adds	r2, #1
 80046e0:	44ab      	add	fp, r5
 80046e2:	2a07      	cmp	r2, #7
 80046e4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80046e8:	6065      	str	r5, [r4, #4]
 80046ea:	9222      	str	r2, [sp, #136]	; 0x88
 80046ec:	f300 825e 	bgt.w	8004bac <_vfprintf_r+0x11e4>
 80046f0:	3408      	adds	r4, #8
 80046f2:	2f00      	cmp	r7, #0
 80046f4:	bfac      	ite	ge
 80046f6:	1bdd      	subge	r5, r3, r7
 80046f8:	461d      	movlt	r5, r3
 80046fa:	2d00      	cmp	r5, #0
 80046fc:	f77f ab81 	ble.w	8003e02 <_vfprintf_r+0x43a>
 8004700:	2d10      	cmp	r5, #16
 8004702:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004704:	4f41      	ldr	r7, [pc, #260]	; (800480c <_vfprintf_r+0xe44>)
 8004706:	dd93      	ble.n	8004630 <_vfprintf_r+0xc68>
 8004708:	2610      	movs	r6, #16
 800470a:	465a      	mov	r2, fp
 800470c:	e003      	b.n	8004716 <_vfprintf_r+0xd4e>
 800470e:	3408      	adds	r4, #8
 8004710:	3d10      	subs	r5, #16
 8004712:	2d10      	cmp	r5, #16
 8004714:	dd8b      	ble.n	800462e <_vfprintf_r+0xc66>
 8004716:	3301      	adds	r3, #1
 8004718:	3210      	adds	r2, #16
 800471a:	2b07      	cmp	r3, #7
 800471c:	9223      	str	r2, [sp, #140]	; 0x8c
 800471e:	9322      	str	r3, [sp, #136]	; 0x88
 8004720:	6027      	str	r7, [r4, #0]
 8004722:	6066      	str	r6, [r4, #4]
 8004724:	ddf3      	ble.n	800470e <_vfprintf_r+0xd46>
 8004726:	4640      	mov	r0, r8
 8004728:	4649      	mov	r1, r9
 800472a:	aa21      	add	r2, sp, #132	; 0x84
 800472c:	f003 f996 	bl	8007a5c <__sprint_r>
 8004730:	2800      	cmp	r0, #0
 8004732:	f47f aa49 	bne.w	8003bc8 <_vfprintf_r+0x200>
 8004736:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8004738:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800473a:	ac2e      	add	r4, sp, #184	; 0xb8
 800473c:	e7e8      	b.n	8004710 <_vfprintf_r+0xd48>
 800473e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004740:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004742:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004744:	6021      	str	r1, [r4, #0]
 8004746:	3201      	adds	r2, #1
 8004748:	4483      	add	fp, r0
 800474a:	2a07      	cmp	r2, #7
 800474c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004750:	6060      	str	r0, [r4, #4]
 8004752:	9222      	str	r2, [sp, #136]	; 0x88
 8004754:	f300 820a 	bgt.w	8004b6c <_vfprintf_r+0x11a4>
 8004758:	3408      	adds	r4, #8
 800475a:	e7b4      	b.n	80046c6 <_vfprintf_r+0xcfe>
 800475c:	9b06      	ldr	r3, [sp, #24]
 800475e:	07d8      	lsls	r0, r3, #31
 8004760:	f53f ae28 	bmi.w	80043b4 <_vfprintf_r+0x9ec>
 8004764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004766:	6023      	str	r3, [r4, #0]
 8004768:	3501      	adds	r5, #1
 800476a:	f10b 0601 	add.w	r6, fp, #1
 800476e:	2301      	movs	r3, #1
 8004770:	2d07      	cmp	r5, #7
 8004772:	9623      	str	r6, [sp, #140]	; 0x8c
 8004774:	9522      	str	r5, [sp, #136]	; 0x88
 8004776:	6063      	str	r3, [r4, #4]
 8004778:	f77f ae4b 	ble.w	8004412 <_vfprintf_r+0xa4a>
 800477c:	4640      	mov	r0, r8
 800477e:	4649      	mov	r1, r9
 8004780:	aa21      	add	r2, sp, #132	; 0x84
 8004782:	f003 f96b 	bl	8007a5c <__sprint_r>
 8004786:	2800      	cmp	r0, #0
 8004788:	f47f aa1e 	bne.w	8003bc8 <_vfprintf_r+0x200>
 800478c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800478e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8004790:	ac2e      	add	r4, sp, #184	; 0xb8
 8004792:	e63f      	b.n	8004414 <_vfprintf_r+0xa4c>
 8004794:	4640      	mov	r0, r8
 8004796:	4649      	mov	r1, r9
 8004798:	aa21      	add	r2, sp, #132	; 0x84
 800479a:	f003 f95f 	bl	8007a5c <__sprint_r>
 800479e:	2800      	cmp	r0, #0
 80047a0:	f47f aa12 	bne.w	8003bc8 <_vfprintf_r+0x200>
 80047a4:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80047a6:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80047a8:	ac2e      	add	r4, sp, #184	; 0xb8
 80047aa:	e610      	b.n	80043ce <_vfprintf_r+0xa06>
 80047ac:	4640      	mov	r0, r8
 80047ae:	4649      	mov	r1, r9
 80047b0:	aa21      	add	r2, sp, #132	; 0x84
 80047b2:	f003 f953 	bl	8007a5c <__sprint_r>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	f47f aa06 	bne.w	8003bc8 <_vfprintf_r+0x200>
 80047bc:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80047be:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80047c0:	ac2e      	add	r4, sp, #184	; 0xb8
 80047c2:	e610      	b.n	80043e6 <_vfprintf_r+0xa1e>
 80047c4:	3501      	adds	r5, #1
 80047c6:	4456      	add	r6, sl
 80047c8:	2d07      	cmp	r5, #7
 80047ca:	9623      	str	r6, [sp, #140]	; 0x8c
 80047cc:	9522      	str	r5, [sp, #136]	; 0x88
 80047ce:	e884 0480 	stmia.w	r4, {r7, sl}
 80047d2:	f77f ae1e 	ble.w	8004412 <_vfprintf_r+0xa4a>
 80047d6:	e7d1      	b.n	800477c <_vfprintf_r+0xdb4>
 80047d8:	4640      	mov	r0, r8
 80047da:	4649      	mov	r1, r9
 80047dc:	aa21      	add	r2, sp, #132	; 0x84
 80047de:	f003 f93d 	bl	8007a5c <__sprint_r>
 80047e2:	2800      	cmp	r0, #0
 80047e4:	f47f a9f0 	bne.w	8003bc8 <_vfprintf_r+0x200>
 80047e8:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80047ec:	ac2e      	add	r4, sp, #184	; 0xb8
 80047ee:	f7ff babc 	b.w	8003d6a <_vfprintf_r+0x3a2>
 80047f2:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80047f6:	4276      	negs	r6, r6
 80047f8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80047fc:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8004800:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8004804:	2301      	movs	r3, #1
 8004806:	f7ff ba03 	b.w	8003c10 <_vfprintf_r+0x248>
 800480a:	bf00      	nop
 800480c:	08008100 	.word	0x08008100
 8004810:	f003 f868 	bl	80078e4 <__fpclassifyd>
 8004814:	2800      	cmp	r0, #0
 8004816:	f000 810d 	beq.w	8004a34 <_vfprintf_r+0x106c>
 800481a:	f025 0320 	bic.w	r3, r5, #32
 800481e:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004822:	930b      	str	r3, [sp, #44]	; 0x2c
 8004824:	f000 8258 	beq.w	8004cd8 <_vfprintf_r+0x1310>
 8004828:	2b47      	cmp	r3, #71	; 0x47
 800482a:	d104      	bne.n	8004836 <_vfprintf_r+0xe6e>
 800482c:	2e00      	cmp	r6, #0
 800482e:	bf14      	ite	ne
 8004830:	46b3      	movne	fp, r6
 8004832:	f04f 0b01 	moveq.w	fp, #1
 8004836:	9b06      	ldr	r3, [sp, #24]
 8004838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800483c:	930f      	str	r3, [sp, #60]	; 0x3c
 800483e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004840:	f1b3 0a00 	subs.w	sl, r3, #0
 8004844:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004846:	9307      	str	r3, [sp, #28]
 8004848:	bfbb      	ittet	lt
 800484a:	4653      	movlt	r3, sl
 800484c:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
 8004850:	2300      	movge	r3, #0
 8004852:	232d      	movlt	r3, #45	; 0x2d
 8004854:	2d66      	cmp	r5, #102	; 0x66
 8004856:	930d      	str	r3, [sp, #52]	; 0x34
 8004858:	f000 8154 	beq.w	8004b04 <_vfprintf_r+0x113c>
 800485c:	2d46      	cmp	r5, #70	; 0x46
 800485e:	f000 8151 	beq.w	8004b04 <_vfprintf_r+0x113c>
 8004862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004864:	9a07      	ldr	r2, [sp, #28]
 8004866:	2b45      	cmp	r3, #69	; 0x45
 8004868:	bf0c      	ite	eq
 800486a:	f10b 0701 	addeq.w	r7, fp, #1
 800486e:	465f      	movne	r7, fp
 8004870:	2002      	movs	r0, #2
 8004872:	a91b      	add	r1, sp, #108	; 0x6c
 8004874:	e88d 0081 	stmia.w	sp, {r0, r7}
 8004878:	9102      	str	r1, [sp, #8]
 800487a:	a81c      	add	r0, sp, #112	; 0x70
 800487c:	a91f      	add	r1, sp, #124	; 0x7c
 800487e:	9003      	str	r0, [sp, #12]
 8004880:	4653      	mov	r3, sl
 8004882:	9104      	str	r1, [sp, #16]
 8004884:	4640      	mov	r0, r8
 8004886:	f000 fbc7 	bl	8005018 <_dtoa_r>
 800488a:	2d67      	cmp	r5, #103	; 0x67
 800488c:	900e      	str	r0, [sp, #56]	; 0x38
 800488e:	d002      	beq.n	8004896 <_vfprintf_r+0xece>
 8004890:	2d47      	cmp	r5, #71	; 0x47
 8004892:	f040 8147 	bne.w	8004b24 <_vfprintf_r+0x115c>
 8004896:	9b06      	ldr	r3, [sp, #24]
 8004898:	07db      	lsls	r3, r3, #31
 800489a:	f140 823a 	bpl.w	8004d12 <_vfprintf_r+0x134a>
 800489e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048a0:	19de      	adds	r6, r3, r7
 80048a2:	9807      	ldr	r0, [sp, #28]
 80048a4:	4651      	mov	r1, sl
 80048a6:	2200      	movs	r2, #0
 80048a8:	2300      	movs	r3, #0
 80048aa:	f7fc f927 	bl	8000afc <__aeabi_dcmpeq>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	f040 81a3 	bne.w	8004bfa <_vfprintf_r+0x1232>
 80048b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80048b6:	429e      	cmp	r6, r3
 80048b8:	d906      	bls.n	80048c8 <_vfprintf_r+0xf00>
 80048ba:	2130      	movs	r1, #48	; 0x30
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	921f      	str	r2, [sp, #124]	; 0x7c
 80048c0:	7019      	strb	r1, [r3, #0]
 80048c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80048c4:	429e      	cmp	r6, r3
 80048c6:	d8f9      	bhi.n	80048bc <_vfprintf_r+0xef4>
 80048c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048ca:	1a9b      	subs	r3, r3, r2
 80048cc:	9311      	str	r3, [sp, #68]	; 0x44
 80048ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048d0:	2b47      	cmp	r3, #71	; 0x47
 80048d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80048d4:	f000 8179 	beq.w	8004bca <_vfprintf_r+0x1202>
 80048d8:	2d65      	cmp	r5, #101	; 0x65
 80048da:	f340 819c 	ble.w	8004c16 <_vfprintf_r+0x124e>
 80048de:	2d66      	cmp	r5, #102	; 0x66
 80048e0:	9310      	str	r3, [sp, #64]	; 0x40
 80048e2:	f000 8209 	beq.w	8004cf8 <_vfprintf_r+0x1330>
 80048e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80048ea:	4293      	cmp	r3, r2
 80048ec:	f300 81f7 	bgt.w	8004cde <_vfprintf_r+0x1316>
 80048f0:	9b06      	ldr	r3, [sp, #24]
 80048f2:	07d9      	lsls	r1, r3, #31
 80048f4:	f100 8217 	bmi.w	8004d26 <_vfprintf_r+0x135e>
 80048f8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80048fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80048fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004900:	2a00      	cmp	r2, #0
 8004902:	f040 8169 	bne.w	8004bd8 <_vfprintf_r+0x1210>
 8004906:	9307      	str	r3, [sp, #28]
 8004908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800490a:	9306      	str	r3, [sp, #24]
 800490c:	920f      	str	r2, [sp, #60]	; 0x3c
 800490e:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8004912:	f7ff b9b1 	b.w	8003c78 <_vfprintf_r+0x2b0>
 8004916:	9b06      	ldr	r3, [sp, #24]
 8004918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800491a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800491e:	4613      	mov	r3, r2
 8004920:	f43f ac84 	beq.w	800422c <_vfprintf_r+0x864>
 8004924:	8816      	ldrh	r6, [r2, #0]
 8004926:	3204      	adds	r2, #4
 8004928:	2700      	movs	r7, #0
 800492a:	2301      	movs	r3, #1
 800492c:	920c      	str	r2, [sp, #48]	; 0x30
 800492e:	f7ff b969 	b.w	8003c04 <_vfprintf_r+0x23c>
 8004932:	9b06      	ldr	r3, [sp, #24]
 8004934:	06db      	lsls	r3, r3, #27
 8004936:	d40b      	bmi.n	8004950 <_vfprintf_r+0xf88>
 8004938:	9b06      	ldr	r3, [sp, #24]
 800493a:	065f      	lsls	r7, r3, #25
 800493c:	d508      	bpl.n	8004950 <_vfprintf_r+0xf88>
 800493e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004940:	6813      	ldr	r3, [r2, #0]
 8004942:	3204      	adds	r2, #4
 8004944:	920c      	str	r2, [sp, #48]	; 0x30
 8004946:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800494a:	801a      	strh	r2, [r3, #0]
 800494c:	f7ff b87d 	b.w	8003a4a <_vfprintf_r+0x82>
 8004950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004952:	6813      	ldr	r3, [r2, #0]
 8004954:	3204      	adds	r2, #4
 8004956:	920c      	str	r2, [sp, #48]	; 0x30
 8004958:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	f7ff b875 	b.w	8003a4a <_vfprintf_r+0x82>
 8004960:	9b06      	ldr	r3, [sp, #24]
 8004962:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004964:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004968:	4613      	mov	r3, r2
 800496a:	d076      	beq.n	8004a5a <_vfprintf_r+0x1092>
 800496c:	3304      	adds	r3, #4
 800496e:	8816      	ldrh	r6, [r2, #0]
 8004970:	930c      	str	r3, [sp, #48]	; 0x30
 8004972:	2700      	movs	r7, #0
 8004974:	f7ff bae4 	b.w	8003f40 <_vfprintf_r+0x578>
 8004978:	4693      	mov	fp, r2
 800497a:	3301      	adds	r3, #1
 800497c:	44ab      	add	fp, r5
 800497e:	2b07      	cmp	r3, #7
 8004980:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004984:	9322      	str	r3, [sp, #136]	; 0x88
 8004986:	6027      	str	r7, [r4, #0]
 8004988:	6065      	str	r5, [r4, #4]
 800498a:	f73f ae86 	bgt.w	800469a <_vfprintf_r+0xcd2>
 800498e:	3408      	adds	r4, #8
 8004990:	e68e      	b.n	80046b0 <_vfprintf_r+0xce8>
 8004992:	4640      	mov	r0, r8
 8004994:	4649      	mov	r1, r9
 8004996:	aa21      	add	r2, sp, #132	; 0x84
 8004998:	f003 f860 	bl	8007a5c <__sprint_r>
 800499c:	2800      	cmp	r0, #0
 800499e:	f47f a913 	bne.w	8003bc8 <_vfprintf_r+0x200>
 80049a2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80049a6:	ac2e      	add	r4, sp, #184	; 0xb8
 80049a8:	e48d      	b.n	80042c6 <_vfprintf_r+0x8fe>
 80049aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049ac:	4ab0      	ldr	r2, [pc, #704]	; (8004c70 <_vfprintf_r+0x12a8>)
 80049ae:	6022      	str	r2, [r4, #0]
 80049b0:	3301      	adds	r3, #1
 80049b2:	f10b 0b01 	add.w	fp, fp, #1
 80049b6:	2201      	movs	r2, #1
 80049b8:	2b07      	cmp	r3, #7
 80049ba:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80049be:	9322      	str	r3, [sp, #136]	; 0x88
 80049c0:	6062      	str	r2, [r4, #4]
 80049c2:	dc50      	bgt.n	8004a66 <_vfprintf_r+0x109e>
 80049c4:	3408      	adds	r4, #8
 80049c6:	b92d      	cbnz	r5, 80049d4 <_vfprintf_r+0x100c>
 80049c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049ca:	b91b      	cbnz	r3, 80049d4 <_vfprintf_r+0x100c>
 80049cc:	9b06      	ldr	r3, [sp, #24]
 80049ce:	07de      	lsls	r6, r3, #31
 80049d0:	f57f aa17 	bpl.w	8003e02 <_vfprintf_r+0x43a>
 80049d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049d6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80049d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80049da:	6022      	str	r2, [r4, #0]
 80049dc:	3301      	adds	r3, #1
 80049de:	eb0b 0201 	add.w	r2, fp, r1
 80049e2:	2b07      	cmp	r3, #7
 80049e4:	9223      	str	r2, [sp, #140]	; 0x8c
 80049e6:	6061      	str	r1, [r4, #4]
 80049e8:	9322      	str	r3, [sp, #136]	; 0x88
 80049ea:	f300 8168 	bgt.w	8004cbe <_vfprintf_r+0x12f6>
 80049ee:	3408      	adds	r4, #8
 80049f0:	426d      	negs	r5, r5
 80049f2:	2d00      	cmp	r5, #0
 80049f4:	dd6f      	ble.n	8004ad6 <_vfprintf_r+0x110e>
 80049f6:	2d10      	cmp	r5, #16
 80049f8:	4f9e      	ldr	r7, [pc, #632]	; (8004c74 <_vfprintf_r+0x12ac>)
 80049fa:	bfc8      	it	gt
 80049fc:	2610      	movgt	r6, #16
 80049fe:	dc05      	bgt.n	8004a0c <_vfprintf_r+0x1044>
 8004a00:	e0aa      	b.n	8004b58 <_vfprintf_r+0x1190>
 8004a02:	3408      	adds	r4, #8
 8004a04:	3d10      	subs	r5, #16
 8004a06:	2d10      	cmp	r5, #16
 8004a08:	f340 80a6 	ble.w	8004b58 <_vfprintf_r+0x1190>
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	3210      	adds	r2, #16
 8004a10:	2b07      	cmp	r3, #7
 8004a12:	9223      	str	r2, [sp, #140]	; 0x8c
 8004a14:	9322      	str	r3, [sp, #136]	; 0x88
 8004a16:	6027      	str	r7, [r4, #0]
 8004a18:	6066      	str	r6, [r4, #4]
 8004a1a:	ddf2      	ble.n	8004a02 <_vfprintf_r+0x103a>
 8004a1c:	4640      	mov	r0, r8
 8004a1e:	4649      	mov	r1, r9
 8004a20:	aa21      	add	r2, sp, #132	; 0x84
 8004a22:	f003 f81b 	bl	8007a5c <__sprint_r>
 8004a26:	2800      	cmp	r0, #0
 8004a28:	f47f a8ce 	bne.w	8003bc8 <_vfprintf_r+0x200>
 8004a2c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8004a2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a30:	ac2e      	add	r4, sp, #184	; 0xb8
 8004a32:	e7e7      	b.n	8004a04 <_vfprintf_r+0x103c>
 8004a34:	9e06      	ldr	r6, [sp, #24]
 8004a36:	4a90      	ldr	r2, [pc, #576]	; (8004c78 <_vfprintf_r+0x12b0>)
 8004a38:	4b90      	ldr	r3, [pc, #576]	; (8004c7c <_vfprintf_r+0x12b4>)
 8004a3a:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8004a3e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004a40:	2103      	movs	r1, #3
 8004a42:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8004a46:	2d47      	cmp	r5, #71	; 0x47
 8004a48:	bfd8      	it	le
 8004a4a:	461a      	movle	r2, r3
 8004a4c:	9107      	str	r1, [sp, #28]
 8004a4e:	9606      	str	r6, [sp, #24]
 8004a50:	9010      	str	r0, [sp, #64]	; 0x40
 8004a52:	920e      	str	r2, [sp, #56]	; 0x38
 8004a54:	910b      	str	r1, [sp, #44]	; 0x2c
 8004a56:	f7ff b90f 	b.w	8003c78 <_vfprintf_r+0x2b0>
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	6816      	ldr	r6, [r2, #0]
 8004a5e:	930c      	str	r3, [sp, #48]	; 0x30
 8004a60:	2700      	movs	r7, #0
 8004a62:	f7ff ba6d 	b.w	8003f40 <_vfprintf_r+0x578>
 8004a66:	4640      	mov	r0, r8
 8004a68:	4649      	mov	r1, r9
 8004a6a:	aa21      	add	r2, sp, #132	; 0x84
 8004a6c:	f002 fff6 	bl	8007a5c <__sprint_r>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	f47f a8a9 	bne.w	8003bc8 <_vfprintf_r+0x200>
 8004a76:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004a78:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004a7c:	ac2e      	add	r4, sp, #184	; 0xb8
 8004a7e:	e7a2      	b.n	80049c6 <_vfprintf_r+0xffe>
 8004a80:	f041 0120 	orr.w	r1, r1, #32
 8004a84:	9106      	str	r1, [sp, #24]
 8004a86:	785d      	ldrb	r5, [r3, #1]
 8004a88:	1c59      	adds	r1, r3, #1
 8004a8a:	f7ff b80e 	b.w	8003aaa <_vfprintf_r+0xe2>
 8004a8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004a90:	910c      	str	r1, [sp, #48]	; 0x30
 8004a92:	4240      	negs	r0, r0
 8004a94:	900a      	str	r0, [sp, #40]	; 0x28
 8004a96:	4619      	mov	r1, r3
 8004a98:	f7ff ba02 	b.w	8003ea0 <_vfprintf_r+0x4d8>
 8004a9c:	4640      	mov	r0, r8
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	aa21      	add	r2, sp, #132	; 0x84
 8004aa2:	f002 ffdb 	bl	8007a5c <__sprint_r>
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	f47f a88e 	bne.w	8003bc8 <_vfprintf_r+0x200>
 8004aac:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004ab0:	ac2e      	add	r4, sp, #184	; 0xb8
 8004ab2:	e41e      	b.n	80042f2 <_vfprintf_r+0x92a>
 8004ab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ab6:	ab2e      	add	r3, sp, #184	; 0xb8
 8004ab8:	1a9b      	subs	r3, r3, r2
 8004aba:	930b      	str	r3, [sp, #44]	; 0x2c
 8004abc:	f7ff b8d4 	b.w	8003c68 <_vfprintf_r+0x2a0>
 8004ac0:	4640      	mov	r0, r8
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	aa21      	add	r2, sp, #132	; 0x84
 8004ac6:	f002 ffc9 	bl	8007a5c <__sprint_r>
 8004aca:	2800      	cmp	r0, #0
 8004acc:	f47f a87c 	bne.w	8003bc8 <_vfprintf_r+0x200>
 8004ad0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8004ad2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ad4:	ac2e      	add	r4, sp, #184	; 0xb8
 8004ad6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004ad8:	6060      	str	r0, [r4, #4]
 8004ada:	3301      	adds	r3, #1
 8004adc:	eb02 0b00 	add.w	fp, r2, r0
 8004ae0:	2b07      	cmp	r3, #7
 8004ae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ae4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004ae8:	9322      	str	r3, [sp, #136]	; 0x88
 8004aea:	6022      	str	r2, [r4, #0]
 8004aec:	f77f a988 	ble.w	8003e00 <_vfprintf_r+0x438>
 8004af0:	e49d      	b.n	800442e <_vfprintf_r+0xa66>
 8004af2:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8004af6:	f7fe ff39 	bl	800396c <strlen>
 8004afa:	970c      	str	r7, [sp, #48]	; 0x30
 8004afc:	900b      	str	r0, [sp, #44]	; 0x2c
 8004afe:	4603      	mov	r3, r0
 8004b00:	f7ff ba03 	b.w	8003f0a <_vfprintf_r+0x542>
 8004b04:	2003      	movs	r0, #3
 8004b06:	a91b      	add	r1, sp, #108	; 0x6c
 8004b08:	e88d 0801 	stmia.w	sp, {r0, fp}
 8004b0c:	9102      	str	r1, [sp, #8]
 8004b0e:	a81c      	add	r0, sp, #112	; 0x70
 8004b10:	a91f      	add	r1, sp, #124	; 0x7c
 8004b12:	9003      	str	r0, [sp, #12]
 8004b14:	9a07      	ldr	r2, [sp, #28]
 8004b16:	9104      	str	r1, [sp, #16]
 8004b18:	4653      	mov	r3, sl
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	f000 fa7c 	bl	8005018 <_dtoa_r>
 8004b20:	465f      	mov	r7, fp
 8004b22:	900e      	str	r0, [sp, #56]	; 0x38
 8004b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b26:	19de      	adds	r6, r3, r7
 8004b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b2a:	2b46      	cmp	r3, #70	; 0x46
 8004b2c:	f47f aeb9 	bne.w	80048a2 <_vfprintf_r+0xeda>
 8004b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b30      	cmp	r3, #48	; 0x30
 8004b36:	f000 80fc 	beq.w	8004d32 <_vfprintf_r+0x136a>
 8004b3a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8004b3c:	443e      	add	r6, r7
 8004b3e:	e6b0      	b.n	80048a2 <_vfprintf_r+0xeda>
 8004b40:	4640      	mov	r0, r8
 8004b42:	4649      	mov	r1, r9
 8004b44:	aa21      	add	r2, sp, #132	; 0x84
 8004b46:	f002 ff89 	bl	8007a5c <__sprint_r>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	f47f a83c 	bne.w	8003bc8 <_vfprintf_r+0x200>
 8004b50:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004b54:	ac2e      	add	r4, sp, #184	; 0xb8
 8004b56:	e4f4      	b.n	8004542 <_vfprintf_r+0xb7a>
 8004b58:	3301      	adds	r3, #1
 8004b5a:	442a      	add	r2, r5
 8004b5c:	2b07      	cmp	r3, #7
 8004b5e:	9223      	str	r2, [sp, #140]	; 0x8c
 8004b60:	9322      	str	r3, [sp, #136]	; 0x88
 8004b62:	6027      	str	r7, [r4, #0]
 8004b64:	6065      	str	r5, [r4, #4]
 8004b66:	dcab      	bgt.n	8004ac0 <_vfprintf_r+0x10f8>
 8004b68:	3408      	adds	r4, #8
 8004b6a:	e7b4      	b.n	8004ad6 <_vfprintf_r+0x110e>
 8004b6c:	4640      	mov	r0, r8
 8004b6e:	4649      	mov	r1, r9
 8004b70:	aa21      	add	r2, sp, #132	; 0x84
 8004b72:	f002 ff73 	bl	8007a5c <__sprint_r>
 8004b76:	2800      	cmp	r0, #0
 8004b78:	f47f a826 	bne.w	8003bc8 <_vfprintf_r+0x200>
 8004b7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b7e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004b82:	ac2e      	add	r4, sp, #184	; 0xb8
 8004b84:	e59f      	b.n	80046c6 <_vfprintf_r+0xcfe>
 8004b86:	2e06      	cmp	r6, #6
 8004b88:	4633      	mov	r3, r6
 8004b8a:	bf28      	it	cs
 8004b8c:	2306      	movcs	r3, #6
 8004b8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004b94:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8004b98:	9307      	str	r3, [sp, #28]
 8004b9a:	4b39      	ldr	r3, [pc, #228]	; (8004c80 <_vfprintf_r+0x12b8>)
 8004b9c:	970c      	str	r7, [sp, #48]	; 0x30
 8004b9e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004ba2:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8004ba6:	930e      	str	r3, [sp, #56]	; 0x38
 8004ba8:	f7ff b866 	b.w	8003c78 <_vfprintf_r+0x2b0>
 8004bac:	4640      	mov	r0, r8
 8004bae:	4649      	mov	r1, r9
 8004bb0:	aa21      	add	r2, sp, #132	; 0x84
 8004bb2:	f002 ff53 	bl	8007a5c <__sprint_r>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	f47f a806 	bne.w	8003bc8 <_vfprintf_r+0x200>
 8004bbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004bbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004bc0:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	ac2e      	add	r4, sp, #184	; 0xb8
 8004bc8:	e593      	b.n	80046f2 <_vfprintf_r+0xd2a>
 8004bca:	1cdf      	adds	r7, r3, #3
 8004bcc:	db22      	blt.n	8004c14 <_vfprintf_r+0x124c>
 8004bce:	459b      	cmp	fp, r3
 8004bd0:	db20      	blt.n	8004c14 <_vfprintf_r+0x124c>
 8004bd2:	9310      	str	r3, [sp, #64]	; 0x40
 8004bd4:	2567      	movs	r5, #103	; 0x67
 8004bd6:	e686      	b.n	80048e6 <_vfprintf_r+0xf1e>
 8004bd8:	9307      	str	r3, [sp, #28]
 8004bda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bdc:	9306      	str	r3, [sp, #24]
 8004bde:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8004be2:	2300      	movs	r3, #0
 8004be4:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8004be8:	930f      	str	r3, [sp, #60]	; 0x3c
 8004bea:	f7ff b848 	b.w	8003c7e <_vfprintf_r+0x2b6>
 8004bee:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8004bf2:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8004bf6:	f7ff ba0e 	b.w	8004016 <_vfprintf_r+0x64e>
 8004bfa:	4633      	mov	r3, r6
 8004bfc:	e664      	b.n	80048c8 <_vfprintf_r+0xf00>
 8004bfe:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8004c02:	900f      	str	r0, [sp, #60]	; 0x3c
 8004c04:	970c      	str	r7, [sp, #48]	; 0x30
 8004c06:	9010      	str	r0, [sp, #64]	; 0x40
 8004c08:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8004c0c:	9307      	str	r3, [sp, #28]
 8004c0e:	960b      	str	r6, [sp, #44]	; 0x2c
 8004c10:	f7ff b832 	b.w	8003c78 <_vfprintf_r+0x2b0>
 8004c14:	3d02      	subs	r5, #2
 8004c16:	3b01      	subs	r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c1c:	bfba      	itte	lt
 8004c1e:	425b      	neglt	r3, r3
 8004c20:	222d      	movlt	r2, #45	; 0x2d
 8004c22:	222b      	movge	r2, #43	; 0x2b
 8004c24:	2b09      	cmp	r3, #9
 8004c26:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
 8004c2a:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8004c2e:	dd72      	ble.n	8004d16 <_vfprintf_r+0x134e>
 8004c30:	f10d 0683 	add.w	r6, sp, #131	; 0x83
 8004c34:	4630      	mov	r0, r6
 8004c36:	4a13      	ldr	r2, [pc, #76]	; (8004c84 <_vfprintf_r+0x12bc>)
 8004c38:	fb82 2103 	smull	r2, r1, r2, r3
 8004c3c:	17da      	asrs	r2, r3, #31
 8004c3e:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8004c42:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004c46:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8004c4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004c4e:	2a09      	cmp	r2, #9
 8004c50:	4613      	mov	r3, r2
 8004c52:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8004c56:	dcee      	bgt.n	8004c36 <_vfprintf_r+0x126e>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	3330      	adds	r3, #48	; 0x30
 8004c5c:	b2d9      	uxtb	r1, r3
 8004c5e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8004c62:	4296      	cmp	r6, r2
 8004c64:	f240 80a0 	bls.w	8004da8 <_vfprintf_r+0x13e0>
 8004c68:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	e00d      	b.n	8004c8c <_vfprintf_r+0x12c4>
 8004c70:	08008150 	.word	0x08008150
 8004c74:	08008100 	.word	0x08008100
 8004c78:	0800811c 	.word	0x0800811c
 8004c7c:	08008118 	.word	0x08008118
 8004c80:	08008148 	.word	0x08008148
 8004c84:	66666667 	.word	0x66666667
 8004c88:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004c8c:	f802 1b01 	strb.w	r1, [r2], #1
 8004c90:	42b3      	cmp	r3, r6
 8004c92:	d1f9      	bne.n	8004c88 <_vfprintf_r+0x12c0>
 8004c94:	ab21      	add	r3, sp, #132	; 0x84
 8004c96:	1a1b      	subs	r3, r3, r0
 8004c98:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8004c9c:	4413      	add	r3, r2
 8004c9e:	aa1d      	add	r2, sp, #116	; 0x74
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004ca4:	9317      	str	r3, [sp, #92]	; 0x5c
 8004ca6:	2a01      	cmp	r2, #1
 8004ca8:	4413      	add	r3, r2
 8004caa:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cac:	dd6d      	ble.n	8004d8a <_vfprintf_r+0x13c2>
 8004cae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cb6:	9210      	str	r2, [sp, #64]	; 0x40
 8004cb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004cbc:	e61f      	b.n	80048fe <_vfprintf_r+0xf36>
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	aa21      	add	r2, sp, #132	; 0x84
 8004cc4:	f002 feca 	bl	8007a5c <__sprint_r>
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	f47e af7d 	bne.w	8003bc8 <_vfprintf_r+0x200>
 8004cce:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004cd0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8004cd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cd4:	ac2e      	add	r4, sp, #184	; 0xb8
 8004cd6:	e68b      	b.n	80049f0 <_vfprintf_r+0x1028>
 8004cd8:	f04f 0b06 	mov.w	fp, #6
 8004cdc:	e5ab      	b.n	8004836 <_vfprintf_r+0xe6e>
 8004cde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	bfd8      	it	le
 8004ce4:	f1c3 0602 	rsble	r6, r3, #2
 8004ce8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cea:	bfc8      	it	gt
 8004cec:	2601      	movgt	r6, #1
 8004cee:	18f3      	adds	r3, r6, r3
 8004cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004cf6:	e602      	b.n	80048fe <_vfprintf_r+0xf36>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	dd30      	ble.n	8004d5e <_vfprintf_r+0x1396>
 8004cfc:	f1bb 0f00 	cmp.w	fp, #0
 8004d00:	d125      	bne.n	8004d4e <_vfprintf_r+0x1386>
 8004d02:	9b06      	ldr	r3, [sp, #24]
 8004d04:	07de      	lsls	r6, r3, #31
 8004d06:	d422      	bmi.n	8004d4e <_vfprintf_r+0x1386>
 8004d08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004d0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d0c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004d10:	e5f5      	b.n	80048fe <_vfprintf_r+0xf36>
 8004d12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d14:	e5d8      	b.n	80048c8 <_vfprintf_r+0xf00>
 8004d16:	3330      	adds	r3, #48	; 0x30
 8004d18:	2230      	movs	r2, #48	; 0x30
 8004d1a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8004d1e:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8004d22:	ab1e      	add	r3, sp, #120	; 0x78
 8004d24:	e7bb      	b.n	8004c9e <_vfprintf_r+0x12d6>
 8004d26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d28:	3301      	adds	r3, #1
 8004d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004d30:	e5e5      	b.n	80048fe <_vfprintf_r+0xf36>
 8004d32:	9807      	ldr	r0, [sp, #28]
 8004d34:	4651      	mov	r1, sl
 8004d36:	2200      	movs	r2, #0
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f7fb fedf 	bl	8000afc <__aeabi_dcmpeq>
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	f47f aefb 	bne.w	8004b3a <_vfprintf_r+0x1172>
 8004d44:	f1c7 0701 	rsb	r7, r7, #1
 8004d48:	971b      	str	r7, [sp, #108]	; 0x6c
 8004d4a:	443e      	add	r6, r7
 8004d4c:	e5a9      	b.n	80048a2 <_vfprintf_r+0xeda>
 8004d4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d50:	f10b 0601 	add.w	r6, fp, #1
 8004d54:	4433      	add	r3, r6
 8004d56:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004d5c:	e5cf      	b.n	80048fe <_vfprintf_r+0xf36>
 8004d5e:	f1bb 0f00 	cmp.w	fp, #0
 8004d62:	d11b      	bne.n	8004d9c <_vfprintf_r+0x13d4>
 8004d64:	9b06      	ldr	r3, [sp, #24]
 8004d66:	07d8      	lsls	r0, r3, #31
 8004d68:	d418      	bmi.n	8004d9c <_vfprintf_r+0x13d4>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d6e:	e5c6      	b.n	80048fe <_vfprintf_r+0xf36>
 8004d70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d72:	682e      	ldr	r6, [r5, #0]
 8004d74:	4628      	mov	r0, r5
 8004d76:	3004      	adds	r0, #4
 8004d78:	2e00      	cmp	r6, #0
 8004d7a:	785d      	ldrb	r5, [r3, #1]
 8004d7c:	900c      	str	r0, [sp, #48]	; 0x30
 8004d7e:	f6be ae94 	bge.w	8003aaa <_vfprintf_r+0xe2>
 8004d82:	f04f 36ff 	mov.w	r6, #4294967295
 8004d86:	f7fe be90 	b.w	8003aaa <_vfprintf_r+0xe2>
 8004d8a:	9b06      	ldr	r3, [sp, #24]
 8004d8c:	f013 0301 	ands.w	r3, r3, #1
 8004d90:	d18d      	bne.n	8004cae <_vfprintf_r+0x12e6>
 8004d92:	9310      	str	r3, [sp, #64]	; 0x40
 8004d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004d9a:	e5b0      	b.n	80048fe <_vfprintf_r+0xf36>
 8004d9c:	f10b 0302 	add.w	r3, fp, #2
 8004da0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004da2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004da6:	e5aa      	b.n	80048fe <_vfprintf_r+0xf36>
 8004da8:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8004dac:	e777      	b.n	8004c9e <_vfprintf_r+0x12d6>
 8004dae:	bf00      	nop

08004db0 <__sbprintf>:
 8004db0:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8004db4:	460c      	mov	r4, r1
 8004db6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8004dba:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8004dbe:	69e7      	ldr	r7, [r4, #28]
 8004dc0:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8004dc2:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 8004dc6:	9119      	str	r1, [sp, #100]	; 0x64
 8004dc8:	ad1a      	add	r5, sp, #104	; 0x68
 8004dca:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004dce:	f02e 0e02 	bic.w	lr, lr, #2
 8004dd2:	f04f 0c00 	mov.w	ip, #0
 8004dd6:	9707      	str	r7, [sp, #28]
 8004dd8:	4669      	mov	r1, sp
 8004dda:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8004ddc:	9500      	str	r5, [sp, #0]
 8004dde:	9504      	str	r5, [sp, #16]
 8004de0:	9602      	str	r6, [sp, #8]
 8004de2:	9605      	str	r6, [sp, #20]
 8004de4:	f8ad e00c 	strh.w	lr, [sp, #12]
 8004de8:	f8ad 900e 	strh.w	r9, [sp, #14]
 8004dec:	9709      	str	r7, [sp, #36]	; 0x24
 8004dee:	f8cd c018 	str.w	ip, [sp, #24]
 8004df2:	4606      	mov	r6, r0
 8004df4:	f7fe fde8 	bl	80039c8 <_vfprintf_r>
 8004df8:	1e05      	subs	r5, r0, #0
 8004dfa:	db07      	blt.n	8004e0c <__sbprintf+0x5c>
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	4669      	mov	r1, sp
 8004e00:	f001 f900 	bl	8006004 <_fflush_r>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	bf18      	it	ne
 8004e08:	f04f 35ff 	movne.w	r5, #4294967295
 8004e0c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004e10:	065b      	lsls	r3, r3, #25
 8004e12:	d503      	bpl.n	8004e1c <__sbprintf+0x6c>
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8004e22:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8004e26:	bf00      	nop

08004e28 <__swsetup_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	4b2f      	ldr	r3, [pc, #188]	; (8004ee8 <__swsetup_r+0xc0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4605      	mov	r5, r0
 8004e30:	460c      	mov	r4, r1
 8004e32:	b113      	cbz	r3, 8004e3a <__swsetup_r+0x12>
 8004e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e36:	2a00      	cmp	r2, #0
 8004e38:	d036      	beq.n	8004ea8 <__swsetup_r+0x80>
 8004e3a:	89a2      	ldrh	r2, [r4, #12]
 8004e3c:	b293      	uxth	r3, r2
 8004e3e:	0718      	lsls	r0, r3, #28
 8004e40:	d50c      	bpl.n	8004e5c <__swsetup_r+0x34>
 8004e42:	6920      	ldr	r0, [r4, #16]
 8004e44:	b1a8      	cbz	r0, 8004e72 <__swsetup_r+0x4a>
 8004e46:	f013 0201 	ands.w	r2, r3, #1
 8004e4a:	d01e      	beq.n	8004e8a <__swsetup_r+0x62>
 8004e4c:	6963      	ldr	r3, [r4, #20]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	425b      	negs	r3, r3
 8004e52:	61a3      	str	r3, [r4, #24]
 8004e54:	60a2      	str	r2, [r4, #8]
 8004e56:	b1f0      	cbz	r0, 8004e96 <__swsetup_r+0x6e>
 8004e58:	2000      	movs	r0, #0
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	06d9      	lsls	r1, r3, #27
 8004e5e:	d53b      	bpl.n	8004ed8 <__swsetup_r+0xb0>
 8004e60:	0758      	lsls	r0, r3, #29
 8004e62:	d425      	bmi.n	8004eb0 <__swsetup_r+0x88>
 8004e64:	6920      	ldr	r0, [r4, #16]
 8004e66:	f042 0308 	orr.w	r3, r2, #8
 8004e6a:	81a3      	strh	r3, [r4, #12]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	d1e9      	bne.n	8004e46 <__swsetup_r+0x1e>
 8004e72:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8004e76:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004e7a:	d0e4      	beq.n	8004e46 <__swsetup_r+0x1e>
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	4621      	mov	r1, r4
 8004e80:	f001 fc48 	bl	8006714 <__smakebuf_r>
 8004e84:	89a3      	ldrh	r3, [r4, #12]
 8004e86:	6920      	ldr	r0, [r4, #16]
 8004e88:	e7dd      	b.n	8004e46 <__swsetup_r+0x1e>
 8004e8a:	0799      	lsls	r1, r3, #30
 8004e8c:	bf58      	it	pl
 8004e8e:	6962      	ldrpl	r2, [r4, #20]
 8004e90:	60a2      	str	r2, [r4, #8]
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d1e0      	bne.n	8004e58 <__swsetup_r+0x30>
 8004e96:	89a3      	ldrh	r3, [r4, #12]
 8004e98:	061a      	lsls	r2, r3, #24
 8004e9a:	d5de      	bpl.n	8004e5a <__swsetup_r+0x32>
 8004e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ea0:	81a3      	strh	r3, [r4, #12]
 8004ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f001 f93f 	bl	800612c <__sinit>
 8004eae:	e7c4      	b.n	8004e3a <__swsetup_r+0x12>
 8004eb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004eb2:	b149      	cbz	r1, 8004ec8 <__swsetup_r+0xa0>
 8004eb4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8004eb8:	4299      	cmp	r1, r3
 8004eba:	d003      	beq.n	8004ec4 <__swsetup_r+0x9c>
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	f001 f98d 	bl	80061dc <_free_r>
 8004ec2:	89a2      	ldrh	r2, [r4, #12]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	6323      	str	r3, [r4, #48]	; 0x30
 8004ec8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8004ecc:	2300      	movs	r3, #0
 8004ece:	6920      	ldr	r0, [r4, #16]
 8004ed0:	6063      	str	r3, [r4, #4]
 8004ed2:	b292      	uxth	r2, r2
 8004ed4:	6020      	str	r0, [r4, #0]
 8004ed6:	e7c6      	b.n	8004e66 <__swsetup_r+0x3e>
 8004ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004edc:	2309      	movs	r3, #9
 8004ede:	602b      	str	r3, [r5, #0]
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	81a2      	strh	r2, [r4, #12]
 8004ee6:	bd38      	pop	{r3, r4, r5, pc}
 8004ee8:	20000430 	.word	0x20000430

08004eec <quorem>:
 8004eec:	6902      	ldr	r2, [r0, #16]
 8004eee:	690b      	ldr	r3, [r1, #16]
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	f300 808f 	bgt.w	8005014 <quorem+0x128>
 8004ef6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efa:	f103 38ff 	add.w	r8, r3, #4294967295
 8004efe:	f101 0714 	add.w	r7, r1, #20
 8004f02:	f100 0b14 	add.w	fp, r0, #20
 8004f06:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8004f0a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8004f0e:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8004f12:	b083      	sub	sp, #12
 8004f14:	3201      	adds	r2, #1
 8004f16:	fbb3 f9f2 	udiv	r9, r3, r2
 8004f1a:	eb0b 0304 	add.w	r3, fp, r4
 8004f1e:	9400      	str	r4, [sp, #0]
 8004f20:	eb07 0a04 	add.w	sl, r7, r4
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	f1b9 0f00 	cmp.w	r9, #0
 8004f2a:	d03b      	beq.n	8004fa4 <quorem+0xb8>
 8004f2c:	2600      	movs	r6, #0
 8004f2e:	4632      	mov	r2, r6
 8004f30:	46bc      	mov	ip, r7
 8004f32:	46de      	mov	lr, fp
 8004f34:	4634      	mov	r4, r6
 8004f36:	f85c 6b04 	ldr.w	r6, [ip], #4
 8004f3a:	f8de 5000 	ldr.w	r5, [lr]
 8004f3e:	b2b3      	uxth	r3, r6
 8004f40:	0c36      	lsrs	r6, r6, #16
 8004f42:	fb03 4409 	mla	r4, r3, r9, r4
 8004f46:	fb06 f609 	mul.w	r6, r6, r9
 8004f4a:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 8004f4e:	b2a3      	uxth	r3, r4
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	b2b4      	uxth	r4, r6
 8004f54:	fa13 f385 	uxtah	r3, r3, r5
 8004f58:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 8004f5c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004f66:	45e2      	cmp	sl, ip
 8004f68:	ea4f 4224 	mov.w	r2, r4, asr #16
 8004f6c:	f84e 3b04 	str.w	r3, [lr], #4
 8004f70:	ea4f 4416 	mov.w	r4, r6, lsr #16
 8004f74:	d2df      	bcs.n	8004f36 <quorem+0x4a>
 8004f76:	9b00      	ldr	r3, [sp, #0]
 8004f78:	f85b 3003 	ldr.w	r3, [fp, r3]
 8004f7c:	b993      	cbnz	r3, 8004fa4 <quorem+0xb8>
 8004f7e:	9c01      	ldr	r4, [sp, #4]
 8004f80:	1f23      	subs	r3, r4, #4
 8004f82:	459b      	cmp	fp, r3
 8004f84:	d20c      	bcs.n	8004fa0 <quorem+0xb4>
 8004f86:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004f8a:	b94b      	cbnz	r3, 8004fa0 <quorem+0xb4>
 8004f8c:	f1a4 0308 	sub.w	r3, r4, #8
 8004f90:	e002      	b.n	8004f98 <quorem+0xac>
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	3b04      	subs	r3, #4
 8004f96:	b91a      	cbnz	r2, 8004fa0 <quorem+0xb4>
 8004f98:	459b      	cmp	fp, r3
 8004f9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f9e:	d3f8      	bcc.n	8004f92 <quorem+0xa6>
 8004fa0:	f8c0 8010 	str.w	r8, [r0, #16]
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	f002 f9bd 	bl	8007324 <__mcmp>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	db2e      	blt.n	800500c <quorem+0x120>
 8004fae:	f109 0901 	add.w	r9, r9, #1
 8004fb2:	465d      	mov	r5, fp
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f857 1b04 	ldr.w	r1, [r7], #4
 8004fba:	6828      	ldr	r0, [r5, #0]
 8004fbc:	b28a      	uxth	r2, r1
 8004fbe:	1a9a      	subs	r2, r3, r2
 8004fc0:	0c09      	lsrs	r1, r1, #16
 8004fc2:	fa12 f280 	uxtah	r2, r2, r0
 8004fc6:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8004fca:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8004fce:	b291      	uxth	r1, r2
 8004fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004fd4:	45ba      	cmp	sl, r7
 8004fd6:	f845 1b04 	str.w	r1, [r5], #4
 8004fda:	ea4f 4323 	mov.w	r3, r3, asr #16
 8004fde:	d2ea      	bcs.n	8004fb6 <quorem+0xca>
 8004fe0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8004fe4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8004fe8:	b982      	cbnz	r2, 800500c <quorem+0x120>
 8004fea:	1f1a      	subs	r2, r3, #4
 8004fec:	4593      	cmp	fp, r2
 8004fee:	d20b      	bcs.n	8005008 <quorem+0x11c>
 8004ff0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8004ff4:	b942      	cbnz	r2, 8005008 <quorem+0x11c>
 8004ff6:	3b08      	subs	r3, #8
 8004ff8:	e002      	b.n	8005000 <quorem+0x114>
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	3b04      	subs	r3, #4
 8004ffe:	b91a      	cbnz	r2, 8005008 <quorem+0x11c>
 8005000:	459b      	cmp	fp, r3
 8005002:	f108 38ff 	add.w	r8, r8, #4294967295
 8005006:	d3f8      	bcc.n	8004ffa <quorem+0x10e>
 8005008:	f8c4 8010 	str.w	r8, [r4, #16]
 800500c:	4648      	mov	r0, r9
 800500e:	b003      	add	sp, #12
 8005010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005014:	2000      	movs	r0, #0
 8005016:	4770      	bx	lr

08005018 <_dtoa_r>:
 8005018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800501e:	b097      	sub	sp, #92	; 0x5c
 8005020:	4604      	mov	r4, r0
 8005022:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8005024:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005028:	b141      	cbz	r1, 800503c <_dtoa_r+0x24>
 800502a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800502c:	604a      	str	r2, [r1, #4]
 800502e:	2301      	movs	r3, #1
 8005030:	4093      	lsls	r3, r2
 8005032:	608b      	str	r3, [r1, #8]
 8005034:	f001 ff92 	bl	8006f5c <_Bfree>
 8005038:	2300      	movs	r3, #0
 800503a:	6423      	str	r3, [r4, #64]	; 0x40
 800503c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	4699      	mov	r9, r3
 8005044:	db36      	blt.n	80050b4 <_dtoa_r+0x9c>
 8005046:	2300      	movs	r3, #0
 8005048:	602b      	str	r3, [r5, #0]
 800504a:	4ba5      	ldr	r3, [pc, #660]	; (80052e0 <_dtoa_r+0x2c8>)
 800504c:	461a      	mov	r2, r3
 800504e:	ea09 0303 	and.w	r3, r9, r3
 8005052:	4293      	cmp	r3, r2
 8005054:	d017      	beq.n	8005086 <_dtoa_r+0x6e>
 8005056:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800505a:	2200      	movs	r2, #0
 800505c:	4630      	mov	r0, r6
 800505e:	4639      	mov	r1, r7
 8005060:	2300      	movs	r3, #0
 8005062:	f7fb fd4b 	bl	8000afc <__aeabi_dcmpeq>
 8005066:	4680      	mov	r8, r0
 8005068:	2800      	cmp	r0, #0
 800506a:	d02b      	beq.n	80050c4 <_dtoa_r+0xac>
 800506c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800506e:	2301      	movs	r3, #1
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 80cb 	beq.w	8005210 <_dtoa_r+0x1f8>
 800507a:	489a      	ldr	r0, [pc, #616]	; (80052e4 <_dtoa_r+0x2cc>)
 800507c:	6018      	str	r0, [r3, #0]
 800507e:	3801      	subs	r0, #1
 8005080:	b017      	add	sp, #92	; 0x5c
 8005082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005086:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005088:	f242 730f 	movw	r3, #9999	; 0x270f
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	9b02      	ldr	r3, [sp, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 80a6 	beq.w	80051e2 <_dtoa_r+0x1ca>
 8005096:	4894      	ldr	r0, [pc, #592]	; (80052e8 <_dtoa_r+0x2d0>)
 8005098:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <_dtoa_r+0x68>
 800509e:	78c3      	ldrb	r3, [r0, #3]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 80b7 	beq.w	8005214 <_dtoa_r+0x1fc>
 80050a6:	f100 0308 	add.w	r3, r0, #8
 80050aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	b017      	add	sp, #92	; 0x5c
 80050b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b4:	9a03      	ldr	r2, [sp, #12]
 80050b6:	2301      	movs	r3, #1
 80050b8:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 80050bc:	602b      	str	r3, [r5, #0]
 80050be:	f8cd 900c 	str.w	r9, [sp, #12]
 80050c2:	e7c2      	b.n	800504a <_dtoa_r+0x32>
 80050c4:	aa15      	add	r2, sp, #84	; 0x54
 80050c6:	ab14      	add	r3, sp, #80	; 0x50
 80050c8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80050cc:	4620      	mov	r0, r4
 80050ce:	4632      	mov	r2, r6
 80050d0:	463b      	mov	r3, r7
 80050d2:	f002 f9b5 	bl	8007440 <__d2b>
 80050d6:	ea5f 5519 	movs.w	r5, r9, lsr #20
 80050da:	4683      	mov	fp, r0
 80050dc:	f040 808a 	bne.w	80051f4 <_dtoa_r+0x1dc>
 80050e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80050e4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80050e6:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80050ea:	4445      	add	r5, r8
 80050ec:	429d      	cmp	r5, r3
 80050ee:	f2c0 8297 	blt.w	8005620 <_dtoa_r+0x608>
 80050f2:	4a7e      	ldr	r2, [pc, #504]	; (80052ec <_dtoa_r+0x2d4>)
 80050f4:	1b52      	subs	r2, r2, r5
 80050f6:	fa09 f902 	lsl.w	r9, r9, r2
 80050fa:	9a02      	ldr	r2, [sp, #8]
 80050fc:	f205 4312 	addw	r3, r5, #1042	; 0x412
 8005100:	fa22 f003 	lsr.w	r0, r2, r3
 8005104:	ea49 0000 	orr.w	r0, r9, r0
 8005108:	f7fb fa1a 	bl	8000540 <__aeabi_ui2d>
 800510c:	2301      	movs	r3, #1
 800510e:	3d01      	subs	r5, #1
 8005110:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005114:	930d      	str	r3, [sp, #52]	; 0x34
 8005116:	2200      	movs	r2, #0
 8005118:	4b75      	ldr	r3, [pc, #468]	; (80052f0 <_dtoa_r+0x2d8>)
 800511a:	f7fb f8d3 	bl	80002c4 <__aeabi_dsub>
 800511e:	a36a      	add	r3, pc, #424	; (adr r3, 80052c8 <_dtoa_r+0x2b0>)
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f7fb fa82 	bl	800062c <__aeabi_dmul>
 8005128:	a369      	add	r3, pc, #420	; (adr r3, 80052d0 <_dtoa_r+0x2b8>)
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f7fb f8cb 	bl	80002c8 <__adddf3>
 8005132:	4606      	mov	r6, r0
 8005134:	4628      	mov	r0, r5
 8005136:	460f      	mov	r7, r1
 8005138:	f7fb fa12 	bl	8000560 <__aeabi_i2d>
 800513c:	a366      	add	r3, pc, #408	; (adr r3, 80052d8 <_dtoa_r+0x2c0>)
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	f7fb fa73 	bl	800062c <__aeabi_dmul>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4630      	mov	r0, r6
 800514c:	4639      	mov	r1, r7
 800514e:	f7fb f8bb 	bl	80002c8 <__adddf3>
 8005152:	4606      	mov	r6, r0
 8005154:	460f      	mov	r7, r1
 8005156:	f7fb fd03 	bl	8000b60 <__aeabi_d2iz>
 800515a:	4639      	mov	r1, r7
 800515c:	9004      	str	r0, [sp, #16]
 800515e:	2200      	movs	r2, #0
 8005160:	4630      	mov	r0, r6
 8005162:	2300      	movs	r3, #0
 8005164:	f7fb fcd4 	bl	8000b10 <__aeabi_dcmplt>
 8005168:	2800      	cmp	r0, #0
 800516a:	f040 81a6 	bne.w	80054ba <_dtoa_r+0x4a2>
 800516e:	9b04      	ldr	r3, [sp, #16]
 8005170:	2b16      	cmp	r3, #22
 8005172:	f200 819f 	bhi.w	80054b4 <_dtoa_r+0x49c>
 8005176:	9a04      	ldr	r2, [sp, #16]
 8005178:	4b5e      	ldr	r3, [pc, #376]	; (80052f4 <_dtoa_r+0x2dc>)
 800517a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800517e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005182:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005186:	f7fb fce1 	bl	8000b4c <__aeabi_dcmpgt>
 800518a:	2800      	cmp	r0, #0
 800518c:	f000 824e 	beq.w	800562c <_dtoa_r+0x614>
 8005190:	9b04      	ldr	r3, [sp, #16]
 8005192:	3b01      	subs	r3, #1
 8005194:	9304      	str	r3, [sp, #16]
 8005196:	2300      	movs	r3, #0
 8005198:	930b      	str	r3, [sp, #44]	; 0x2c
 800519a:	ebc5 0508 	rsb	r5, r5, r8
 800519e:	f1b5 0a01 	subs.w	sl, r5, #1
 80051a2:	f100 81a1 	bmi.w	80054e8 <_dtoa_r+0x4d0>
 80051a6:	2300      	movs	r3, #0
 80051a8:	9305      	str	r3, [sp, #20]
 80051aa:	9b04      	ldr	r3, [sp, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f2c0 8192 	blt.w	80054d6 <_dtoa_r+0x4be>
 80051b2:	449a      	add	sl, r3
 80051b4:	930a      	str	r3, [sp, #40]	; 0x28
 80051b6:	2300      	movs	r3, #0
 80051b8:	9308      	str	r3, [sp, #32]
 80051ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80051bc:	2b09      	cmp	r3, #9
 80051be:	d82b      	bhi.n	8005218 <_dtoa_r+0x200>
 80051c0:	2b05      	cmp	r3, #5
 80051c2:	f340 8670 	ble.w	8005ea6 <_dtoa_r+0xe8e>
 80051c6:	3b04      	subs	r3, #4
 80051c8:	9320      	str	r3, [sp, #128]	; 0x80
 80051ca:	2500      	movs	r5, #0
 80051cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80051ce:	3b02      	subs	r3, #2
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	f200 864e 	bhi.w	8005e72 <_dtoa_r+0xe5a>
 80051d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80051da:	03cc      	.short	0x03cc
 80051dc:	02b203be 	.word	0x02b203be
 80051e0:	0663      	.short	0x0663
 80051e2:	4b41      	ldr	r3, [pc, #260]	; (80052e8 <_dtoa_r+0x2d0>)
 80051e4:	4a44      	ldr	r2, [pc, #272]	; (80052f8 <_dtoa_r+0x2e0>)
 80051e6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80051ea:	2800      	cmp	r0, #0
 80051ec:	bf14      	ite	ne
 80051ee:	4618      	movne	r0, r3
 80051f0:	4610      	moveq	r0, r2
 80051f2:	e751      	b.n	8005098 <_dtoa_r+0x80>
 80051f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80051f8:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80051fc:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8005200:	4630      	mov	r0, r6
 8005202:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005206:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800520a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800520e:	e782      	b.n	8005116 <_dtoa_r+0xfe>
 8005210:	483a      	ldr	r0, [pc, #232]	; (80052fc <_dtoa_r+0x2e4>)
 8005212:	e735      	b.n	8005080 <_dtoa_r+0x68>
 8005214:	1cc3      	adds	r3, r0, #3
 8005216:	e748      	b.n	80050aa <_dtoa_r+0x92>
 8005218:	2100      	movs	r1, #0
 800521a:	6461      	str	r1, [r4, #68]	; 0x44
 800521c:	4620      	mov	r0, r4
 800521e:	9120      	str	r1, [sp, #128]	; 0x80
 8005220:	f001 fe76 	bl	8006f10 <_Balloc>
 8005224:	f04f 33ff 	mov.w	r3, #4294967295
 8005228:	9306      	str	r3, [sp, #24]
 800522a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800522c:	930c      	str	r3, [sp, #48]	; 0x30
 800522e:	2301      	movs	r3, #1
 8005230:	9007      	str	r0, [sp, #28]
 8005232:	9221      	str	r2, [sp, #132]	; 0x84
 8005234:	6420      	str	r0, [r4, #64]	; 0x40
 8005236:	9309      	str	r3, [sp, #36]	; 0x24
 8005238:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800523a:	2b00      	cmp	r3, #0
 800523c:	f2c0 80d2 	blt.w	80053e4 <_dtoa_r+0x3cc>
 8005240:	9a04      	ldr	r2, [sp, #16]
 8005242:	2a0e      	cmp	r2, #14
 8005244:	f300 80ce 	bgt.w	80053e4 <_dtoa_r+0x3cc>
 8005248:	4b2a      	ldr	r3, [pc, #168]	; (80052f4 <_dtoa_r+0x2dc>)
 800524a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800524e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005254:	2b00      	cmp	r3, #0
 8005256:	f2c0 838f 	blt.w	8005978 <_dtoa_r+0x960>
 800525a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800525e:	4642      	mov	r2, r8
 8005260:	464b      	mov	r3, r9
 8005262:	4630      	mov	r0, r6
 8005264:	4639      	mov	r1, r7
 8005266:	f7fb fb0b 	bl	8000880 <__aeabi_ddiv>
 800526a:	f7fb fc79 	bl	8000b60 <__aeabi_d2iz>
 800526e:	4682      	mov	sl, r0
 8005270:	f7fb f976 	bl	8000560 <__aeabi_i2d>
 8005274:	4642      	mov	r2, r8
 8005276:	464b      	mov	r3, r9
 8005278:	f7fb f9d8 	bl	800062c <__aeabi_dmul>
 800527c:	460b      	mov	r3, r1
 800527e:	4602      	mov	r2, r0
 8005280:	4639      	mov	r1, r7
 8005282:	4630      	mov	r0, r6
 8005284:	f7fb f81e 	bl	80002c4 <__aeabi_dsub>
 8005288:	9d07      	ldr	r5, [sp, #28]
 800528a:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 800528e:	702b      	strb	r3, [r5, #0]
 8005290:	9b06      	ldr	r3, [sp, #24]
 8005292:	2b01      	cmp	r3, #1
 8005294:	4606      	mov	r6, r0
 8005296:	460f      	mov	r7, r1
 8005298:	f105 0501 	add.w	r5, r5, #1
 800529c:	d062      	beq.n	8005364 <_dtoa_r+0x34c>
 800529e:	2200      	movs	r2, #0
 80052a0:	4b17      	ldr	r3, [pc, #92]	; (8005300 <_dtoa_r+0x2e8>)
 80052a2:	f7fb f9c3 	bl	800062c <__aeabi_dmul>
 80052a6:	2200      	movs	r2, #0
 80052a8:	2300      	movs	r3, #0
 80052aa:	4606      	mov	r6, r0
 80052ac:	460f      	mov	r7, r1
 80052ae:	f7fb fc25 	bl	8000afc <__aeabi_dcmpeq>
 80052b2:	2800      	cmp	r0, #0
 80052b4:	f040 8083 	bne.w	80053be <_dtoa_r+0x3a6>
 80052b8:	f8cd b008 	str.w	fp, [sp, #8]
 80052bc:	9405      	str	r4, [sp, #20]
 80052be:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80052c2:	9c06      	ldr	r4, [sp, #24]
 80052c4:	e029      	b.n	800531a <_dtoa_r+0x302>
 80052c6:	bf00      	nop
 80052c8:	636f4361 	.word	0x636f4361
 80052cc:	3fd287a7 	.word	0x3fd287a7
 80052d0:	8b60c8b3 	.word	0x8b60c8b3
 80052d4:	3fc68a28 	.word	0x3fc68a28
 80052d8:	509f79fb 	.word	0x509f79fb
 80052dc:	3fd34413 	.word	0x3fd34413
 80052e0:	7ff00000 	.word	0x7ff00000
 80052e4:	08008151 	.word	0x08008151
 80052e8:	08008170 	.word	0x08008170
 80052ec:	fffffc0e 	.word	0xfffffc0e
 80052f0:	3ff80000 	.word	0x3ff80000
 80052f4:	08008188 	.word	0x08008188
 80052f8:	08008164 	.word	0x08008164
 80052fc:	08008150 	.word	0x08008150
 8005300:	40240000 	.word	0x40240000
 8005304:	f7fb f992 	bl	800062c <__aeabi_dmul>
 8005308:	2200      	movs	r2, #0
 800530a:	2300      	movs	r3, #0
 800530c:	4606      	mov	r6, r0
 800530e:	460f      	mov	r7, r1
 8005310:	f7fb fbf4 	bl	8000afc <__aeabi_dcmpeq>
 8005314:	2800      	cmp	r0, #0
 8005316:	f040 83de 	bne.w	8005ad6 <_dtoa_r+0xabe>
 800531a:	4642      	mov	r2, r8
 800531c:	464b      	mov	r3, r9
 800531e:	4630      	mov	r0, r6
 8005320:	4639      	mov	r1, r7
 8005322:	f7fb faad 	bl	8000880 <__aeabi_ddiv>
 8005326:	f7fb fc1b 	bl	8000b60 <__aeabi_d2iz>
 800532a:	4682      	mov	sl, r0
 800532c:	f7fb f918 	bl	8000560 <__aeabi_i2d>
 8005330:	4642      	mov	r2, r8
 8005332:	464b      	mov	r3, r9
 8005334:	f7fb f97a 	bl	800062c <__aeabi_dmul>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4630      	mov	r0, r6
 800533e:	4639      	mov	r1, r7
 8005340:	f7fa ffc0 	bl	80002c4 <__aeabi_dsub>
 8005344:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8005348:	f805 eb01 	strb.w	lr, [r5], #1
 800534c:	ebcb 0e05 	rsb	lr, fp, r5
 8005350:	4574      	cmp	r4, lr
 8005352:	4606      	mov	r6, r0
 8005354:	460f      	mov	r7, r1
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	4bb5      	ldr	r3, [pc, #724]	; (8005630 <_dtoa_r+0x618>)
 800535c:	d1d2      	bne.n	8005304 <_dtoa_r+0x2ec>
 800535e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005362:	9c05      	ldr	r4, [sp, #20]
 8005364:	4632      	mov	r2, r6
 8005366:	463b      	mov	r3, r7
 8005368:	4630      	mov	r0, r6
 800536a:	4639      	mov	r1, r7
 800536c:	f7fa ffac 	bl	80002c8 <__adddf3>
 8005370:	4606      	mov	r6, r0
 8005372:	460f      	mov	r7, r1
 8005374:	4640      	mov	r0, r8
 8005376:	4649      	mov	r1, r9
 8005378:	4632      	mov	r2, r6
 800537a:	463b      	mov	r3, r7
 800537c:	f7fb fbc8 	bl	8000b10 <__aeabi_dcmplt>
 8005380:	b948      	cbnz	r0, 8005396 <_dtoa_r+0x37e>
 8005382:	4640      	mov	r0, r8
 8005384:	4649      	mov	r1, r9
 8005386:	4632      	mov	r2, r6
 8005388:	463b      	mov	r3, r7
 800538a:	f7fb fbb7 	bl	8000afc <__aeabi_dcmpeq>
 800538e:	b1b0      	cbz	r0, 80053be <_dtoa_r+0x3a6>
 8005390:	f01a 0f01 	tst.w	sl, #1
 8005394:	d013      	beq.n	80053be <_dtoa_r+0x3a6>
 8005396:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 800539a:	9907      	ldr	r1, [sp, #28]
 800539c:	1e6b      	subs	r3, r5, #1
 800539e:	e004      	b.n	80053aa <_dtoa_r+0x392>
 80053a0:	428b      	cmp	r3, r1
 80053a2:	f000 8440 	beq.w	8005c26 <_dtoa_r+0xc0e>
 80053a6:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 80053aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80053ae:	f103 0501 	add.w	r5, r3, #1
 80053b2:	461a      	mov	r2, r3
 80053b4:	d0f4      	beq.n	80053a0 <_dtoa_r+0x388>
 80053b6:	f108 0301 	add.w	r3, r8, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	7013      	strb	r3, [r2, #0]
 80053be:	4620      	mov	r0, r4
 80053c0:	4659      	mov	r1, fp
 80053c2:	f001 fdcb 	bl	8006f5c <_Bfree>
 80053c6:	2200      	movs	r2, #0
 80053c8:	9b04      	ldr	r3, [sp, #16]
 80053ca:	702a      	strb	r2, [r5, #0]
 80053cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053ce:	3301      	adds	r3, #1
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 8345 	beq.w	8005a64 <_dtoa_r+0xa4c>
 80053da:	9807      	ldr	r0, [sp, #28]
 80053dc:	601d      	str	r5, [r3, #0]
 80053de:	b017      	add	sp, #92	; 0x5c
 80053e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053e6:	2a00      	cmp	r2, #0
 80053e8:	f000 8084 	beq.w	80054f4 <_dtoa_r+0x4dc>
 80053ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80053ee:	2a01      	cmp	r2, #1
 80053f0:	f340 8304 	ble.w	80059fc <_dtoa_r+0x9e4>
 80053f4:	9b06      	ldr	r3, [sp, #24]
 80053f6:	1e5f      	subs	r7, r3, #1
 80053f8:	9b08      	ldr	r3, [sp, #32]
 80053fa:	42bb      	cmp	r3, r7
 80053fc:	f2c0 83a9 	blt.w	8005b52 <_dtoa_r+0xb3a>
 8005400:	1bdf      	subs	r7, r3, r7
 8005402:	9b06      	ldr	r3, [sp, #24]
 8005404:	2b00      	cmp	r3, #0
 8005406:	f2c0 849c 	blt.w	8005d42 <_dtoa_r+0xd2a>
 800540a:	9d05      	ldr	r5, [sp, #20]
 800540c:	9b06      	ldr	r3, [sp, #24]
 800540e:	9a05      	ldr	r2, [sp, #20]
 8005410:	4620      	mov	r0, r4
 8005412:	441a      	add	r2, r3
 8005414:	2101      	movs	r1, #1
 8005416:	9205      	str	r2, [sp, #20]
 8005418:	449a      	add	sl, r3
 800541a:	f001 fe39 	bl	8007090 <__i2b>
 800541e:	4606      	mov	r6, r0
 8005420:	b165      	cbz	r5, 800543c <_dtoa_r+0x424>
 8005422:	f1ba 0f00 	cmp.w	sl, #0
 8005426:	dd09      	ble.n	800543c <_dtoa_r+0x424>
 8005428:	45aa      	cmp	sl, r5
 800542a:	9a05      	ldr	r2, [sp, #20]
 800542c:	4653      	mov	r3, sl
 800542e:	bfa8      	it	ge
 8005430:	462b      	movge	r3, r5
 8005432:	1ad2      	subs	r2, r2, r3
 8005434:	9205      	str	r2, [sp, #20]
 8005436:	1aed      	subs	r5, r5, r3
 8005438:	ebc3 0a0a 	rsb	sl, r3, sl
 800543c:	9b08      	ldr	r3, [sp, #32]
 800543e:	2b00      	cmp	r3, #0
 8005440:	dd1a      	ble.n	8005478 <_dtoa_r+0x460>
 8005442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 837d 	beq.w	8005b44 <_dtoa_r+0xb2c>
 800544a:	2f00      	cmp	r7, #0
 800544c:	dd10      	ble.n	8005470 <_dtoa_r+0x458>
 800544e:	4631      	mov	r1, r6
 8005450:	463a      	mov	r2, r7
 8005452:	4620      	mov	r0, r4
 8005454:	f001 fec0 	bl	80071d8 <__pow5mult>
 8005458:	4606      	mov	r6, r0
 800545a:	465a      	mov	r2, fp
 800545c:	4631      	mov	r1, r6
 800545e:	4620      	mov	r0, r4
 8005460:	f001 fe20 	bl	80070a4 <__multiply>
 8005464:	4659      	mov	r1, fp
 8005466:	4680      	mov	r8, r0
 8005468:	4620      	mov	r0, r4
 800546a:	f001 fd77 	bl	8006f5c <_Bfree>
 800546e:	46c3      	mov	fp, r8
 8005470:	9b08      	ldr	r3, [sp, #32]
 8005472:	1bda      	subs	r2, r3, r7
 8005474:	f040 82a2 	bne.w	80059bc <_dtoa_r+0x9a4>
 8005478:	4620      	mov	r0, r4
 800547a:	2101      	movs	r1, #1
 800547c:	f001 fe08 	bl	8007090 <__i2b>
 8005480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005482:	2b00      	cmp	r3, #0
 8005484:	4680      	mov	r8, r0
 8005486:	dd39      	ble.n	80054fc <_dtoa_r+0x4e4>
 8005488:	4601      	mov	r1, r0
 800548a:	461a      	mov	r2, r3
 800548c:	4620      	mov	r0, r4
 800548e:	f001 fea3 	bl	80071d8 <__pow5mult>
 8005492:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005494:	2b01      	cmp	r3, #1
 8005496:	4680      	mov	r8, r0
 8005498:	f340 8296 	ble.w	80059c8 <_dtoa_r+0x9b0>
 800549c:	f04f 0900 	mov.w	r9, #0
 80054a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80054a4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80054a8:	6918      	ldr	r0, [r3, #16]
 80054aa:	f001 fda3 	bl	8006ff4 <__hi0bits>
 80054ae:	f1c0 0020 	rsb	r0, r0, #32
 80054b2:	e02d      	b.n	8005510 <_dtoa_r+0x4f8>
 80054b4:	2301      	movs	r3, #1
 80054b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80054b8:	e66f      	b.n	800519a <_dtoa_r+0x182>
 80054ba:	9804      	ldr	r0, [sp, #16]
 80054bc:	f7fb f850 	bl	8000560 <__aeabi_i2d>
 80054c0:	4632      	mov	r2, r6
 80054c2:	463b      	mov	r3, r7
 80054c4:	f7fb fb1a 	bl	8000afc <__aeabi_dcmpeq>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	f47f ae50 	bne.w	800516e <_dtoa_r+0x156>
 80054ce:	9b04      	ldr	r3, [sp, #16]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	9304      	str	r3, [sp, #16]
 80054d4:	e64b      	b.n	800516e <_dtoa_r+0x156>
 80054d6:	9a05      	ldr	r2, [sp, #20]
 80054d8:	9b04      	ldr	r3, [sp, #16]
 80054da:	1ad2      	subs	r2, r2, r3
 80054dc:	425b      	negs	r3, r3
 80054de:	9308      	str	r3, [sp, #32]
 80054e0:	2300      	movs	r3, #0
 80054e2:	9205      	str	r2, [sp, #20]
 80054e4:	930a      	str	r3, [sp, #40]	; 0x28
 80054e6:	e668      	b.n	80051ba <_dtoa_r+0x1a2>
 80054e8:	f1ca 0300 	rsb	r3, sl, #0
 80054ec:	9305      	str	r3, [sp, #20]
 80054ee:	f04f 0a00 	mov.w	sl, #0
 80054f2:	e65a      	b.n	80051aa <_dtoa_r+0x192>
 80054f4:	9f08      	ldr	r7, [sp, #32]
 80054f6:	9d05      	ldr	r5, [sp, #20]
 80054f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80054fa:	e791      	b.n	8005420 <_dtoa_r+0x408>
 80054fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80054fe:	2b01      	cmp	r3, #1
 8005500:	f340 82b3 	ble.w	8005a6a <_dtoa_r+0xa52>
 8005504:	f04f 0900 	mov.w	r9, #0
 8005508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1c8      	bne.n	80054a0 <_dtoa_r+0x488>
 800550e:	2001      	movs	r0, #1
 8005510:	4450      	add	r0, sl
 8005512:	f010 001f 	ands.w	r0, r0, #31
 8005516:	f000 8081 	beq.w	800561c <_dtoa_r+0x604>
 800551a:	f1c0 0320 	rsb	r3, r0, #32
 800551e:	2b04      	cmp	r3, #4
 8005520:	f340 84b8 	ble.w	8005e94 <_dtoa_r+0xe7c>
 8005524:	f1c0 001c 	rsb	r0, r0, #28
 8005528:	9b05      	ldr	r3, [sp, #20]
 800552a:	4403      	add	r3, r0
 800552c:	9305      	str	r3, [sp, #20]
 800552e:	4405      	add	r5, r0
 8005530:	4482      	add	sl, r0
 8005532:	9b05      	ldr	r3, [sp, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	dd05      	ble.n	8005544 <_dtoa_r+0x52c>
 8005538:	4659      	mov	r1, fp
 800553a:	461a      	mov	r2, r3
 800553c:	4620      	mov	r0, r4
 800553e:	f001 fe9b 	bl	8007278 <__lshift>
 8005542:	4683      	mov	fp, r0
 8005544:	f1ba 0f00 	cmp.w	sl, #0
 8005548:	dd05      	ble.n	8005556 <_dtoa_r+0x53e>
 800554a:	4641      	mov	r1, r8
 800554c:	4652      	mov	r2, sl
 800554e:	4620      	mov	r0, r4
 8005550:	f001 fe92 	bl	8007278 <__lshift>
 8005554:	4680      	mov	r8, r0
 8005556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005558:	2b00      	cmp	r3, #0
 800555a:	f040 8268 	bne.w	8005a2e <_dtoa_r+0xa16>
 800555e:	9b06      	ldr	r3, [sp, #24]
 8005560:	2b00      	cmp	r3, #0
 8005562:	f340 8295 	ble.w	8005a90 <_dtoa_r+0xa78>
 8005566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005568:	2b00      	cmp	r3, #0
 800556a:	d171      	bne.n	8005650 <_dtoa_r+0x638>
 800556c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8005570:	9f06      	ldr	r7, [sp, #24]
 8005572:	464d      	mov	r5, r9
 8005574:	e002      	b.n	800557c <_dtoa_r+0x564>
 8005576:	f001 fcfb 	bl	8006f70 <__multadd>
 800557a:	4683      	mov	fp, r0
 800557c:	4641      	mov	r1, r8
 800557e:	4658      	mov	r0, fp
 8005580:	f7ff fcb4 	bl	8004eec <quorem>
 8005584:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8005588:	f805 cb01 	strb.w	ip, [r5], #1
 800558c:	ebc9 0305 	rsb	r3, r9, r5
 8005590:	42bb      	cmp	r3, r7
 8005592:	4620      	mov	r0, r4
 8005594:	4659      	mov	r1, fp
 8005596:	f04f 020a 	mov.w	r2, #10
 800559a:	f04f 0300 	mov.w	r3, #0
 800559e:	dbea      	blt.n	8005576 <_dtoa_r+0x55e>
 80055a0:	9b07      	ldr	r3, [sp, #28]
 80055a2:	9a06      	ldr	r2, [sp, #24]
 80055a4:	2a01      	cmp	r2, #1
 80055a6:	bfac      	ite	ge
 80055a8:	189b      	addge	r3, r3, r2
 80055aa:	3301      	addlt	r3, #1
 80055ac:	461d      	mov	r5, r3
 80055ae:	f04f 0a00 	mov.w	sl, #0
 80055b2:	4659      	mov	r1, fp
 80055b4:	2201      	movs	r2, #1
 80055b6:	4620      	mov	r0, r4
 80055b8:	f8cd c008 	str.w	ip, [sp, #8]
 80055bc:	f001 fe5c 	bl	8007278 <__lshift>
 80055c0:	4641      	mov	r1, r8
 80055c2:	4683      	mov	fp, r0
 80055c4:	f001 feae 	bl	8007324 <__mcmp>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	f8dd c008 	ldr.w	ip, [sp, #8]
 80055ce:	f340 82f6 	ble.w	8005bbe <_dtoa_r+0xba6>
 80055d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80055d6:	9907      	ldr	r1, [sp, #28]
 80055d8:	1e6b      	subs	r3, r5, #1
 80055da:	e004      	b.n	80055e6 <_dtoa_r+0x5ce>
 80055dc:	428b      	cmp	r3, r1
 80055de:	f000 8273 	beq.w	8005ac8 <_dtoa_r+0xab0>
 80055e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055e6:	2a39      	cmp	r2, #57	; 0x39
 80055e8:	f103 0501 	add.w	r5, r3, #1
 80055ec:	d0f6      	beq.n	80055dc <_dtoa_r+0x5c4>
 80055ee:	3201      	adds	r2, #1
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	4641      	mov	r1, r8
 80055f4:	4620      	mov	r0, r4
 80055f6:	f001 fcb1 	bl	8006f5c <_Bfree>
 80055fa:	2e00      	cmp	r6, #0
 80055fc:	f43f aedf 	beq.w	80053be <_dtoa_r+0x3a6>
 8005600:	f1ba 0f00 	cmp.w	sl, #0
 8005604:	d005      	beq.n	8005612 <_dtoa_r+0x5fa>
 8005606:	45b2      	cmp	sl, r6
 8005608:	d003      	beq.n	8005612 <_dtoa_r+0x5fa>
 800560a:	4651      	mov	r1, sl
 800560c:	4620      	mov	r0, r4
 800560e:	f001 fca5 	bl	8006f5c <_Bfree>
 8005612:	4631      	mov	r1, r6
 8005614:	4620      	mov	r0, r4
 8005616:	f001 fca1 	bl	8006f5c <_Bfree>
 800561a:	e6d0      	b.n	80053be <_dtoa_r+0x3a6>
 800561c:	201c      	movs	r0, #28
 800561e:	e783      	b.n	8005528 <_dtoa_r+0x510>
 8005620:	4b04      	ldr	r3, [pc, #16]	; (8005634 <_dtoa_r+0x61c>)
 8005622:	9a02      	ldr	r2, [sp, #8]
 8005624:	1b5b      	subs	r3, r3, r5
 8005626:	fa02 f003 	lsl.w	r0, r2, r3
 800562a:	e56d      	b.n	8005108 <_dtoa_r+0xf0>
 800562c:	900b      	str	r0, [sp, #44]	; 0x2c
 800562e:	e5b4      	b.n	800519a <_dtoa_r+0x182>
 8005630:	40240000 	.word	0x40240000
 8005634:	fffffbee 	.word	0xfffffbee
 8005638:	4631      	mov	r1, r6
 800563a:	2300      	movs	r3, #0
 800563c:	4620      	mov	r0, r4
 800563e:	220a      	movs	r2, #10
 8005640:	f001 fc96 	bl	8006f70 <__multadd>
 8005644:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005646:	2b00      	cmp	r3, #0
 8005648:	4606      	mov	r6, r0
 800564a:	f340 840c 	ble.w	8005e66 <_dtoa_r+0xe4e>
 800564e:	9306      	str	r3, [sp, #24]
 8005650:	2d00      	cmp	r5, #0
 8005652:	dd05      	ble.n	8005660 <_dtoa_r+0x648>
 8005654:	4631      	mov	r1, r6
 8005656:	462a      	mov	r2, r5
 8005658:	4620      	mov	r0, r4
 800565a:	f001 fe0d 	bl	8007278 <__lshift>
 800565e:	4606      	mov	r6, r0
 8005660:	f1b9 0f00 	cmp.w	r9, #0
 8005664:	f040 82e9 	bne.w	8005c3a <_dtoa_r+0xc22>
 8005668:	46b1      	mov	r9, r6
 800566a:	9b06      	ldr	r3, [sp, #24]
 800566c:	9a07      	ldr	r2, [sp, #28]
 800566e:	3b01      	subs	r3, #1
 8005670:	18d3      	adds	r3, r2, r3
 8005672:	9308      	str	r3, [sp, #32]
 8005674:	9b02      	ldr	r3, [sp, #8]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	9309      	str	r3, [sp, #36]	; 0x24
 800567c:	4617      	mov	r7, r2
 800567e:	4641      	mov	r1, r8
 8005680:	4658      	mov	r0, fp
 8005682:	f7ff fc33 	bl	8004eec <quorem>
 8005686:	4631      	mov	r1, r6
 8005688:	4605      	mov	r5, r0
 800568a:	4658      	mov	r0, fp
 800568c:	f001 fe4a 	bl	8007324 <__mcmp>
 8005690:	464a      	mov	r2, r9
 8005692:	4682      	mov	sl, r0
 8005694:	4641      	mov	r1, r8
 8005696:	4620      	mov	r0, r4
 8005698:	f001 fe68 	bl	800736c <__mdiff>
 800569c:	68c2      	ldr	r2, [r0, #12]
 800569e:	4603      	mov	r3, r0
 80056a0:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 80056a4:	2a00      	cmp	r2, #0
 80056a6:	f040 81b8 	bne.w	8005a1a <_dtoa_r+0xa02>
 80056aa:	4619      	mov	r1, r3
 80056ac:	4658      	mov	r0, fp
 80056ae:	f8cd c018 	str.w	ip, [sp, #24]
 80056b2:	9305      	str	r3, [sp, #20]
 80056b4:	f001 fe36 	bl	8007324 <__mcmp>
 80056b8:	9b05      	ldr	r3, [sp, #20]
 80056ba:	9002      	str	r0, [sp, #8]
 80056bc:	4619      	mov	r1, r3
 80056be:	4620      	mov	r0, r4
 80056c0:	f001 fc4c 	bl	8006f5c <_Bfree>
 80056c4:	9a02      	ldr	r2, [sp, #8]
 80056c6:	f8dd c018 	ldr.w	ip, [sp, #24]
 80056ca:	b92a      	cbnz	r2, 80056d8 <_dtoa_r+0x6c0>
 80056cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056ce:	b91b      	cbnz	r3, 80056d8 <_dtoa_r+0x6c0>
 80056d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 83a7 	beq.w	8005e26 <_dtoa_r+0xe0e>
 80056d8:	f1ba 0f00 	cmp.w	sl, #0
 80056dc:	f2c0 8251 	blt.w	8005b82 <_dtoa_r+0xb6a>
 80056e0:	d105      	bne.n	80056ee <_dtoa_r+0x6d6>
 80056e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056e4:	b91b      	cbnz	r3, 80056ee <_dtoa_r+0x6d6>
 80056e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 824a 	beq.w	8005b82 <_dtoa_r+0xb6a>
 80056ee:	2a00      	cmp	r2, #0
 80056f0:	f300 82b7 	bgt.w	8005c62 <_dtoa_r+0xc4a>
 80056f4:	9b08      	ldr	r3, [sp, #32]
 80056f6:	f887 c000 	strb.w	ip, [r7]
 80056fa:	f107 0a01 	add.w	sl, r7, #1
 80056fe:	429f      	cmp	r7, r3
 8005700:	4655      	mov	r5, sl
 8005702:	f000 82ba 	beq.w	8005c7a <_dtoa_r+0xc62>
 8005706:	4659      	mov	r1, fp
 8005708:	220a      	movs	r2, #10
 800570a:	2300      	movs	r3, #0
 800570c:	4620      	mov	r0, r4
 800570e:	f001 fc2f 	bl	8006f70 <__multadd>
 8005712:	454e      	cmp	r6, r9
 8005714:	4683      	mov	fp, r0
 8005716:	4631      	mov	r1, r6
 8005718:	4620      	mov	r0, r4
 800571a:	f04f 020a 	mov.w	r2, #10
 800571e:	f04f 0300 	mov.w	r3, #0
 8005722:	f000 8174 	beq.w	8005a0e <_dtoa_r+0x9f6>
 8005726:	f001 fc23 	bl	8006f70 <__multadd>
 800572a:	4649      	mov	r1, r9
 800572c:	4606      	mov	r6, r0
 800572e:	220a      	movs	r2, #10
 8005730:	4620      	mov	r0, r4
 8005732:	2300      	movs	r3, #0
 8005734:	f001 fc1c 	bl	8006f70 <__multadd>
 8005738:	4657      	mov	r7, sl
 800573a:	4681      	mov	r9, r0
 800573c:	e79f      	b.n	800567e <_dtoa_r+0x666>
 800573e:	2301      	movs	r3, #1
 8005740:	9309      	str	r3, [sp, #36]	; 0x24
 8005742:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005744:	2b00      	cmp	r3, #0
 8005746:	f340 8213 	ble.w	8005b70 <_dtoa_r+0xb58>
 800574a:	461f      	mov	r7, r3
 800574c:	461e      	mov	r6, r3
 800574e:	930c      	str	r3, [sp, #48]	; 0x30
 8005750:	9306      	str	r3, [sp, #24]
 8005752:	2100      	movs	r1, #0
 8005754:	2f17      	cmp	r7, #23
 8005756:	6461      	str	r1, [r4, #68]	; 0x44
 8005758:	d90a      	bls.n	8005770 <_dtoa_r+0x758>
 800575a:	2201      	movs	r2, #1
 800575c:	2304      	movs	r3, #4
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	f103 0014 	add.w	r0, r3, #20
 8005764:	4287      	cmp	r7, r0
 8005766:	4611      	mov	r1, r2
 8005768:	f102 0201 	add.w	r2, r2, #1
 800576c:	d2f7      	bcs.n	800575e <_dtoa_r+0x746>
 800576e:	6461      	str	r1, [r4, #68]	; 0x44
 8005770:	4620      	mov	r0, r4
 8005772:	f001 fbcd 	bl	8006f10 <_Balloc>
 8005776:	2e0e      	cmp	r6, #14
 8005778:	9007      	str	r0, [sp, #28]
 800577a:	6420      	str	r0, [r4, #64]	; 0x40
 800577c:	f63f ad5c 	bhi.w	8005238 <_dtoa_r+0x220>
 8005780:	2d00      	cmp	r5, #0
 8005782:	f43f ad59 	beq.w	8005238 <_dtoa_r+0x220>
 8005786:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800578a:	9904      	ldr	r1, [sp, #16]
 800578c:	2900      	cmp	r1, #0
 800578e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005792:	f340 8221 	ble.w	8005bd8 <_dtoa_r+0xbc0>
 8005796:	4bb7      	ldr	r3, [pc, #732]	; (8005a74 <_dtoa_r+0xa5c>)
 8005798:	f001 020f 	and.w	r2, r1, #15
 800579c:	110d      	asrs	r5, r1, #4
 800579e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057a2:	06e9      	lsls	r1, r5, #27
 80057a4:	e9d3 6700 	ldrd	r6, r7, [r3]
 80057a8:	f140 81db 	bpl.w	8005b62 <_dtoa_r+0xb4a>
 80057ac:	4bb2      	ldr	r3, [pc, #712]	; (8005a78 <_dtoa_r+0xa60>)
 80057ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80057b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057b6:	f7fb f863 	bl	8000880 <__aeabi_ddiv>
 80057ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057be:	f005 050f 	and.w	r5, r5, #15
 80057c2:	f04f 0803 	mov.w	r8, #3
 80057c6:	b18d      	cbz	r5, 80057ec <_dtoa_r+0x7d4>
 80057c8:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8005a78 <_dtoa_r+0xa60>
 80057cc:	4630      	mov	r0, r6
 80057ce:	4639      	mov	r1, r7
 80057d0:	07ea      	lsls	r2, r5, #31
 80057d2:	d505      	bpl.n	80057e0 <_dtoa_r+0x7c8>
 80057d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80057d8:	f108 0801 	add.w	r8, r8, #1
 80057dc:	f7fa ff26 	bl	800062c <__aeabi_dmul>
 80057e0:	106d      	asrs	r5, r5, #1
 80057e2:	f109 0908 	add.w	r9, r9, #8
 80057e6:	d1f3      	bne.n	80057d0 <_dtoa_r+0x7b8>
 80057e8:	4606      	mov	r6, r0
 80057ea:	460f      	mov	r7, r1
 80057ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057f0:	4632      	mov	r2, r6
 80057f2:	463b      	mov	r3, r7
 80057f4:	f7fb f844 	bl	8000880 <__aeabi_ddiv>
 80057f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057fe:	b143      	cbz	r3, 8005812 <_dtoa_r+0x7fa>
 8005800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005804:	2200      	movs	r2, #0
 8005806:	4b9d      	ldr	r3, [pc, #628]	; (8005a7c <_dtoa_r+0xa64>)
 8005808:	f7fb f982 	bl	8000b10 <__aeabi_dcmplt>
 800580c:	2800      	cmp	r0, #0
 800580e:	f040 82ac 	bne.w	8005d6a <_dtoa_r+0xd52>
 8005812:	4640      	mov	r0, r8
 8005814:	f7fa fea4 	bl	8000560 <__aeabi_i2d>
 8005818:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800581c:	f7fa ff06 	bl	800062c <__aeabi_dmul>
 8005820:	4b97      	ldr	r3, [pc, #604]	; (8005a80 <_dtoa_r+0xa68>)
 8005822:	2200      	movs	r2, #0
 8005824:	f7fa fd50 	bl	80002c8 <__adddf3>
 8005828:	9b06      	ldr	r3, [sp, #24]
 800582a:	4606      	mov	r6, r0
 800582c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 8162 	beq.w	8005afa <_dtoa_r+0xae2>
 8005836:	9b04      	ldr	r3, [sp, #16]
 8005838:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800583c:	9312      	str	r3, [sp, #72]	; 0x48
 800583e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8221 	beq.w	8005c88 <_dtoa_r+0xc70>
 8005846:	4b8b      	ldr	r3, [pc, #556]	; (8005a74 <_dtoa_r+0xa5c>)
 8005848:	498e      	ldr	r1, [pc, #568]	; (8005a84 <_dtoa_r+0xa6c>)
 800584a:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800584e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005852:	2000      	movs	r0, #0
 8005854:	f7fb f814 	bl	8000880 <__aeabi_ddiv>
 8005858:	4632      	mov	r2, r6
 800585a:	463b      	mov	r3, r7
 800585c:	f7fa fd32 	bl	80002c4 <__aeabi_dsub>
 8005860:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005864:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005868:	4639      	mov	r1, r7
 800586a:	4630      	mov	r0, r6
 800586c:	f7fb f978 	bl	8000b60 <__aeabi_d2iz>
 8005870:	4605      	mov	r5, r0
 8005872:	f7fa fe75 	bl	8000560 <__aeabi_i2d>
 8005876:	3530      	adds	r5, #48	; 0x30
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4630      	mov	r0, r6
 800587e:	4639      	mov	r1, r7
 8005880:	f7fa fd20 	bl	80002c4 <__aeabi_dsub>
 8005884:	fa5f f885 	uxtb.w	r8, r5
 8005888:	9d07      	ldr	r5, [sp, #28]
 800588a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800588e:	f885 8000 	strb.w	r8, [r5]
 8005892:	4606      	mov	r6, r0
 8005894:	460f      	mov	r7, r1
 8005896:	3501      	adds	r5, #1
 8005898:	f7fb f93a 	bl	8000b10 <__aeabi_dcmplt>
 800589c:	2800      	cmp	r0, #0
 800589e:	f040 82b2 	bne.w	8005e06 <_dtoa_r+0xdee>
 80058a2:	4632      	mov	r2, r6
 80058a4:	463b      	mov	r3, r7
 80058a6:	2000      	movs	r0, #0
 80058a8:	4974      	ldr	r1, [pc, #464]	; (8005a7c <_dtoa_r+0xa64>)
 80058aa:	f7fa fd0b 	bl	80002c4 <__aeabi_dsub>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058b6:	f7fb f949 	bl	8000b4c <__aeabi_dcmpgt>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	f040 82ac 	bne.w	8005e18 <_dtoa_r+0xe00>
 80058c0:	f1b9 0f01 	cmp.w	r9, #1
 80058c4:	f340 8138 	ble.w	8005b38 <_dtoa_r+0xb20>
 80058c8:	9b07      	ldr	r3, [sp, #28]
 80058ca:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 80058ce:	f8cd b008 	str.w	fp, [sp, #8]
 80058d2:	4499      	add	r9, r3
 80058d4:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 80058d8:	46a0      	mov	r8, r4
 80058da:	e00d      	b.n	80058f8 <_dtoa_r+0x8e0>
 80058dc:	2000      	movs	r0, #0
 80058de:	4967      	ldr	r1, [pc, #412]	; (8005a7c <_dtoa_r+0xa64>)
 80058e0:	f7fa fcf0 	bl	80002c4 <__aeabi_dsub>
 80058e4:	4652      	mov	r2, sl
 80058e6:	465b      	mov	r3, fp
 80058e8:	f7fb f912 	bl	8000b10 <__aeabi_dcmplt>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	f040 828e 	bne.w	8005e0e <_dtoa_r+0xdf6>
 80058f2:	454d      	cmp	r5, r9
 80058f4:	f000 811b 	beq.w	8005b2e <_dtoa_r+0xb16>
 80058f8:	4650      	mov	r0, sl
 80058fa:	4659      	mov	r1, fp
 80058fc:	2200      	movs	r2, #0
 80058fe:	4b62      	ldr	r3, [pc, #392]	; (8005a88 <_dtoa_r+0xa70>)
 8005900:	f7fa fe94 	bl	800062c <__aeabi_dmul>
 8005904:	2200      	movs	r2, #0
 8005906:	4b60      	ldr	r3, [pc, #384]	; (8005a88 <_dtoa_r+0xa70>)
 8005908:	4682      	mov	sl, r0
 800590a:	468b      	mov	fp, r1
 800590c:	4630      	mov	r0, r6
 800590e:	4639      	mov	r1, r7
 8005910:	f7fa fe8c 	bl	800062c <__aeabi_dmul>
 8005914:	460f      	mov	r7, r1
 8005916:	4606      	mov	r6, r0
 8005918:	f7fb f922 	bl	8000b60 <__aeabi_d2iz>
 800591c:	4604      	mov	r4, r0
 800591e:	f7fa fe1f 	bl	8000560 <__aeabi_i2d>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4630      	mov	r0, r6
 8005928:	4639      	mov	r1, r7
 800592a:	f7fa fccb 	bl	80002c4 <__aeabi_dsub>
 800592e:	3430      	adds	r4, #48	; 0x30
 8005930:	b2e4      	uxtb	r4, r4
 8005932:	4652      	mov	r2, sl
 8005934:	465b      	mov	r3, fp
 8005936:	f805 4b01 	strb.w	r4, [r5], #1
 800593a:	4606      	mov	r6, r0
 800593c:	460f      	mov	r7, r1
 800593e:	f7fb f8e7 	bl	8000b10 <__aeabi_dcmplt>
 8005942:	4632      	mov	r2, r6
 8005944:	463b      	mov	r3, r7
 8005946:	2800      	cmp	r0, #0
 8005948:	d0c8      	beq.n	80058dc <_dtoa_r+0x8c4>
 800594a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800594c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005950:	9304      	str	r3, [sp, #16]
 8005952:	4644      	mov	r4, r8
 8005954:	e533      	b.n	80053be <_dtoa_r+0x3a6>
 8005956:	2300      	movs	r3, #0
 8005958:	9309      	str	r3, [sp, #36]	; 0x24
 800595a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800595c:	9a04      	ldr	r2, [sp, #16]
 800595e:	4413      	add	r3, r2
 8005960:	930c      	str	r3, [sp, #48]	; 0x30
 8005962:	3301      	adds	r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	9306      	str	r3, [sp, #24]
 8005968:	f340 8109 	ble.w	8005b7e <_dtoa_r+0xb66>
 800596c:	9e06      	ldr	r6, [sp, #24]
 800596e:	4637      	mov	r7, r6
 8005970:	e6ef      	b.n	8005752 <_dtoa_r+0x73a>
 8005972:	2300      	movs	r3, #0
 8005974:	9309      	str	r3, [sp, #36]	; 0x24
 8005976:	e6e4      	b.n	8005742 <_dtoa_r+0x72a>
 8005978:	9b06      	ldr	r3, [sp, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f73f ac6d 	bgt.w	800525a <_dtoa_r+0x242>
 8005980:	f040 8262 	bne.w	8005e48 <_dtoa_r+0xe30>
 8005984:	4640      	mov	r0, r8
 8005986:	2200      	movs	r2, #0
 8005988:	4b40      	ldr	r3, [pc, #256]	; (8005a8c <_dtoa_r+0xa74>)
 800598a:	4649      	mov	r1, r9
 800598c:	f7fa fe4e 	bl	800062c <__aeabi_dmul>
 8005990:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005994:	f7fb f8d0 	bl	8000b38 <__aeabi_dcmpge>
 8005998:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800599c:	4646      	mov	r6, r8
 800599e:	2800      	cmp	r0, #0
 80059a0:	f000 808a 	beq.w	8005ab8 <_dtoa_r+0xaa0>
 80059a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059a6:	9d07      	ldr	r5, [sp, #28]
 80059a8:	43db      	mvns	r3, r3
 80059aa:	9304      	str	r3, [sp, #16]
 80059ac:	4641      	mov	r1, r8
 80059ae:	4620      	mov	r0, r4
 80059b0:	f001 fad4 	bl	8006f5c <_Bfree>
 80059b4:	2e00      	cmp	r6, #0
 80059b6:	f47f ae2c 	bne.w	8005612 <_dtoa_r+0x5fa>
 80059ba:	e500      	b.n	80053be <_dtoa_r+0x3a6>
 80059bc:	4659      	mov	r1, fp
 80059be:	4620      	mov	r0, r4
 80059c0:	f001 fc0a 	bl	80071d8 <__pow5mult>
 80059c4:	4683      	mov	fp, r0
 80059c6:	e557      	b.n	8005478 <_dtoa_r+0x460>
 80059c8:	9b02      	ldr	r3, [sp, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f47f ad66 	bne.w	800549c <_dtoa_r+0x484>
 80059d0:	9b03      	ldr	r3, [sp, #12]
 80059d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f47f ad94 	bne.w	8005504 <_dtoa_r+0x4ec>
 80059dc:	9b03      	ldr	r3, [sp, #12]
 80059de:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 80059e2:	0d3f      	lsrs	r7, r7, #20
 80059e4:	053f      	lsls	r7, r7, #20
 80059e6:	2f00      	cmp	r7, #0
 80059e8:	f000 821a 	beq.w	8005e20 <_dtoa_r+0xe08>
 80059ec:	9b05      	ldr	r3, [sp, #20]
 80059ee:	3301      	adds	r3, #1
 80059f0:	9305      	str	r3, [sp, #20]
 80059f2:	f10a 0a01 	add.w	sl, sl, #1
 80059f6:	f04f 0901 	mov.w	r9, #1
 80059fa:	e585      	b.n	8005508 <_dtoa_r+0x4f0>
 80059fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80059fe:	2a00      	cmp	r2, #0
 8005a00:	f000 81a5 	beq.w	8005d4e <_dtoa_r+0xd36>
 8005a04:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a08:	9f08      	ldr	r7, [sp, #32]
 8005a0a:	9d05      	ldr	r5, [sp, #20]
 8005a0c:	e4ff      	b.n	800540e <_dtoa_r+0x3f6>
 8005a0e:	f001 faaf 	bl	8006f70 <__multadd>
 8005a12:	4657      	mov	r7, sl
 8005a14:	4606      	mov	r6, r0
 8005a16:	4681      	mov	r9, r0
 8005a18:	e631      	b.n	800567e <_dtoa_r+0x666>
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f8cd c008 	str.w	ip, [sp, #8]
 8005a22:	f001 fa9b 	bl	8006f5c <_Bfree>
 8005a26:	2201      	movs	r2, #1
 8005a28:	f8dd c008 	ldr.w	ip, [sp, #8]
 8005a2c:	e654      	b.n	80056d8 <_dtoa_r+0x6c0>
 8005a2e:	4658      	mov	r0, fp
 8005a30:	4641      	mov	r1, r8
 8005a32:	f001 fc77 	bl	8007324 <__mcmp>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	f6bf ad91 	bge.w	800555e <_dtoa_r+0x546>
 8005a3c:	9f04      	ldr	r7, [sp, #16]
 8005a3e:	4659      	mov	r1, fp
 8005a40:	2300      	movs	r3, #0
 8005a42:	4620      	mov	r0, r4
 8005a44:	220a      	movs	r2, #10
 8005a46:	3f01      	subs	r7, #1
 8005a48:	9704      	str	r7, [sp, #16]
 8005a4a:	f001 fa91 	bl	8006f70 <__multadd>
 8005a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a50:	4683      	mov	fp, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f47f adf0 	bne.w	8005638 <_dtoa_r+0x620>
 8005a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f340 81f8 	ble.w	8005e50 <_dtoa_r+0xe38>
 8005a60:	9306      	str	r3, [sp, #24]
 8005a62:	e583      	b.n	800556c <_dtoa_r+0x554>
 8005a64:	9807      	ldr	r0, [sp, #28]
 8005a66:	f7ff bb0b 	b.w	8005080 <_dtoa_r+0x68>
 8005a6a:	9b02      	ldr	r3, [sp, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f47f ad49 	bne.w	8005504 <_dtoa_r+0x4ec>
 8005a72:	e7ad      	b.n	80059d0 <_dtoa_r+0x9b8>
 8005a74:	08008188 	.word	0x08008188
 8005a78:	08008250 	.word	0x08008250
 8005a7c:	3ff00000 	.word	0x3ff00000
 8005a80:	401c0000 	.word	0x401c0000
 8005a84:	3fe00000 	.word	0x3fe00000
 8005a88:	40240000 	.word	0x40240000
 8005a8c:	40140000 	.word	0x40140000
 8005a90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	f77f ad67 	ble.w	8005566 <_dtoa_r+0x54e>
 8005a98:	9b06      	ldr	r3, [sp, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d182      	bne.n	80059a4 <_dtoa_r+0x98c>
 8005a9e:	4641      	mov	r1, r8
 8005aa0:	2205      	movs	r2, #5
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f001 fa64 	bl	8006f70 <__multadd>
 8005aa8:	4680      	mov	r8, r0
 8005aaa:	4641      	mov	r1, r8
 8005aac:	4658      	mov	r0, fp
 8005aae:	f001 fc39 	bl	8007324 <__mcmp>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	f77f af76 	ble.w	80059a4 <_dtoa_r+0x98c>
 8005ab8:	9a04      	ldr	r2, [sp, #16]
 8005aba:	9907      	ldr	r1, [sp, #28]
 8005abc:	2331      	movs	r3, #49	; 0x31
 8005abe:	3201      	adds	r2, #1
 8005ac0:	9204      	str	r2, [sp, #16]
 8005ac2:	700b      	strb	r3, [r1, #0]
 8005ac4:	1c4d      	adds	r5, r1, #1
 8005ac6:	e771      	b.n	80059ac <_dtoa_r+0x994>
 8005ac8:	9a04      	ldr	r2, [sp, #16]
 8005aca:	3201      	adds	r2, #1
 8005acc:	9204      	str	r2, [sp, #16]
 8005ace:	9a07      	ldr	r2, [sp, #28]
 8005ad0:	2331      	movs	r3, #49	; 0x31
 8005ad2:	7013      	strb	r3, [r2, #0]
 8005ad4:	e58d      	b.n	80055f2 <_dtoa_r+0x5da>
 8005ad6:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005ada:	9c05      	ldr	r4, [sp, #20]
 8005adc:	e46f      	b.n	80053be <_dtoa_r+0x3a6>
 8005ade:	4640      	mov	r0, r8
 8005ae0:	f7fa fd3e 	bl	8000560 <__aeabi_i2d>
 8005ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ae8:	f7fa fda0 	bl	800062c <__aeabi_dmul>
 8005aec:	2200      	movs	r2, #0
 8005aee:	4bbc      	ldr	r3, [pc, #752]	; (8005de0 <_dtoa_r+0xdc8>)
 8005af0:	f7fa fbea 	bl	80002c8 <__adddf3>
 8005af4:	4606      	mov	r6, r0
 8005af6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8005afa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005afe:	2200      	movs	r2, #0
 8005b00:	4bb8      	ldr	r3, [pc, #736]	; (8005de4 <_dtoa_r+0xdcc>)
 8005b02:	f7fa fbdf 	bl	80002c4 <__aeabi_dsub>
 8005b06:	4632      	mov	r2, r6
 8005b08:	463b      	mov	r3, r7
 8005b0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b0e:	f7fb f81d 	bl	8000b4c <__aeabi_dcmpgt>
 8005b12:	4680      	mov	r8, r0
 8005b14:	2800      	cmp	r0, #0
 8005b16:	f040 80b3 	bne.w	8005c80 <_dtoa_r+0xc68>
 8005b1a:	4632      	mov	r2, r6
 8005b1c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b24:	f7fa fff4 	bl	8000b10 <__aeabi_dcmplt>
 8005b28:	b130      	cbz	r0, 8005b38 <_dtoa_r+0xb20>
 8005b2a:	4646      	mov	r6, r8
 8005b2c:	e73a      	b.n	80059a4 <_dtoa_r+0x98c>
 8005b2e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005b32:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005b36:	4644      	mov	r4, r8
 8005b38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005b3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b40:	f7ff bb7a 	b.w	8005238 <_dtoa_r+0x220>
 8005b44:	4659      	mov	r1, fp
 8005b46:	9a08      	ldr	r2, [sp, #32]
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f001 fb45 	bl	80071d8 <__pow5mult>
 8005b4e:	4683      	mov	fp, r0
 8005b50:	e492      	b.n	8005478 <_dtoa_r+0x460>
 8005b52:	9b08      	ldr	r3, [sp, #32]
 8005b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b56:	9708      	str	r7, [sp, #32]
 8005b58:	1afb      	subs	r3, r7, r3
 8005b5a:	441a      	add	r2, r3
 8005b5c:	920a      	str	r2, [sp, #40]	; 0x28
 8005b5e:	2700      	movs	r7, #0
 8005b60:	e44f      	b.n	8005402 <_dtoa_r+0x3ea>
 8005b62:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005b66:	f04f 0802 	mov.w	r8, #2
 8005b6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b6e:	e62a      	b.n	80057c6 <_dtoa_r+0x7ae>
 8005b70:	2601      	movs	r6, #1
 8005b72:	9621      	str	r6, [sp, #132]	; 0x84
 8005b74:	960c      	str	r6, [sp, #48]	; 0x30
 8005b76:	9606      	str	r6, [sp, #24]
 8005b78:	2100      	movs	r1, #0
 8005b7a:	6461      	str	r1, [r4, #68]	; 0x44
 8005b7c:	e5f8      	b.n	8005770 <_dtoa_r+0x758>
 8005b7e:	461e      	mov	r6, r3
 8005b80:	e7fa      	b.n	8005b78 <_dtoa_r+0xb60>
 8005b82:	2a00      	cmp	r2, #0
 8005b84:	dd15      	ble.n	8005bb2 <_dtoa_r+0xb9a>
 8005b86:	4659      	mov	r1, fp
 8005b88:	2201      	movs	r2, #1
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f8cd c008 	str.w	ip, [sp, #8]
 8005b90:	f001 fb72 	bl	8007278 <__lshift>
 8005b94:	4641      	mov	r1, r8
 8005b96:	4683      	mov	fp, r0
 8005b98:	f001 fbc4 	bl	8007324 <__mcmp>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8005ba2:	f340 814a 	ble.w	8005e3a <_dtoa_r+0xe22>
 8005ba6:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8005baa:	f000 8106 	beq.w	8005dba <_dtoa_r+0xda2>
 8005bae:	f10c 0c01 	add.w	ip, ip, #1
 8005bb2:	46b2      	mov	sl, r6
 8005bb4:	f887 c000 	strb.w	ip, [r7]
 8005bb8:	1c7d      	adds	r5, r7, #1
 8005bba:	464e      	mov	r6, r9
 8005bbc:	e519      	b.n	80055f2 <_dtoa_r+0x5da>
 8005bbe:	d104      	bne.n	8005bca <_dtoa_r+0xbb2>
 8005bc0:	f01c 0f01 	tst.w	ip, #1
 8005bc4:	d001      	beq.n	8005bca <_dtoa_r+0xbb2>
 8005bc6:	e504      	b.n	80055d2 <_dtoa_r+0x5ba>
 8005bc8:	4615      	mov	r5, r2
 8005bca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bce:	2b30      	cmp	r3, #48	; 0x30
 8005bd0:	f105 32ff 	add.w	r2, r5, #4294967295
 8005bd4:	d0f8      	beq.n	8005bc8 <_dtoa_r+0xbb0>
 8005bd6:	e50c      	b.n	80055f2 <_dtoa_r+0x5da>
 8005bd8:	9b04      	ldr	r3, [sp, #16]
 8005bda:	425d      	negs	r5, r3
 8005bdc:	2d00      	cmp	r5, #0
 8005bde:	f000 80bd 	beq.w	8005d5c <_dtoa_r+0xd44>
 8005be2:	4b81      	ldr	r3, [pc, #516]	; (8005de8 <_dtoa_r+0xdd0>)
 8005be4:	f005 020f 	and.w	r2, r5, #15
 8005be8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005bf4:	f7fa fd1a 	bl	800062c <__aeabi_dmul>
 8005bf8:	112d      	asrs	r5, r5, #4
 8005bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bfe:	f000 812c 	beq.w	8005e5a <_dtoa_r+0xe42>
 8005c02:	4e7a      	ldr	r6, [pc, #488]	; (8005dec <_dtoa_r+0xdd4>)
 8005c04:	f04f 0802 	mov.w	r8, #2
 8005c08:	07eb      	lsls	r3, r5, #31
 8005c0a:	d505      	bpl.n	8005c18 <_dtoa_r+0xc00>
 8005c0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c10:	f108 0801 	add.w	r8, r8, #1
 8005c14:	f7fa fd0a 	bl	800062c <__aeabi_dmul>
 8005c18:	106d      	asrs	r5, r5, #1
 8005c1a:	f106 0608 	add.w	r6, r6, #8
 8005c1e:	d1f3      	bne.n	8005c08 <_dtoa_r+0xbf0>
 8005c20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c24:	e5ea      	b.n	80057fc <_dtoa_r+0x7e4>
 8005c26:	9a04      	ldr	r2, [sp, #16]
 8005c28:	3201      	adds	r2, #1
 8005c2a:	9204      	str	r2, [sp, #16]
 8005c2c:	9a07      	ldr	r2, [sp, #28]
 8005c2e:	2330      	movs	r3, #48	; 0x30
 8005c30:	7013      	strb	r3, [r2, #0]
 8005c32:	2331      	movs	r3, #49	; 0x31
 8005c34:	7013      	strb	r3, [r2, #0]
 8005c36:	f7ff bbc2 	b.w	80053be <_dtoa_r+0x3a6>
 8005c3a:	6871      	ldr	r1, [r6, #4]
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f001 f967 	bl	8006f10 <_Balloc>
 8005c42:	6933      	ldr	r3, [r6, #16]
 8005c44:	1c9a      	adds	r2, r3, #2
 8005c46:	4605      	mov	r5, r0
 8005c48:	0092      	lsls	r2, r2, #2
 8005c4a:	f106 010c 	add.w	r1, r6, #12
 8005c4e:	300c      	adds	r0, #12
 8005c50:	f7fa fa9a 	bl	8000188 <memcpy>
 8005c54:	4620      	mov	r0, r4
 8005c56:	4629      	mov	r1, r5
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f001 fb0d 	bl	8007278 <__lshift>
 8005c5e:	4681      	mov	r9, r0
 8005c60:	e503      	b.n	800566a <_dtoa_r+0x652>
 8005c62:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8005c66:	f000 80a8 	beq.w	8005dba <_dtoa_r+0xda2>
 8005c6a:	f10c 0c01 	add.w	ip, ip, #1
 8005c6e:	46b2      	mov	sl, r6
 8005c70:	f887 c000 	strb.w	ip, [r7]
 8005c74:	1c7d      	adds	r5, r7, #1
 8005c76:	464e      	mov	r6, r9
 8005c78:	e4bb      	b.n	80055f2 <_dtoa_r+0x5da>
 8005c7a:	46b2      	mov	sl, r6
 8005c7c:	464e      	mov	r6, r9
 8005c7e:	e498      	b.n	80055b2 <_dtoa_r+0x59a>
 8005c80:	f04f 0800 	mov.w	r8, #0
 8005c84:	4646      	mov	r6, r8
 8005c86:	e717      	b.n	8005ab8 <_dtoa_r+0xaa0>
 8005c88:	4957      	ldr	r1, [pc, #348]	; (8005de8 <_dtoa_r+0xdd0>)
 8005c8a:	f109 33ff 	add.w	r3, r9, #4294967295
 8005c8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c92:	4632      	mov	r2, r6
 8005c94:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c9a:	463b      	mov	r3, r7
 8005c9c:	f7fa fcc6 	bl	800062c <__aeabi_dmul>
 8005ca0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ca4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ca8:	4639      	mov	r1, r7
 8005caa:	4630      	mov	r0, r6
 8005cac:	f7fa ff58 	bl	8000b60 <__aeabi_d2iz>
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	f7fa fc55 	bl	8000560 <__aeabi_i2d>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	4630      	mov	r0, r6
 8005cbc:	4639      	mov	r1, r7
 8005cbe:	f7fa fb01 	bl	80002c4 <__aeabi_dsub>
 8005cc2:	9a07      	ldr	r2, [sp, #28]
 8005cc4:	3530      	adds	r5, #48	; 0x30
 8005cc6:	f1b9 0f01 	cmp.w	r9, #1
 8005cca:	7015      	strb	r5, [r2, #0]
 8005ccc:	4606      	mov	r6, r0
 8005cce:	460f      	mov	r7, r1
 8005cd0:	f102 0501 	add.w	r5, r2, #1
 8005cd4:	d023      	beq.n	8005d1e <_dtoa_r+0xd06>
 8005cd6:	9b07      	ldr	r3, [sp, #28]
 8005cd8:	f8cd a008 	str.w	sl, [sp, #8]
 8005cdc:	444b      	add	r3, r9
 8005cde:	465e      	mov	r6, fp
 8005ce0:	469a      	mov	sl, r3
 8005ce2:	46ab      	mov	fp, r5
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	4b42      	ldr	r3, [pc, #264]	; (8005df0 <_dtoa_r+0xdd8>)
 8005ce8:	f7fa fca0 	bl	800062c <__aeabi_dmul>
 8005cec:	4689      	mov	r9, r1
 8005cee:	4680      	mov	r8, r0
 8005cf0:	f7fa ff36 	bl	8000b60 <__aeabi_d2iz>
 8005cf4:	4607      	mov	r7, r0
 8005cf6:	f7fa fc33 	bl	8000560 <__aeabi_i2d>
 8005cfa:	3730      	adds	r7, #48	; 0x30
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4640      	mov	r0, r8
 8005d02:	4649      	mov	r1, r9
 8005d04:	f7fa fade 	bl	80002c4 <__aeabi_dsub>
 8005d08:	f80b 7b01 	strb.w	r7, [fp], #1
 8005d0c:	45d3      	cmp	fp, sl
 8005d0e:	d1e9      	bne.n	8005ce4 <_dtoa_r+0xccc>
 8005d10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d12:	f8dd a008 	ldr.w	sl, [sp, #8]
 8005d16:	46b3      	mov	fp, r6
 8005d18:	460f      	mov	r7, r1
 8005d1a:	4606      	mov	r6, r0
 8005d1c:	441d      	add	r5, r3
 8005d1e:	2200      	movs	r2, #0
 8005d20:	4b34      	ldr	r3, [pc, #208]	; (8005df4 <_dtoa_r+0xddc>)
 8005d22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d26:	f7fa facf 	bl	80002c8 <__adddf3>
 8005d2a:	4632      	mov	r2, r6
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	f7fa feef 	bl	8000b10 <__aeabi_dcmplt>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d047      	beq.n	8005dc6 <_dtoa_r+0xdae>
 8005d36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d38:	9304      	str	r3, [sp, #16]
 8005d3a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8005d3e:	f7ff bb2c 	b.w	800539a <_dtoa_r+0x382>
 8005d42:	9b05      	ldr	r3, [sp, #20]
 8005d44:	9a06      	ldr	r2, [sp, #24]
 8005d46:	1a9d      	subs	r5, r3, r2
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f7ff bb60 	b.w	800540e <_dtoa_r+0x3f6>
 8005d4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d50:	9f08      	ldr	r7, [sp, #32]
 8005d52:	9d05      	ldr	r5, [sp, #20]
 8005d54:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d58:	f7ff bb59 	b.w	800540e <_dtoa_r+0x3f6>
 8005d5c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005d60:	f04f 0802 	mov.w	r8, #2
 8005d64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d68:	e548      	b.n	80057fc <_dtoa_r+0x7e4>
 8005d6a:	9b06      	ldr	r3, [sp, #24]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f43f aeb6 	beq.w	8005ade <_dtoa_r+0xac6>
 8005d72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d74:	2d00      	cmp	r5, #0
 8005d76:	f77f aedf 	ble.w	8005b38 <_dtoa_r+0xb20>
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	4b1c      	ldr	r3, [pc, #112]	; (8005df0 <_dtoa_r+0xdd8>)
 8005d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d82:	f7fa fc53 	bl	800062c <__aeabi_dmul>
 8005d86:	4606      	mov	r6, r0
 8005d88:	460f      	mov	r7, r1
 8005d8a:	f108 0001 	add.w	r0, r8, #1
 8005d8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005d92:	f7fa fbe5 	bl	8000560 <__aeabi_i2d>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	4639      	mov	r1, r7
 8005d9e:	f7fa fc45 	bl	800062c <__aeabi_dmul>
 8005da2:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <_dtoa_r+0xdc8>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	f7fa fa8f 	bl	80002c8 <__adddf3>
 8005daa:	9b04      	ldr	r3, [sp, #16]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	4606      	mov	r6, r0
 8005db0:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8005db4:	9312      	str	r3, [sp, #72]	; 0x48
 8005db6:	46a9      	mov	r9, r5
 8005db8:	e541      	b.n	800583e <_dtoa_r+0x826>
 8005dba:	2239      	movs	r2, #57	; 0x39
 8005dbc:	46b2      	mov	sl, r6
 8005dbe:	703a      	strb	r2, [r7, #0]
 8005dc0:	464e      	mov	r6, r9
 8005dc2:	1c7d      	adds	r5, r7, #1
 8005dc4:	e407      	b.n	80055d6 <_dtoa_r+0x5be>
 8005dc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005dca:	2000      	movs	r0, #0
 8005dcc:	4909      	ldr	r1, [pc, #36]	; (8005df4 <_dtoa_r+0xddc>)
 8005dce:	f7fa fa79 	bl	80002c4 <__aeabi_dsub>
 8005dd2:	4632      	mov	r2, r6
 8005dd4:	463b      	mov	r3, r7
 8005dd6:	f7fa feb9 	bl	8000b4c <__aeabi_dcmpgt>
 8005dda:	b970      	cbnz	r0, 8005dfa <_dtoa_r+0xde2>
 8005ddc:	e6ac      	b.n	8005b38 <_dtoa_r+0xb20>
 8005dde:	bf00      	nop
 8005de0:	401c0000 	.word	0x401c0000
 8005de4:	40140000 	.word	0x40140000
 8005de8:	08008188 	.word	0x08008188
 8005dec:	08008250 	.word	0x08008250
 8005df0:	40240000 	.word	0x40240000
 8005df4:	3fe00000 	.word	0x3fe00000
 8005df8:	4615      	mov	r5, r2
 8005dfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005dfe:	2b30      	cmp	r3, #48	; 0x30
 8005e00:	f105 32ff 	add.w	r2, r5, #4294967295
 8005e04:	d0f8      	beq.n	8005df8 <_dtoa_r+0xde0>
 8005e06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e08:	9304      	str	r3, [sp, #16]
 8005e0a:	f7ff bad8 	b.w	80053be <_dtoa_r+0x3a6>
 8005e0e:	4643      	mov	r3, r8
 8005e10:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005e14:	46a0      	mov	r8, r4
 8005e16:	461c      	mov	r4, r3
 8005e18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e1a:	9304      	str	r3, [sp, #16]
 8005e1c:	f7ff babd 	b.w	800539a <_dtoa_r+0x382>
 8005e20:	46b9      	mov	r9, r7
 8005e22:	f7ff bb71 	b.w	8005508 <_dtoa_r+0x4f0>
 8005e26:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8005e2a:	d0c6      	beq.n	8005dba <_dtoa_r+0xda2>
 8005e2c:	f1ba 0f00 	cmp.w	sl, #0
 8005e30:	f77f aebf 	ble.w	8005bb2 <_dtoa_r+0xb9a>
 8005e34:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 8005e38:	e6bb      	b.n	8005bb2 <_dtoa_r+0xb9a>
 8005e3a:	f47f aeba 	bne.w	8005bb2 <_dtoa_r+0xb9a>
 8005e3e:	f01c 0f01 	tst.w	ip, #1
 8005e42:	f43f aeb6 	beq.w	8005bb2 <_dtoa_r+0xb9a>
 8005e46:	e6ae      	b.n	8005ba6 <_dtoa_r+0xb8e>
 8005e48:	f04f 0800 	mov.w	r8, #0
 8005e4c:	4646      	mov	r6, r8
 8005e4e:	e5a9      	b.n	80059a4 <_dtoa_r+0x98c>
 8005e50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	dc04      	bgt.n	8005e60 <_dtoa_r+0xe48>
 8005e56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e58:	e602      	b.n	8005a60 <_dtoa_r+0xa48>
 8005e5a:	f04f 0802 	mov.w	r8, #2
 8005e5e:	e4cd      	b.n	80057fc <_dtoa_r+0x7e4>
 8005e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e62:	9306      	str	r3, [sp, #24]
 8005e64:	e618      	b.n	8005a98 <_dtoa_r+0xa80>
 8005e66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	dcf9      	bgt.n	8005e60 <_dtoa_r+0xe48>
 8005e6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e6e:	f7ff bbee 	b.w	800564e <_dtoa_r+0x636>
 8005e72:	2500      	movs	r5, #0
 8005e74:	6465      	str	r5, [r4, #68]	; 0x44
 8005e76:	4629      	mov	r1, r5
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f001 f849 	bl	8006f10 <_Balloc>
 8005e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e82:	9306      	str	r3, [sp, #24]
 8005e84:	930c      	str	r3, [sp, #48]	; 0x30
 8005e86:	2301      	movs	r3, #1
 8005e88:	9007      	str	r0, [sp, #28]
 8005e8a:	9521      	str	r5, [sp, #132]	; 0x84
 8005e8c:	6420      	str	r0, [r4, #64]	; 0x40
 8005e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e90:	f7ff b9d2 	b.w	8005238 <_dtoa_r+0x220>
 8005e94:	f43f ab4d 	beq.w	8005532 <_dtoa_r+0x51a>
 8005e98:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8005e9c:	f7ff bb44 	b.w	8005528 <_dtoa_r+0x510>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ea4:	e559      	b.n	800595a <_dtoa_r+0x942>
 8005ea6:	2501      	movs	r5, #1
 8005ea8:	f7ff b990 	b.w	80051cc <_dtoa_r+0x1b4>
 8005eac:	f3af 8000 	nop.w

08005eb0 <__sflush_r>:
 8005eb0:	898b      	ldrh	r3, [r1, #12]
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb8:	460d      	mov	r5, r1
 8005eba:	0711      	lsls	r1, r2, #28
 8005ebc:	4680      	mov	r8, r0
 8005ebe:	d43c      	bmi.n	8005f3a <__sflush_r+0x8a>
 8005ec0:	686a      	ldr	r2, [r5, #4]
 8005ec2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ec6:	2a00      	cmp	r2, #0
 8005ec8:	81ab      	strh	r3, [r5, #12]
 8005eca:	dd65      	ble.n	8005f98 <__sflush_r+0xe8>
 8005ecc:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	d04b      	beq.n	8005f6a <__sflush_r+0xba>
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005ed8:	2100      	movs	r1, #0
 8005eda:	b292      	uxth	r2, r2
 8005edc:	f8d8 4000 	ldr.w	r4, [r8]
 8005ee0:	f8c8 1000 	str.w	r1, [r8]
 8005ee4:	2a00      	cmp	r2, #0
 8005ee6:	d05b      	beq.n	8005fa0 <__sflush_r+0xf0>
 8005ee8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8005eea:	075f      	lsls	r7, r3, #29
 8005eec:	d505      	bpl.n	8005efa <__sflush_r+0x4a>
 8005eee:	6869      	ldr	r1, [r5, #4]
 8005ef0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005ef2:	1a52      	subs	r2, r2, r1
 8005ef4:	b10b      	cbz	r3, 8005efa <__sflush_r+0x4a>
 8005ef6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005ef8:	1ad2      	subs	r2, r2, r3
 8005efa:	4640      	mov	r0, r8
 8005efc:	69e9      	ldr	r1, [r5, #28]
 8005efe:	2300      	movs	r3, #0
 8005f00:	47b0      	blx	r6
 8005f02:	1c46      	adds	r6, r0, #1
 8005f04:	d056      	beq.n	8005fb4 <__sflush_r+0x104>
 8005f06:	89ab      	ldrh	r3, [r5, #12]
 8005f08:	692a      	ldr	r2, [r5, #16]
 8005f0a:	602a      	str	r2, [r5, #0]
 8005f0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2200      	movs	r2, #0
 8005f14:	606a      	str	r2, [r5, #4]
 8005f16:	04da      	lsls	r2, r3, #19
 8005f18:	81ab      	strh	r3, [r5, #12]
 8005f1a:	d43b      	bmi.n	8005f94 <__sflush_r+0xe4>
 8005f1c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8005f1e:	f8c8 4000 	str.w	r4, [r8]
 8005f22:	b311      	cbz	r1, 8005f6a <__sflush_r+0xba>
 8005f24:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8005f28:	4299      	cmp	r1, r3
 8005f2a:	d002      	beq.n	8005f32 <__sflush_r+0x82>
 8005f2c:	4640      	mov	r0, r8
 8005f2e:	f000 f955 	bl	80061dc <_free_r>
 8005f32:	2000      	movs	r0, #0
 8005f34:	6328      	str	r0, [r5, #48]	; 0x30
 8005f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f3a:	692e      	ldr	r6, [r5, #16]
 8005f3c:	b1ae      	cbz	r6, 8005f6a <__sflush_r+0xba>
 8005f3e:	682c      	ldr	r4, [r5, #0]
 8005f40:	602e      	str	r6, [r5, #0]
 8005f42:	0791      	lsls	r1, r2, #30
 8005f44:	bf0c      	ite	eq
 8005f46:	696b      	ldreq	r3, [r5, #20]
 8005f48:	2300      	movne	r3, #0
 8005f4a:	1ba4      	subs	r4, r4, r6
 8005f4c:	60ab      	str	r3, [r5, #8]
 8005f4e:	e00a      	b.n	8005f66 <__sflush_r+0xb6>
 8005f50:	4632      	mov	r2, r6
 8005f52:	4623      	mov	r3, r4
 8005f54:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8005f56:	69e9      	ldr	r1, [r5, #28]
 8005f58:	4640      	mov	r0, r8
 8005f5a:	47b8      	blx	r7
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	eba4 0400 	sub.w	r4, r4, r0
 8005f62:	4406      	add	r6, r0
 8005f64:	dd04      	ble.n	8005f70 <__sflush_r+0xc0>
 8005f66:	2c00      	cmp	r4, #0
 8005f68:	dcf2      	bgt.n	8005f50 <__sflush_r+0xa0>
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f70:	89ab      	ldrh	r3, [r5, #12]
 8005f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f76:	81ab      	strh	r3, [r5, #12]
 8005f78:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f80:	89ab      	ldrh	r3, [r5, #12]
 8005f82:	692a      	ldr	r2, [r5, #16]
 8005f84:	6069      	str	r1, [r5, #4]
 8005f86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	81ab      	strh	r3, [r5, #12]
 8005f8e:	04db      	lsls	r3, r3, #19
 8005f90:	602a      	str	r2, [r5, #0]
 8005f92:	d5c3      	bpl.n	8005f1c <__sflush_r+0x6c>
 8005f94:	6528      	str	r0, [r5, #80]	; 0x50
 8005f96:	e7c1      	b.n	8005f1c <__sflush_r+0x6c>
 8005f98:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8005f9a:	2a00      	cmp	r2, #0
 8005f9c:	dc96      	bgt.n	8005ecc <__sflush_r+0x1c>
 8005f9e:	e7e4      	b.n	8005f6a <__sflush_r+0xba>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	69e9      	ldr	r1, [r5, #28]
 8005fa6:	47b0      	blx	r6
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	4602      	mov	r2, r0
 8005fac:	d019      	beq.n	8005fe2 <__sflush_r+0x132>
 8005fae:	89ab      	ldrh	r3, [r5, #12]
 8005fb0:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8005fb2:	e79a      	b.n	8005eea <__sflush_r+0x3a>
 8005fb4:	f8d8 1000 	ldr.w	r1, [r8]
 8005fb8:	2900      	cmp	r1, #0
 8005fba:	d0e1      	beq.n	8005f80 <__sflush_r+0xd0>
 8005fbc:	291d      	cmp	r1, #29
 8005fbe:	d007      	beq.n	8005fd0 <__sflush_r+0x120>
 8005fc0:	2916      	cmp	r1, #22
 8005fc2:	d005      	beq.n	8005fd0 <__sflush_r+0x120>
 8005fc4:	89ab      	ldrh	r3, [r5, #12]
 8005fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fca:	81ab      	strh	r3, [r5, #12]
 8005fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd0:	89ab      	ldrh	r3, [r5, #12]
 8005fd2:	692a      	ldr	r2, [r5, #16]
 8005fd4:	602a      	str	r2, [r5, #0]
 8005fd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fda:	2200      	movs	r2, #0
 8005fdc:	81ab      	strh	r3, [r5, #12]
 8005fde:	606a      	str	r2, [r5, #4]
 8005fe0:	e79c      	b.n	8005f1c <__sflush_r+0x6c>
 8005fe2:	f8d8 3000 	ldr.w	r3, [r8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0e1      	beq.n	8005fae <__sflush_r+0xfe>
 8005fea:	2b1d      	cmp	r3, #29
 8005fec:	d007      	beq.n	8005ffe <__sflush_r+0x14e>
 8005fee:	2b16      	cmp	r3, #22
 8005ff0:	d005      	beq.n	8005ffe <__sflush_r+0x14e>
 8005ff2:	89ab      	ldrh	r3, [r5, #12]
 8005ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff8:	81ab      	strh	r3, [r5, #12]
 8005ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ffe:	f8c8 4000 	str.w	r4, [r8]
 8006002:	e7b2      	b.n	8005f6a <__sflush_r+0xba>

08006004 <_fflush_r>:
 8006004:	b510      	push	{r4, lr}
 8006006:	4604      	mov	r4, r0
 8006008:	b082      	sub	sp, #8
 800600a:	b108      	cbz	r0, 8006010 <_fflush_r+0xc>
 800600c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800600e:	b153      	cbz	r3, 8006026 <_fflush_r+0x22>
 8006010:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8006014:	b908      	cbnz	r0, 800601a <_fflush_r+0x16>
 8006016:	b002      	add	sp, #8
 8006018:	bd10      	pop	{r4, pc}
 800601a:	4620      	mov	r0, r4
 800601c:	b002      	add	sp, #8
 800601e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006022:	f7ff bf45 	b.w	8005eb0 <__sflush_r>
 8006026:	9101      	str	r1, [sp, #4]
 8006028:	f000 f880 	bl	800612c <__sinit>
 800602c:	9901      	ldr	r1, [sp, #4]
 800602e:	e7ef      	b.n	8006010 <_fflush_r+0xc>

08006030 <_cleanup_r>:
 8006030:	4901      	ldr	r1, [pc, #4]	; (8006038 <_cleanup_r+0x8>)
 8006032:	f000 bb37 	b.w	80066a4 <_fwalk_reent>
 8006036:	bf00      	nop
 8006038:	08007b21 	.word	0x08007b21

0800603c <__sinit.part.1>:
 800603c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006040:	4b35      	ldr	r3, [pc, #212]	; (8006118 <__sinit.part.1+0xdc>)
 8006042:	6845      	ldr	r5, [r0, #4]
 8006044:	63c3      	str	r3, [r0, #60]	; 0x3c
 8006046:	2400      	movs	r4, #0
 8006048:	4607      	mov	r7, r0
 800604a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800604e:	2304      	movs	r3, #4
 8006050:	2103      	movs	r1, #3
 8006052:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8006056:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 800605a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 800605e:	b083      	sub	sp, #12
 8006060:	602c      	str	r4, [r5, #0]
 8006062:	606c      	str	r4, [r5, #4]
 8006064:	60ac      	str	r4, [r5, #8]
 8006066:	666c      	str	r4, [r5, #100]	; 0x64
 8006068:	81ec      	strh	r4, [r5, #14]
 800606a:	612c      	str	r4, [r5, #16]
 800606c:	616c      	str	r4, [r5, #20]
 800606e:	61ac      	str	r4, [r5, #24]
 8006070:	81ab      	strh	r3, [r5, #12]
 8006072:	4621      	mov	r1, r4
 8006074:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8006078:	2208      	movs	r2, #8
 800607a:	f000 fef7 	bl	8006e6c <memset>
 800607e:	68be      	ldr	r6, [r7, #8]
 8006080:	f8df b098 	ldr.w	fp, [pc, #152]	; 800611c <__sinit.part.1+0xe0>
 8006084:	f8df a098 	ldr.w	sl, [pc, #152]	; 8006120 <__sinit.part.1+0xe4>
 8006088:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8006124 <__sinit.part.1+0xe8>
 800608c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8006128 <__sinit.part.1+0xec>
 8006090:	f8c5 b020 	str.w	fp, [r5, #32]
 8006094:	2301      	movs	r3, #1
 8006096:	2209      	movs	r2, #9
 8006098:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800609c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80060a0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80060a4:	61ed      	str	r5, [r5, #28]
 80060a6:	4621      	mov	r1, r4
 80060a8:	81f3      	strh	r3, [r6, #14]
 80060aa:	81b2      	strh	r2, [r6, #12]
 80060ac:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80060b0:	6034      	str	r4, [r6, #0]
 80060b2:	6074      	str	r4, [r6, #4]
 80060b4:	60b4      	str	r4, [r6, #8]
 80060b6:	6674      	str	r4, [r6, #100]	; 0x64
 80060b8:	6134      	str	r4, [r6, #16]
 80060ba:	6174      	str	r4, [r6, #20]
 80060bc:	61b4      	str	r4, [r6, #24]
 80060be:	2208      	movs	r2, #8
 80060c0:	9301      	str	r3, [sp, #4]
 80060c2:	f000 fed3 	bl	8006e6c <memset>
 80060c6:	68fd      	ldr	r5, [r7, #12]
 80060c8:	61f6      	str	r6, [r6, #28]
 80060ca:	2012      	movs	r0, #18
 80060cc:	2202      	movs	r2, #2
 80060ce:	f8c6 b020 	str.w	fp, [r6, #32]
 80060d2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 80060d6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 80060da:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 80060de:	4621      	mov	r1, r4
 80060e0:	81a8      	strh	r0, [r5, #12]
 80060e2:	81ea      	strh	r2, [r5, #14]
 80060e4:	602c      	str	r4, [r5, #0]
 80060e6:	606c      	str	r4, [r5, #4]
 80060e8:	60ac      	str	r4, [r5, #8]
 80060ea:	666c      	str	r4, [r5, #100]	; 0x64
 80060ec:	612c      	str	r4, [r5, #16]
 80060ee:	616c      	str	r4, [r5, #20]
 80060f0:	61ac      	str	r4, [r5, #24]
 80060f2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80060f6:	2208      	movs	r2, #8
 80060f8:	f000 feb8 	bl	8006e6c <memset>
 80060fc:	9b01      	ldr	r3, [sp, #4]
 80060fe:	61ed      	str	r5, [r5, #28]
 8006100:	f8c5 b020 	str.w	fp, [r5, #32]
 8006104:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8006108:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800610c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8006110:	63bb      	str	r3, [r7, #56]	; 0x38
 8006112:	b003      	add	sp, #12
 8006114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006118:	08006031 	.word	0x08006031
 800611c:	08007961 	.word	0x08007961
 8006120:	08007985 	.word	0x08007985
 8006124:	080079bd 	.word	0x080079bd
 8006128:	080079dd 	.word	0x080079dd

0800612c <__sinit>:
 800612c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800612e:	b103      	cbz	r3, 8006132 <__sinit+0x6>
 8006130:	4770      	bx	lr
 8006132:	f7ff bf83 	b.w	800603c <__sinit.part.1>
 8006136:	bf00      	nop

08006138 <__sfp_lock_acquire>:
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop

0800613c <__sfp_lock_release>:
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop

08006140 <_malloc_trim_r>:
 8006140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006142:	4f23      	ldr	r7, [pc, #140]	; (80061d0 <_malloc_trim_r+0x90>)
 8006144:	460c      	mov	r4, r1
 8006146:	4606      	mov	r6, r0
 8006148:	f000 fede 	bl	8006f08 <__malloc_lock>
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	685d      	ldr	r5, [r3, #4]
 8006150:	f025 0503 	bic.w	r5, r5, #3
 8006154:	1b29      	subs	r1, r5, r4
 8006156:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800615a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800615e:	f021 010f 	bic.w	r1, r1, #15
 8006162:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8006166:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800616a:	db07      	blt.n	800617c <_malloc_trim_r+0x3c>
 800616c:	4630      	mov	r0, r6
 800616e:	2100      	movs	r1, #0
 8006170:	f001 fbe4 	bl	800793c <_sbrk_r>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	442b      	add	r3, r5
 8006178:	4298      	cmp	r0, r3
 800617a:	d004      	beq.n	8006186 <_malloc_trim_r+0x46>
 800617c:	4630      	mov	r0, r6
 800617e:	f000 fec5 	bl	8006f0c <__malloc_unlock>
 8006182:	2000      	movs	r0, #0
 8006184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006186:	4630      	mov	r0, r6
 8006188:	4261      	negs	r1, r4
 800618a:	f001 fbd7 	bl	800793c <_sbrk_r>
 800618e:	3001      	adds	r0, #1
 8006190:	d00d      	beq.n	80061ae <_malloc_trim_r+0x6e>
 8006192:	4b10      	ldr	r3, [pc, #64]	; (80061d4 <_malloc_trim_r+0x94>)
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	6819      	ldr	r1, [r3, #0]
 8006198:	1b2d      	subs	r5, r5, r4
 800619a:	f045 0501 	orr.w	r5, r5, #1
 800619e:	4630      	mov	r0, r6
 80061a0:	1b09      	subs	r1, r1, r4
 80061a2:	6055      	str	r5, [r2, #4]
 80061a4:	6019      	str	r1, [r3, #0]
 80061a6:	f000 feb1 	bl	8006f0c <__malloc_unlock>
 80061aa:	2001      	movs	r0, #1
 80061ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ae:	4630      	mov	r0, r6
 80061b0:	2100      	movs	r1, #0
 80061b2:	f001 fbc3 	bl	800793c <_sbrk_r>
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	1a83      	subs	r3, r0, r2
 80061ba:	2b0f      	cmp	r3, #15
 80061bc:	ddde      	ble.n	800617c <_malloc_trim_r+0x3c>
 80061be:	4c06      	ldr	r4, [pc, #24]	; (80061d8 <_malloc_trim_r+0x98>)
 80061c0:	4904      	ldr	r1, [pc, #16]	; (80061d4 <_malloc_trim_r+0x94>)
 80061c2:	6824      	ldr	r4, [r4, #0]
 80061c4:	f043 0301 	orr.w	r3, r3, #1
 80061c8:	1b00      	subs	r0, r0, r4
 80061ca:	6053      	str	r3, [r2, #4]
 80061cc:	6008      	str	r0, [r1, #0]
 80061ce:	e7d5      	b.n	800617c <_malloc_trim_r+0x3c>
 80061d0:	20000490 	.word	0x20000490
 80061d4:	2000096c 	.word	0x2000096c
 80061d8:	2000089c 	.word	0x2000089c

080061dc <_free_r>:
 80061dc:	2900      	cmp	r1, #0
 80061de:	d04e      	beq.n	800627e <_free_r+0xa2>
 80061e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e4:	460c      	mov	r4, r1
 80061e6:	4680      	mov	r8, r0
 80061e8:	f000 fe8e 	bl	8006f08 <__malloc_lock>
 80061ec:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80061f0:	4962      	ldr	r1, [pc, #392]	; (800637c <_free_r+0x1a0>)
 80061f2:	f027 0201 	bic.w	r2, r7, #1
 80061f6:	f1a4 0508 	sub.w	r5, r4, #8
 80061fa:	18ab      	adds	r3, r5, r2
 80061fc:	688e      	ldr	r6, [r1, #8]
 80061fe:	6858      	ldr	r0, [r3, #4]
 8006200:	429e      	cmp	r6, r3
 8006202:	f020 0003 	bic.w	r0, r0, #3
 8006206:	d05a      	beq.n	80062be <_free_r+0xe2>
 8006208:	07fe      	lsls	r6, r7, #31
 800620a:	6058      	str	r0, [r3, #4]
 800620c:	d40b      	bmi.n	8006226 <_free_r+0x4a>
 800620e:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8006212:	1bed      	subs	r5, r5, r7
 8006214:	f101 0e08 	add.w	lr, r1, #8
 8006218:	68ac      	ldr	r4, [r5, #8]
 800621a:	4574      	cmp	r4, lr
 800621c:	443a      	add	r2, r7
 800621e:	d067      	beq.n	80062f0 <_free_r+0x114>
 8006220:	68ef      	ldr	r7, [r5, #12]
 8006222:	60e7      	str	r7, [r4, #12]
 8006224:	60bc      	str	r4, [r7, #8]
 8006226:	181c      	adds	r4, r3, r0
 8006228:	6864      	ldr	r4, [r4, #4]
 800622a:	07e4      	lsls	r4, r4, #31
 800622c:	d40c      	bmi.n	8006248 <_free_r+0x6c>
 800622e:	4f54      	ldr	r7, [pc, #336]	; (8006380 <_free_r+0x1a4>)
 8006230:	689c      	ldr	r4, [r3, #8]
 8006232:	42bc      	cmp	r4, r7
 8006234:	4402      	add	r2, r0
 8006236:	d07c      	beq.n	8006332 <_free_r+0x156>
 8006238:	68d8      	ldr	r0, [r3, #12]
 800623a:	60e0      	str	r0, [r4, #12]
 800623c:	f042 0301 	orr.w	r3, r2, #1
 8006240:	6084      	str	r4, [r0, #8]
 8006242:	606b      	str	r3, [r5, #4]
 8006244:	50aa      	str	r2, [r5, r2]
 8006246:	e003      	b.n	8006250 <_free_r+0x74>
 8006248:	f042 0301 	orr.w	r3, r2, #1
 800624c:	606b      	str	r3, [r5, #4]
 800624e:	50aa      	str	r2, [r5, r2]
 8006250:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006254:	d214      	bcs.n	8006280 <_free_r+0xa4>
 8006256:	08d2      	lsrs	r2, r2, #3
 8006258:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 800625c:	6848      	ldr	r0, [r1, #4]
 800625e:	689f      	ldr	r7, [r3, #8]
 8006260:	60af      	str	r7, [r5, #8]
 8006262:	1092      	asrs	r2, r2, #2
 8006264:	2401      	movs	r4, #1
 8006266:	fa04 f202 	lsl.w	r2, r4, r2
 800626a:	4310      	orrs	r0, r2
 800626c:	60eb      	str	r3, [r5, #12]
 800626e:	6048      	str	r0, [r1, #4]
 8006270:	609d      	str	r5, [r3, #8]
 8006272:	60fd      	str	r5, [r7, #12]
 8006274:	4640      	mov	r0, r8
 8006276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800627a:	f000 be47 	b.w	8006f0c <__malloc_unlock>
 800627e:	4770      	bx	lr
 8006280:	0a53      	lsrs	r3, r2, #9
 8006282:	2b04      	cmp	r3, #4
 8006284:	d847      	bhi.n	8006316 <_free_r+0x13a>
 8006286:	0993      	lsrs	r3, r2, #6
 8006288:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800628c:	0060      	lsls	r0, r4, #1
 800628e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8006292:	493a      	ldr	r1, [pc, #232]	; (800637c <_free_r+0x1a0>)
 8006294:	6883      	ldr	r3, [r0, #8]
 8006296:	4283      	cmp	r3, r0
 8006298:	d043      	beq.n	8006322 <_free_r+0x146>
 800629a:	6859      	ldr	r1, [r3, #4]
 800629c:	f021 0103 	bic.w	r1, r1, #3
 80062a0:	4291      	cmp	r1, r2
 80062a2:	d902      	bls.n	80062aa <_free_r+0xce>
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	4298      	cmp	r0, r3
 80062a8:	d1f7      	bne.n	800629a <_free_r+0xbe>
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	60ea      	str	r2, [r5, #12]
 80062ae:	60ab      	str	r3, [r5, #8]
 80062b0:	4640      	mov	r0, r8
 80062b2:	6095      	str	r5, [r2, #8]
 80062b4:	60dd      	str	r5, [r3, #12]
 80062b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ba:	f000 be27 	b.w	8006f0c <__malloc_unlock>
 80062be:	07ff      	lsls	r7, r7, #31
 80062c0:	4402      	add	r2, r0
 80062c2:	d407      	bmi.n	80062d4 <_free_r+0xf8>
 80062c4:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80062c8:	1aed      	subs	r5, r5, r3
 80062ca:	441a      	add	r2, r3
 80062cc:	68a8      	ldr	r0, [r5, #8]
 80062ce:	68eb      	ldr	r3, [r5, #12]
 80062d0:	60c3      	str	r3, [r0, #12]
 80062d2:	6098      	str	r0, [r3, #8]
 80062d4:	4b2b      	ldr	r3, [pc, #172]	; (8006384 <_free_r+0x1a8>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0001 	orr.w	r0, r2, #1
 80062dc:	429a      	cmp	r2, r3
 80062de:	6068      	str	r0, [r5, #4]
 80062e0:	608d      	str	r5, [r1, #8]
 80062e2:	d3c7      	bcc.n	8006274 <_free_r+0x98>
 80062e4:	4b28      	ldr	r3, [pc, #160]	; (8006388 <_free_r+0x1ac>)
 80062e6:	4640      	mov	r0, r8
 80062e8:	6819      	ldr	r1, [r3, #0]
 80062ea:	f7ff ff29 	bl	8006140 <_malloc_trim_r>
 80062ee:	e7c1      	b.n	8006274 <_free_r+0x98>
 80062f0:	1819      	adds	r1, r3, r0
 80062f2:	6849      	ldr	r1, [r1, #4]
 80062f4:	07c9      	lsls	r1, r1, #31
 80062f6:	d409      	bmi.n	800630c <_free_r+0x130>
 80062f8:	68d9      	ldr	r1, [r3, #12]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	4402      	add	r2, r0
 80062fe:	f042 0001 	orr.w	r0, r2, #1
 8006302:	60d9      	str	r1, [r3, #12]
 8006304:	608b      	str	r3, [r1, #8]
 8006306:	6068      	str	r0, [r5, #4]
 8006308:	50aa      	str	r2, [r5, r2]
 800630a:	e7b3      	b.n	8006274 <_free_r+0x98>
 800630c:	f042 0301 	orr.w	r3, r2, #1
 8006310:	606b      	str	r3, [r5, #4]
 8006312:	50aa      	str	r2, [r5, r2]
 8006314:	e7ae      	b.n	8006274 <_free_r+0x98>
 8006316:	2b14      	cmp	r3, #20
 8006318:	d814      	bhi.n	8006344 <_free_r+0x168>
 800631a:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 800631e:	0060      	lsls	r0, r4, #1
 8006320:	e7b5      	b.n	800628e <_free_r+0xb2>
 8006322:	684a      	ldr	r2, [r1, #4]
 8006324:	10a4      	asrs	r4, r4, #2
 8006326:	2001      	movs	r0, #1
 8006328:	40a0      	lsls	r0, r4
 800632a:	4302      	orrs	r2, r0
 800632c:	604a      	str	r2, [r1, #4]
 800632e:	461a      	mov	r2, r3
 8006330:	e7bc      	b.n	80062ac <_free_r+0xd0>
 8006332:	f042 0301 	orr.w	r3, r2, #1
 8006336:	614d      	str	r5, [r1, #20]
 8006338:	610d      	str	r5, [r1, #16]
 800633a:	60ec      	str	r4, [r5, #12]
 800633c:	60ac      	str	r4, [r5, #8]
 800633e:	606b      	str	r3, [r5, #4]
 8006340:	50aa      	str	r2, [r5, r2]
 8006342:	e797      	b.n	8006274 <_free_r+0x98>
 8006344:	2b54      	cmp	r3, #84	; 0x54
 8006346:	d804      	bhi.n	8006352 <_free_r+0x176>
 8006348:	0b13      	lsrs	r3, r2, #12
 800634a:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 800634e:	0060      	lsls	r0, r4, #1
 8006350:	e79d      	b.n	800628e <_free_r+0xb2>
 8006352:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006356:	d804      	bhi.n	8006362 <_free_r+0x186>
 8006358:	0bd3      	lsrs	r3, r2, #15
 800635a:	f103 0477 	add.w	r4, r3, #119	; 0x77
 800635e:	0060      	lsls	r0, r4, #1
 8006360:	e795      	b.n	800628e <_free_r+0xb2>
 8006362:	f240 5054 	movw	r0, #1364	; 0x554
 8006366:	4283      	cmp	r3, r0
 8006368:	d804      	bhi.n	8006374 <_free_r+0x198>
 800636a:	0c93      	lsrs	r3, r2, #18
 800636c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8006370:	0060      	lsls	r0, r4, #1
 8006372:	e78c      	b.n	800628e <_free_r+0xb2>
 8006374:	20fc      	movs	r0, #252	; 0xfc
 8006376:	247e      	movs	r4, #126	; 0x7e
 8006378:	e789      	b.n	800628e <_free_r+0xb2>
 800637a:	bf00      	nop
 800637c:	20000490 	.word	0x20000490
 8006380:	20000498 	.word	0x20000498
 8006384:	20000898 	.word	0x20000898
 8006388:	20000968 	.word	0x20000968

0800638c <__sfvwrite_r>:
 800638c:	6893      	ldr	r3, [r2, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d07a      	beq.n	8006488 <__sfvwrite_r+0xfc>
 8006392:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006396:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 800639a:	f01e 0f08 	tst.w	lr, #8
 800639e:	b083      	sub	sp, #12
 80063a0:	460c      	mov	r4, r1
 80063a2:	4681      	mov	r9, r0
 80063a4:	4616      	mov	r6, r2
 80063a6:	d026      	beq.n	80063f6 <__sfvwrite_r+0x6a>
 80063a8:	690b      	ldr	r3, [r1, #16]
 80063aa:	b323      	cbz	r3, 80063f6 <__sfvwrite_r+0x6a>
 80063ac:	f00e 0802 	and.w	r8, lr, #2
 80063b0:	fa1f f088 	uxth.w	r0, r8
 80063b4:	6835      	ldr	r5, [r6, #0]
 80063b6:	b370      	cbz	r0, 8006416 <__sfvwrite_r+0x8a>
 80063b8:	f04f 0a00 	mov.w	sl, #0
 80063bc:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 80066a0 <__sfvwrite_r+0x314>
 80063c0:	46d0      	mov	r8, sl
 80063c2:	45d8      	cmp	r8, fp
 80063c4:	4643      	mov	r3, r8
 80063c6:	4652      	mov	r2, sl
 80063c8:	bf28      	it	cs
 80063ca:	465b      	movcs	r3, fp
 80063cc:	4648      	mov	r0, r9
 80063ce:	f1b8 0f00 	cmp.w	r8, #0
 80063d2:	d053      	beq.n	800647c <__sfvwrite_r+0xf0>
 80063d4:	69e1      	ldr	r1, [r4, #28]
 80063d6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80063d8:	47b8      	blx	r7
 80063da:	2800      	cmp	r0, #0
 80063dc:	dd73      	ble.n	80064c6 <__sfvwrite_r+0x13a>
 80063de:	68b3      	ldr	r3, [r6, #8]
 80063e0:	1a1b      	subs	r3, r3, r0
 80063e2:	4482      	add	sl, r0
 80063e4:	ebc0 0808 	rsb	r8, r0, r8
 80063e8:	60b3      	str	r3, [r6, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e9      	bne.n	80063c2 <__sfvwrite_r+0x36>
 80063ee:	2000      	movs	r0, #0
 80063f0:	b003      	add	sp, #12
 80063f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f6:	4648      	mov	r0, r9
 80063f8:	4621      	mov	r1, r4
 80063fa:	f7fe fd15 	bl	8004e28 <__swsetup_r>
 80063fe:	2800      	cmp	r0, #0
 8006400:	f040 8145 	bne.w	800668e <__sfvwrite_r+0x302>
 8006404:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8006408:	6835      	ldr	r5, [r6, #0]
 800640a:	f00e 0802 	and.w	r8, lr, #2
 800640e:	fa1f f088 	uxth.w	r0, r8
 8006412:	2800      	cmp	r0, #0
 8006414:	d1d0      	bne.n	80063b8 <__sfvwrite_r+0x2c>
 8006416:	f01e 0b01 	ands.w	fp, lr, #1
 800641a:	d15d      	bne.n	80064d8 <__sfvwrite_r+0x14c>
 800641c:	46d8      	mov	r8, fp
 800641e:	f1b8 0f00 	cmp.w	r8, #0
 8006422:	d025      	beq.n	8006470 <__sfvwrite_r+0xe4>
 8006424:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8006428:	68a7      	ldr	r7, [r4, #8]
 800642a:	d02f      	beq.n	800648c <__sfvwrite_r+0x100>
 800642c:	45b8      	cmp	r8, r7
 800642e:	46ba      	mov	sl, r7
 8006430:	f0c0 80a9 	bcc.w	8006586 <__sfvwrite_r+0x1fa>
 8006434:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8006438:	f040 80b6 	bne.w	80065a8 <__sfvwrite_r+0x21c>
 800643c:	6820      	ldr	r0, [r4, #0]
 800643e:	4652      	mov	r2, sl
 8006440:	4659      	mov	r1, fp
 8006442:	f000 fcaf 	bl	8006da4 <memmove>
 8006446:	68a0      	ldr	r0, [r4, #8]
 8006448:	6822      	ldr	r2, [r4, #0]
 800644a:	1bc0      	subs	r0, r0, r7
 800644c:	eb02 030a 	add.w	r3, r2, sl
 8006450:	60a0      	str	r0, [r4, #8]
 8006452:	6023      	str	r3, [r4, #0]
 8006454:	4640      	mov	r0, r8
 8006456:	68b3      	ldr	r3, [r6, #8]
 8006458:	1a1b      	subs	r3, r3, r0
 800645a:	4483      	add	fp, r0
 800645c:	ebc0 0808 	rsb	r8, r0, r8
 8006460:	60b3      	str	r3, [r6, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0c3      	beq.n	80063ee <__sfvwrite_r+0x62>
 8006466:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 800646a:	f1b8 0f00 	cmp.w	r8, #0
 800646e:	d1d9      	bne.n	8006424 <__sfvwrite_r+0x98>
 8006470:	f8d5 b000 	ldr.w	fp, [r5]
 8006474:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006478:	3508      	adds	r5, #8
 800647a:	e7d0      	b.n	800641e <__sfvwrite_r+0x92>
 800647c:	f8d5 a000 	ldr.w	sl, [r5]
 8006480:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006484:	3508      	adds	r5, #8
 8006486:	e79c      	b.n	80063c2 <__sfvwrite_r+0x36>
 8006488:	2000      	movs	r0, #0
 800648a:	4770      	bx	lr
 800648c:	6820      	ldr	r0, [r4, #0]
 800648e:	6923      	ldr	r3, [r4, #16]
 8006490:	4298      	cmp	r0, r3
 8006492:	d803      	bhi.n	800649c <__sfvwrite_r+0x110>
 8006494:	6962      	ldr	r2, [r4, #20]
 8006496:	4590      	cmp	r8, r2
 8006498:	f080 80b9 	bcs.w	800660e <__sfvwrite_r+0x282>
 800649c:	4547      	cmp	r7, r8
 800649e:	bf28      	it	cs
 80064a0:	4647      	movcs	r7, r8
 80064a2:	463a      	mov	r2, r7
 80064a4:	4659      	mov	r1, fp
 80064a6:	f000 fc7d 	bl	8006da4 <memmove>
 80064aa:	68a3      	ldr	r3, [r4, #8]
 80064ac:	6822      	ldr	r2, [r4, #0]
 80064ae:	1bdb      	subs	r3, r3, r7
 80064b0:	443a      	add	r2, r7
 80064b2:	60a3      	str	r3, [r4, #8]
 80064b4:	6022      	str	r2, [r4, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d14a      	bne.n	8006550 <__sfvwrite_r+0x1c4>
 80064ba:	4648      	mov	r0, r9
 80064bc:	4621      	mov	r1, r4
 80064be:	f7ff fda1 	bl	8006004 <_fflush_r>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d044      	beq.n	8006550 <__sfvwrite_r+0x1c4>
 80064c6:	89a3      	ldrh	r3, [r4, #12]
 80064c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064cc:	f04f 30ff 	mov.w	r0, #4294967295
 80064d0:	81a3      	strh	r3, [r4, #12]
 80064d2:	b003      	add	sp, #12
 80064d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d8:	4680      	mov	r8, r0
 80064da:	9000      	str	r0, [sp, #0]
 80064dc:	4683      	mov	fp, r0
 80064de:	4682      	mov	sl, r0
 80064e0:	f1ba 0f00 	cmp.w	sl, #0
 80064e4:	d02c      	beq.n	8006540 <__sfvwrite_r+0x1b4>
 80064e6:	9b00      	ldr	r3, [sp, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d050      	beq.n	800658e <__sfvwrite_r+0x202>
 80064ec:	6820      	ldr	r0, [r4, #0]
 80064ee:	6921      	ldr	r1, [r4, #16]
 80064f0:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80064f4:	6962      	ldr	r2, [r4, #20]
 80064f6:	45d0      	cmp	r8, sl
 80064f8:	4643      	mov	r3, r8
 80064fa:	bf28      	it	cs
 80064fc:	4653      	movcs	r3, sl
 80064fe:	4288      	cmp	r0, r1
 8006500:	461f      	mov	r7, r3
 8006502:	d904      	bls.n	800650e <__sfvwrite_r+0x182>
 8006504:	eb0e 0c02 	add.w	ip, lr, r2
 8006508:	4563      	cmp	r3, ip
 800650a:	f300 8092 	bgt.w	8006632 <__sfvwrite_r+0x2a6>
 800650e:	4293      	cmp	r3, r2
 8006510:	db20      	blt.n	8006554 <__sfvwrite_r+0x1c8>
 8006512:	4613      	mov	r3, r2
 8006514:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006516:	69e1      	ldr	r1, [r4, #28]
 8006518:	4648      	mov	r0, r9
 800651a:	465a      	mov	r2, fp
 800651c:	47b8      	blx	r7
 800651e:	1e07      	subs	r7, r0, #0
 8006520:	ddd1      	ble.n	80064c6 <__sfvwrite_r+0x13a>
 8006522:	ebb8 0807 	subs.w	r8, r8, r7
 8006526:	d025      	beq.n	8006574 <__sfvwrite_r+0x1e8>
 8006528:	68b3      	ldr	r3, [r6, #8]
 800652a:	1bdb      	subs	r3, r3, r7
 800652c:	44bb      	add	fp, r7
 800652e:	ebc7 0a0a 	rsb	sl, r7, sl
 8006532:	60b3      	str	r3, [r6, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	f43f af5a 	beq.w	80063ee <__sfvwrite_r+0x62>
 800653a:	f1ba 0f00 	cmp.w	sl, #0
 800653e:	d1d2      	bne.n	80064e6 <__sfvwrite_r+0x15a>
 8006540:	2300      	movs	r3, #0
 8006542:	f8d5 b000 	ldr.w	fp, [r5]
 8006546:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	3508      	adds	r5, #8
 800654e:	e7c7      	b.n	80064e0 <__sfvwrite_r+0x154>
 8006550:	4638      	mov	r0, r7
 8006552:	e780      	b.n	8006456 <__sfvwrite_r+0xca>
 8006554:	461a      	mov	r2, r3
 8006556:	4659      	mov	r1, fp
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	f000 fc23 	bl	8006da4 <memmove>
 800655e:	68a2      	ldr	r2, [r4, #8]
 8006560:	6821      	ldr	r1, [r4, #0]
 8006562:	9b01      	ldr	r3, [sp, #4]
 8006564:	ebb8 0807 	subs.w	r8, r8, r7
 8006568:	eba2 0203 	sub.w	r2, r2, r3
 800656c:	440b      	add	r3, r1
 800656e:	60a2      	str	r2, [r4, #8]
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	d1d9      	bne.n	8006528 <__sfvwrite_r+0x19c>
 8006574:	4648      	mov	r0, r9
 8006576:	4621      	mov	r1, r4
 8006578:	f7ff fd44 	bl	8006004 <_fflush_r>
 800657c:	2800      	cmp	r0, #0
 800657e:	d1a2      	bne.n	80064c6 <__sfvwrite_r+0x13a>
 8006580:	f8cd 8000 	str.w	r8, [sp]
 8006584:	e7d0      	b.n	8006528 <__sfvwrite_r+0x19c>
 8006586:	6820      	ldr	r0, [r4, #0]
 8006588:	4647      	mov	r7, r8
 800658a:	46c2      	mov	sl, r8
 800658c:	e757      	b.n	800643e <__sfvwrite_r+0xb2>
 800658e:	4658      	mov	r0, fp
 8006590:	210a      	movs	r1, #10
 8006592:	4652      	mov	r2, sl
 8006594:	f000 fbbc 	bl	8006d10 <memchr>
 8006598:	2800      	cmp	r0, #0
 800659a:	d073      	beq.n	8006684 <__sfvwrite_r+0x2f8>
 800659c:	3001      	adds	r0, #1
 800659e:	2301      	movs	r3, #1
 80065a0:	ebcb 0800 	rsb	r8, fp, r0
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	e7a1      	b.n	80064ec <__sfvwrite_r+0x160>
 80065a8:	6967      	ldr	r7, [r4, #20]
 80065aa:	6921      	ldr	r1, [r4, #16]
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80065b2:	1a5b      	subs	r3, r3, r1
 80065b4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80065b8:	1c58      	adds	r0, r3, #1
 80065ba:	107f      	asrs	r7, r7, #1
 80065bc:	4440      	add	r0, r8
 80065be:	4287      	cmp	r7, r0
 80065c0:	463a      	mov	r2, r7
 80065c2:	bf3c      	itt	cc
 80065c4:	4607      	movcc	r7, r0
 80065c6:	463a      	movcc	r2, r7
 80065c8:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	d046      	beq.n	800665e <__sfvwrite_r+0x2d2>
 80065d0:	4611      	mov	r1, r2
 80065d2:	4648      	mov	r0, r9
 80065d4:	f000 f90e 	bl	80067f4 <_malloc_r>
 80065d8:	9b00      	ldr	r3, [sp, #0]
 80065da:	4682      	mov	sl, r0
 80065dc:	2800      	cmp	r0, #0
 80065de:	d059      	beq.n	8006694 <__sfvwrite_r+0x308>
 80065e0:	461a      	mov	r2, r3
 80065e2:	6921      	ldr	r1, [r4, #16]
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	f7f9 fdcf 	bl	8000188 <memcpy>
 80065ea:	89a2      	ldrh	r2, [r4, #12]
 80065ec:	9b00      	ldr	r3, [sp, #0]
 80065ee:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80065f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065f6:	81a2      	strh	r2, [r4, #12]
 80065f8:	eb0a 0003 	add.w	r0, sl, r3
 80065fc:	1afb      	subs	r3, r7, r3
 80065fe:	f8c4 a010 	str.w	sl, [r4, #16]
 8006602:	6167      	str	r7, [r4, #20]
 8006604:	6020      	str	r0, [r4, #0]
 8006606:	60a3      	str	r3, [r4, #8]
 8006608:	4647      	mov	r7, r8
 800660a:	46c2      	mov	sl, r8
 800660c:	e717      	b.n	800643e <__sfvwrite_r+0xb2>
 800660e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006612:	4543      	cmp	r3, r8
 8006614:	bf28      	it	cs
 8006616:	4643      	movcs	r3, r8
 8006618:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800661a:	fb93 f3f2 	sdiv	r3, r3, r2
 800661e:	4648      	mov	r0, r9
 8006620:	fb03 f302 	mul.w	r3, r3, r2
 8006624:	69e1      	ldr	r1, [r4, #28]
 8006626:	465a      	mov	r2, fp
 8006628:	47b8      	blx	r7
 800662a:	2800      	cmp	r0, #0
 800662c:	f73f af13 	bgt.w	8006456 <__sfvwrite_r+0xca>
 8006630:	e749      	b.n	80064c6 <__sfvwrite_r+0x13a>
 8006632:	4662      	mov	r2, ip
 8006634:	4659      	mov	r1, fp
 8006636:	f8cd c004 	str.w	ip, [sp, #4]
 800663a:	f000 fbb3 	bl	8006da4 <memmove>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006644:	4463      	add	r3, ip
 8006646:	6023      	str	r3, [r4, #0]
 8006648:	4648      	mov	r0, r9
 800664a:	4621      	mov	r1, r4
 800664c:	f7ff fcda 	bl	8006004 <_fflush_r>
 8006650:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006654:	2800      	cmp	r0, #0
 8006656:	f47f af36 	bne.w	80064c6 <__sfvwrite_r+0x13a>
 800665a:	4667      	mov	r7, ip
 800665c:	e761      	b.n	8006522 <__sfvwrite_r+0x196>
 800665e:	4648      	mov	r0, r9
 8006660:	f000 ff4a 	bl	80074f8 <_realloc_r>
 8006664:	9b00      	ldr	r3, [sp, #0]
 8006666:	4682      	mov	sl, r0
 8006668:	2800      	cmp	r0, #0
 800666a:	d1c5      	bne.n	80065f8 <__sfvwrite_r+0x26c>
 800666c:	4648      	mov	r0, r9
 800666e:	6921      	ldr	r1, [r4, #16]
 8006670:	f7ff fdb4 	bl	80061dc <_free_r>
 8006674:	89a3      	ldrh	r3, [r4, #12]
 8006676:	220c      	movs	r2, #12
 8006678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800667c:	b29b      	uxth	r3, r3
 800667e:	f8c9 2000 	str.w	r2, [r9]
 8006682:	e721      	b.n	80064c8 <__sfvwrite_r+0x13c>
 8006684:	2301      	movs	r3, #1
 8006686:	f10a 0801 	add.w	r8, sl, #1
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	e72e      	b.n	80064ec <__sfvwrite_r+0x160>
 800668e:	f04f 30ff 	mov.w	r0, #4294967295
 8006692:	e6ad      	b.n	80063f0 <__sfvwrite_r+0x64>
 8006694:	230c      	movs	r3, #12
 8006696:	f8c9 3000 	str.w	r3, [r9]
 800669a:	89a3      	ldrh	r3, [r4, #12]
 800669c:	e714      	b.n	80064c8 <__sfvwrite_r+0x13c>
 800669e:	bf00      	nop
 80066a0:	7ffffc00 	.word	0x7ffffc00

080066a4 <_fwalk_reent>:
 80066a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066a8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 80066ac:	d01f      	beq.n	80066ee <_fwalk_reent+0x4a>
 80066ae:	4688      	mov	r8, r1
 80066b0:	4606      	mov	r6, r0
 80066b2:	f04f 0900 	mov.w	r9, #0
 80066b6:	687d      	ldr	r5, [r7, #4]
 80066b8:	68bc      	ldr	r4, [r7, #8]
 80066ba:	3d01      	subs	r5, #1
 80066bc:	d411      	bmi.n	80066e2 <_fwalk_reent+0x3e>
 80066be:	89a3      	ldrh	r3, [r4, #12]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	f105 35ff 	add.w	r5, r5, #4294967295
 80066c6:	d908      	bls.n	80066da <_fwalk_reent+0x36>
 80066c8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80066cc:	3301      	adds	r3, #1
 80066ce:	4621      	mov	r1, r4
 80066d0:	4630      	mov	r0, r6
 80066d2:	d002      	beq.n	80066da <_fwalk_reent+0x36>
 80066d4:	47c0      	blx	r8
 80066d6:	ea49 0900 	orr.w	r9, r9, r0
 80066da:	1c6b      	adds	r3, r5, #1
 80066dc:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80066e0:	d1ed      	bne.n	80066be <_fwalk_reent+0x1a>
 80066e2:	683f      	ldr	r7, [r7, #0]
 80066e4:	2f00      	cmp	r7, #0
 80066e6:	d1e6      	bne.n	80066b6 <_fwalk_reent+0x12>
 80066e8:	4648      	mov	r0, r9
 80066ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066ee:	46b9      	mov	r9, r7
 80066f0:	4648      	mov	r0, r9
 80066f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066f6:	bf00      	nop

080066f8 <__locale_charset>:
 80066f8:	4800      	ldr	r0, [pc, #0]	; (80066fc <__locale_charset+0x4>)
 80066fa:	4770      	bx	lr
 80066fc:	2000046c 	.word	0x2000046c

08006700 <__locale_mb_cur_max>:
 8006700:	4b01      	ldr	r3, [pc, #4]	; (8006708 <__locale_mb_cur_max+0x8>)
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	2000048c 	.word	0x2000048c

0800670c <_localeconv_r>:
 800670c:	4800      	ldr	r0, [pc, #0]	; (8006710 <_localeconv_r+0x4>)
 800670e:	4770      	bx	lr
 8006710:	20000434 	.word	0x20000434

08006714 <__smakebuf_r>:
 8006714:	898b      	ldrh	r3, [r1, #12]
 8006716:	b29a      	uxth	r2, r3
 8006718:	f012 0f02 	tst.w	r2, #2
 800671c:	d13c      	bne.n	8006798 <__smakebuf_r+0x84>
 800671e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006720:	460c      	mov	r4, r1
 8006722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006726:	2900      	cmp	r1, #0
 8006728:	b091      	sub	sp, #68	; 0x44
 800672a:	4605      	mov	r5, r0
 800672c:	db19      	blt.n	8006762 <__smakebuf_r+0x4e>
 800672e:	aa01      	add	r2, sp, #4
 8006730:	f001 fa9a 	bl	8007c68 <_fstat_r>
 8006734:	2800      	cmp	r0, #0
 8006736:	db12      	blt.n	800675e <__smakebuf_r+0x4a>
 8006738:	9b02      	ldr	r3, [sp, #8]
 800673a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800673e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006742:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8006746:	fab7 f787 	clz	r7, r7
 800674a:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800674e:	d02a      	beq.n	80067a6 <__smakebuf_r+0x92>
 8006750:	89a3      	ldrh	r3, [r4, #12]
 8006752:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006756:	81a3      	strh	r3, [r4, #12]
 8006758:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800675c:	e00b      	b.n	8006776 <__smakebuf_r+0x62>
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	b29a      	uxth	r2, r3
 8006762:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006766:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800676a:	81a3      	strh	r3, [r4, #12]
 800676c:	bf0c      	ite	eq
 800676e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8006772:	2640      	movne	r6, #64	; 0x40
 8006774:	2700      	movs	r7, #0
 8006776:	4628      	mov	r0, r5
 8006778:	4631      	mov	r1, r6
 800677a:	f000 f83b 	bl	80067f4 <_malloc_r>
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	b340      	cbz	r0, 80067d4 <__smakebuf_r+0xc0>
 8006782:	4a1a      	ldr	r2, [pc, #104]	; (80067ec <__smakebuf_r+0xd8>)
 8006784:	63ea      	str	r2, [r5, #60]	; 0x3c
 8006786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678a:	81a3      	strh	r3, [r4, #12]
 800678c:	6020      	str	r0, [r4, #0]
 800678e:	6120      	str	r0, [r4, #16]
 8006790:	6166      	str	r6, [r4, #20]
 8006792:	b99f      	cbnz	r7, 80067bc <__smakebuf_r+0xa8>
 8006794:	b011      	add	sp, #68	; 0x44
 8006796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006798:	f101 0343 	add.w	r3, r1, #67	; 0x43
 800679c:	2201      	movs	r2, #1
 800679e:	600b      	str	r3, [r1, #0]
 80067a0:	610b      	str	r3, [r1, #16]
 80067a2:	614a      	str	r2, [r1, #20]
 80067a4:	4770      	bx	lr
 80067a6:	4b12      	ldr	r3, [pc, #72]	; (80067f0 <__smakebuf_r+0xdc>)
 80067a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d1d0      	bne.n	8006750 <__smakebuf_r+0x3c>
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80067b4:	4333      	orrs	r3, r6
 80067b6:	81a3      	strh	r3, [r4, #12]
 80067b8:	64e6      	str	r6, [r4, #76]	; 0x4c
 80067ba:	e7dc      	b.n	8006776 <__smakebuf_r+0x62>
 80067bc:	4628      	mov	r0, r5
 80067be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067c2:	f001 fa65 	bl	8007c90 <_isatty_r>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	d0e4      	beq.n	8006794 <__smakebuf_r+0x80>
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	f043 0301 	orr.w	r3, r3, #1
 80067d0:	81a3      	strh	r3, [r4, #12]
 80067d2:	e7df      	b.n	8006794 <__smakebuf_r+0x80>
 80067d4:	059a      	lsls	r2, r3, #22
 80067d6:	d4dd      	bmi.n	8006794 <__smakebuf_r+0x80>
 80067d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067dc:	f043 0302 	orr.w	r3, r3, #2
 80067e0:	2101      	movs	r1, #1
 80067e2:	81a3      	strh	r3, [r4, #12]
 80067e4:	6022      	str	r2, [r4, #0]
 80067e6:	6122      	str	r2, [r4, #16]
 80067e8:	6161      	str	r1, [r4, #20]
 80067ea:	e7d3      	b.n	8006794 <__smakebuf_r+0x80>
 80067ec:	08006031 	.word	0x08006031
 80067f0:	080079bd 	.word	0x080079bd

080067f4 <_malloc_r>:
 80067f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f8:	f101 050b 	add.w	r5, r1, #11
 80067fc:	2d16      	cmp	r5, #22
 80067fe:	b083      	sub	sp, #12
 8006800:	4606      	mov	r6, r0
 8006802:	d927      	bls.n	8006854 <_malloc_r+0x60>
 8006804:	f035 0507 	bics.w	r5, r5, #7
 8006808:	f100 80b6 	bmi.w	8006978 <_malloc_r+0x184>
 800680c:	42a9      	cmp	r1, r5
 800680e:	f200 80b3 	bhi.w	8006978 <_malloc_r+0x184>
 8006812:	f000 fb79 	bl	8006f08 <__malloc_lock>
 8006816:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800681a:	d222      	bcs.n	8006862 <_malloc_r+0x6e>
 800681c:	4fc2      	ldr	r7, [pc, #776]	; (8006b28 <_malloc_r+0x334>)
 800681e:	08e8      	lsrs	r0, r5, #3
 8006820:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8006824:	68dc      	ldr	r4, [r3, #12]
 8006826:	429c      	cmp	r4, r3
 8006828:	f000 81c9 	beq.w	8006bbe <_malloc_r+0x3ca>
 800682c:	6863      	ldr	r3, [r4, #4]
 800682e:	68e1      	ldr	r1, [r4, #12]
 8006830:	68a5      	ldr	r5, [r4, #8]
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	4423      	add	r3, r4
 8006838:	4630      	mov	r0, r6
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	60e9      	str	r1, [r5, #12]
 800683e:	f042 0201 	orr.w	r2, r2, #1
 8006842:	608d      	str	r5, [r1, #8]
 8006844:	605a      	str	r2, [r3, #4]
 8006846:	f000 fb61 	bl	8006f0c <__malloc_unlock>
 800684a:	3408      	adds	r4, #8
 800684c:	4620      	mov	r0, r4
 800684e:	b003      	add	sp, #12
 8006850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006854:	2910      	cmp	r1, #16
 8006856:	f200 808f 	bhi.w	8006978 <_malloc_r+0x184>
 800685a:	f000 fb55 	bl	8006f08 <__malloc_lock>
 800685e:	2510      	movs	r5, #16
 8006860:	e7dc      	b.n	800681c <_malloc_r+0x28>
 8006862:	0a68      	lsrs	r0, r5, #9
 8006864:	f000 808f 	beq.w	8006986 <_malloc_r+0x192>
 8006868:	2804      	cmp	r0, #4
 800686a:	f200 8154 	bhi.w	8006b16 <_malloc_r+0x322>
 800686e:	09a8      	lsrs	r0, r5, #6
 8006870:	3038      	adds	r0, #56	; 0x38
 8006872:	0041      	lsls	r1, r0, #1
 8006874:	4fac      	ldr	r7, [pc, #688]	; (8006b28 <_malloc_r+0x334>)
 8006876:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 800687a:	68cc      	ldr	r4, [r1, #12]
 800687c:	42a1      	cmp	r1, r4
 800687e:	d106      	bne.n	800688e <_malloc_r+0x9a>
 8006880:	e00c      	b.n	800689c <_malloc_r+0xa8>
 8006882:	2a00      	cmp	r2, #0
 8006884:	f280 8082 	bge.w	800698c <_malloc_r+0x198>
 8006888:	68e4      	ldr	r4, [r4, #12]
 800688a:	42a1      	cmp	r1, r4
 800688c:	d006      	beq.n	800689c <_malloc_r+0xa8>
 800688e:	6863      	ldr	r3, [r4, #4]
 8006890:	f023 0303 	bic.w	r3, r3, #3
 8006894:	1b5a      	subs	r2, r3, r5
 8006896:	2a0f      	cmp	r2, #15
 8006898:	ddf3      	ble.n	8006882 <_malloc_r+0x8e>
 800689a:	3801      	subs	r0, #1
 800689c:	3001      	adds	r0, #1
 800689e:	49a2      	ldr	r1, [pc, #648]	; (8006b28 <_malloc_r+0x334>)
 80068a0:	693c      	ldr	r4, [r7, #16]
 80068a2:	f101 0e08 	add.w	lr, r1, #8
 80068a6:	4574      	cmp	r4, lr
 80068a8:	f000 817e 	beq.w	8006ba8 <_malloc_r+0x3b4>
 80068ac:	6863      	ldr	r3, [r4, #4]
 80068ae:	f023 0303 	bic.w	r3, r3, #3
 80068b2:	1b5a      	subs	r2, r3, r5
 80068b4:	2a0f      	cmp	r2, #15
 80068b6:	f300 8164 	bgt.w	8006b82 <_malloc_r+0x38e>
 80068ba:	2a00      	cmp	r2, #0
 80068bc:	f8c1 e014 	str.w	lr, [r1, #20]
 80068c0:	f8c1 e010 	str.w	lr, [r1, #16]
 80068c4:	da73      	bge.n	80069ae <_malloc_r+0x1ba>
 80068c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ca:	f080 8139 	bcs.w	8006b40 <_malloc_r+0x34c>
 80068ce:	08db      	lsrs	r3, r3, #3
 80068d0:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 80068d4:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 80068d8:	684a      	ldr	r2, [r1, #4]
 80068da:	f8d8 9008 	ldr.w	r9, [r8, #8]
 80068de:	f8c4 9008 	str.w	r9, [r4, #8]
 80068e2:	2301      	movs	r3, #1
 80068e4:	fa03 f30c 	lsl.w	r3, r3, ip
 80068e8:	4313      	orrs	r3, r2
 80068ea:	f8c4 800c 	str.w	r8, [r4, #12]
 80068ee:	604b      	str	r3, [r1, #4]
 80068f0:	f8c8 4008 	str.w	r4, [r8, #8]
 80068f4:	f8c9 400c 	str.w	r4, [r9, #12]
 80068f8:	1082      	asrs	r2, r0, #2
 80068fa:	2401      	movs	r4, #1
 80068fc:	4094      	lsls	r4, r2
 80068fe:	429c      	cmp	r4, r3
 8006900:	d862      	bhi.n	80069c8 <_malloc_r+0x1d4>
 8006902:	4223      	tst	r3, r4
 8006904:	d106      	bne.n	8006914 <_malloc_r+0x120>
 8006906:	f020 0003 	bic.w	r0, r0, #3
 800690a:	0064      	lsls	r4, r4, #1
 800690c:	4223      	tst	r3, r4
 800690e:	f100 0004 	add.w	r0, r0, #4
 8006912:	d0fa      	beq.n	800690a <_malloc_r+0x116>
 8006914:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8006918:	46c4      	mov	ip, r8
 800691a:	4681      	mov	r9, r0
 800691c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8006920:	459c      	cmp	ip, r3
 8006922:	d107      	bne.n	8006934 <_malloc_r+0x140>
 8006924:	e142      	b.n	8006bac <_malloc_r+0x3b8>
 8006926:	2900      	cmp	r1, #0
 8006928:	f280 8152 	bge.w	8006bd0 <_malloc_r+0x3dc>
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	459c      	cmp	ip, r3
 8006930:	f000 813c 	beq.w	8006bac <_malloc_r+0x3b8>
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	f022 0203 	bic.w	r2, r2, #3
 800693a:	1b51      	subs	r1, r2, r5
 800693c:	290f      	cmp	r1, #15
 800693e:	ddf2      	ble.n	8006926 <_malloc_r+0x132>
 8006940:	461c      	mov	r4, r3
 8006942:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8006946:	f854 8f08 	ldr.w	r8, [r4, #8]!
 800694a:	195a      	adds	r2, r3, r5
 800694c:	f045 0901 	orr.w	r9, r5, #1
 8006950:	f041 0501 	orr.w	r5, r1, #1
 8006954:	f8c3 9004 	str.w	r9, [r3, #4]
 8006958:	4630      	mov	r0, r6
 800695a:	f8c8 c00c 	str.w	ip, [r8, #12]
 800695e:	f8cc 8008 	str.w	r8, [ip, #8]
 8006962:	617a      	str	r2, [r7, #20]
 8006964:	613a      	str	r2, [r7, #16]
 8006966:	f8c2 e00c 	str.w	lr, [r2, #12]
 800696a:	f8c2 e008 	str.w	lr, [r2, #8]
 800696e:	6055      	str	r5, [r2, #4]
 8006970:	5051      	str	r1, [r2, r1]
 8006972:	f000 facb 	bl	8006f0c <__malloc_unlock>
 8006976:	e769      	b.n	800684c <_malloc_r+0x58>
 8006978:	2400      	movs	r4, #0
 800697a:	230c      	movs	r3, #12
 800697c:	4620      	mov	r0, r4
 800697e:	6033      	str	r3, [r6, #0]
 8006980:	b003      	add	sp, #12
 8006982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006986:	217e      	movs	r1, #126	; 0x7e
 8006988:	203f      	movs	r0, #63	; 0x3f
 800698a:	e773      	b.n	8006874 <_malloc_r+0x80>
 800698c:	4423      	add	r3, r4
 800698e:	68e1      	ldr	r1, [r4, #12]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	68a5      	ldr	r5, [r4, #8]
 8006994:	f042 0201 	orr.w	r2, r2, #1
 8006998:	60e9      	str	r1, [r5, #12]
 800699a:	4630      	mov	r0, r6
 800699c:	608d      	str	r5, [r1, #8]
 800699e:	605a      	str	r2, [r3, #4]
 80069a0:	f000 fab4 	bl	8006f0c <__malloc_unlock>
 80069a4:	3408      	adds	r4, #8
 80069a6:	4620      	mov	r0, r4
 80069a8:	b003      	add	sp, #12
 80069aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ae:	4423      	add	r3, r4
 80069b0:	4630      	mov	r0, r6
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	f042 0201 	orr.w	r2, r2, #1
 80069b8:	605a      	str	r2, [r3, #4]
 80069ba:	f000 faa7 	bl	8006f0c <__malloc_unlock>
 80069be:	3408      	adds	r4, #8
 80069c0:	4620      	mov	r0, r4
 80069c2:	b003      	add	sp, #12
 80069c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c8:	68bc      	ldr	r4, [r7, #8]
 80069ca:	6863      	ldr	r3, [r4, #4]
 80069cc:	f023 0803 	bic.w	r8, r3, #3
 80069d0:	4545      	cmp	r5, r8
 80069d2:	d804      	bhi.n	80069de <_malloc_r+0x1ea>
 80069d4:	ebc5 0308 	rsb	r3, r5, r8
 80069d8:	2b0f      	cmp	r3, #15
 80069da:	f300 808c 	bgt.w	8006af6 <_malloc_r+0x302>
 80069de:	4b53      	ldr	r3, [pc, #332]	; (8006b2c <_malloc_r+0x338>)
 80069e0:	f8df a158 	ldr.w	sl, [pc, #344]	; 8006b3c <_malloc_r+0x348>
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	f8da 3000 	ldr.w	r3, [sl]
 80069ea:	3301      	adds	r3, #1
 80069ec:	442a      	add	r2, r5
 80069ee:	eb04 0b08 	add.w	fp, r4, r8
 80069f2:	f000 8150 	beq.w	8006c96 <_malloc_r+0x4a2>
 80069f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069fa:	320f      	adds	r2, #15
 80069fc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8006a00:	f022 020f 	bic.w	r2, r2, #15
 8006a04:	4611      	mov	r1, r2
 8006a06:	4630      	mov	r0, r6
 8006a08:	9201      	str	r2, [sp, #4]
 8006a0a:	f000 ff97 	bl	800793c <_sbrk_r>
 8006a0e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006a12:	4681      	mov	r9, r0
 8006a14:	9a01      	ldr	r2, [sp, #4]
 8006a16:	f000 80f5 	beq.w	8006c04 <_malloc_r+0x410>
 8006a1a:	4583      	cmp	fp, r0
 8006a1c:	f200 80ef 	bhi.w	8006bfe <_malloc_r+0x40a>
 8006a20:	4b43      	ldr	r3, [pc, #268]	; (8006b30 <_malloc_r+0x33c>)
 8006a22:	6819      	ldr	r1, [r3, #0]
 8006a24:	45cb      	cmp	fp, r9
 8006a26:	4411      	add	r1, r2
 8006a28:	6019      	str	r1, [r3, #0]
 8006a2a:	f000 813d 	beq.w	8006ca8 <_malloc_r+0x4b4>
 8006a2e:	f8da 0000 	ldr.w	r0, [sl]
 8006a32:	f8df e108 	ldr.w	lr, [pc, #264]	; 8006b3c <_malloc_r+0x348>
 8006a36:	3001      	adds	r0, #1
 8006a38:	bf1b      	ittet	ne
 8006a3a:	ebcb 0b09 	rsbne	fp, fp, r9
 8006a3e:	4459      	addne	r1, fp
 8006a40:	f8ce 9000 	streq.w	r9, [lr]
 8006a44:	6019      	strne	r1, [r3, #0]
 8006a46:	f019 0107 	ands.w	r1, r9, #7
 8006a4a:	f000 8107 	beq.w	8006c5c <_malloc_r+0x468>
 8006a4e:	f1c1 0008 	rsb	r0, r1, #8
 8006a52:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8006a56:	4481      	add	r9, r0
 8006a58:	3108      	adds	r1, #8
 8006a5a:	444a      	add	r2, r9
 8006a5c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006a60:	ebc2 0a01 	rsb	sl, r2, r1
 8006a64:	4651      	mov	r1, sl
 8006a66:	4630      	mov	r0, r6
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	f000 ff67 	bl	800793c <_sbrk_r>
 8006a6e:	1c43      	adds	r3, r0, #1
 8006a70:	9b01      	ldr	r3, [sp, #4]
 8006a72:	f000 8127 	beq.w	8006cc4 <_malloc_r+0x4d0>
 8006a76:	ebc9 0200 	rsb	r2, r9, r0
 8006a7a:	4452      	add	r2, sl
 8006a7c:	f042 0201 	orr.w	r2, r2, #1
 8006a80:	6819      	ldr	r1, [r3, #0]
 8006a82:	f8c7 9008 	str.w	r9, [r7, #8]
 8006a86:	4451      	add	r1, sl
 8006a88:	42bc      	cmp	r4, r7
 8006a8a:	f8c9 2004 	str.w	r2, [r9, #4]
 8006a8e:	6019      	str	r1, [r3, #0]
 8006a90:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8006b30 <_malloc_r+0x33c>
 8006a94:	d016      	beq.n	8006ac4 <_malloc_r+0x2d0>
 8006a96:	f1b8 0f0f 	cmp.w	r8, #15
 8006a9a:	f240 80e2 	bls.w	8006c62 <_malloc_r+0x46e>
 8006a9e:	6862      	ldr	r2, [r4, #4]
 8006aa0:	f1a8 030c 	sub.w	r3, r8, #12
 8006aa4:	f023 0307 	bic.w	r3, r3, #7
 8006aa8:	18e0      	adds	r0, r4, r3
 8006aaa:	f002 0201 	and.w	r2, r2, #1
 8006aae:	f04f 0e05 	mov.w	lr, #5
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	2b0f      	cmp	r3, #15
 8006ab6:	6062      	str	r2, [r4, #4]
 8006ab8:	f8c0 e004 	str.w	lr, [r0, #4]
 8006abc:	f8c0 e008 	str.w	lr, [r0, #8]
 8006ac0:	f200 8104 	bhi.w	8006ccc <_malloc_r+0x4d8>
 8006ac4:	4b1b      	ldr	r3, [pc, #108]	; (8006b34 <_malloc_r+0x340>)
 8006ac6:	68bc      	ldr	r4, [r7, #8]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	4291      	cmp	r1, r2
 8006acc:	bf88      	it	hi
 8006ace:	6019      	strhi	r1, [r3, #0]
 8006ad0:	4b19      	ldr	r3, [pc, #100]	; (8006b38 <_malloc_r+0x344>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	4291      	cmp	r1, r2
 8006ad6:	6862      	ldr	r2, [r4, #4]
 8006ad8:	bf88      	it	hi
 8006ada:	6019      	strhi	r1, [r3, #0]
 8006adc:	f022 0203 	bic.w	r2, r2, #3
 8006ae0:	4295      	cmp	r5, r2
 8006ae2:	eba2 0305 	sub.w	r3, r2, r5
 8006ae6:	d801      	bhi.n	8006aec <_malloc_r+0x2f8>
 8006ae8:	2b0f      	cmp	r3, #15
 8006aea:	dc04      	bgt.n	8006af6 <_malloc_r+0x302>
 8006aec:	4630      	mov	r0, r6
 8006aee:	f000 fa0d 	bl	8006f0c <__malloc_unlock>
 8006af2:	2400      	movs	r4, #0
 8006af4:	e6aa      	b.n	800684c <_malloc_r+0x58>
 8006af6:	1962      	adds	r2, r4, r5
 8006af8:	f043 0301 	orr.w	r3, r3, #1
 8006afc:	f045 0501 	orr.w	r5, r5, #1
 8006b00:	6065      	str	r5, [r4, #4]
 8006b02:	4630      	mov	r0, r6
 8006b04:	60ba      	str	r2, [r7, #8]
 8006b06:	6053      	str	r3, [r2, #4]
 8006b08:	f000 fa00 	bl	8006f0c <__malloc_unlock>
 8006b0c:	3408      	adds	r4, #8
 8006b0e:	4620      	mov	r0, r4
 8006b10:	b003      	add	sp, #12
 8006b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b16:	2814      	cmp	r0, #20
 8006b18:	d969      	bls.n	8006bee <_malloc_r+0x3fa>
 8006b1a:	2854      	cmp	r0, #84	; 0x54
 8006b1c:	f200 8097 	bhi.w	8006c4e <_malloc_r+0x45a>
 8006b20:	0b28      	lsrs	r0, r5, #12
 8006b22:	306e      	adds	r0, #110	; 0x6e
 8006b24:	0041      	lsls	r1, r0, #1
 8006b26:	e6a5      	b.n	8006874 <_malloc_r+0x80>
 8006b28:	20000490 	.word	0x20000490
 8006b2c:	20000968 	.word	0x20000968
 8006b30:	2000096c 	.word	0x2000096c
 8006b34:	20000964 	.word	0x20000964
 8006b38:	20000960 	.word	0x20000960
 8006b3c:	2000089c 	.word	0x2000089c
 8006b40:	0a5a      	lsrs	r2, r3, #9
 8006b42:	2a04      	cmp	r2, #4
 8006b44:	d956      	bls.n	8006bf4 <_malloc_r+0x400>
 8006b46:	2a14      	cmp	r2, #20
 8006b48:	f200 80a7 	bhi.w	8006c9a <_malloc_r+0x4a6>
 8006b4c:	325b      	adds	r2, #91	; 0x5b
 8006b4e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8006b52:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 8006b56:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8006d0c <_malloc_r+0x518>
 8006b5a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8006b5e:	4561      	cmp	r1, ip
 8006b60:	f000 8085 	beq.w	8006c6e <_malloc_r+0x47a>
 8006b64:	684a      	ldr	r2, [r1, #4]
 8006b66:	f022 0203 	bic.w	r2, r2, #3
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d202      	bcs.n	8006b74 <_malloc_r+0x380>
 8006b6e:	6889      	ldr	r1, [r1, #8]
 8006b70:	458c      	cmp	ip, r1
 8006b72:	d1f7      	bne.n	8006b64 <_malloc_r+0x370>
 8006b74:	68ca      	ldr	r2, [r1, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60e2      	str	r2, [r4, #12]
 8006b7a:	60a1      	str	r1, [r4, #8]
 8006b7c:	6094      	str	r4, [r2, #8]
 8006b7e:	60cc      	str	r4, [r1, #12]
 8006b80:	e6ba      	b.n	80068f8 <_malloc_r+0x104>
 8006b82:	1963      	adds	r3, r4, r5
 8006b84:	f042 0701 	orr.w	r7, r2, #1
 8006b88:	f045 0501 	orr.w	r5, r5, #1
 8006b8c:	6065      	str	r5, [r4, #4]
 8006b8e:	4630      	mov	r0, r6
 8006b90:	614b      	str	r3, [r1, #20]
 8006b92:	610b      	str	r3, [r1, #16]
 8006b94:	f8c3 e00c 	str.w	lr, [r3, #12]
 8006b98:	f8c3 e008 	str.w	lr, [r3, #8]
 8006b9c:	605f      	str	r7, [r3, #4]
 8006b9e:	509a      	str	r2, [r3, r2]
 8006ba0:	3408      	adds	r4, #8
 8006ba2:	f000 f9b3 	bl	8006f0c <__malloc_unlock>
 8006ba6:	e651      	b.n	800684c <_malloc_r+0x58>
 8006ba8:	684b      	ldr	r3, [r1, #4]
 8006baa:	e6a5      	b.n	80068f8 <_malloc_r+0x104>
 8006bac:	f109 0901 	add.w	r9, r9, #1
 8006bb0:	f019 0f03 	tst.w	r9, #3
 8006bb4:	f10c 0c08 	add.w	ip, ip, #8
 8006bb8:	f47f aeb0 	bne.w	800691c <_malloc_r+0x128>
 8006bbc:	e02b      	b.n	8006c16 <_malloc_r+0x422>
 8006bbe:	f104 0308 	add.w	r3, r4, #8
 8006bc2:	6964      	ldr	r4, [r4, #20]
 8006bc4:	42a3      	cmp	r3, r4
 8006bc6:	bf08      	it	eq
 8006bc8:	3002      	addeq	r0, #2
 8006bca:	f43f ae68 	beq.w	800689e <_malloc_r+0xaa>
 8006bce:	e62d      	b.n	800682c <_malloc_r+0x38>
 8006bd0:	441a      	add	r2, r3
 8006bd2:	461c      	mov	r4, r3
 8006bd4:	6851      	ldr	r1, [r2, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8006bdc:	f041 0101 	orr.w	r1, r1, #1
 8006be0:	6051      	str	r1, [r2, #4]
 8006be2:	4630      	mov	r0, r6
 8006be4:	60eb      	str	r3, [r5, #12]
 8006be6:	609d      	str	r5, [r3, #8]
 8006be8:	f000 f990 	bl	8006f0c <__malloc_unlock>
 8006bec:	e62e      	b.n	800684c <_malloc_r+0x58>
 8006bee:	305b      	adds	r0, #91	; 0x5b
 8006bf0:	0041      	lsls	r1, r0, #1
 8006bf2:	e63f      	b.n	8006874 <_malloc_r+0x80>
 8006bf4:	099a      	lsrs	r2, r3, #6
 8006bf6:	3238      	adds	r2, #56	; 0x38
 8006bf8:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8006bfc:	e7a9      	b.n	8006b52 <_malloc_r+0x35e>
 8006bfe:	42bc      	cmp	r4, r7
 8006c00:	f43f af0e 	beq.w	8006a20 <_malloc_r+0x22c>
 8006c04:	68bc      	ldr	r4, [r7, #8]
 8006c06:	6862      	ldr	r2, [r4, #4]
 8006c08:	f022 0203 	bic.w	r2, r2, #3
 8006c0c:	e768      	b.n	8006ae0 <_malloc_r+0x2ec>
 8006c0e:	f8d8 8000 	ldr.w	r8, [r8]
 8006c12:	4598      	cmp	r8, r3
 8006c14:	d177      	bne.n	8006d06 <_malloc_r+0x512>
 8006c16:	f010 0f03 	tst.w	r0, #3
 8006c1a:	f1a8 0308 	sub.w	r3, r8, #8
 8006c1e:	f100 30ff 	add.w	r0, r0, #4294967295
 8006c22:	d1f4      	bne.n	8006c0e <_malloc_r+0x41a>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	ea23 0304 	bic.w	r3, r3, r4
 8006c2a:	607b      	str	r3, [r7, #4]
 8006c2c:	0064      	lsls	r4, r4, #1
 8006c2e:	429c      	cmp	r4, r3
 8006c30:	f63f aeca 	bhi.w	80069c8 <_malloc_r+0x1d4>
 8006c34:	2c00      	cmp	r4, #0
 8006c36:	f43f aec7 	beq.w	80069c8 <_malloc_r+0x1d4>
 8006c3a:	4223      	tst	r3, r4
 8006c3c:	4648      	mov	r0, r9
 8006c3e:	f47f ae69 	bne.w	8006914 <_malloc_r+0x120>
 8006c42:	0064      	lsls	r4, r4, #1
 8006c44:	4223      	tst	r3, r4
 8006c46:	f100 0004 	add.w	r0, r0, #4
 8006c4a:	d0fa      	beq.n	8006c42 <_malloc_r+0x44e>
 8006c4c:	e662      	b.n	8006914 <_malloc_r+0x120>
 8006c4e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8006c52:	d818      	bhi.n	8006c86 <_malloc_r+0x492>
 8006c54:	0be8      	lsrs	r0, r5, #15
 8006c56:	3077      	adds	r0, #119	; 0x77
 8006c58:	0041      	lsls	r1, r0, #1
 8006c5a:	e60b      	b.n	8006874 <_malloc_r+0x80>
 8006c5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c60:	e6fb      	b.n	8006a5a <_malloc_r+0x266>
 8006c62:	2301      	movs	r3, #1
 8006c64:	f8c9 3004 	str.w	r3, [r9, #4]
 8006c68:	464c      	mov	r4, r9
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	e738      	b.n	8006ae0 <_malloc_r+0x2ec>
 8006c6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006c72:	1092      	asrs	r2, r2, #2
 8006c74:	f04f 0c01 	mov.w	ip, #1
 8006c78:	fa0c f202 	lsl.w	r2, ip, r2
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006c82:	460a      	mov	r2, r1
 8006c84:	e778      	b.n	8006b78 <_malloc_r+0x384>
 8006c86:	f240 5354 	movw	r3, #1364	; 0x554
 8006c8a:	4298      	cmp	r0, r3
 8006c8c:	d817      	bhi.n	8006cbe <_malloc_r+0x4ca>
 8006c8e:	0ca8      	lsrs	r0, r5, #18
 8006c90:	307c      	adds	r0, #124	; 0x7c
 8006c92:	0041      	lsls	r1, r0, #1
 8006c94:	e5ee      	b.n	8006874 <_malloc_r+0x80>
 8006c96:	3210      	adds	r2, #16
 8006c98:	e6b4      	b.n	8006a04 <_malloc_r+0x210>
 8006c9a:	2a54      	cmp	r2, #84	; 0x54
 8006c9c:	d81e      	bhi.n	8006cdc <_malloc_r+0x4e8>
 8006c9e:	0b1a      	lsrs	r2, r3, #12
 8006ca0:	326e      	adds	r2, #110	; 0x6e
 8006ca2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8006ca6:	e754      	b.n	8006b52 <_malloc_r+0x35e>
 8006ca8:	f3cb 000b 	ubfx	r0, fp, #0, #12
 8006cac:	2800      	cmp	r0, #0
 8006cae:	f47f aebe 	bne.w	8006a2e <_malloc_r+0x23a>
 8006cb2:	4442      	add	r2, r8
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f042 0201 	orr.w	r2, r2, #1
 8006cba:	605a      	str	r2, [r3, #4]
 8006cbc:	e702      	b.n	8006ac4 <_malloc_r+0x2d0>
 8006cbe:	21fc      	movs	r1, #252	; 0xfc
 8006cc0:	207e      	movs	r0, #126	; 0x7e
 8006cc2:	e5d7      	b.n	8006874 <_malloc_r+0x80>
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f04f 0a00 	mov.w	sl, #0
 8006cca:	e6d9      	b.n	8006a80 <_malloc_r+0x28c>
 8006ccc:	f104 0108 	add.w	r1, r4, #8
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f7ff fa83 	bl	80061dc <_free_r>
 8006cd6:	f8da 1000 	ldr.w	r1, [sl]
 8006cda:	e6f3      	b.n	8006ac4 <_malloc_r+0x2d0>
 8006cdc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006ce0:	d804      	bhi.n	8006cec <_malloc_r+0x4f8>
 8006ce2:	0bda      	lsrs	r2, r3, #15
 8006ce4:	3277      	adds	r2, #119	; 0x77
 8006ce6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8006cea:	e732      	b.n	8006b52 <_malloc_r+0x35e>
 8006cec:	f240 5154 	movw	r1, #1364	; 0x554
 8006cf0:	428a      	cmp	r2, r1
 8006cf2:	d804      	bhi.n	8006cfe <_malloc_r+0x50a>
 8006cf4:	0c9a      	lsrs	r2, r3, #18
 8006cf6:	327c      	adds	r2, #124	; 0x7c
 8006cf8:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8006cfc:	e729      	b.n	8006b52 <_malloc_r+0x35e>
 8006cfe:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8006d02:	227e      	movs	r2, #126	; 0x7e
 8006d04:	e725      	b.n	8006b52 <_malloc_r+0x35e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	e790      	b.n	8006c2c <_malloc_r+0x438>
 8006d0a:	bf00      	nop
 8006d0c:	20000490 	.word	0x20000490

08006d10 <memchr>:
 8006d10:	0783      	lsls	r3, r0, #30
 8006d12:	b470      	push	{r4, r5, r6}
 8006d14:	b2c9      	uxtb	r1, r1
 8006d16:	d040      	beq.n	8006d9a <memchr+0x8a>
 8006d18:	1e54      	subs	r4, r2, #1
 8006d1a:	2a00      	cmp	r2, #0
 8006d1c:	d03f      	beq.n	8006d9e <memchr+0x8e>
 8006d1e:	7803      	ldrb	r3, [r0, #0]
 8006d20:	428b      	cmp	r3, r1
 8006d22:	bf18      	it	ne
 8006d24:	1c43      	addne	r3, r0, #1
 8006d26:	d106      	bne.n	8006d36 <memchr+0x26>
 8006d28:	e01d      	b.n	8006d66 <memchr+0x56>
 8006d2a:	b1f4      	cbz	r4, 8006d6a <memchr+0x5a>
 8006d2c:	7802      	ldrb	r2, [r0, #0]
 8006d2e:	428a      	cmp	r2, r1
 8006d30:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d34:	d017      	beq.n	8006d66 <memchr+0x56>
 8006d36:	f013 0f03 	tst.w	r3, #3
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f103 0301 	add.w	r3, r3, #1
 8006d40:	d1f3      	bne.n	8006d2a <memchr+0x1a>
 8006d42:	2c03      	cmp	r4, #3
 8006d44:	d814      	bhi.n	8006d70 <memchr+0x60>
 8006d46:	b184      	cbz	r4, 8006d6a <memchr+0x5a>
 8006d48:	7803      	ldrb	r3, [r0, #0]
 8006d4a:	428b      	cmp	r3, r1
 8006d4c:	d00b      	beq.n	8006d66 <memchr+0x56>
 8006d4e:	1905      	adds	r5, r0, r4
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	e002      	b.n	8006d5a <memchr+0x4a>
 8006d54:	7802      	ldrb	r2, [r0, #0]
 8006d56:	428a      	cmp	r2, r1
 8006d58:	d005      	beq.n	8006d66 <memchr+0x56>
 8006d5a:	42ab      	cmp	r3, r5
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f103 0301 	add.w	r3, r3, #1
 8006d62:	d1f7      	bne.n	8006d54 <memchr+0x44>
 8006d64:	2000      	movs	r0, #0
 8006d66:	bc70      	pop	{r4, r5, r6}
 8006d68:	4770      	bx	lr
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	bc70      	pop	{r4, r5, r6}
 8006d6e:	4770      	bx	lr
 8006d70:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8006d74:	4602      	mov	r2, r0
 8006d76:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	3204      	adds	r2, #4
 8006d7e:	6803      	ldr	r3, [r0, #0]
 8006d80:	4073      	eors	r3, r6
 8006d82:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8006d86:	ea25 0303 	bic.w	r3, r5, r3
 8006d8a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8006d8e:	d1da      	bne.n	8006d46 <memchr+0x36>
 8006d90:	3c04      	subs	r4, #4
 8006d92:	2c03      	cmp	r4, #3
 8006d94:	4610      	mov	r0, r2
 8006d96:	d8f0      	bhi.n	8006d7a <memchr+0x6a>
 8006d98:	e7d5      	b.n	8006d46 <memchr+0x36>
 8006d9a:	4614      	mov	r4, r2
 8006d9c:	e7d1      	b.n	8006d42 <memchr+0x32>
 8006d9e:	4610      	mov	r0, r2
 8006da0:	e7e1      	b.n	8006d66 <memchr+0x56>
 8006da2:	bf00      	nop

08006da4 <memmove>:
 8006da4:	4288      	cmp	r0, r1
 8006da6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006da8:	d90d      	bls.n	8006dc6 <memmove+0x22>
 8006daa:	188b      	adds	r3, r1, r2
 8006dac:	4298      	cmp	r0, r3
 8006dae:	d20a      	bcs.n	8006dc6 <memmove+0x22>
 8006db0:	1881      	adds	r1, r0, r2
 8006db2:	2a00      	cmp	r2, #0
 8006db4:	d054      	beq.n	8006e60 <memmove+0xbc>
 8006db6:	1a9a      	subs	r2, r3, r2
 8006db8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dbc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d1f9      	bne.n	8006db8 <memmove+0x14>
 8006dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dc6:	2a0f      	cmp	r2, #15
 8006dc8:	d948      	bls.n	8006e5c <memmove+0xb8>
 8006dca:	ea40 0301 	orr.w	r3, r0, r1
 8006dce:	079b      	lsls	r3, r3, #30
 8006dd0:	d147      	bne.n	8006e62 <memmove+0xbe>
 8006dd2:	f100 0410 	add.w	r4, r0, #16
 8006dd6:	f101 0310 	add.w	r3, r1, #16
 8006dda:	4615      	mov	r5, r2
 8006ddc:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8006de0:	f844 6c10 	str.w	r6, [r4, #-16]
 8006de4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8006de8:	f844 6c0c 	str.w	r6, [r4, #-12]
 8006dec:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8006df0:	f844 6c08 	str.w	r6, [r4, #-8]
 8006df4:	3d10      	subs	r5, #16
 8006df6:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8006dfa:	f844 6c04 	str.w	r6, [r4, #-4]
 8006dfe:	2d0f      	cmp	r5, #15
 8006e00:	f103 0310 	add.w	r3, r3, #16
 8006e04:	f104 0410 	add.w	r4, r4, #16
 8006e08:	d8e8      	bhi.n	8006ddc <memmove+0x38>
 8006e0a:	f1a2 0310 	sub.w	r3, r2, #16
 8006e0e:	f023 030f 	bic.w	r3, r3, #15
 8006e12:	f002 0e0f 	and.w	lr, r2, #15
 8006e16:	3310      	adds	r3, #16
 8006e18:	f1be 0f03 	cmp.w	lr, #3
 8006e1c:	4419      	add	r1, r3
 8006e1e:	4403      	add	r3, r0
 8006e20:	d921      	bls.n	8006e66 <memmove+0xc2>
 8006e22:	1f1e      	subs	r6, r3, #4
 8006e24:	460d      	mov	r5, r1
 8006e26:	4674      	mov	r4, lr
 8006e28:	3c04      	subs	r4, #4
 8006e2a:	f855 7b04 	ldr.w	r7, [r5], #4
 8006e2e:	f846 7f04 	str.w	r7, [r6, #4]!
 8006e32:	2c03      	cmp	r4, #3
 8006e34:	d8f8      	bhi.n	8006e28 <memmove+0x84>
 8006e36:	f1ae 0404 	sub.w	r4, lr, #4
 8006e3a:	f024 0403 	bic.w	r4, r4, #3
 8006e3e:	3404      	adds	r4, #4
 8006e40:	4423      	add	r3, r4
 8006e42:	4421      	add	r1, r4
 8006e44:	f002 0203 	and.w	r2, r2, #3
 8006e48:	b152      	cbz	r2, 8006e60 <memmove+0xbc>
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	440a      	add	r2, r1
 8006e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e56:	4291      	cmp	r1, r2
 8006e58:	d1f9      	bne.n	8006e4e <memmove+0xaa>
 8006e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	e7f3      	b.n	8006e48 <memmove+0xa4>
 8006e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e62:	4603      	mov	r3, r0
 8006e64:	e7f1      	b.n	8006e4a <memmove+0xa6>
 8006e66:	4672      	mov	r2, lr
 8006e68:	e7ee      	b.n	8006e48 <memmove+0xa4>
 8006e6a:	bf00      	nop

08006e6c <memset>:
 8006e6c:	b470      	push	{r4, r5, r6}
 8006e6e:	0784      	lsls	r4, r0, #30
 8006e70:	d046      	beq.n	8006f00 <memset+0x94>
 8006e72:	1e54      	subs	r4, r2, #1
 8006e74:	2a00      	cmp	r2, #0
 8006e76:	d041      	beq.n	8006efc <memset+0x90>
 8006e78:	b2cd      	uxtb	r5, r1
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	e002      	b.n	8006e84 <memset+0x18>
 8006e7e:	1e62      	subs	r2, r4, #1
 8006e80:	b3e4      	cbz	r4, 8006efc <memset+0x90>
 8006e82:	4614      	mov	r4, r2
 8006e84:	f803 5b01 	strb.w	r5, [r3], #1
 8006e88:	079a      	lsls	r2, r3, #30
 8006e8a:	d1f8      	bne.n	8006e7e <memset+0x12>
 8006e8c:	2c03      	cmp	r4, #3
 8006e8e:	d92e      	bls.n	8006eee <memset+0x82>
 8006e90:	b2cd      	uxtb	r5, r1
 8006e92:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006e96:	2c0f      	cmp	r4, #15
 8006e98:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006e9c:	d919      	bls.n	8006ed2 <memset+0x66>
 8006e9e:	f103 0210 	add.w	r2, r3, #16
 8006ea2:	4626      	mov	r6, r4
 8006ea4:	3e10      	subs	r6, #16
 8006ea6:	2e0f      	cmp	r6, #15
 8006ea8:	f842 5c10 	str.w	r5, [r2, #-16]
 8006eac:	f842 5c0c 	str.w	r5, [r2, #-12]
 8006eb0:	f842 5c08 	str.w	r5, [r2, #-8]
 8006eb4:	f842 5c04 	str.w	r5, [r2, #-4]
 8006eb8:	f102 0210 	add.w	r2, r2, #16
 8006ebc:	d8f2      	bhi.n	8006ea4 <memset+0x38>
 8006ebe:	f1a4 0210 	sub.w	r2, r4, #16
 8006ec2:	f022 020f 	bic.w	r2, r2, #15
 8006ec6:	f004 040f 	and.w	r4, r4, #15
 8006eca:	3210      	adds	r2, #16
 8006ecc:	2c03      	cmp	r4, #3
 8006ece:	4413      	add	r3, r2
 8006ed0:	d90d      	bls.n	8006eee <memset+0x82>
 8006ed2:	461e      	mov	r6, r3
 8006ed4:	4622      	mov	r2, r4
 8006ed6:	3a04      	subs	r2, #4
 8006ed8:	2a03      	cmp	r2, #3
 8006eda:	f846 5b04 	str.w	r5, [r6], #4
 8006ede:	d8fa      	bhi.n	8006ed6 <memset+0x6a>
 8006ee0:	1f22      	subs	r2, r4, #4
 8006ee2:	f022 0203 	bic.w	r2, r2, #3
 8006ee6:	3204      	adds	r2, #4
 8006ee8:	4413      	add	r3, r2
 8006eea:	f004 0403 	and.w	r4, r4, #3
 8006eee:	b12c      	cbz	r4, 8006efc <memset+0x90>
 8006ef0:	b2c9      	uxtb	r1, r1
 8006ef2:	441c      	add	r4, r3
 8006ef4:	f803 1b01 	strb.w	r1, [r3], #1
 8006ef8:	42a3      	cmp	r3, r4
 8006efa:	d1fb      	bne.n	8006ef4 <memset+0x88>
 8006efc:	bc70      	pop	{r4, r5, r6}
 8006efe:	4770      	bx	lr
 8006f00:	4614      	mov	r4, r2
 8006f02:	4603      	mov	r3, r0
 8006f04:	e7c2      	b.n	8006e8c <memset+0x20>
 8006f06:	bf00      	nop

08006f08 <__malloc_lock>:
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop

08006f0c <__malloc_unlock>:
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop

08006f10 <_Balloc>:
 8006f10:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006f12:	b570      	push	{r4, r5, r6, lr}
 8006f14:	4605      	mov	r5, r0
 8006f16:	460c      	mov	r4, r1
 8006f18:	b14b      	cbz	r3, 8006f2e <_Balloc+0x1e>
 8006f1a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006f1e:	b180      	cbz	r0, 8006f42 <_Balloc+0x32>
 8006f20:	6802      	ldr	r2, [r0, #0]
 8006f22:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8006f26:	2300      	movs	r3, #0
 8006f28:	6103      	str	r3, [r0, #16]
 8006f2a:	60c3      	str	r3, [r0, #12]
 8006f2c:	bd70      	pop	{r4, r5, r6, pc}
 8006f2e:	2104      	movs	r1, #4
 8006f30:	2221      	movs	r2, #33	; 0x21
 8006f32:	f000 fdb3 	bl	8007a9c <_calloc_r>
 8006f36:	64e8      	str	r0, [r5, #76]	; 0x4c
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	d1ed      	bne.n	8006f1a <_Balloc+0xa>
 8006f3e:	2000      	movs	r0, #0
 8006f40:	bd70      	pop	{r4, r5, r6, pc}
 8006f42:	2101      	movs	r1, #1
 8006f44:	fa01 f604 	lsl.w	r6, r1, r4
 8006f48:	1d72      	adds	r2, r6, #5
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	0092      	lsls	r2, r2, #2
 8006f4e:	f000 fda5 	bl	8007a9c <_calloc_r>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d0f3      	beq.n	8006f3e <_Balloc+0x2e>
 8006f56:	6044      	str	r4, [r0, #4]
 8006f58:	6086      	str	r6, [r0, #8]
 8006f5a:	e7e4      	b.n	8006f26 <_Balloc+0x16>

08006f5c <_Bfree>:
 8006f5c:	b131      	cbz	r1, 8006f6c <_Bfree+0x10>
 8006f5e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006f60:	684a      	ldr	r2, [r1, #4]
 8006f62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006f66:	6008      	str	r0, [r1, #0]
 8006f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop

08006f70 <__multadd>:
 8006f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f72:	690c      	ldr	r4, [r1, #16]
 8006f74:	b083      	sub	sp, #12
 8006f76:	460d      	mov	r5, r1
 8006f78:	4606      	mov	r6, r0
 8006f7a:	f101 0e14 	add.w	lr, r1, #20
 8006f7e:	2700      	movs	r7, #0
 8006f80:	f8de 1000 	ldr.w	r1, [lr]
 8006f84:	b288      	uxth	r0, r1
 8006f86:	0c09      	lsrs	r1, r1, #16
 8006f88:	fb02 3300 	mla	r3, r2, r0, r3
 8006f8c:	fb02 f101 	mul.w	r1, r2, r1
 8006f90:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 8006f94:	3701      	adds	r7, #1
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8006f9c:	42bc      	cmp	r4, r7
 8006f9e:	f84e 3b04 	str.w	r3, [lr], #4
 8006fa2:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8006fa6:	dceb      	bgt.n	8006f80 <__multadd+0x10>
 8006fa8:	b13b      	cbz	r3, 8006fba <__multadd+0x4a>
 8006faa:	68aa      	ldr	r2, [r5, #8]
 8006fac:	4294      	cmp	r4, r2
 8006fae:	da07      	bge.n	8006fc0 <__multadd+0x50>
 8006fb0:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8006fb4:	3401      	adds	r4, #1
 8006fb6:	6153      	str	r3, [r2, #20]
 8006fb8:	612c      	str	r4, [r5, #16]
 8006fba:	4628      	mov	r0, r5
 8006fbc:	b003      	add	sp, #12
 8006fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fc0:	6869      	ldr	r1, [r5, #4]
 8006fc2:	9301      	str	r3, [sp, #4]
 8006fc4:	3101      	adds	r1, #1
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	f7ff ffa2 	bl	8006f10 <_Balloc>
 8006fcc:	692a      	ldr	r2, [r5, #16]
 8006fce:	3202      	adds	r2, #2
 8006fd0:	f105 010c 	add.w	r1, r5, #12
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	0092      	lsls	r2, r2, #2
 8006fd8:	300c      	adds	r0, #12
 8006fda:	f7f9 f8d5 	bl	8000188 <memcpy>
 8006fde:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8006fe0:	6869      	ldr	r1, [r5, #4]
 8006fe2:	9b01      	ldr	r3, [sp, #4]
 8006fe4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8006fe8:	6028      	str	r0, [r5, #0]
 8006fea:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8006fee:	463d      	mov	r5, r7
 8006ff0:	e7de      	b.n	8006fb0 <__multadd+0x40>
 8006ff2:	bf00      	nop

08006ff4 <__hi0bits>:
 8006ff4:	0c03      	lsrs	r3, r0, #16
 8006ff6:	041b      	lsls	r3, r3, #16
 8006ff8:	b9b3      	cbnz	r3, 8007028 <__hi0bits+0x34>
 8006ffa:	0400      	lsls	r0, r0, #16
 8006ffc:	2310      	movs	r3, #16
 8006ffe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007002:	bf04      	itt	eq
 8007004:	0200      	lsleq	r0, r0, #8
 8007006:	3308      	addeq	r3, #8
 8007008:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800700c:	bf04      	itt	eq
 800700e:	0100      	lsleq	r0, r0, #4
 8007010:	3304      	addeq	r3, #4
 8007012:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007016:	bf04      	itt	eq
 8007018:	0080      	lsleq	r0, r0, #2
 800701a:	3302      	addeq	r3, #2
 800701c:	2800      	cmp	r0, #0
 800701e:	db07      	blt.n	8007030 <__hi0bits+0x3c>
 8007020:	0042      	lsls	r2, r0, #1
 8007022:	d403      	bmi.n	800702c <__hi0bits+0x38>
 8007024:	2020      	movs	r0, #32
 8007026:	4770      	bx	lr
 8007028:	2300      	movs	r3, #0
 800702a:	e7e8      	b.n	8006ffe <__hi0bits+0xa>
 800702c:	1c58      	adds	r0, r3, #1
 800702e:	4770      	bx	lr
 8007030:	4618      	mov	r0, r3
 8007032:	4770      	bx	lr

08007034 <__lo0bits>:
 8007034:	6803      	ldr	r3, [r0, #0]
 8007036:	f013 0207 	ands.w	r2, r3, #7
 800703a:	d007      	beq.n	800704c <__lo0bits+0x18>
 800703c:	07d9      	lsls	r1, r3, #31
 800703e:	d420      	bmi.n	8007082 <__lo0bits+0x4e>
 8007040:	079a      	lsls	r2, r3, #30
 8007042:	d420      	bmi.n	8007086 <__lo0bits+0x52>
 8007044:	089b      	lsrs	r3, r3, #2
 8007046:	6003      	str	r3, [r0, #0]
 8007048:	2002      	movs	r0, #2
 800704a:	4770      	bx	lr
 800704c:	b299      	uxth	r1, r3
 800704e:	b909      	cbnz	r1, 8007054 <__lo0bits+0x20>
 8007050:	0c1b      	lsrs	r3, r3, #16
 8007052:	2210      	movs	r2, #16
 8007054:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007058:	bf04      	itt	eq
 800705a:	0a1b      	lsreq	r3, r3, #8
 800705c:	3208      	addeq	r2, #8
 800705e:	0719      	lsls	r1, r3, #28
 8007060:	bf04      	itt	eq
 8007062:	091b      	lsreq	r3, r3, #4
 8007064:	3204      	addeq	r2, #4
 8007066:	0799      	lsls	r1, r3, #30
 8007068:	bf04      	itt	eq
 800706a:	089b      	lsreq	r3, r3, #2
 800706c:	3202      	addeq	r2, #2
 800706e:	07d9      	lsls	r1, r3, #31
 8007070:	d404      	bmi.n	800707c <__lo0bits+0x48>
 8007072:	085b      	lsrs	r3, r3, #1
 8007074:	d101      	bne.n	800707a <__lo0bits+0x46>
 8007076:	2020      	movs	r0, #32
 8007078:	4770      	bx	lr
 800707a:	3201      	adds	r2, #1
 800707c:	6003      	str	r3, [r0, #0]
 800707e:	4610      	mov	r0, r2
 8007080:	4770      	bx	lr
 8007082:	2000      	movs	r0, #0
 8007084:	4770      	bx	lr
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	6003      	str	r3, [r0, #0]
 800708a:	2001      	movs	r0, #1
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop

08007090 <__i2b>:
 8007090:	b510      	push	{r4, lr}
 8007092:	460c      	mov	r4, r1
 8007094:	2101      	movs	r1, #1
 8007096:	f7ff ff3b 	bl	8006f10 <_Balloc>
 800709a:	2201      	movs	r2, #1
 800709c:	6144      	str	r4, [r0, #20]
 800709e:	6102      	str	r2, [r0, #16]
 80070a0:	bd10      	pop	{r4, pc}
 80070a2:	bf00      	nop

080070a4 <__multiply>:
 80070a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	690f      	ldr	r7, [r1, #16]
 80070aa:	6916      	ldr	r6, [r2, #16]
 80070ac:	42b7      	cmp	r7, r6
 80070ae:	b083      	sub	sp, #12
 80070b0:	460d      	mov	r5, r1
 80070b2:	4614      	mov	r4, r2
 80070b4:	f2c0 808d 	blt.w	80071d2 <__multiply+0x12e>
 80070b8:	4633      	mov	r3, r6
 80070ba:	463e      	mov	r6, r7
 80070bc:	461f      	mov	r7, r3
 80070be:	68ab      	ldr	r3, [r5, #8]
 80070c0:	6869      	ldr	r1, [r5, #4]
 80070c2:	eb06 0807 	add.w	r8, r6, r7
 80070c6:	4598      	cmp	r8, r3
 80070c8:	bfc8      	it	gt
 80070ca:	3101      	addgt	r1, #1
 80070cc:	f7ff ff20 	bl	8006f10 <_Balloc>
 80070d0:	f100 0c14 	add.w	ip, r0, #20
 80070d4:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 80070d8:	45cc      	cmp	ip, r9
 80070da:	9000      	str	r0, [sp, #0]
 80070dc:	d205      	bcs.n	80070ea <__multiply+0x46>
 80070de:	4663      	mov	r3, ip
 80070e0:	2100      	movs	r1, #0
 80070e2:	f843 1b04 	str.w	r1, [r3], #4
 80070e6:	4599      	cmp	r9, r3
 80070e8:	d8fb      	bhi.n	80070e2 <__multiply+0x3e>
 80070ea:	f104 0214 	add.w	r2, r4, #20
 80070ee:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80070f2:	f105 0314 	add.w	r3, r5, #20
 80070f6:	4552      	cmp	r2, sl
 80070f8:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 80070fc:	d254      	bcs.n	80071a8 <__multiply+0x104>
 80070fe:	f8cd 9004 	str.w	r9, [sp, #4]
 8007102:	4699      	mov	r9, r3
 8007104:	f852 3b04 	ldr.w	r3, [r2], #4
 8007108:	fa1f fb83 	uxth.w	fp, r3
 800710c:	f1bb 0f00 	cmp.w	fp, #0
 8007110:	d020      	beq.n	8007154 <__multiply+0xb0>
 8007112:	2000      	movs	r0, #0
 8007114:	464f      	mov	r7, r9
 8007116:	4666      	mov	r6, ip
 8007118:	4605      	mov	r5, r0
 800711a:	e000      	b.n	800711e <__multiply+0x7a>
 800711c:	461e      	mov	r6, r3
 800711e:	f857 4b04 	ldr.w	r4, [r7], #4
 8007122:	6830      	ldr	r0, [r6, #0]
 8007124:	b2a1      	uxth	r1, r4
 8007126:	b283      	uxth	r3, r0
 8007128:	fb0b 3101 	mla	r1, fp, r1, r3
 800712c:	0c24      	lsrs	r4, r4, #16
 800712e:	0c00      	lsrs	r0, r0, #16
 8007130:	194b      	adds	r3, r1, r5
 8007132:	fb0b 0004 	mla	r0, fp, r4, r0
 8007136:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800713a:	b299      	uxth	r1, r3
 800713c:	4633      	mov	r3, r6
 800713e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007142:	45be      	cmp	lr, r7
 8007144:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8007148:	f843 1b04 	str.w	r1, [r3], #4
 800714c:	d8e6      	bhi.n	800711c <__multiply+0x78>
 800714e:	6075      	str	r5, [r6, #4]
 8007150:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8007154:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8007158:	d020      	beq.n	800719c <__multiply+0xf8>
 800715a:	f8dc 3000 	ldr.w	r3, [ip]
 800715e:	4667      	mov	r7, ip
 8007160:	4618      	mov	r0, r3
 8007162:	464d      	mov	r5, r9
 8007164:	2100      	movs	r1, #0
 8007166:	e000      	b.n	800716a <__multiply+0xc6>
 8007168:	4637      	mov	r7, r6
 800716a:	882c      	ldrh	r4, [r5, #0]
 800716c:	0c00      	lsrs	r0, r0, #16
 800716e:	fb0b 0004 	mla	r0, fp, r4, r0
 8007172:	4401      	add	r1, r0
 8007174:	b29c      	uxth	r4, r3
 8007176:	463e      	mov	r6, r7
 8007178:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 800717c:	f846 3b04 	str.w	r3, [r6], #4
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f855 4b04 	ldr.w	r4, [r5], #4
 8007186:	b283      	uxth	r3, r0
 8007188:	0c24      	lsrs	r4, r4, #16
 800718a:	fb0b 3404 	mla	r4, fp, r4, r3
 800718e:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8007192:	45ae      	cmp	lr, r5
 8007194:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8007198:	d8e6      	bhi.n	8007168 <__multiply+0xc4>
 800719a:	607b      	str	r3, [r7, #4]
 800719c:	4592      	cmp	sl, r2
 800719e:	f10c 0c04 	add.w	ip, ip, #4
 80071a2:	d8af      	bhi.n	8007104 <__multiply+0x60>
 80071a4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80071a8:	f1b8 0f00 	cmp.w	r8, #0
 80071ac:	dd0b      	ble.n	80071c6 <__multiply+0x122>
 80071ae:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80071b2:	f1a9 0904 	sub.w	r9, r9, #4
 80071b6:	b11b      	cbz	r3, 80071c0 <__multiply+0x11c>
 80071b8:	e005      	b.n	80071c6 <__multiply+0x122>
 80071ba:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 80071be:	b913      	cbnz	r3, 80071c6 <__multiply+0x122>
 80071c0:	f1b8 0801 	subs.w	r8, r8, #1
 80071c4:	d1f9      	bne.n	80071ba <__multiply+0x116>
 80071c6:	9800      	ldr	r0, [sp, #0]
 80071c8:	f8c0 8010 	str.w	r8, [r0, #16]
 80071cc:	b003      	add	sp, #12
 80071ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d2:	4615      	mov	r5, r2
 80071d4:	460c      	mov	r4, r1
 80071d6:	e772      	b.n	80070be <__multiply+0x1a>

080071d8 <__pow5mult>:
 80071d8:	f012 0303 	ands.w	r3, r2, #3
 80071dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e0:	4614      	mov	r4, r2
 80071e2:	4607      	mov	r7, r0
 80071e4:	460e      	mov	r6, r1
 80071e6:	d12d      	bne.n	8007244 <__pow5mult+0x6c>
 80071e8:	10a4      	asrs	r4, r4, #2
 80071ea:	d01c      	beq.n	8007226 <__pow5mult+0x4e>
 80071ec:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80071ee:	b395      	cbz	r5, 8007256 <__pow5mult+0x7e>
 80071f0:	07e3      	lsls	r3, r4, #31
 80071f2:	f04f 0800 	mov.w	r8, #0
 80071f6:	d406      	bmi.n	8007206 <__pow5mult+0x2e>
 80071f8:	1064      	asrs	r4, r4, #1
 80071fa:	d014      	beq.n	8007226 <__pow5mult+0x4e>
 80071fc:	6828      	ldr	r0, [r5, #0]
 80071fe:	b1a8      	cbz	r0, 800722c <__pow5mult+0x54>
 8007200:	4605      	mov	r5, r0
 8007202:	07e3      	lsls	r3, r4, #31
 8007204:	d5f8      	bpl.n	80071f8 <__pow5mult+0x20>
 8007206:	4638      	mov	r0, r7
 8007208:	4631      	mov	r1, r6
 800720a:	462a      	mov	r2, r5
 800720c:	f7ff ff4a 	bl	80070a4 <__multiply>
 8007210:	b1b6      	cbz	r6, 8007240 <__pow5mult+0x68>
 8007212:	6872      	ldr	r2, [r6, #4]
 8007214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007216:	1064      	asrs	r4, r4, #1
 8007218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800721c:	6031      	str	r1, [r6, #0]
 800721e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8007222:	4606      	mov	r6, r0
 8007224:	d1ea      	bne.n	80071fc <__pow5mult+0x24>
 8007226:	4630      	mov	r0, r6
 8007228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800722c:	4629      	mov	r1, r5
 800722e:	462a      	mov	r2, r5
 8007230:	4638      	mov	r0, r7
 8007232:	f7ff ff37 	bl	80070a4 <__multiply>
 8007236:	6028      	str	r0, [r5, #0]
 8007238:	f8c0 8000 	str.w	r8, [r0]
 800723c:	4605      	mov	r5, r0
 800723e:	e7e0      	b.n	8007202 <__pow5mult+0x2a>
 8007240:	4606      	mov	r6, r0
 8007242:	e7d9      	b.n	80071f8 <__pow5mult+0x20>
 8007244:	1e5a      	subs	r2, r3, #1
 8007246:	4d0b      	ldr	r5, [pc, #44]	; (8007274 <__pow5mult+0x9c>)
 8007248:	2300      	movs	r3, #0
 800724a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800724e:	f7ff fe8f 	bl	8006f70 <__multadd>
 8007252:	4606      	mov	r6, r0
 8007254:	e7c8      	b.n	80071e8 <__pow5mult+0x10>
 8007256:	2101      	movs	r1, #1
 8007258:	4638      	mov	r0, r7
 800725a:	f7ff fe59 	bl	8006f10 <_Balloc>
 800725e:	f240 2171 	movw	r1, #625	; 0x271
 8007262:	2201      	movs	r2, #1
 8007264:	2300      	movs	r3, #0
 8007266:	6141      	str	r1, [r0, #20]
 8007268:	6102      	str	r2, [r0, #16]
 800726a:	4605      	mov	r5, r0
 800726c:	64b8      	str	r0, [r7, #72]	; 0x48
 800726e:	6003      	str	r3, [r0, #0]
 8007270:	e7be      	b.n	80071f0 <__pow5mult+0x18>
 8007272:	bf00      	nop
 8007274:	08008278 	.word	0x08008278

08007278 <__lshift>:
 8007278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800727c:	690f      	ldr	r7, [r1, #16]
 800727e:	688b      	ldr	r3, [r1, #8]
 8007280:	ea4f 1962 	mov.w	r9, r2, asr #5
 8007284:	444f      	add	r7, r9
 8007286:	1c7d      	adds	r5, r7, #1
 8007288:	429d      	cmp	r5, r3
 800728a:	460e      	mov	r6, r1
 800728c:	4614      	mov	r4, r2
 800728e:	6849      	ldr	r1, [r1, #4]
 8007290:	4680      	mov	r8, r0
 8007292:	dd04      	ble.n	800729e <__lshift+0x26>
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	429d      	cmp	r5, r3
 8007298:	f101 0101 	add.w	r1, r1, #1
 800729c:	dcfa      	bgt.n	8007294 <__lshift+0x1c>
 800729e:	4640      	mov	r0, r8
 80072a0:	f7ff fe36 	bl	8006f10 <_Balloc>
 80072a4:	f1b9 0f00 	cmp.w	r9, #0
 80072a8:	f100 0114 	add.w	r1, r0, #20
 80072ac:	dd09      	ble.n	80072c2 <__lshift+0x4a>
 80072ae:	2300      	movs	r3, #0
 80072b0:	469e      	mov	lr, r3
 80072b2:	460a      	mov	r2, r1
 80072b4:	3301      	adds	r3, #1
 80072b6:	454b      	cmp	r3, r9
 80072b8:	f842 eb04 	str.w	lr, [r2], #4
 80072bc:	d1fa      	bne.n	80072b4 <__lshift+0x3c>
 80072be:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80072c2:	6932      	ldr	r2, [r6, #16]
 80072c4:	f106 0314 	add.w	r3, r6, #20
 80072c8:	f014 0c1f 	ands.w	ip, r4, #31
 80072cc:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 80072d0:	d01f      	beq.n	8007312 <__lshift+0x9a>
 80072d2:	f1cc 0920 	rsb	r9, ip, #32
 80072d6:	2200      	movs	r2, #0
 80072d8:	681c      	ldr	r4, [r3, #0]
 80072da:	fa04 f40c 	lsl.w	r4, r4, ip
 80072de:	4314      	orrs	r4, r2
 80072e0:	468a      	mov	sl, r1
 80072e2:	f841 4b04 	str.w	r4, [r1], #4
 80072e6:	f853 4b04 	ldr.w	r4, [r3], #4
 80072ea:	459e      	cmp	lr, r3
 80072ec:	fa24 f209 	lsr.w	r2, r4, r9
 80072f0:	d8f2      	bhi.n	80072d8 <__lshift+0x60>
 80072f2:	f8ca 2004 	str.w	r2, [sl, #4]
 80072f6:	b102      	cbz	r2, 80072fa <__lshift+0x82>
 80072f8:	1cbd      	adds	r5, r7, #2
 80072fa:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80072fe:	6872      	ldr	r2, [r6, #4]
 8007300:	3d01      	subs	r5, #1
 8007302:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007306:	6105      	str	r5, [r0, #16]
 8007308:	6031      	str	r1, [r6, #0]
 800730a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800730e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007312:	3904      	subs	r1, #4
 8007314:	f853 2b04 	ldr.w	r2, [r3], #4
 8007318:	f841 2f04 	str.w	r2, [r1, #4]!
 800731c:	459e      	cmp	lr, r3
 800731e:	d8f9      	bhi.n	8007314 <__lshift+0x9c>
 8007320:	e7eb      	b.n	80072fa <__lshift+0x82>
 8007322:	bf00      	nop

08007324 <__mcmp>:
 8007324:	6902      	ldr	r2, [r0, #16]
 8007326:	690b      	ldr	r3, [r1, #16]
 8007328:	1ad2      	subs	r2, r2, r3
 800732a:	d113      	bne.n	8007354 <__mcmp+0x30>
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	3014      	adds	r0, #20
 8007330:	3114      	adds	r1, #20
 8007332:	4419      	add	r1, r3
 8007334:	b410      	push	{r4}
 8007336:	4403      	add	r3, r0
 8007338:	e001      	b.n	800733e <__mcmp+0x1a>
 800733a:	4298      	cmp	r0, r3
 800733c:	d20c      	bcs.n	8007358 <__mcmp+0x34>
 800733e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007342:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007346:	4294      	cmp	r4, r2
 8007348:	d0f7      	beq.n	800733a <__mcmp+0x16>
 800734a:	d309      	bcc.n	8007360 <__mcmp+0x3c>
 800734c:	2001      	movs	r0, #1
 800734e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	4610      	mov	r0, r2
 8007356:	4770      	bx	lr
 8007358:	2000      	movs	r0, #0
 800735a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	f04f 30ff 	mov.w	r0, #4294967295
 8007364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop

0800736c <__mdiff>:
 800736c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007370:	460e      	mov	r6, r1
 8007372:	4605      	mov	r5, r0
 8007374:	4611      	mov	r1, r2
 8007376:	4630      	mov	r0, r6
 8007378:	4614      	mov	r4, r2
 800737a:	f7ff ffd3 	bl	8007324 <__mcmp>
 800737e:	1e07      	subs	r7, r0, #0
 8007380:	d054      	beq.n	800742c <__mdiff+0xc0>
 8007382:	db4d      	blt.n	8007420 <__mdiff+0xb4>
 8007384:	f04f 0800 	mov.w	r8, #0
 8007388:	6871      	ldr	r1, [r6, #4]
 800738a:	4628      	mov	r0, r5
 800738c:	f7ff fdc0 	bl	8006f10 <_Balloc>
 8007390:	6937      	ldr	r7, [r6, #16]
 8007392:	6923      	ldr	r3, [r4, #16]
 8007394:	f8c0 800c 	str.w	r8, [r0, #12]
 8007398:	3614      	adds	r6, #20
 800739a:	f104 0214 	add.w	r2, r4, #20
 800739e:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 80073a2:	f100 0514 	add.w	r5, r0, #20
 80073a6:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 80073aa:	2300      	movs	r3, #0
 80073ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80073b0:	f852 4b04 	ldr.w	r4, [r2], #4
 80073b4:	fa13 f388 	uxtah	r3, r3, r8
 80073b8:	b2a1      	uxth	r1, r4
 80073ba:	0c24      	lsrs	r4, r4, #16
 80073bc:	1a59      	subs	r1, r3, r1
 80073be:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 80073c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80073c6:	b289      	uxth	r1, r1
 80073c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80073cc:	4594      	cmp	ip, r2
 80073ce:	f845 1b04 	str.w	r1, [r5], #4
 80073d2:	ea4f 4323 	mov.w	r3, r3, asr #16
 80073d6:	4634      	mov	r4, r6
 80073d8:	d8e8      	bhi.n	80073ac <__mdiff+0x40>
 80073da:	45b6      	cmp	lr, r6
 80073dc:	46ac      	mov	ip, r5
 80073de:	d915      	bls.n	800740c <__mdiff+0xa0>
 80073e0:	f854 2b04 	ldr.w	r2, [r4], #4
 80073e4:	fa13 f182 	uxtah	r1, r3, r2
 80073e8:	0c13      	lsrs	r3, r2, #16
 80073ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80073ee:	b289      	uxth	r1, r1
 80073f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80073f4:	45a6      	cmp	lr, r4
 80073f6:	f845 1b04 	str.w	r1, [r5], #4
 80073fa:	ea4f 4323 	mov.w	r3, r3, asr #16
 80073fe:	d8ef      	bhi.n	80073e0 <__mdiff+0x74>
 8007400:	43f6      	mvns	r6, r6
 8007402:	4476      	add	r6, lr
 8007404:	f026 0503 	bic.w	r5, r6, #3
 8007408:	3504      	adds	r5, #4
 800740a:	4465      	add	r5, ip
 800740c:	3d04      	subs	r5, #4
 800740e:	b921      	cbnz	r1, 800741a <__mdiff+0xae>
 8007410:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007414:	3f01      	subs	r7, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0fa      	beq.n	8007410 <__mdiff+0xa4>
 800741a:	6107      	str	r7, [r0, #16]
 800741c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007420:	4633      	mov	r3, r6
 8007422:	f04f 0801 	mov.w	r8, #1
 8007426:	4626      	mov	r6, r4
 8007428:	461c      	mov	r4, r3
 800742a:	e7ad      	b.n	8007388 <__mdiff+0x1c>
 800742c:	4628      	mov	r0, r5
 800742e:	4639      	mov	r1, r7
 8007430:	f7ff fd6e 	bl	8006f10 <_Balloc>
 8007434:	2301      	movs	r3, #1
 8007436:	6147      	str	r7, [r0, #20]
 8007438:	6103      	str	r3, [r0, #16]
 800743a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800743e:	bf00      	nop

08007440 <__d2b>:
 8007440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	2101      	movs	r1, #1
 8007448:	461c      	mov	r4, r3
 800744a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800744e:	4615      	mov	r5, r2
 8007450:	9e08      	ldr	r6, [sp, #32]
 8007452:	f7ff fd5d 	bl	8006f10 <_Balloc>
 8007456:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800745a:	4680      	mov	r8, r0
 800745c:	b10f      	cbz	r7, 8007462 <__d2b+0x22>
 800745e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8007462:	9401      	str	r4, [sp, #4]
 8007464:	b31d      	cbz	r5, 80074ae <__d2b+0x6e>
 8007466:	a802      	add	r0, sp, #8
 8007468:	f840 5d08 	str.w	r5, [r0, #-8]!
 800746c:	f7ff fde2 	bl	8007034 <__lo0bits>
 8007470:	2800      	cmp	r0, #0
 8007472:	d134      	bne.n	80074de <__d2b+0x9e>
 8007474:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8007478:	f8c8 2014 	str.w	r2, [r8, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	bf14      	ite	ne
 8007480:	2402      	movne	r4, #2
 8007482:	2401      	moveq	r4, #1
 8007484:	f8c8 3018 	str.w	r3, [r8, #24]
 8007488:	f8c8 4010 	str.w	r4, [r8, #16]
 800748c:	b9df      	cbnz	r7, 80074c6 <__d2b+0x86>
 800748e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8007492:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007496:	6030      	str	r0, [r6, #0]
 8007498:	6918      	ldr	r0, [r3, #16]
 800749a:	f7ff fdab 	bl	8006ff4 <__hi0bits>
 800749e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a0:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 80074a4:	6018      	str	r0, [r3, #0]
 80074a6:	4640      	mov	r0, r8
 80074a8:	b002      	add	sp, #8
 80074aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ae:	a801      	add	r0, sp, #4
 80074b0:	f7ff fdc0 	bl	8007034 <__lo0bits>
 80074b4:	2401      	movs	r4, #1
 80074b6:	9b01      	ldr	r3, [sp, #4]
 80074b8:	f8c8 3014 	str.w	r3, [r8, #20]
 80074bc:	3020      	adds	r0, #32
 80074be:	f8c8 4010 	str.w	r4, [r8, #16]
 80074c2:	2f00      	cmp	r7, #0
 80074c4:	d0e3      	beq.n	800748e <__d2b+0x4e>
 80074c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c8:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 80074cc:	4407      	add	r7, r0
 80074ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074d2:	6037      	str	r7, [r6, #0]
 80074d4:	6018      	str	r0, [r3, #0]
 80074d6:	4640      	mov	r0, r8
 80074d8:	b002      	add	sp, #8
 80074da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074de:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80074e2:	f1c0 0120 	rsb	r1, r0, #32
 80074e6:	fa03 f101 	lsl.w	r1, r3, r1
 80074ea:	430a      	orrs	r2, r1
 80074ec:	40c3      	lsrs	r3, r0
 80074ee:	9301      	str	r3, [sp, #4]
 80074f0:	f8c8 2014 	str.w	r2, [r8, #20]
 80074f4:	e7c2      	b.n	800747c <__d2b+0x3c>
 80074f6:	bf00      	nop

080074f8 <_realloc_r>:
 80074f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	4617      	mov	r7, r2
 80074fe:	b083      	sub	sp, #12
 8007500:	460e      	mov	r6, r1
 8007502:	2900      	cmp	r1, #0
 8007504:	f000 80e7 	beq.w	80076d6 <_realloc_r+0x1de>
 8007508:	4681      	mov	r9, r0
 800750a:	f107 050b 	add.w	r5, r7, #11
 800750e:	f7ff fcfb 	bl	8006f08 <__malloc_lock>
 8007512:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007516:	2d16      	cmp	r5, #22
 8007518:	f023 0403 	bic.w	r4, r3, #3
 800751c:	f1a6 0808 	sub.w	r8, r6, #8
 8007520:	d84c      	bhi.n	80075bc <_realloc_r+0xc4>
 8007522:	2210      	movs	r2, #16
 8007524:	4615      	mov	r5, r2
 8007526:	42af      	cmp	r7, r5
 8007528:	d84d      	bhi.n	80075c6 <_realloc_r+0xce>
 800752a:	4294      	cmp	r4, r2
 800752c:	f280 8084 	bge.w	8007638 <_realloc_r+0x140>
 8007530:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 80078e0 <_realloc_r+0x3e8>
 8007534:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007538:	eb08 0104 	add.w	r1, r8, r4
 800753c:	4288      	cmp	r0, r1
 800753e:	f000 80d6 	beq.w	80076ee <_realloc_r+0x1f6>
 8007542:	6848      	ldr	r0, [r1, #4]
 8007544:	f020 0e01 	bic.w	lr, r0, #1
 8007548:	448e      	add	lr, r1
 800754a:	f8de e004 	ldr.w	lr, [lr, #4]
 800754e:	f01e 0f01 	tst.w	lr, #1
 8007552:	d13f      	bne.n	80075d4 <_realloc_r+0xdc>
 8007554:	f020 0003 	bic.w	r0, r0, #3
 8007558:	4420      	add	r0, r4
 800755a:	4290      	cmp	r0, r2
 800755c:	f280 80c1 	bge.w	80076e2 <_realloc_r+0x1ea>
 8007560:	07db      	lsls	r3, r3, #31
 8007562:	f100 808f 	bmi.w	8007684 <_realloc_r+0x18c>
 8007566:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800756a:	ebc3 0a08 	rsb	sl, r3, r8
 800756e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007572:	f023 0303 	bic.w	r3, r3, #3
 8007576:	eb00 0e03 	add.w	lr, r0, r3
 800757a:	4596      	cmp	lr, r2
 800757c:	db34      	blt.n	80075e8 <_realloc_r+0xf0>
 800757e:	68cb      	ldr	r3, [r1, #12]
 8007580:	688a      	ldr	r2, [r1, #8]
 8007582:	4657      	mov	r7, sl
 8007584:	60d3      	str	r3, [r2, #12]
 8007586:	609a      	str	r2, [r3, #8]
 8007588:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800758c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007590:	60cb      	str	r3, [r1, #12]
 8007592:	1f22      	subs	r2, r4, #4
 8007594:	2a24      	cmp	r2, #36	; 0x24
 8007596:	6099      	str	r1, [r3, #8]
 8007598:	f200 8136 	bhi.w	8007808 <_realloc_r+0x310>
 800759c:	2a13      	cmp	r2, #19
 800759e:	f240 80fd 	bls.w	800779c <_realloc_r+0x2a4>
 80075a2:	6833      	ldr	r3, [r6, #0]
 80075a4:	f8ca 3008 	str.w	r3, [sl, #8]
 80075a8:	6873      	ldr	r3, [r6, #4]
 80075aa:	f8ca 300c 	str.w	r3, [sl, #12]
 80075ae:	2a1b      	cmp	r2, #27
 80075b0:	f200 8140 	bhi.w	8007834 <_realloc_r+0x33c>
 80075b4:	3608      	adds	r6, #8
 80075b6:	f10a 0310 	add.w	r3, sl, #16
 80075ba:	e0f0      	b.n	800779e <_realloc_r+0x2a6>
 80075bc:	f025 0507 	bic.w	r5, r5, #7
 80075c0:	2d00      	cmp	r5, #0
 80075c2:	462a      	mov	r2, r5
 80075c4:	daaf      	bge.n	8007526 <_realloc_r+0x2e>
 80075c6:	230c      	movs	r3, #12
 80075c8:	2000      	movs	r0, #0
 80075ca:	f8c9 3000 	str.w	r3, [r9]
 80075ce:	b003      	add	sp, #12
 80075d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d4:	07d9      	lsls	r1, r3, #31
 80075d6:	d455      	bmi.n	8007684 <_realloc_r+0x18c>
 80075d8:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80075dc:	ebc3 0a08 	rsb	sl, r3, r8
 80075e0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80075e4:	f023 0303 	bic.w	r3, r3, #3
 80075e8:	4423      	add	r3, r4
 80075ea:	4293      	cmp	r3, r2
 80075ec:	db4a      	blt.n	8007684 <_realloc_r+0x18c>
 80075ee:	4657      	mov	r7, sl
 80075f0:	f8da 100c 	ldr.w	r1, [sl, #12]
 80075f4:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80075f8:	1f22      	subs	r2, r4, #4
 80075fa:	2a24      	cmp	r2, #36	; 0x24
 80075fc:	60c1      	str	r1, [r0, #12]
 80075fe:	6088      	str	r0, [r1, #8]
 8007600:	f200 810e 	bhi.w	8007820 <_realloc_r+0x328>
 8007604:	2a13      	cmp	r2, #19
 8007606:	f240 8109 	bls.w	800781c <_realloc_r+0x324>
 800760a:	6831      	ldr	r1, [r6, #0]
 800760c:	f8ca 1008 	str.w	r1, [sl, #8]
 8007610:	6871      	ldr	r1, [r6, #4]
 8007612:	f8ca 100c 	str.w	r1, [sl, #12]
 8007616:	2a1b      	cmp	r2, #27
 8007618:	f200 8121 	bhi.w	800785e <_realloc_r+0x366>
 800761c:	3608      	adds	r6, #8
 800761e:	f10a 0210 	add.w	r2, sl, #16
 8007622:	6831      	ldr	r1, [r6, #0]
 8007624:	6011      	str	r1, [r2, #0]
 8007626:	6871      	ldr	r1, [r6, #4]
 8007628:	6051      	str	r1, [r2, #4]
 800762a:	68b1      	ldr	r1, [r6, #8]
 800762c:	6091      	str	r1, [r2, #8]
 800762e:	461c      	mov	r4, r3
 8007630:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007634:	463e      	mov	r6, r7
 8007636:	46d0      	mov	r8, sl
 8007638:	1b62      	subs	r2, r4, r5
 800763a:	2a0f      	cmp	r2, #15
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	d80e      	bhi.n	8007660 <_realloc_r+0x168>
 8007642:	4323      	orrs	r3, r4
 8007644:	4444      	add	r4, r8
 8007646:	f8c8 3004 	str.w	r3, [r8, #4]
 800764a:	6863      	ldr	r3, [r4, #4]
 800764c:	f043 0301 	orr.w	r3, r3, #1
 8007650:	6063      	str	r3, [r4, #4]
 8007652:	4648      	mov	r0, r9
 8007654:	f7ff fc5a 	bl	8006f0c <__malloc_unlock>
 8007658:	4630      	mov	r0, r6
 800765a:	b003      	add	sp, #12
 800765c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007660:	eb08 0105 	add.w	r1, r8, r5
 8007664:	431d      	orrs	r5, r3
 8007666:	f042 0301 	orr.w	r3, r2, #1
 800766a:	440a      	add	r2, r1
 800766c:	f8c8 5004 	str.w	r5, [r8, #4]
 8007670:	604b      	str	r3, [r1, #4]
 8007672:	6853      	ldr	r3, [r2, #4]
 8007674:	f043 0301 	orr.w	r3, r3, #1
 8007678:	3108      	adds	r1, #8
 800767a:	6053      	str	r3, [r2, #4]
 800767c:	4648      	mov	r0, r9
 800767e:	f7fe fdad 	bl	80061dc <_free_r>
 8007682:	e7e6      	b.n	8007652 <_realloc_r+0x15a>
 8007684:	4639      	mov	r1, r7
 8007686:	4648      	mov	r0, r9
 8007688:	f7ff f8b4 	bl	80067f4 <_malloc_r>
 800768c:	4607      	mov	r7, r0
 800768e:	b1d8      	cbz	r0, 80076c8 <_realloc_r+0x1d0>
 8007690:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007694:	f023 0201 	bic.w	r2, r3, #1
 8007698:	4442      	add	r2, r8
 800769a:	f1a0 0108 	sub.w	r1, r0, #8
 800769e:	4291      	cmp	r1, r2
 80076a0:	f000 80ac 	beq.w	80077fc <_realloc_r+0x304>
 80076a4:	1f22      	subs	r2, r4, #4
 80076a6:	2a24      	cmp	r2, #36	; 0x24
 80076a8:	f200 8099 	bhi.w	80077de <_realloc_r+0x2e6>
 80076ac:	2a13      	cmp	r2, #19
 80076ae:	d86a      	bhi.n	8007786 <_realloc_r+0x28e>
 80076b0:	4603      	mov	r3, r0
 80076b2:	4632      	mov	r2, r6
 80076b4:	6811      	ldr	r1, [r2, #0]
 80076b6:	6019      	str	r1, [r3, #0]
 80076b8:	6851      	ldr	r1, [r2, #4]
 80076ba:	6059      	str	r1, [r3, #4]
 80076bc:	6892      	ldr	r2, [r2, #8]
 80076be:	609a      	str	r2, [r3, #8]
 80076c0:	4631      	mov	r1, r6
 80076c2:	4648      	mov	r0, r9
 80076c4:	f7fe fd8a 	bl	80061dc <_free_r>
 80076c8:	4648      	mov	r0, r9
 80076ca:	f7ff fc1f 	bl	8006f0c <__malloc_unlock>
 80076ce:	4638      	mov	r0, r7
 80076d0:	b003      	add	sp, #12
 80076d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d6:	4611      	mov	r1, r2
 80076d8:	b003      	add	sp, #12
 80076da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076de:	f7ff b889 	b.w	80067f4 <_malloc_r>
 80076e2:	68ca      	ldr	r2, [r1, #12]
 80076e4:	6889      	ldr	r1, [r1, #8]
 80076e6:	4604      	mov	r4, r0
 80076e8:	60ca      	str	r2, [r1, #12]
 80076ea:	6091      	str	r1, [r2, #8]
 80076ec:	e7a4      	b.n	8007638 <_realloc_r+0x140>
 80076ee:	6841      	ldr	r1, [r0, #4]
 80076f0:	f021 0103 	bic.w	r1, r1, #3
 80076f4:	4421      	add	r1, r4
 80076f6:	f105 0010 	add.w	r0, r5, #16
 80076fa:	4281      	cmp	r1, r0
 80076fc:	da5b      	bge.n	80077b6 <_realloc_r+0x2be>
 80076fe:	07db      	lsls	r3, r3, #31
 8007700:	d4c0      	bmi.n	8007684 <_realloc_r+0x18c>
 8007702:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007706:	ebc3 0a08 	rsb	sl, r3, r8
 800770a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800770e:	f023 0303 	bic.w	r3, r3, #3
 8007712:	eb01 0c03 	add.w	ip, r1, r3
 8007716:	4560      	cmp	r0, ip
 8007718:	f73f af66 	bgt.w	80075e8 <_realloc_r+0xf0>
 800771c:	4657      	mov	r7, sl
 800771e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007722:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8007726:	1f22      	subs	r2, r4, #4
 8007728:	2a24      	cmp	r2, #36	; 0x24
 800772a:	60cb      	str	r3, [r1, #12]
 800772c:	6099      	str	r1, [r3, #8]
 800772e:	f200 80b8 	bhi.w	80078a2 <_realloc_r+0x3aa>
 8007732:	2a13      	cmp	r2, #19
 8007734:	f240 80a9 	bls.w	800788a <_realloc_r+0x392>
 8007738:	6833      	ldr	r3, [r6, #0]
 800773a:	f8ca 3008 	str.w	r3, [sl, #8]
 800773e:	6873      	ldr	r3, [r6, #4]
 8007740:	f8ca 300c 	str.w	r3, [sl, #12]
 8007744:	2a1b      	cmp	r2, #27
 8007746:	f200 80b5 	bhi.w	80078b4 <_realloc_r+0x3bc>
 800774a:	3608      	adds	r6, #8
 800774c:	f10a 0310 	add.w	r3, sl, #16
 8007750:	6832      	ldr	r2, [r6, #0]
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	6872      	ldr	r2, [r6, #4]
 8007756:	605a      	str	r2, [r3, #4]
 8007758:	68b2      	ldr	r2, [r6, #8]
 800775a:	609a      	str	r2, [r3, #8]
 800775c:	eb0a 0205 	add.w	r2, sl, r5
 8007760:	ebc5 030c 	rsb	r3, r5, ip
 8007764:	f043 0301 	orr.w	r3, r3, #1
 8007768:	f8cb 2008 	str.w	r2, [fp, #8]
 800776c:	6053      	str	r3, [r2, #4]
 800776e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	431d      	orrs	r5, r3
 8007778:	4648      	mov	r0, r9
 800777a:	f8ca 5004 	str.w	r5, [sl, #4]
 800777e:	f7ff fbc5 	bl	8006f0c <__malloc_unlock>
 8007782:	4638      	mov	r0, r7
 8007784:	e769      	b.n	800765a <_realloc_r+0x162>
 8007786:	6833      	ldr	r3, [r6, #0]
 8007788:	6003      	str	r3, [r0, #0]
 800778a:	6873      	ldr	r3, [r6, #4]
 800778c:	6043      	str	r3, [r0, #4]
 800778e:	2a1b      	cmp	r2, #27
 8007790:	d829      	bhi.n	80077e6 <_realloc_r+0x2ee>
 8007792:	f100 0308 	add.w	r3, r0, #8
 8007796:	f106 0208 	add.w	r2, r6, #8
 800779a:	e78b      	b.n	80076b4 <_realloc_r+0x1bc>
 800779c:	463b      	mov	r3, r7
 800779e:	6832      	ldr	r2, [r6, #0]
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	6872      	ldr	r2, [r6, #4]
 80077a4:	605a      	str	r2, [r3, #4]
 80077a6:	68b2      	ldr	r2, [r6, #8]
 80077a8:	609a      	str	r2, [r3, #8]
 80077aa:	463e      	mov	r6, r7
 80077ac:	4674      	mov	r4, lr
 80077ae:	f8da 3004 	ldr.w	r3, [sl, #4]
 80077b2:	46d0      	mov	r8, sl
 80077b4:	e740      	b.n	8007638 <_realloc_r+0x140>
 80077b6:	eb08 0205 	add.w	r2, r8, r5
 80077ba:	1b4b      	subs	r3, r1, r5
 80077bc:	f043 0301 	orr.w	r3, r3, #1
 80077c0:	f8cb 2008 	str.w	r2, [fp, #8]
 80077c4:	6053      	str	r3, [r2, #4]
 80077c6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	431d      	orrs	r5, r3
 80077d0:	4648      	mov	r0, r9
 80077d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80077d6:	f7ff fb99 	bl	8006f0c <__malloc_unlock>
 80077da:	4630      	mov	r0, r6
 80077dc:	e73d      	b.n	800765a <_realloc_r+0x162>
 80077de:	4631      	mov	r1, r6
 80077e0:	f7ff fae0 	bl	8006da4 <memmove>
 80077e4:	e76c      	b.n	80076c0 <_realloc_r+0x1c8>
 80077e6:	68b3      	ldr	r3, [r6, #8]
 80077e8:	6083      	str	r3, [r0, #8]
 80077ea:	68f3      	ldr	r3, [r6, #12]
 80077ec:	60c3      	str	r3, [r0, #12]
 80077ee:	2a24      	cmp	r2, #36	; 0x24
 80077f0:	d02c      	beq.n	800784c <_realloc_r+0x354>
 80077f2:	f100 0310 	add.w	r3, r0, #16
 80077f6:	f106 0210 	add.w	r2, r6, #16
 80077fa:	e75b      	b.n	80076b4 <_realloc_r+0x1bc>
 80077fc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007800:	f022 0203 	bic.w	r2, r2, #3
 8007804:	4414      	add	r4, r2
 8007806:	e717      	b.n	8007638 <_realloc_r+0x140>
 8007808:	4631      	mov	r1, r6
 800780a:	4638      	mov	r0, r7
 800780c:	4674      	mov	r4, lr
 800780e:	463e      	mov	r6, r7
 8007810:	f7ff fac8 	bl	8006da4 <memmove>
 8007814:	46d0      	mov	r8, sl
 8007816:	f8da 3004 	ldr.w	r3, [sl, #4]
 800781a:	e70d      	b.n	8007638 <_realloc_r+0x140>
 800781c:	463a      	mov	r2, r7
 800781e:	e700      	b.n	8007622 <_realloc_r+0x12a>
 8007820:	4631      	mov	r1, r6
 8007822:	4638      	mov	r0, r7
 8007824:	461c      	mov	r4, r3
 8007826:	463e      	mov	r6, r7
 8007828:	f7ff fabc 	bl	8006da4 <memmove>
 800782c:	46d0      	mov	r8, sl
 800782e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007832:	e701      	b.n	8007638 <_realloc_r+0x140>
 8007834:	68b3      	ldr	r3, [r6, #8]
 8007836:	f8ca 3010 	str.w	r3, [sl, #16]
 800783a:	68f3      	ldr	r3, [r6, #12]
 800783c:	f8ca 3014 	str.w	r3, [sl, #20]
 8007840:	2a24      	cmp	r2, #36	; 0x24
 8007842:	d018      	beq.n	8007876 <_realloc_r+0x37e>
 8007844:	3610      	adds	r6, #16
 8007846:	f10a 0318 	add.w	r3, sl, #24
 800784a:	e7a8      	b.n	800779e <_realloc_r+0x2a6>
 800784c:	6933      	ldr	r3, [r6, #16]
 800784e:	6103      	str	r3, [r0, #16]
 8007850:	6973      	ldr	r3, [r6, #20]
 8007852:	6143      	str	r3, [r0, #20]
 8007854:	f106 0218 	add.w	r2, r6, #24
 8007858:	f100 0318 	add.w	r3, r0, #24
 800785c:	e72a      	b.n	80076b4 <_realloc_r+0x1bc>
 800785e:	68b1      	ldr	r1, [r6, #8]
 8007860:	f8ca 1010 	str.w	r1, [sl, #16]
 8007864:	68f1      	ldr	r1, [r6, #12]
 8007866:	f8ca 1014 	str.w	r1, [sl, #20]
 800786a:	2a24      	cmp	r2, #36	; 0x24
 800786c:	d00f      	beq.n	800788e <_realloc_r+0x396>
 800786e:	3610      	adds	r6, #16
 8007870:	f10a 0218 	add.w	r2, sl, #24
 8007874:	e6d5      	b.n	8007622 <_realloc_r+0x12a>
 8007876:	6933      	ldr	r3, [r6, #16]
 8007878:	f8ca 3018 	str.w	r3, [sl, #24]
 800787c:	6973      	ldr	r3, [r6, #20]
 800787e:	f8ca 301c 	str.w	r3, [sl, #28]
 8007882:	3618      	adds	r6, #24
 8007884:	f10a 0320 	add.w	r3, sl, #32
 8007888:	e789      	b.n	800779e <_realloc_r+0x2a6>
 800788a:	463b      	mov	r3, r7
 800788c:	e760      	b.n	8007750 <_realloc_r+0x258>
 800788e:	6932      	ldr	r2, [r6, #16]
 8007890:	f8ca 2018 	str.w	r2, [sl, #24]
 8007894:	6972      	ldr	r2, [r6, #20]
 8007896:	f8ca 201c 	str.w	r2, [sl, #28]
 800789a:	3618      	adds	r6, #24
 800789c:	f10a 0220 	add.w	r2, sl, #32
 80078a0:	e6bf      	b.n	8007622 <_realloc_r+0x12a>
 80078a2:	4631      	mov	r1, r6
 80078a4:	4638      	mov	r0, r7
 80078a6:	f8cd c004 	str.w	ip, [sp, #4]
 80078aa:	f7ff fa7b 	bl	8006da4 <memmove>
 80078ae:	f8dd c004 	ldr.w	ip, [sp, #4]
 80078b2:	e753      	b.n	800775c <_realloc_r+0x264>
 80078b4:	68b3      	ldr	r3, [r6, #8]
 80078b6:	f8ca 3010 	str.w	r3, [sl, #16]
 80078ba:	68f3      	ldr	r3, [r6, #12]
 80078bc:	f8ca 3014 	str.w	r3, [sl, #20]
 80078c0:	2a24      	cmp	r2, #36	; 0x24
 80078c2:	d003      	beq.n	80078cc <_realloc_r+0x3d4>
 80078c4:	3610      	adds	r6, #16
 80078c6:	f10a 0318 	add.w	r3, sl, #24
 80078ca:	e741      	b.n	8007750 <_realloc_r+0x258>
 80078cc:	6933      	ldr	r3, [r6, #16]
 80078ce:	f8ca 3018 	str.w	r3, [sl, #24]
 80078d2:	6973      	ldr	r3, [r6, #20]
 80078d4:	f8ca 301c 	str.w	r3, [sl, #28]
 80078d8:	3618      	adds	r6, #24
 80078da:	f10a 0320 	add.w	r3, sl, #32
 80078de:	e737      	b.n	8007750 <_realloc_r+0x258>
 80078e0:	20000490 	.word	0x20000490

080078e4 <__fpclassifyd>:
 80078e4:	b410      	push	{r4}
 80078e6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80078ea:	d008      	beq.n	80078fe <__fpclassifyd+0x1a>
 80078ec:	4b11      	ldr	r3, [pc, #68]	; (8007934 <__fpclassifyd+0x50>)
 80078ee:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d808      	bhi.n	8007908 <__fpclassifyd+0x24>
 80078f6:	2004      	movs	r0, #4
 80078f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	b918      	cbnz	r0, 8007908 <__fpclassifyd+0x24>
 8007900:	2002      	movs	r0, #2
 8007902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
 800790c:	4b09      	ldr	r3, [pc, #36]	; (8007934 <__fpclassifyd+0x50>)
 800790e:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 8007912:	4299      	cmp	r1, r3
 8007914:	d9ef      	bls.n	80078f6 <__fpclassifyd+0x12>
 8007916:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800791a:	d201      	bcs.n	8007920 <__fpclassifyd+0x3c>
 800791c:	2003      	movs	r0, #3
 800791e:	e7eb      	b.n	80078f8 <__fpclassifyd+0x14>
 8007920:	4b05      	ldr	r3, [pc, #20]	; (8007938 <__fpclassifyd+0x54>)
 8007922:	429c      	cmp	r4, r3
 8007924:	d001      	beq.n	800792a <__fpclassifyd+0x46>
 8007926:	2000      	movs	r0, #0
 8007928:	e7e6      	b.n	80078f8 <__fpclassifyd+0x14>
 800792a:	fab0 f080 	clz	r0, r0
 800792e:	0940      	lsrs	r0, r0, #5
 8007930:	e7e2      	b.n	80078f8 <__fpclassifyd+0x14>
 8007932:	bf00      	nop
 8007934:	7fdfffff 	.word	0x7fdfffff
 8007938:	7ff00000 	.word	0x7ff00000

0800793c <_sbrk_r>:
 800793c:	b538      	push	{r3, r4, r5, lr}
 800793e:	4c07      	ldr	r4, [pc, #28]	; (800795c <_sbrk_r+0x20>)
 8007940:	2300      	movs	r3, #0
 8007942:	4605      	mov	r5, r0
 8007944:	4608      	mov	r0, r1
 8007946:	6023      	str	r3, [r4, #0]
 8007948:	f7f9 ff32 	bl	80017b0 <_sbrk>
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	d000      	beq.n	8007952 <_sbrk_r+0x16>
 8007950:	bd38      	pop	{r3, r4, r5, pc}
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0fb      	beq.n	8007950 <_sbrk_r+0x14>
 8007958:	602b      	str	r3, [r5, #0]
 800795a:	bd38      	pop	{r3, r4, r5, pc}
 800795c:	20000a70 	.word	0x20000a70

08007960 <__sread>:
 8007960:	b510      	push	{r4, lr}
 8007962:	460c      	mov	r4, r1
 8007964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007968:	f000 f9b8 	bl	8007cdc <_read_r>
 800796c:	2800      	cmp	r0, #0
 800796e:	db03      	blt.n	8007978 <__sread+0x18>
 8007970:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007972:	4403      	add	r3, r0
 8007974:	6523      	str	r3, [r4, #80]	; 0x50
 8007976:	bd10      	pop	{r4, pc}
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800797e:	81a3      	strh	r3, [r4, #12]
 8007980:	bd10      	pop	{r4, pc}
 8007982:	bf00      	nop

08007984 <__swrite>:
 8007984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007988:	4616      	mov	r6, r2
 800798a:	898a      	ldrh	r2, [r1, #12]
 800798c:	461d      	mov	r5, r3
 800798e:	05d3      	lsls	r3, r2, #23
 8007990:	460c      	mov	r4, r1
 8007992:	4607      	mov	r7, r0
 8007994:	d506      	bpl.n	80079a4 <__swrite+0x20>
 8007996:	2200      	movs	r2, #0
 8007998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800799c:	2302      	movs	r3, #2
 800799e:	f000 f989 	bl	8007cb4 <_lseek_r>
 80079a2:	89a2      	ldrh	r2, [r4, #12]
 80079a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079ac:	81a2      	strh	r2, [r4, #12]
 80079ae:	4638      	mov	r0, r7
 80079b0:	4632      	mov	r2, r6
 80079b2:	462b      	mov	r3, r5
 80079b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079b8:	f000 b85c 	b.w	8007a74 <_write_r>

080079bc <__sseek>:
 80079bc:	b510      	push	{r4, lr}
 80079be:	460c      	mov	r4, r1
 80079c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c4:	f000 f976 	bl	8007cb4 <_lseek_r>
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	1c42      	adds	r2, r0, #1
 80079cc:	bf0e      	itee	eq
 80079ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079d6:	6520      	strne	r0, [r4, #80]	; 0x50
 80079d8:	81a3      	strh	r3, [r4, #12]
 80079da:	bd10      	pop	{r4, pc}

080079dc <__sclose>:
 80079dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e0:	f000 b88c 	b.w	8007afc <_close_r>

080079e4 <__sprint_r.part.0>:
 80079e4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80079e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079ea:	049c      	lsls	r4, r3, #18
 80079ec:	460f      	mov	r7, r1
 80079ee:	4692      	mov	sl, r2
 80079f0:	d52b      	bpl.n	8007a4a <__sprint_r.part.0+0x66>
 80079f2:	6893      	ldr	r3, [r2, #8]
 80079f4:	6812      	ldr	r2, [r2, #0]
 80079f6:	b333      	cbz	r3, 8007a46 <__sprint_r.part.0+0x62>
 80079f8:	4680      	mov	r8, r0
 80079fa:	f102 0908 	add.w	r9, r2, #8
 80079fe:	e919 0060 	ldmdb	r9, {r5, r6}
 8007a02:	08b6      	lsrs	r6, r6, #2
 8007a04:	d017      	beq.n	8007a36 <__sprint_r.part.0+0x52>
 8007a06:	3d04      	subs	r5, #4
 8007a08:	2400      	movs	r4, #0
 8007a0a:	e001      	b.n	8007a10 <__sprint_r.part.0+0x2c>
 8007a0c:	42a6      	cmp	r6, r4
 8007a0e:	d010      	beq.n	8007a32 <__sprint_r.part.0+0x4e>
 8007a10:	4640      	mov	r0, r8
 8007a12:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8007a16:	463a      	mov	r2, r7
 8007a18:	f000 f8c4 	bl	8007ba4 <_fputwc_r>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	f104 0401 	add.w	r4, r4, #1
 8007a22:	d1f3      	bne.n	8007a0c <__sprint_r.part.0+0x28>
 8007a24:	2300      	movs	r3, #0
 8007a26:	f8ca 3008 	str.w	r3, [sl, #8]
 8007a2a:	f8ca 3004 	str.w	r3, [sl, #4]
 8007a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a32:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007a36:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 8007a3a:	f8ca 3008 	str.w	r3, [sl, #8]
 8007a3e:	f109 0908 	add.w	r9, r9, #8
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1db      	bne.n	80079fe <__sprint_r.part.0+0x1a>
 8007a46:	2000      	movs	r0, #0
 8007a48:	e7ec      	b.n	8007a24 <__sprint_r.part.0+0x40>
 8007a4a:	f7fe fc9f 	bl	800638c <__sfvwrite_r>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f8ca 3008 	str.w	r3, [sl, #8]
 8007a54:	f8ca 3004 	str.w	r3, [sl, #4]
 8007a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007a5c <__sprint_r>:
 8007a5c:	6893      	ldr	r3, [r2, #8]
 8007a5e:	b410      	push	{r4}
 8007a60:	b11b      	cbz	r3, 8007a6a <__sprint_r+0xe>
 8007a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a66:	f7ff bfbd 	b.w	80079e4 <__sprint_r.part.0>
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	6053      	str	r3, [r2, #4]
 8007a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <_write_r>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	4c08      	ldr	r4, [pc, #32]	; (8007a98 <_write_r+0x24>)
 8007a78:	4606      	mov	r6, r0
 8007a7a:	2500      	movs	r5, #0
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	4611      	mov	r1, r2
 8007a80:	461a      	mov	r2, r3
 8007a82:	6025      	str	r5, [r4, #0]
 8007a84:	f7f9 fe7a 	bl	800177c <_write>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	d000      	beq.n	8007a8e <_write_r+0x1a>
 8007a8c:	bd70      	pop	{r4, r5, r6, pc}
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d0fb      	beq.n	8007a8c <_write_r+0x18>
 8007a94:	6033      	str	r3, [r6, #0]
 8007a96:	bd70      	pop	{r4, r5, r6, pc}
 8007a98:	20000a70 	.word	0x20000a70

08007a9c <_calloc_r>:
 8007a9c:	b510      	push	{r4, lr}
 8007a9e:	fb02 f101 	mul.w	r1, r2, r1
 8007aa2:	f7fe fea7 	bl	80067f4 <_malloc_r>
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	b168      	cbz	r0, 8007ac6 <_calloc_r+0x2a>
 8007aaa:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007aae:	f022 0203 	bic.w	r2, r2, #3
 8007ab2:	3a04      	subs	r2, #4
 8007ab4:	2a24      	cmp	r2, #36	; 0x24
 8007ab6:	d818      	bhi.n	8007aea <_calloc_r+0x4e>
 8007ab8:	2a13      	cmp	r2, #19
 8007aba:	d806      	bhi.n	8007aca <_calloc_r+0x2e>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	605a      	str	r2, [r3, #4]
 8007ac4:	609a      	str	r2, [r3, #8]
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	bd10      	pop	{r4, pc}
 8007aca:	2300      	movs	r3, #0
 8007acc:	2a1b      	cmp	r2, #27
 8007ace:	6003      	str	r3, [r0, #0]
 8007ad0:	6043      	str	r3, [r0, #4]
 8007ad2:	d90f      	bls.n	8007af4 <_calloc_r+0x58>
 8007ad4:	2a24      	cmp	r2, #36	; 0x24
 8007ad6:	6083      	str	r3, [r0, #8]
 8007ad8:	60c3      	str	r3, [r0, #12]
 8007ada:	bf05      	ittet	eq
 8007adc:	6103      	streq	r3, [r0, #16]
 8007ade:	6143      	streq	r3, [r0, #20]
 8007ae0:	f100 0310 	addne.w	r3, r0, #16
 8007ae4:	f100 0318 	addeq.w	r3, r0, #24
 8007ae8:	e7e9      	b.n	8007abe <_calloc_r+0x22>
 8007aea:	2100      	movs	r1, #0
 8007aec:	f7ff f9be 	bl	8006e6c <memset>
 8007af0:	4620      	mov	r0, r4
 8007af2:	bd10      	pop	{r4, pc}
 8007af4:	f100 0308 	add.w	r3, r0, #8
 8007af8:	e7e1      	b.n	8007abe <_calloc_r+0x22>
 8007afa:	bf00      	nop

08007afc <_close_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4c07      	ldr	r4, [pc, #28]	; (8007b1c <_close_r+0x20>)
 8007b00:	2300      	movs	r3, #0
 8007b02:	4605      	mov	r5, r0
 8007b04:	4608      	mov	r0, r1
 8007b06:	6023      	str	r3, [r4, #0]
 8007b08:	f7f9 fe09 	bl	800171e <_close>
 8007b0c:	1c43      	adds	r3, r0, #1
 8007b0e:	d000      	beq.n	8007b12 <_close_r+0x16>
 8007b10:	bd38      	pop	{r3, r4, r5, pc}
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0fb      	beq.n	8007b10 <_close_r+0x14>
 8007b18:	602b      	str	r3, [r5, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20000a70 	.word	0x20000a70

08007b20 <_fclose_r>:
 8007b20:	2900      	cmp	r1, #0
 8007b22:	d03d      	beq.n	8007ba0 <_fclose_r+0x80>
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	4605      	mov	r5, r0
 8007b28:	460c      	mov	r4, r1
 8007b2a:	b108      	cbz	r0, 8007b30 <_fclose_r+0x10>
 8007b2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007b2e:	b37b      	cbz	r3, 8007b90 <_fclose_r+0x70>
 8007b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b34:	b90b      	cbnz	r3, 8007b3a <_fclose_r+0x1a>
 8007b36:	2000      	movs	r0, #0
 8007b38:	bd70      	pop	{r4, r5, r6, pc}
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	f7fe f9b7 	bl	8005eb0 <__sflush_r>
 8007b42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b44:	4606      	mov	r6, r0
 8007b46:	b133      	cbz	r3, 8007b56 <_fclose_r+0x36>
 8007b48:	4628      	mov	r0, r5
 8007b4a:	69e1      	ldr	r1, [r4, #28]
 8007b4c:	4798      	blx	r3
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	bfb8      	it	lt
 8007b52:	f04f 36ff 	movlt.w	r6, #4294967295
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	061b      	lsls	r3, r3, #24
 8007b5a:	d41c      	bmi.n	8007b96 <_fclose_r+0x76>
 8007b5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007b5e:	b141      	cbz	r1, 8007b72 <_fclose_r+0x52>
 8007b60:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8007b64:	4299      	cmp	r1, r3
 8007b66:	d002      	beq.n	8007b6e <_fclose_r+0x4e>
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f7fe fb37 	bl	80061dc <_free_r>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	6323      	str	r3, [r4, #48]	; 0x30
 8007b72:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007b74:	b121      	cbz	r1, 8007b80 <_fclose_r+0x60>
 8007b76:	4628      	mov	r0, r5
 8007b78:	f7fe fb30 	bl	80061dc <_free_r>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	6463      	str	r3, [r4, #68]	; 0x44
 8007b80:	f7fe fada 	bl	8006138 <__sfp_lock_acquire>
 8007b84:	2300      	movs	r3, #0
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	f7fe fad8 	bl	800613c <__sfp_lock_release>
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	bd70      	pop	{r4, r5, r6, pc}
 8007b90:	f7fe facc 	bl	800612c <__sinit>
 8007b94:	e7cc      	b.n	8007b30 <_fclose_r+0x10>
 8007b96:	4628      	mov	r0, r5
 8007b98:	6921      	ldr	r1, [r4, #16]
 8007b9a:	f7fe fb1f 	bl	80061dc <_free_r>
 8007b9e:	e7dd      	b.n	8007b5c <_fclose_r+0x3c>
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	4770      	bx	lr

08007ba4 <_fputwc_r>:
 8007ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba8:	8993      	ldrh	r3, [r2, #12]
 8007baa:	4614      	mov	r4, r2
 8007bac:	049a      	lsls	r2, r3, #18
 8007bae:	b082      	sub	sp, #8
 8007bb0:	4607      	mov	r7, r0
 8007bb2:	460e      	mov	r6, r1
 8007bb4:	d406      	bmi.n	8007bc4 <_fputwc_r+0x20>
 8007bb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bc0:	81a3      	strh	r3, [r4, #12]
 8007bc2:	6662      	str	r2, [r4, #100]	; 0x64
 8007bc4:	f7fe fd9c 	bl	8006700 <__locale_mb_cur_max>
 8007bc8:	2801      	cmp	r0, #1
 8007bca:	d041      	beq.n	8007c50 <_fputwc_r+0xac>
 8007bcc:	4638      	mov	r0, r7
 8007bce:	a901      	add	r1, sp, #4
 8007bd0:	4632      	mov	r2, r6
 8007bd2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8007bd6:	f000 f8e9 	bl	8007dac <_wcrtomb_r>
 8007bda:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007bde:	4680      	mov	r8, r0
 8007be0:	d02f      	beq.n	8007c42 <_fputwc_r+0x9e>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d03c      	beq.n	8007c60 <_fputwc_r+0xbc>
 8007be6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8007bea:	2500      	movs	r5, #0
 8007bec:	e009      	b.n	8007c02 <_fputwc_r+0x5e>
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	7019      	strb	r1, [r3, #0]
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	6023      	str	r3, [r4, #0]
 8007bf8:	3501      	adds	r5, #1
 8007bfa:	45a8      	cmp	r8, r5
 8007bfc:	d930      	bls.n	8007c60 <_fputwc_r+0xbc>
 8007bfe:	ab01      	add	r3, sp, #4
 8007c00:	5d59      	ldrb	r1, [r3, r5]
 8007c02:	68a3      	ldr	r3, [r4, #8]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	60a3      	str	r3, [r4, #8]
 8007c0a:	daf0      	bge.n	8007bee <_fputwc_r+0x4a>
 8007c0c:	69a2      	ldr	r2, [r4, #24]
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	db07      	blt.n	8007c22 <_fputwc_r+0x7e>
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	7019      	strb	r1, [r3, #0]
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	7819      	ldrb	r1, [r3, #0]
 8007c1a:	290a      	cmp	r1, #10
 8007c1c:	f103 0301 	add.w	r3, r3, #1
 8007c20:	d1e9      	bne.n	8007bf6 <_fputwc_r+0x52>
 8007c22:	4638      	mov	r0, r7
 8007c24:	4622      	mov	r2, r4
 8007c26:	f000 f86d 	bl	8007d04 <__swbuf_r>
 8007c2a:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8007c2e:	fab0 f080 	clz	r0, r0
 8007c32:	0940      	lsrs	r0, r0, #5
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d0df      	beq.n	8007bf8 <_fputwc_r+0x54>
 8007c38:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3c:	b002      	add	sp, #8
 8007c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c48:	81a3      	strh	r3, [r4, #12]
 8007c4a:	b002      	add	sp, #8
 8007c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c50:	1e73      	subs	r3, r6, #1
 8007c52:	2bfe      	cmp	r3, #254	; 0xfe
 8007c54:	d8ba      	bhi.n	8007bcc <_fputwc_r+0x28>
 8007c56:	b2f1      	uxtb	r1, r6
 8007c58:	4680      	mov	r8, r0
 8007c5a:	f88d 1004 	strb.w	r1, [sp, #4]
 8007c5e:	e7c4      	b.n	8007bea <_fputwc_r+0x46>
 8007c60:	4630      	mov	r0, r6
 8007c62:	b002      	add	sp, #8
 8007c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c68 <_fstat_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	4c08      	ldr	r4, [pc, #32]	; (8007c8c <_fstat_r+0x24>)
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4605      	mov	r5, r0
 8007c70:	4608      	mov	r0, r1
 8007c72:	4611      	mov	r1, r2
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	f7f9 fd55 	bl	8001724 <_fstat>
 8007c7a:	1c43      	adds	r3, r0, #1
 8007c7c:	d000      	beq.n	8007c80 <_fstat_r+0x18>
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0fb      	beq.n	8007c7e <_fstat_r+0x16>
 8007c86:	602b      	str	r3, [r5, #0]
 8007c88:	bd38      	pop	{r3, r4, r5, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20000a70 	.word	0x20000a70

08007c90 <_isatty_r>:
 8007c90:	b538      	push	{r3, r4, r5, lr}
 8007c92:	4c07      	ldr	r4, [pc, #28]	; (8007cb0 <_isatty_r+0x20>)
 8007c94:	2300      	movs	r3, #0
 8007c96:	4605      	mov	r5, r0
 8007c98:	4608      	mov	r0, r1
 8007c9a:	6023      	str	r3, [r4, #0]
 8007c9c:	f7f9 fd48 	bl	8001730 <_isatty>
 8007ca0:	1c43      	adds	r3, r0, #1
 8007ca2:	d000      	beq.n	8007ca6 <_isatty_r+0x16>
 8007ca4:	bd38      	pop	{r3, r4, r5, pc}
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0fb      	beq.n	8007ca4 <_isatty_r+0x14>
 8007cac:	602b      	str	r3, [r5, #0]
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	20000a70 	.word	0x20000a70

08007cb4 <_lseek_r>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	4c08      	ldr	r4, [pc, #32]	; (8007cd8 <_lseek_r+0x24>)
 8007cb8:	4606      	mov	r6, r0
 8007cba:	2500      	movs	r5, #0
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	6025      	str	r5, [r4, #0]
 8007cc4:	f7f9 fd40 	bl	8001748 <_lseek>
 8007cc8:	1c43      	adds	r3, r0, #1
 8007cca:	d000      	beq.n	8007cce <_lseek_r+0x1a>
 8007ccc:	bd70      	pop	{r4, r5, r6, pc}
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d0fb      	beq.n	8007ccc <_lseek_r+0x18>
 8007cd4:	6033      	str	r3, [r6, #0]
 8007cd6:	bd70      	pop	{r4, r5, r6, pc}
 8007cd8:	20000a70 	.word	0x20000a70

08007cdc <_read_r>:
 8007cdc:	b570      	push	{r4, r5, r6, lr}
 8007cde:	4c08      	ldr	r4, [pc, #32]	; (8007d00 <_read_r+0x24>)
 8007ce0:	4606      	mov	r6, r0
 8007ce2:	2500      	movs	r5, #0
 8007ce4:	4608      	mov	r0, r1
 8007ce6:	4611      	mov	r1, r2
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6025      	str	r5, [r4, #0]
 8007cec:	f7f9 fd2e 	bl	800174c <_read>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	d000      	beq.n	8007cf6 <_read_r+0x1a>
 8007cf4:	bd70      	pop	{r4, r5, r6, pc}
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d0fb      	beq.n	8007cf4 <_read_r+0x18>
 8007cfc:	6033      	str	r3, [r6, #0]
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	20000a70 	.word	0x20000a70

08007d04 <__swbuf_r>:
 8007d04:	b570      	push	{r4, r5, r6, lr}
 8007d06:	460d      	mov	r5, r1
 8007d08:	4614      	mov	r4, r2
 8007d0a:	4606      	mov	r6, r0
 8007d0c:	b110      	cbz	r0, 8007d14 <__swbuf_r+0x10>
 8007d0e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d048      	beq.n	8007da6 <__swbuf_r+0xa2>
 8007d14:	89a2      	ldrh	r2, [r4, #12]
 8007d16:	69a3      	ldr	r3, [r4, #24]
 8007d18:	60a3      	str	r3, [r4, #8]
 8007d1a:	b291      	uxth	r1, r2
 8007d1c:	0708      	lsls	r0, r1, #28
 8007d1e:	d538      	bpl.n	8007d92 <__swbuf_r+0x8e>
 8007d20:	6923      	ldr	r3, [r4, #16]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d035      	beq.n	8007d92 <__swbuf_r+0x8e>
 8007d26:	0489      	lsls	r1, r1, #18
 8007d28:	b2ed      	uxtb	r5, r5
 8007d2a:	d515      	bpl.n	8007d58 <__swbuf_r+0x54>
 8007d2c:	6822      	ldr	r2, [r4, #0]
 8007d2e:	6961      	ldr	r1, [r4, #20]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	428b      	cmp	r3, r1
 8007d34:	da1c      	bge.n	8007d70 <__swbuf_r+0x6c>
 8007d36:	3301      	adds	r3, #1
 8007d38:	68a1      	ldr	r1, [r4, #8]
 8007d3a:	1c50      	adds	r0, r2, #1
 8007d3c:	3901      	subs	r1, #1
 8007d3e:	60a1      	str	r1, [r4, #8]
 8007d40:	6020      	str	r0, [r4, #0]
 8007d42:	7015      	strb	r5, [r2, #0]
 8007d44:	6962      	ldr	r2, [r4, #20]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d01a      	beq.n	8007d80 <__swbuf_r+0x7c>
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	07db      	lsls	r3, r3, #31
 8007d4e:	d501      	bpl.n	8007d54 <__swbuf_r+0x50>
 8007d50:	2d0a      	cmp	r5, #10
 8007d52:	d015      	beq.n	8007d80 <__swbuf_r+0x7c>
 8007d54:	4628      	mov	r0, r5
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007d5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d5e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8007d62:	81a2      	strh	r2, [r4, #12]
 8007d64:	6822      	ldr	r2, [r4, #0]
 8007d66:	6661      	str	r1, [r4, #100]	; 0x64
 8007d68:	6961      	ldr	r1, [r4, #20]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	428b      	cmp	r3, r1
 8007d6e:	dbe2      	blt.n	8007d36 <__swbuf_r+0x32>
 8007d70:	4630      	mov	r0, r6
 8007d72:	4621      	mov	r1, r4
 8007d74:	f7fe f946 	bl	8006004 <_fflush_r>
 8007d78:	b940      	cbnz	r0, 8007d8c <__swbuf_r+0x88>
 8007d7a:	6822      	ldr	r2, [r4, #0]
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e7db      	b.n	8007d38 <__swbuf_r+0x34>
 8007d80:	4630      	mov	r0, r6
 8007d82:	4621      	mov	r1, r4
 8007d84:	f7fe f93e 	bl	8006004 <_fflush_r>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d0e3      	beq.n	8007d54 <__swbuf_r+0x50>
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	bd70      	pop	{r4, r5, r6, pc}
 8007d92:	4630      	mov	r0, r6
 8007d94:	4621      	mov	r1, r4
 8007d96:	f7fd f847 	bl	8004e28 <__swsetup_r>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d1f6      	bne.n	8007d8c <__swbuf_r+0x88>
 8007d9e:	89a2      	ldrh	r2, [r4, #12]
 8007da0:	6923      	ldr	r3, [r4, #16]
 8007da2:	b291      	uxth	r1, r2
 8007da4:	e7bf      	b.n	8007d26 <__swbuf_r+0x22>
 8007da6:	f7fe f9c1 	bl	800612c <__sinit>
 8007daa:	e7b3      	b.n	8007d14 <__swbuf_r+0x10>

08007dac <_wcrtomb_r>:
 8007dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007db0:	4605      	mov	r5, r0
 8007db2:	b086      	sub	sp, #24
 8007db4:	461e      	mov	r6, r3
 8007db6:	460c      	mov	r4, r1
 8007db8:	b1a1      	cbz	r1, 8007de4 <_wcrtomb_r+0x38>
 8007dba:	4b10      	ldr	r3, [pc, #64]	; (8007dfc <_wcrtomb_r+0x50>)
 8007dbc:	4617      	mov	r7, r2
 8007dbe:	f8d3 8000 	ldr.w	r8, [r3]
 8007dc2:	f7fe fc99 	bl	80066f8 <__locale_charset>
 8007dc6:	9600      	str	r6, [sp, #0]
 8007dc8:	4603      	mov	r3, r0
 8007dca:	4621      	mov	r1, r4
 8007dcc:	463a      	mov	r2, r7
 8007dce:	4628      	mov	r0, r5
 8007dd0:	47c0      	blx	r8
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	d103      	bne.n	8007dde <_wcrtomb_r+0x32>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	238a      	movs	r3, #138	; 0x8a
 8007dda:	6032      	str	r2, [r6, #0]
 8007ddc:	602b      	str	r3, [r5, #0]
 8007dde:	b006      	add	sp, #24
 8007de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de4:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <_wcrtomb_r+0x50>)
 8007de6:	681f      	ldr	r7, [r3, #0]
 8007de8:	f7fe fc86 	bl	80066f8 <__locale_charset>
 8007dec:	9600      	str	r6, [sp, #0]
 8007dee:	4603      	mov	r3, r0
 8007df0:	4622      	mov	r2, r4
 8007df2:	4628      	mov	r0, r5
 8007df4:	a903      	add	r1, sp, #12
 8007df6:	47b8      	blx	r7
 8007df8:	e7eb      	b.n	8007dd2 <_wcrtomb_r+0x26>
 8007dfa:	bf00      	nop
 8007dfc:	200008a0 	.word	0x200008a0

08007e00 <__ascii_wctomb>:
 8007e00:	b121      	cbz	r1, 8007e0c <__ascii_wctomb+0xc>
 8007e02:	2aff      	cmp	r2, #255	; 0xff
 8007e04:	d804      	bhi.n	8007e10 <__ascii_wctomb+0x10>
 8007e06:	700a      	strb	r2, [r1, #0]
 8007e08:	2001      	movs	r0, #1
 8007e0a:	4770      	bx	lr
 8007e0c:	4608      	mov	r0, r1
 8007e0e:	4770      	bx	lr
 8007e10:	238a      	movs	r3, #138	; 0x8a
 8007e12:	6003      	str	r3, [r0, #0]
 8007e14:	f04f 30ff 	mov.w	r0, #4294967295
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
